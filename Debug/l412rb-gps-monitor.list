
l412rb-gps-monitor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004a70  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001b4  08004c00  08004c00  00014c00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004db4  08004db4  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08004db4  08004db4  00014db4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004dbc  08004dbc  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004dbc  08004dbc  00014dbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004dc0  08004dc0  00014dc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004dc4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000013c  20000070  08004e34  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001ac  08004e34  000201ac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d36f  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000208c  00000000  00000000  0002d40f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a68  00000000  00000000  0002f4a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000990  00000000  00000000  0002ff08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a6e0  00000000  00000000  00030898  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000cb51  00000000  00000000  0004af78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a060e  00000000  00000000  00057ac9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f80d7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003148  00000000  00000000  000f8128  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004be8 	.word	0x08004be8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08004be8 	.word	0x08004be8

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b974 	b.w	8000570 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468e      	mov	lr, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14d      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4694      	mov	ip, r2
 80002b2:	d969      	bls.n	8000388 <__udivmoddi4+0xe8>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b152      	cbz	r2, 80002d0 <__udivmoddi4+0x30>
 80002ba:	fa01 f302 	lsl.w	r3, r1, r2
 80002be:	f1c2 0120 	rsb	r1, r2, #32
 80002c2:	fa20 f101 	lsr.w	r1, r0, r1
 80002c6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ca:	ea41 0e03 	orr.w	lr, r1, r3
 80002ce:	4094      	lsls	r4, r2
 80002d0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002d4:	0c21      	lsrs	r1, r4, #16
 80002d6:	fbbe f6f8 	udiv	r6, lr, r8
 80002da:	fa1f f78c 	uxth.w	r7, ip
 80002de:	fb08 e316 	mls	r3, r8, r6, lr
 80002e2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002e6:	fb06 f107 	mul.w	r1, r6, r7
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f6:	f080 811f 	bcs.w	8000538 <__udivmoddi4+0x298>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 811c 	bls.w	8000538 <__udivmoddi4+0x298>
 8000300:	3e02      	subs	r6, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a5b      	subs	r3, r3, r1
 8000306:	b2a4      	uxth	r4, r4
 8000308:	fbb3 f0f8 	udiv	r0, r3, r8
 800030c:	fb08 3310 	mls	r3, r8, r0, r3
 8000310:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000314:	fb00 f707 	mul.w	r7, r0, r7
 8000318:	42a7      	cmp	r7, r4
 800031a:	d90a      	bls.n	8000332 <__udivmoddi4+0x92>
 800031c:	eb1c 0404 	adds.w	r4, ip, r4
 8000320:	f100 33ff 	add.w	r3, r0, #4294967295
 8000324:	f080 810a 	bcs.w	800053c <__udivmoddi4+0x29c>
 8000328:	42a7      	cmp	r7, r4
 800032a:	f240 8107 	bls.w	800053c <__udivmoddi4+0x29c>
 800032e:	4464      	add	r4, ip
 8000330:	3802      	subs	r0, #2
 8000332:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000336:	1be4      	subs	r4, r4, r7
 8000338:	2600      	movs	r6, #0
 800033a:	b11d      	cbz	r5, 8000344 <__udivmoddi4+0xa4>
 800033c:	40d4      	lsrs	r4, r2
 800033e:	2300      	movs	r3, #0
 8000340:	e9c5 4300 	strd	r4, r3, [r5]
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0xc2>
 800034e:	2d00      	cmp	r5, #0
 8000350:	f000 80ef 	beq.w	8000532 <__udivmoddi4+0x292>
 8000354:	2600      	movs	r6, #0
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	4630      	mov	r0, r6
 800035c:	4631      	mov	r1, r6
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	fab3 f683 	clz	r6, r3
 8000366:	2e00      	cmp	r6, #0
 8000368:	d14a      	bne.n	8000400 <__udivmoddi4+0x160>
 800036a:	428b      	cmp	r3, r1
 800036c:	d302      	bcc.n	8000374 <__udivmoddi4+0xd4>
 800036e:	4282      	cmp	r2, r0
 8000370:	f200 80f9 	bhi.w	8000566 <__udivmoddi4+0x2c6>
 8000374:	1a84      	subs	r4, r0, r2
 8000376:	eb61 0303 	sbc.w	r3, r1, r3
 800037a:	2001      	movs	r0, #1
 800037c:	469e      	mov	lr, r3
 800037e:	2d00      	cmp	r5, #0
 8000380:	d0e0      	beq.n	8000344 <__udivmoddi4+0xa4>
 8000382:	e9c5 4e00 	strd	r4, lr, [r5]
 8000386:	e7dd      	b.n	8000344 <__udivmoddi4+0xa4>
 8000388:	b902      	cbnz	r2, 800038c <__udivmoddi4+0xec>
 800038a:	deff      	udf	#255	; 0xff
 800038c:	fab2 f282 	clz	r2, r2
 8000390:	2a00      	cmp	r2, #0
 8000392:	f040 8092 	bne.w	80004ba <__udivmoddi4+0x21a>
 8000396:	eba1 010c 	sub.w	r1, r1, ip
 800039a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800039e:	fa1f fe8c 	uxth.w	lr, ip
 80003a2:	2601      	movs	r6, #1
 80003a4:	0c20      	lsrs	r0, r4, #16
 80003a6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003aa:	fb07 1113 	mls	r1, r7, r3, r1
 80003ae:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b2:	fb0e f003 	mul.w	r0, lr, r3
 80003b6:	4288      	cmp	r0, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x12c>
 80003ba:	eb1c 0101 	adds.w	r1, ip, r1
 80003be:	f103 38ff 	add.w	r8, r3, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x12a>
 80003c4:	4288      	cmp	r0, r1
 80003c6:	f200 80cb 	bhi.w	8000560 <__udivmoddi4+0x2c0>
 80003ca:	4643      	mov	r3, r8
 80003cc:	1a09      	subs	r1, r1, r0
 80003ce:	b2a4      	uxth	r4, r4
 80003d0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003d4:	fb07 1110 	mls	r1, r7, r0, r1
 80003d8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003dc:	fb0e fe00 	mul.w	lr, lr, r0
 80003e0:	45a6      	cmp	lr, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x156>
 80003e4:	eb1c 0404 	adds.w	r4, ip, r4
 80003e8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003ec:	d202      	bcs.n	80003f4 <__udivmoddi4+0x154>
 80003ee:	45a6      	cmp	lr, r4
 80003f0:	f200 80bb 	bhi.w	800056a <__udivmoddi4+0x2ca>
 80003f4:	4608      	mov	r0, r1
 80003f6:	eba4 040e 	sub.w	r4, r4, lr
 80003fa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003fe:	e79c      	b.n	800033a <__udivmoddi4+0x9a>
 8000400:	f1c6 0720 	rsb	r7, r6, #32
 8000404:	40b3      	lsls	r3, r6
 8000406:	fa22 fc07 	lsr.w	ip, r2, r7
 800040a:	ea4c 0c03 	orr.w	ip, ip, r3
 800040e:	fa20 f407 	lsr.w	r4, r0, r7
 8000412:	fa01 f306 	lsl.w	r3, r1, r6
 8000416:	431c      	orrs	r4, r3
 8000418:	40f9      	lsrs	r1, r7
 800041a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800041e:	fa00 f306 	lsl.w	r3, r0, r6
 8000422:	fbb1 f8f9 	udiv	r8, r1, r9
 8000426:	0c20      	lsrs	r0, r4, #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fb09 1118 	mls	r1, r9, r8, r1
 8000430:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000434:	fb08 f00e 	mul.w	r0, r8, lr
 8000438:	4288      	cmp	r0, r1
 800043a:	fa02 f206 	lsl.w	r2, r2, r6
 800043e:	d90b      	bls.n	8000458 <__udivmoddi4+0x1b8>
 8000440:	eb1c 0101 	adds.w	r1, ip, r1
 8000444:	f108 3aff 	add.w	sl, r8, #4294967295
 8000448:	f080 8088 	bcs.w	800055c <__udivmoddi4+0x2bc>
 800044c:	4288      	cmp	r0, r1
 800044e:	f240 8085 	bls.w	800055c <__udivmoddi4+0x2bc>
 8000452:	f1a8 0802 	sub.w	r8, r8, #2
 8000456:	4461      	add	r1, ip
 8000458:	1a09      	subs	r1, r1, r0
 800045a:	b2a4      	uxth	r4, r4
 800045c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000460:	fb09 1110 	mls	r1, r9, r0, r1
 8000464:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000468:	fb00 fe0e 	mul.w	lr, r0, lr
 800046c:	458e      	cmp	lr, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x1e2>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f100 34ff 	add.w	r4, r0, #4294967295
 8000478:	d26c      	bcs.n	8000554 <__udivmoddi4+0x2b4>
 800047a:	458e      	cmp	lr, r1
 800047c:	d96a      	bls.n	8000554 <__udivmoddi4+0x2b4>
 800047e:	3802      	subs	r0, #2
 8000480:	4461      	add	r1, ip
 8000482:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000486:	fba0 9402 	umull	r9, r4, r0, r2
 800048a:	eba1 010e 	sub.w	r1, r1, lr
 800048e:	42a1      	cmp	r1, r4
 8000490:	46c8      	mov	r8, r9
 8000492:	46a6      	mov	lr, r4
 8000494:	d356      	bcc.n	8000544 <__udivmoddi4+0x2a4>
 8000496:	d053      	beq.n	8000540 <__udivmoddi4+0x2a0>
 8000498:	b15d      	cbz	r5, 80004b2 <__udivmoddi4+0x212>
 800049a:	ebb3 0208 	subs.w	r2, r3, r8
 800049e:	eb61 010e 	sbc.w	r1, r1, lr
 80004a2:	fa01 f707 	lsl.w	r7, r1, r7
 80004a6:	fa22 f306 	lsr.w	r3, r2, r6
 80004aa:	40f1      	lsrs	r1, r6
 80004ac:	431f      	orrs	r7, r3
 80004ae:	e9c5 7100 	strd	r7, r1, [r5]
 80004b2:	2600      	movs	r6, #0
 80004b4:	4631      	mov	r1, r6
 80004b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	40d8      	lsrs	r0, r3
 80004c0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c4:	fa21 f303 	lsr.w	r3, r1, r3
 80004c8:	4091      	lsls	r1, r2
 80004ca:	4301      	orrs	r1, r0
 80004cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d0:	fa1f fe8c 	uxth.w	lr, ip
 80004d4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004d8:	fb07 3610 	mls	r6, r7, r0, r3
 80004dc:	0c0b      	lsrs	r3, r1, #16
 80004de:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004e2:	fb00 f60e 	mul.w	r6, r0, lr
 80004e6:	429e      	cmp	r6, r3
 80004e8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x260>
 80004ee:	eb1c 0303 	adds.w	r3, ip, r3
 80004f2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004f6:	d22f      	bcs.n	8000558 <__udivmoddi4+0x2b8>
 80004f8:	429e      	cmp	r6, r3
 80004fa:	d92d      	bls.n	8000558 <__udivmoddi4+0x2b8>
 80004fc:	3802      	subs	r0, #2
 80004fe:	4463      	add	r3, ip
 8000500:	1b9b      	subs	r3, r3, r6
 8000502:	b289      	uxth	r1, r1
 8000504:	fbb3 f6f7 	udiv	r6, r3, r7
 8000508:	fb07 3316 	mls	r3, r7, r6, r3
 800050c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000510:	fb06 f30e 	mul.w	r3, r6, lr
 8000514:	428b      	cmp	r3, r1
 8000516:	d908      	bls.n	800052a <__udivmoddi4+0x28a>
 8000518:	eb1c 0101 	adds.w	r1, ip, r1
 800051c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000520:	d216      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 8000522:	428b      	cmp	r3, r1
 8000524:	d914      	bls.n	8000550 <__udivmoddi4+0x2b0>
 8000526:	3e02      	subs	r6, #2
 8000528:	4461      	add	r1, ip
 800052a:	1ac9      	subs	r1, r1, r3
 800052c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000530:	e738      	b.n	80003a4 <__udivmoddi4+0x104>
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e705      	b.n	8000344 <__udivmoddi4+0xa4>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e3      	b.n	8000304 <__udivmoddi4+0x64>
 800053c:	4618      	mov	r0, r3
 800053e:	e6f8      	b.n	8000332 <__udivmoddi4+0x92>
 8000540:	454b      	cmp	r3, r9
 8000542:	d2a9      	bcs.n	8000498 <__udivmoddi4+0x1f8>
 8000544:	ebb9 0802 	subs.w	r8, r9, r2
 8000548:	eb64 0e0c 	sbc.w	lr, r4, ip
 800054c:	3801      	subs	r0, #1
 800054e:	e7a3      	b.n	8000498 <__udivmoddi4+0x1f8>
 8000550:	4646      	mov	r6, r8
 8000552:	e7ea      	b.n	800052a <__udivmoddi4+0x28a>
 8000554:	4620      	mov	r0, r4
 8000556:	e794      	b.n	8000482 <__udivmoddi4+0x1e2>
 8000558:	4640      	mov	r0, r8
 800055a:	e7d1      	b.n	8000500 <__udivmoddi4+0x260>
 800055c:	46d0      	mov	r8, sl
 800055e:	e77b      	b.n	8000458 <__udivmoddi4+0x1b8>
 8000560:	3b02      	subs	r3, #2
 8000562:	4461      	add	r1, ip
 8000564:	e732      	b.n	80003cc <__udivmoddi4+0x12c>
 8000566:	4630      	mov	r0, r6
 8000568:	e709      	b.n	800037e <__udivmoddi4+0xde>
 800056a:	4464      	add	r4, ip
 800056c:	3802      	subs	r0, #2
 800056e:	e742      	b.n	80003f6 <__udivmoddi4+0x156>

08000570 <__aeabi_idiv0>:
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop

08000574 <__io_putchar>:
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE {
 8000574:	b580      	push	{r7, lr}
 8000576:	b082      	sub	sp, #8
 8000578:	af00      	add	r7, sp, #0
 800057a:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*) &ch, 1, HAL_MAX_DELAY);
 800057c:	1d39      	adds	r1, r7, #4
 800057e:	f04f 33ff 	mov.w	r3, #4294967295
 8000582:	2201      	movs	r2, #1
 8000584:	4803      	ldr	r0, [pc, #12]	; (8000594 <__io_putchar+0x20>)
 8000586:	f002 f8b9 	bl	80026fc <HAL_UART_Transmit>
	return ch;
 800058a:	687b      	ldr	r3, [r7, #4]
}
 800058c:	4618      	mov	r0, r3
 800058e:	3708      	adds	r7, #8
 8000590:	46bd      	mov	sp, r7
 8000592:	bd80      	pop	{r7, pc}
 8000594:	2000008c 	.word	0x2000008c

08000598 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000598:	b580      	push	{r7, lr}
 800059a:	b08a      	sub	sp, #40	; 0x28
 800059c:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800059e:	f000 fc0f 	bl	8000dc0 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80005a2:	f000 f863 	bl	800066c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80005a6:	f000 f911 	bl	80007cc <MX_GPIO_Init>
	MX_USART2_UART_Init();
 80005aa:	f000 f8af 	bl	800070c <MX_USART2_UART_Init>
	MX_USART3_UART_Init();
 80005ae:	f000 f8dd 	bl	800076c <MX_USART3_UART_Init>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */

	printf("\n\nGPS Monitor Startup\n");
 80005b2:	4827      	ldr	r0, [pc, #156]	; (8000650 <main+0xb8>)
 80005b4:	f003 fb72 	bl	8003c9c <puts>

	ublox_neo6m_ConfigStruct neo6m_conf = {
 80005b8:	4a26      	ldr	r2, [pc, #152]	; (8000654 <main+0xbc>)
 80005ba:	f107 031c 	add.w	r3, r7, #28
 80005be:	e892 0003 	ldmia.w	r2, {r0, r1}
 80005c2:	e883 0003 	stmia.w	r3, {r0, r1}
			.huartNeo6m = &huart3,
			.huartLogging = &huart2 };

	ublox_neo6m_DataStruct neo6m_data;
	ublox_neo6m_ErrorType err = UBLOX_OK;
 80005c6:	2300      	movs	r3, #0
 80005c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	err = ublox_neo6m_init(&neo6m_conf);
 80005cc:	f107 031c 	add.w	r3, r7, #28
 80005d0:	4618      	mov	r0, r3
 80005d2:	f000 fb39 	bl	8000c48 <ublox_neo6m_init>
 80005d6:	4603      	mov	r3, r0
 80005d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (err == UBLOX_OK) {
 80005dc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d103      	bne.n	80005ec <main+0x54>
		printf("Dbg: U-blox NEO-6M Initialised correctly\n");
 80005e4:	481c      	ldr	r0, [pc, #112]	; (8000658 <main+0xc0>)
 80005e6:	f003 fb59 	bl	8003c9c <puts>
 80005ea:	e002      	b.n	80005f2 <main+0x5a>
	} else {
		printf("Err: U-blox NEO-6M Initialisation error!\n");
 80005ec:	481b      	ldr	r0, [pc, #108]	; (800065c <main+0xc4>)
 80005ee:	f003 fb55 	bl	8003c9c <puts>
	}

	do {
		err = ublox_neo6m_readData(&neo6m_conf, &neo6m_data);
 80005f2:	463a      	mov	r2, r7
 80005f4:	f107 031c 	add.w	r3, r7, #28
 80005f8:	4611      	mov	r1, r2
 80005fa:	4618      	mov	r0, r3
 80005fc:	f000 fb30 	bl	8000c60 <ublox_neo6m_readData>
 8000600:	4603      	mov	r3, r0
 8000602:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		printf("U-blox NEO-6M Data reading returned: %d\n", err);
 8000606:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800060a:	4619      	mov	r1, r3
 800060c:	4814      	ldr	r0, [pc, #80]	; (8000660 <main+0xc8>)
 800060e:	f003 fabf 	bl	8003b90 <iprintf>
		HAL_UART_Abort(neo6m_conf.huartNeo6m);
 8000612:	69fb      	ldr	r3, [r7, #28]
 8000614:	4618      	mov	r0, r3
 8000616:	f002 f9d6 	bl	80029c6 <HAL_UART_Abort>
	} while (err != UBLOX_OK);
 800061a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800061e:	2b00      	cmp	r3, #0
 8000620:	d1e7      	bne.n	80005f2 <main+0x5a>

	printf("Dbg: U-blox NEO-6M Data read correctly\n");
 8000622:	4810      	ldr	r0, [pc, #64]	; (8000664 <main+0xcc>)
 8000624:	f003 fb3a 	bl	8003c9c <puts>

	while (1) {
		// Blink an LED to indicate that new data has been received
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_13);
 8000628:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800062c:	480e      	ldr	r0, [pc, #56]	; (8000668 <main+0xd0>)
 800062e:	f000 ff8d 	bl	800154c <HAL_GPIO_TogglePin>
		HAL_Delay(1000);
 8000632:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000636:	f000 fc3f 	bl	8000eb8 <HAL_Delay>
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_13);
 800063a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800063e:	480a      	ldr	r0, [pc, #40]	; (8000668 <main+0xd0>)
 8000640:	f000 ff84 	bl	800154c <HAL_GPIO_TogglePin>
		HAL_Delay(1000);
 8000644:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000648:	f000 fc36 	bl	8000eb8 <HAL_Delay>
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_13);
 800064c:	e7ec      	b.n	8000628 <main+0x90>
 800064e:	bf00      	nop
 8000650:	08004c00 	.word	0x08004c00
 8000654:	08004cc4 	.word	0x08004cc4
 8000658:	08004c18 	.word	0x08004c18
 800065c:	08004c44 	.word	0x08004c44
 8000660:	08004c70 	.word	0x08004c70
 8000664:	08004c9c 	.word	0x08004c9c
 8000668:	48000400 	.word	0x48000400

0800066c <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 800066c:	b580      	push	{r7, lr}
 800066e:	b096      	sub	sp, #88	; 0x58
 8000670:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {
 8000672:	f107 0314 	add.w	r3, r7, #20
 8000676:	2244      	movs	r2, #68	; 0x44
 8000678:	2100      	movs	r1, #0
 800067a:	4618      	mov	r0, r3
 800067c:	f003 fa80 	bl	8003b80 <memset>
			0 };
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {
 8000680:	463b      	mov	r3, r7
 8000682:	2200      	movs	r2, #0
 8000684:	601a      	str	r2, [r3, #0]
 8000686:	605a      	str	r2, [r3, #4]
 8000688:	609a      	str	r2, [r3, #8]
 800068a:	60da      	str	r2, [r3, #12]
 800068c:	611a      	str	r2, [r3, #16]
			0 };

	/** Configure the main internal regulator output voltage
	 */
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK) {
 800068e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000692:	f000 ff83 	bl	800159c <HAL_PWREx_ControlVoltageScaling>
 8000696:	4603      	mov	r3, r0
 8000698:	2b00      	cmp	r3, #0
 800069a:	d001      	beq.n	80006a0 <SystemClock_Config+0x34>
		Error_Handler();
 800069c:	f000 f920 	bl	80008e0 <Error_Handler>
	}

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80006a0:	2310      	movs	r3, #16
 80006a2:	617b      	str	r3, [r7, #20]
	RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80006a4:	2301      	movs	r3, #1
 80006a6:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.MSICalibrationValue = 0;
 80006a8:	2300      	movs	r3, #0
 80006aa:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80006ac:	2360      	movs	r3, #96	; 0x60
 80006ae:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006b0:	2302      	movs	r3, #2
 80006b2:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80006b4:	2301      	movs	r3, #1
 80006b6:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLM = 1;
 80006b8:	2301      	movs	r3, #1
 80006ba:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLN = 40;
 80006bc:	2328      	movs	r3, #40	; 0x28
 80006be:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80006c0:	2302      	movs	r3, #2
 80006c2:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80006c4:	2302      	movs	r3, #2
 80006c6:	657b      	str	r3, [r7, #84]	; 0x54
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80006c8:	f107 0314 	add.w	r3, r7, #20
 80006cc:	4618      	mov	r0, r3
 80006ce:	f000 ffbb 	bl	8001648 <HAL_RCC_OscConfig>
 80006d2:	4603      	mov	r3, r0
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d001      	beq.n	80006dc <SystemClock_Config+0x70>
		Error_Handler();
 80006d8:	f000 f902 	bl	80008e0 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80006dc:	230f      	movs	r3, #15
 80006de:	603b      	str	r3, [r7, #0]
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006e0:	2303      	movs	r3, #3
 80006e2:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006e4:	2300      	movs	r3, #0
 80006e6:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006e8:	2300      	movs	r3, #0
 80006ea:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006ec:	2300      	movs	r3, #0
 80006ee:	613b      	str	r3, [r7, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK) {
 80006f0:	463b      	mov	r3, r7
 80006f2:	2104      	movs	r1, #4
 80006f4:	4618      	mov	r0, r3
 80006f6:	f001 fc09 	bl	8001f0c <HAL_RCC_ClockConfig>
 80006fa:	4603      	mov	r3, r0
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d001      	beq.n	8000704 <SystemClock_Config+0x98>
		Error_Handler();
 8000700:	f000 f8ee 	bl	80008e0 <Error_Handler>
	}
}
 8000704:	bf00      	nop
 8000706:	3758      	adds	r7, #88	; 0x58
 8000708:	46bd      	mov	sp, r7
 800070a:	bd80      	pop	{r7, pc}

0800070c <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 800070c:	b580      	push	{r7, lr}
 800070e:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8000710:	4b14      	ldr	r3, [pc, #80]	; (8000764 <MX_USART2_UART_Init+0x58>)
 8000712:	4a15      	ldr	r2, [pc, #84]	; (8000768 <MX_USART2_UART_Init+0x5c>)
 8000714:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8000716:	4b13      	ldr	r3, [pc, #76]	; (8000764 <MX_USART2_UART_Init+0x58>)
 8000718:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800071c:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800071e:	4b11      	ldr	r3, [pc, #68]	; (8000764 <MX_USART2_UART_Init+0x58>)
 8000720:	2200      	movs	r2, #0
 8000722:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8000724:	4b0f      	ldr	r3, [pc, #60]	; (8000764 <MX_USART2_UART_Init+0x58>)
 8000726:	2200      	movs	r2, #0
 8000728:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 800072a:	4b0e      	ldr	r3, [pc, #56]	; (8000764 <MX_USART2_UART_Init+0x58>)
 800072c:	2200      	movs	r2, #0
 800072e:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8000730:	4b0c      	ldr	r3, [pc, #48]	; (8000764 <MX_USART2_UART_Init+0x58>)
 8000732:	220c      	movs	r2, #12
 8000734:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000736:	4b0b      	ldr	r3, [pc, #44]	; (8000764 <MX_USART2_UART_Init+0x58>)
 8000738:	2200      	movs	r2, #0
 800073a:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800073c:	4b09      	ldr	r3, [pc, #36]	; (8000764 <MX_USART2_UART_Init+0x58>)
 800073e:	2200      	movs	r2, #0
 8000740:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000742:	4b08      	ldr	r3, [pc, #32]	; (8000764 <MX_USART2_UART_Init+0x58>)
 8000744:	2200      	movs	r2, #0
 8000746:	621a      	str	r2, [r3, #32]
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000748:	4b06      	ldr	r3, [pc, #24]	; (8000764 <MX_USART2_UART_Init+0x58>)
 800074a:	2200      	movs	r2, #0
 800074c:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 800074e:	4805      	ldr	r0, [pc, #20]	; (8000764 <MX_USART2_UART_Init+0x58>)
 8000750:	f001 ff86 	bl	8002660 <HAL_UART_Init>
 8000754:	4603      	mov	r3, r0
 8000756:	2b00      	cmp	r3, #0
 8000758:	d001      	beq.n	800075e <MX_USART2_UART_Init+0x52>
		Error_Handler();
 800075a:	f000 f8c1 	bl	80008e0 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 800075e:	bf00      	nop
 8000760:	bd80      	pop	{r7, pc}
 8000762:	bf00      	nop
 8000764:	2000008c 	.word	0x2000008c
 8000768:	40004400 	.word	0x40004400

0800076c <MX_USART3_UART_Init>:
/**
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void) {
 800076c:	b580      	push	{r7, lr}
 800076e:	af00      	add	r7, sp, #0
	/* USER CODE END USART3_Init 0 */

	/* USER CODE BEGIN USART3_Init 1 */

	/* USER CODE END USART3_Init 1 */
	huart3.Instance = USART3;
 8000770:	4b14      	ldr	r3, [pc, #80]	; (80007c4 <MX_USART3_UART_Init+0x58>)
 8000772:	4a15      	ldr	r2, [pc, #84]	; (80007c8 <MX_USART3_UART_Init+0x5c>)
 8000774:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 9600;
 8000776:	4b13      	ldr	r3, [pc, #76]	; (80007c4 <MX_USART3_UART_Init+0x58>)
 8000778:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800077c:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800077e:	4b11      	ldr	r3, [pc, #68]	; (80007c4 <MX_USART3_UART_Init+0x58>)
 8000780:	2200      	movs	r2, #0
 8000782:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 8000784:	4b0f      	ldr	r3, [pc, #60]	; (80007c4 <MX_USART3_UART_Init+0x58>)
 8000786:	2200      	movs	r2, #0
 8000788:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 800078a:	4b0e      	ldr	r3, [pc, #56]	; (80007c4 <MX_USART3_UART_Init+0x58>)
 800078c:	2200      	movs	r2, #0
 800078e:	611a      	str	r2, [r3, #16]
	huart3.Init.Mode = UART_MODE_TX_RX;
 8000790:	4b0c      	ldr	r3, [pc, #48]	; (80007c4 <MX_USART3_UART_Init+0x58>)
 8000792:	220c      	movs	r2, #12
 8000794:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000796:	4b0b      	ldr	r3, [pc, #44]	; (80007c4 <MX_USART3_UART_Init+0x58>)
 8000798:	2200      	movs	r2, #0
 800079a:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800079c:	4b09      	ldr	r3, [pc, #36]	; (80007c4 <MX_USART3_UART_Init+0x58>)
 800079e:	2200      	movs	r2, #0
 80007a0:	61da      	str	r2, [r3, #28]
	huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007a2:	4b08      	ldr	r3, [pc, #32]	; (80007c4 <MX_USART3_UART_Init+0x58>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	621a      	str	r2, [r3, #32]
	huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007a8:	4b06      	ldr	r3, [pc, #24]	; (80007c4 <MX_USART3_UART_Init+0x58>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart3) != HAL_OK) {
 80007ae:	4805      	ldr	r0, [pc, #20]	; (80007c4 <MX_USART3_UART_Init+0x58>)
 80007b0:	f001 ff56 	bl	8002660 <HAL_UART_Init>
 80007b4:	4603      	mov	r3, r0
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d001      	beq.n	80007be <MX_USART3_UART_Init+0x52>
		Error_Handler();
 80007ba:	f000 f891 	bl	80008e0 <Error_Handler>
	}
	/* USER CODE BEGIN USART3_Init 2 */

	/* USER CODE END USART3_Init 2 */

}
 80007be:	bf00      	nop
 80007c0:	bd80      	pop	{r7, pc}
 80007c2:	bf00      	nop
 80007c4:	20000110 	.word	0x20000110
 80007c8:	40004800 	.word	0x40004800

080007cc <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b08a      	sub	sp, #40	; 0x28
 80007d0:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {
 80007d2:	f107 0314 	add.w	r3, r7, #20
 80007d6:	2200      	movs	r2, #0
 80007d8:	601a      	str	r2, [r3, #0]
 80007da:	605a      	str	r2, [r3, #4]
 80007dc:	609a      	str	r2, [r3, #8]
 80007de:	60da      	str	r2, [r3, #12]
 80007e0:	611a      	str	r2, [r3, #16]
			0 };
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80007e2:	4b3c      	ldr	r3, [pc, #240]	; (80008d4 <MX_GPIO_Init+0x108>)
 80007e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007e6:	4a3b      	ldr	r2, [pc, #236]	; (80008d4 <MX_GPIO_Init+0x108>)
 80007e8:	f043 0304 	orr.w	r3, r3, #4
 80007ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007ee:	4b39      	ldr	r3, [pc, #228]	; (80008d4 <MX_GPIO_Init+0x108>)
 80007f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007f2:	f003 0304 	and.w	r3, r3, #4
 80007f6:	613b      	str	r3, [r7, #16]
 80007f8:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 80007fa:	4b36      	ldr	r3, [pc, #216]	; (80008d4 <MX_GPIO_Init+0x108>)
 80007fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007fe:	4a35      	ldr	r2, [pc, #212]	; (80008d4 <MX_GPIO_Init+0x108>)
 8000800:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000804:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000806:	4b33      	ldr	r3, [pc, #204]	; (80008d4 <MX_GPIO_Init+0x108>)
 8000808:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800080a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800080e:	60fb      	str	r3, [r7, #12]
 8000810:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000812:	4b30      	ldr	r3, [pc, #192]	; (80008d4 <MX_GPIO_Init+0x108>)
 8000814:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000816:	4a2f      	ldr	r2, [pc, #188]	; (80008d4 <MX_GPIO_Init+0x108>)
 8000818:	f043 0301 	orr.w	r3, r3, #1
 800081c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800081e:	4b2d      	ldr	r3, [pc, #180]	; (80008d4 <MX_GPIO_Init+0x108>)
 8000820:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000822:	f003 0301 	and.w	r3, r3, #1
 8000826:	60bb      	str	r3, [r7, #8]
 8000828:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800082a:	4b2a      	ldr	r3, [pc, #168]	; (80008d4 <MX_GPIO_Init+0x108>)
 800082c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800082e:	4a29      	ldr	r2, [pc, #164]	; (80008d4 <MX_GPIO_Init+0x108>)
 8000830:	f043 0302 	orr.w	r3, r3, #2
 8000834:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000836:	4b27      	ldr	r3, [pc, #156]	; (80008d4 <MX_GPIO_Init+0x108>)
 8000838:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800083a:	f003 0302 	and.w	r3, r3, #2
 800083e:	607b      	str	r3, [r7, #4]
 8000840:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, SMPS_EN_Pin | SMPS_V1_Pin | SMPS_SW_Pin, GPIO_PIN_RESET);
 8000842:	2200      	movs	r2, #0
 8000844:	21b0      	movs	r1, #176	; 0xb0
 8000846:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800084a:	f000 fe67 	bl	800151c <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_RESET);
 800084e:	2200      	movs	r2, #0
 8000850:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000854:	4820      	ldr	r0, [pc, #128]	; (80008d8 <MX_GPIO_Init+0x10c>)
 8000856:	f000 fe61 	bl	800151c <HAL_GPIO_WritePin>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 800085a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800085e:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000860:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000864:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000866:	2300      	movs	r3, #0
 8000868:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800086a:	f107 0314 	add.w	r3, r7, #20
 800086e:	4619      	mov	r1, r3
 8000870:	481a      	ldr	r0, [pc, #104]	; (80008dc <MX_GPIO_Init+0x110>)
 8000872:	f000 fce1 	bl	8001238 <HAL_GPIO_Init>

	/*Configure GPIO pins : SMPS_EN_Pin SMPS_V1_Pin SMPS_SW_Pin */
	GPIO_InitStruct.Pin = SMPS_EN_Pin | SMPS_V1_Pin | SMPS_SW_Pin;
 8000876:	23b0      	movs	r3, #176	; 0xb0
 8000878:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800087a:	2301      	movs	r3, #1
 800087c:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800087e:	2300      	movs	r3, #0
 8000880:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000882:	2300      	movs	r3, #0
 8000884:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000886:	f107 0314 	add.w	r3, r7, #20
 800088a:	4619      	mov	r1, r3
 800088c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000890:	f000 fcd2 	bl	8001238 <HAL_GPIO_Init>

	/*Configure GPIO pin : SMPS_PG_Pin */
	GPIO_InitStruct.Pin = SMPS_PG_Pin;
 8000894:	2340      	movs	r3, #64	; 0x40
 8000896:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000898:	2300      	movs	r3, #0
 800089a:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 800089c:	2301      	movs	r3, #1
 800089e:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(SMPS_PG_GPIO_Port, &GPIO_InitStruct);
 80008a0:	f107 0314 	add.w	r3, r7, #20
 80008a4:	4619      	mov	r1, r3
 80008a6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008aa:	f000 fcc5 	bl	8001238 <HAL_GPIO_Init>

	/*Configure GPIO pin : LD4_Pin */
	GPIO_InitStruct.Pin = LD4_Pin;
 80008ae:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008b2:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008b4:	2301      	movs	r3, #1
 80008b6:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b8:	2300      	movs	r3, #0
 80008ba:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008bc:	2300      	movs	r3, #0
 80008be:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(LD4_GPIO_Port, &GPIO_InitStruct);
 80008c0:	f107 0314 	add.w	r3, r7, #20
 80008c4:	4619      	mov	r1, r3
 80008c6:	4804      	ldr	r0, [pc, #16]	; (80008d8 <MX_GPIO_Init+0x10c>)
 80008c8:	f000 fcb6 	bl	8001238 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 80008cc:	bf00      	nop
 80008ce:	3728      	adds	r7, #40	; 0x28
 80008d0:	46bd      	mov	sp, r7
 80008d2:	bd80      	pop	{r7, pc}
 80008d4:	40021000 	.word	0x40021000
 80008d8:	48000400 	.word	0x48000400
 80008dc:	48000800 	.word	0x48000800

080008e0 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80008e0:	b480      	push	{r7}
 80008e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008e4:	b672      	cpsid	i
}
 80008e6:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80008e8:	e7fe      	b.n	80008e8 <Error_Handler+0x8>
	...

080008ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008ec:	b480      	push	{r7}
 80008ee:	b083      	sub	sp, #12
 80008f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008f2:	4b0f      	ldr	r3, [pc, #60]	; (8000930 <HAL_MspInit+0x44>)
 80008f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008f6:	4a0e      	ldr	r2, [pc, #56]	; (8000930 <HAL_MspInit+0x44>)
 80008f8:	f043 0301 	orr.w	r3, r3, #1
 80008fc:	6613      	str	r3, [r2, #96]	; 0x60
 80008fe:	4b0c      	ldr	r3, [pc, #48]	; (8000930 <HAL_MspInit+0x44>)
 8000900:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000902:	f003 0301 	and.w	r3, r3, #1
 8000906:	607b      	str	r3, [r7, #4]
 8000908:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800090a:	4b09      	ldr	r3, [pc, #36]	; (8000930 <HAL_MspInit+0x44>)
 800090c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800090e:	4a08      	ldr	r2, [pc, #32]	; (8000930 <HAL_MspInit+0x44>)
 8000910:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000914:	6593      	str	r3, [r2, #88]	; 0x58
 8000916:	4b06      	ldr	r3, [pc, #24]	; (8000930 <HAL_MspInit+0x44>)
 8000918:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800091a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800091e:	603b      	str	r3, [r7, #0]
 8000920:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000922:	bf00      	nop
 8000924:	370c      	adds	r7, #12
 8000926:	46bd      	mov	sp, r7
 8000928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092c:	4770      	bx	lr
 800092e:	bf00      	nop
 8000930:	40021000 	.word	0x40021000

08000934 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b098      	sub	sp, #96	; 0x60
 8000938:	af00      	add	r7, sp, #0
 800093a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800093c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000940:	2200      	movs	r2, #0
 8000942:	601a      	str	r2, [r3, #0]
 8000944:	605a      	str	r2, [r3, #4]
 8000946:	609a      	str	r2, [r3, #8]
 8000948:	60da      	str	r2, [r3, #12]
 800094a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800094c:	f107 0318 	add.w	r3, r7, #24
 8000950:	2234      	movs	r2, #52	; 0x34
 8000952:	2100      	movs	r1, #0
 8000954:	4618      	mov	r0, r3
 8000956:	f003 f913 	bl	8003b80 <memset>
  if(huart->Instance==USART2)
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	681b      	ldr	r3, [r3, #0]
 800095e:	4a41      	ldr	r2, [pc, #260]	; (8000a64 <HAL_UART_MspInit+0x130>)
 8000960:	4293      	cmp	r3, r2
 8000962:	d137      	bne.n	80009d4 <HAL_UART_MspInit+0xa0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000964:	2302      	movs	r3, #2
 8000966:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000968:	2300      	movs	r3, #0
 800096a:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800096c:	f107 0318 	add.w	r3, r7, #24
 8000970:	4618      	mov	r0, r3
 8000972:	f001 fcef 	bl	8002354 <HAL_RCCEx_PeriphCLKConfig>
 8000976:	4603      	mov	r3, r0
 8000978:	2b00      	cmp	r3, #0
 800097a:	d001      	beq.n	8000980 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800097c:	f7ff ffb0 	bl	80008e0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000980:	4b39      	ldr	r3, [pc, #228]	; (8000a68 <HAL_UART_MspInit+0x134>)
 8000982:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000984:	4a38      	ldr	r2, [pc, #224]	; (8000a68 <HAL_UART_MspInit+0x134>)
 8000986:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800098a:	6593      	str	r3, [r2, #88]	; 0x58
 800098c:	4b36      	ldr	r3, [pc, #216]	; (8000a68 <HAL_UART_MspInit+0x134>)
 800098e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000990:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000994:	617b      	str	r3, [r7, #20]
 8000996:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000998:	4b33      	ldr	r3, [pc, #204]	; (8000a68 <HAL_UART_MspInit+0x134>)
 800099a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800099c:	4a32      	ldr	r2, [pc, #200]	; (8000a68 <HAL_UART_MspInit+0x134>)
 800099e:	f043 0301 	orr.w	r3, r3, #1
 80009a2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009a4:	4b30      	ldr	r3, [pc, #192]	; (8000a68 <HAL_UART_MspInit+0x134>)
 80009a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009a8:	f003 0301 	and.w	r3, r3, #1
 80009ac:	613b      	str	r3, [r7, #16]
 80009ae:	693b      	ldr	r3, [r7, #16]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80009b0:	230c      	movs	r3, #12
 80009b2:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009b4:	2302      	movs	r3, #2
 80009b6:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b8:	2300      	movs	r3, #0
 80009ba:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009bc:	2303      	movs	r3, #3
 80009be:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80009c0:	2307      	movs	r3, #7
 80009c2:	65fb      	str	r3, [r7, #92]	; 0x5c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009c4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80009c8:	4619      	mov	r1, r3
 80009ca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009ce:	f000 fc33 	bl	8001238 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80009d2:	e043      	b.n	8000a5c <HAL_UART_MspInit+0x128>
  else if(huart->Instance==USART3)
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	4a24      	ldr	r2, [pc, #144]	; (8000a6c <HAL_UART_MspInit+0x138>)
 80009da:	4293      	cmp	r3, r2
 80009dc:	d13e      	bne.n	8000a5c <HAL_UART_MspInit+0x128>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80009de:	2304      	movs	r3, #4
 80009e0:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80009e2:	2300      	movs	r3, #0
 80009e4:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80009e6:	f107 0318 	add.w	r3, r7, #24
 80009ea:	4618      	mov	r0, r3
 80009ec:	f001 fcb2 	bl	8002354 <HAL_RCCEx_PeriphCLKConfig>
 80009f0:	4603      	mov	r3, r0
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d001      	beq.n	80009fa <HAL_UART_MspInit+0xc6>
      Error_Handler();
 80009f6:	f7ff ff73 	bl	80008e0 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80009fa:	4b1b      	ldr	r3, [pc, #108]	; (8000a68 <HAL_UART_MspInit+0x134>)
 80009fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009fe:	4a1a      	ldr	r2, [pc, #104]	; (8000a68 <HAL_UART_MspInit+0x134>)
 8000a00:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000a04:	6593      	str	r3, [r2, #88]	; 0x58
 8000a06:	4b18      	ldr	r3, [pc, #96]	; (8000a68 <HAL_UART_MspInit+0x134>)
 8000a08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a0a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000a0e:	60fb      	str	r3, [r7, #12]
 8000a10:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a12:	4b15      	ldr	r3, [pc, #84]	; (8000a68 <HAL_UART_MspInit+0x134>)
 8000a14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a16:	4a14      	ldr	r2, [pc, #80]	; (8000a68 <HAL_UART_MspInit+0x134>)
 8000a18:	f043 0302 	orr.w	r3, r3, #2
 8000a1c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a1e:	4b12      	ldr	r3, [pc, #72]	; (8000a68 <HAL_UART_MspInit+0x134>)
 8000a20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a22:	f003 0302 	and.w	r3, r3, #2
 8000a26:	60bb      	str	r3, [r7, #8]
 8000a28:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000a2a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000a2e:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a30:	2302      	movs	r3, #2
 8000a32:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a34:	2300      	movs	r3, #0
 8000a36:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a38:	2303      	movs	r3, #3
 8000a3a:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000a3c:	2307      	movs	r3, #7
 8000a3e:	65fb      	str	r3, [r7, #92]	; 0x5c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a40:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000a44:	4619      	mov	r1, r3
 8000a46:	480a      	ldr	r0, [pc, #40]	; (8000a70 <HAL_UART_MspInit+0x13c>)
 8000a48:	f000 fbf6 	bl	8001238 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	2100      	movs	r1, #0
 8000a50:	2027      	movs	r0, #39	; 0x27
 8000a52:	f000 fb30 	bl	80010b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000a56:	2027      	movs	r0, #39	; 0x27
 8000a58:	f000 fb49 	bl	80010ee <HAL_NVIC_EnableIRQ>
}
 8000a5c:	bf00      	nop
 8000a5e:	3760      	adds	r7, #96	; 0x60
 8000a60:	46bd      	mov	sp, r7
 8000a62:	bd80      	pop	{r7, pc}
 8000a64:	40004400 	.word	0x40004400
 8000a68:	40021000 	.word	0x40021000
 8000a6c:	40004800 	.word	0x40004800
 8000a70:	48000400 	.word	0x48000400

08000a74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a74:	b480      	push	{r7}
 8000a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a78:	e7fe      	b.n	8000a78 <NMI_Handler+0x4>

08000a7a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a7a:	b480      	push	{r7}
 8000a7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a7e:	e7fe      	b.n	8000a7e <HardFault_Handler+0x4>

08000a80 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a80:	b480      	push	{r7}
 8000a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a84:	e7fe      	b.n	8000a84 <MemManage_Handler+0x4>

08000a86 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a86:	b480      	push	{r7}
 8000a88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a8a:	e7fe      	b.n	8000a8a <BusFault_Handler+0x4>

08000a8c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a90:	e7fe      	b.n	8000a90 <UsageFault_Handler+0x4>

08000a92 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a92:	b480      	push	{r7}
 8000a94:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a96:	bf00      	nop
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9e:	4770      	bx	lr

08000aa0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000aa4:	bf00      	nop
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aac:	4770      	bx	lr

08000aae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000aae:	b480      	push	{r7}
 8000ab0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ab2:	bf00      	nop
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aba:	4770      	bx	lr

08000abc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ac0:	f000 f9da 	bl	8000e78 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ac4:	bf00      	nop
 8000ac6:	bd80      	pop	{r7, pc}

08000ac8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000acc:	4802      	ldr	r0, [pc, #8]	; (8000ad8 <USART3_IRQHandler+0x10>)
 8000ace:	f002 f875 	bl	8002bbc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000ad2:	bf00      	nop
 8000ad4:	bd80      	pop	{r7, pc}
 8000ad6:	bf00      	nop
 8000ad8:	20000110 	.word	0x20000110

08000adc <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b086      	sub	sp, #24
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	60f8      	str	r0, [r7, #12]
 8000ae4:	60b9      	str	r1, [r7, #8]
 8000ae6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ae8:	2300      	movs	r3, #0
 8000aea:	617b      	str	r3, [r7, #20]
 8000aec:	e00a      	b.n	8000b04 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000aee:	f3af 8000 	nop.w
 8000af2:	4601      	mov	r1, r0
 8000af4:	68bb      	ldr	r3, [r7, #8]
 8000af6:	1c5a      	adds	r2, r3, #1
 8000af8:	60ba      	str	r2, [r7, #8]
 8000afa:	b2ca      	uxtb	r2, r1
 8000afc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000afe:	697b      	ldr	r3, [r7, #20]
 8000b00:	3301      	adds	r3, #1
 8000b02:	617b      	str	r3, [r7, #20]
 8000b04:	697a      	ldr	r2, [r7, #20]
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	429a      	cmp	r2, r3
 8000b0a:	dbf0      	blt.n	8000aee <_read+0x12>
  }

  return len;
 8000b0c:	687b      	ldr	r3, [r7, #4]
}
 8000b0e:	4618      	mov	r0, r3
 8000b10:	3718      	adds	r7, #24
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bd80      	pop	{r7, pc}

08000b16 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000b16:	b580      	push	{r7, lr}
 8000b18:	b086      	sub	sp, #24
 8000b1a:	af00      	add	r7, sp, #0
 8000b1c:	60f8      	str	r0, [r7, #12]
 8000b1e:	60b9      	str	r1, [r7, #8]
 8000b20:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b22:	2300      	movs	r3, #0
 8000b24:	617b      	str	r3, [r7, #20]
 8000b26:	e009      	b.n	8000b3c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000b28:	68bb      	ldr	r3, [r7, #8]
 8000b2a:	1c5a      	adds	r2, r3, #1
 8000b2c:	60ba      	str	r2, [r7, #8]
 8000b2e:	781b      	ldrb	r3, [r3, #0]
 8000b30:	4618      	mov	r0, r3
 8000b32:	f7ff fd1f 	bl	8000574 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b36:	697b      	ldr	r3, [r7, #20]
 8000b38:	3301      	adds	r3, #1
 8000b3a:	617b      	str	r3, [r7, #20]
 8000b3c:	697a      	ldr	r2, [r7, #20]
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	429a      	cmp	r2, r3
 8000b42:	dbf1      	blt.n	8000b28 <_write+0x12>
  }
  return len;
 8000b44:	687b      	ldr	r3, [r7, #4]
}
 8000b46:	4618      	mov	r0, r3
 8000b48:	3718      	adds	r7, #24
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	bd80      	pop	{r7, pc}

08000b4e <_close>:

int _close(int file)
{
 8000b4e:	b480      	push	{r7}
 8000b50:	b083      	sub	sp, #12
 8000b52:	af00      	add	r7, sp, #0
 8000b54:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000b56:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	370c      	adds	r7, #12
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b64:	4770      	bx	lr

08000b66 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000b66:	b480      	push	{r7}
 8000b68:	b083      	sub	sp, #12
 8000b6a:	af00      	add	r7, sp, #0
 8000b6c:	6078      	str	r0, [r7, #4]
 8000b6e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000b70:	683b      	ldr	r3, [r7, #0]
 8000b72:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b76:	605a      	str	r2, [r3, #4]
  return 0;
 8000b78:	2300      	movs	r3, #0
}
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	370c      	adds	r7, #12
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b84:	4770      	bx	lr

08000b86 <_isatty>:

int _isatty(int file)
{
 8000b86:	b480      	push	{r7}
 8000b88:	b083      	sub	sp, #12
 8000b8a:	af00      	add	r7, sp, #0
 8000b8c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000b8e:	2301      	movs	r3, #1
}
 8000b90:	4618      	mov	r0, r3
 8000b92:	370c      	adds	r7, #12
 8000b94:	46bd      	mov	sp, r7
 8000b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9a:	4770      	bx	lr

08000b9c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	b085      	sub	sp, #20
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	60f8      	str	r0, [r7, #12]
 8000ba4:	60b9      	str	r1, [r7, #8]
 8000ba6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000ba8:	2300      	movs	r3, #0
}
 8000baa:	4618      	mov	r0, r3
 8000bac:	3714      	adds	r7, #20
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb4:	4770      	bx	lr
	...

08000bb8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b086      	sub	sp, #24
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000bc0:	4a14      	ldr	r2, [pc, #80]	; (8000c14 <_sbrk+0x5c>)
 8000bc2:	4b15      	ldr	r3, [pc, #84]	; (8000c18 <_sbrk+0x60>)
 8000bc4:	1ad3      	subs	r3, r2, r3
 8000bc6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000bc8:	697b      	ldr	r3, [r7, #20]
 8000bca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000bcc:	4b13      	ldr	r3, [pc, #76]	; (8000c1c <_sbrk+0x64>)
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d102      	bne.n	8000bda <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000bd4:	4b11      	ldr	r3, [pc, #68]	; (8000c1c <_sbrk+0x64>)
 8000bd6:	4a12      	ldr	r2, [pc, #72]	; (8000c20 <_sbrk+0x68>)
 8000bd8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000bda:	4b10      	ldr	r3, [pc, #64]	; (8000c1c <_sbrk+0x64>)
 8000bdc:	681a      	ldr	r2, [r3, #0]
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	4413      	add	r3, r2
 8000be2:	693a      	ldr	r2, [r7, #16]
 8000be4:	429a      	cmp	r2, r3
 8000be6:	d207      	bcs.n	8000bf8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000be8:	f002 ffa0 	bl	8003b2c <__errno>
 8000bec:	4603      	mov	r3, r0
 8000bee:	220c      	movs	r2, #12
 8000bf0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000bf2:	f04f 33ff 	mov.w	r3, #4294967295
 8000bf6:	e009      	b.n	8000c0c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000bf8:	4b08      	ldr	r3, [pc, #32]	; (8000c1c <_sbrk+0x64>)
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000bfe:	4b07      	ldr	r3, [pc, #28]	; (8000c1c <_sbrk+0x64>)
 8000c00:	681a      	ldr	r2, [r3, #0]
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	4413      	add	r3, r2
 8000c06:	4a05      	ldr	r2, [pc, #20]	; (8000c1c <_sbrk+0x64>)
 8000c08:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c0a:	68fb      	ldr	r3, [r7, #12]
}
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	3718      	adds	r7, #24
 8000c10:	46bd      	mov	sp, r7
 8000c12:	bd80      	pop	{r7, pc}
 8000c14:	2000a000 	.word	0x2000a000
 8000c18:	00000400 	.word	0x00000400
 8000c1c:	20000194 	.word	0x20000194
 8000c20:	200001b0 	.word	0x200001b0

08000c24 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000c24:	b480      	push	{r7}
 8000c26:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000c28:	4b06      	ldr	r3, [pc, #24]	; (8000c44 <SystemInit+0x20>)
 8000c2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c2e:	4a05      	ldr	r2, [pc, #20]	; (8000c44 <SystemInit+0x20>)
 8000c30:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c34:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000c38:	bf00      	nop
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c40:	4770      	bx	lr
 8000c42:	bf00      	nop
 8000c44:	e000ed00 	.word	0xe000ed00

08000c48 <ublox_neo6m_init>:
 *      Author: wojsl
 */

#include "ublox_neo6m.h"

ublox_neo6m_ErrorType ublox_neo6m_init(ublox_neo6m_ConfigStruct *devConfig) {
 8000c48:	b480      	push	{r7}
 8000c4a:	b083      	sub	sp, #12
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
	return (UBLOX_OK);
 8000c50:	2300      	movs	r3, #0
}
 8000c52:	4618      	mov	r0, r3
 8000c54:	370c      	adds	r7, #12
 8000c56:	46bd      	mov	sp, r7
 8000c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5c:	4770      	bx	lr
	...

08000c60 <ublox_neo6m_readData>:

/*
 * Read data from the $GPGGA (Global Positioning System Fix Data) sentence.
 */
ublox_neo6m_ErrorType ublox_neo6m_readData(ublox_neo6m_ConfigStruct *devConfig, ublox_neo6m_DataStruct *devData) {
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b09a      	sub	sp, #104	; 0x68
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
 8000c68:	6039      	str	r1, [r7, #0]

	uint8_t sentenceBuffer[NMEA_0183_MAX_MESSAGE_LENGTH];
	uint8_t receivedByte;
	uint8_t byteInMessage = 0;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	uint8_t byteRead = 0;
 8000c70:	2300      	movs	r3, #0
 8000c72:	73fb      	strb	r3, [r7, #15]

	HAL_StatusTypeDef err = HAL_OK;
 8000c74:	2300      	movs	r3, #0
 8000c76:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66

	err = HAL_UART_Abort(devConfig->huartNeo6m);
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	4618      	mov	r0, r3
 8000c80:	f001 fea1 	bl	80029c6 <HAL_UART_Abort>
 8000c84:	4603      	mov	r3, r0
 8000c86:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
	if (err != HAL_OK) {
 8000c8a:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d002      	beq.n	8000c98 <ublox_neo6m_readData+0x38>
		// Error when aborting any UART tx/rx
		return err;
 8000c92:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8000c96:	e063      	b.n	8000d60 <ublox_neo6m_readData+0x100>
	}

	while (1) {
		// Read last character from the UART buffer and store as the first element of the sentence buffer
		err = HAL_UART_Receive((devConfig->huartNeo6m), sentenceBuffer, 1, 5000);
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	6818      	ldr	r0, [r3, #0]
 8000c9c:	f107 0110 	add.w	r1, r7, #16
 8000ca0:	f241 3388 	movw	r3, #5000	; 0x1388
 8000ca4:	2201      	movs	r2, #1
 8000ca6:	f001 fdbd 	bl	8002824 <HAL_UART_Receive>
 8000caa:	4603      	mov	r3, r0
 8000cac:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
		if (err != HAL_OK) {
 8000cb0:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d002      	beq.n	8000cbe <ublox_neo6m_readData+0x5e>
			// Error receiving byte of data!
			return err;
 8000cb8:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8000cbc:	e050      	b.n	8000d60 <ublox_neo6m_readData+0x100>
		}

		// Test if it is a start character ($) indicating a new sentence
		if ((*sentenceBuffer) == '$') {
 8000cbe:	7c3b      	ldrb	r3, [r7, #16]
 8000cc0:	2b24      	cmp	r3, #36	; 0x24
 8000cc2:	d1e9      	bne.n	8000c98 <ublox_neo6m_readData+0x38>
			// Read talker ID and sentence type (5 bytes) and store as 5 consecutive elements of the sentence buffer
			HAL_UART_Receive(devConfig->huartNeo6m, (sentenceBuffer + 1), 5, HAL_MAX_DELAY);
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	6818      	ldr	r0, [r3, #0]
 8000cc8:	f107 0110 	add.w	r1, r7, #16
 8000ccc:	3101      	adds	r1, #1
 8000cce:	f04f 33ff 	mov.w	r3, #4294967295
 8000cd2:	2205      	movs	r2, #5
 8000cd4:	f001 fda6 	bl	8002824 <HAL_UART_Receive>

			// Proceed only if it is a GGA sentence
			uint8_t isSentenceGGA = !(strncmp((sentenceBuffer + 1), "GPGGA", 5));
 8000cd8:	f107 0310 	add.w	r3, r7, #16
 8000cdc:	3301      	adds	r3, #1
 8000cde:	2205      	movs	r2, #5
 8000ce0:	4921      	ldr	r1, [pc, #132]	; (8000d68 <ublox_neo6m_readData+0x108>)
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	f002 ffe2 	bl	8003cac <strncmp>
 8000ce8:	4603      	mov	r3, r0
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	bf0c      	ite	eq
 8000cee:	2301      	moveq	r3, #1
 8000cf0:	2300      	movne	r3, #0
 8000cf2:	b2db      	uxtb	r3, r3
 8000cf4:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
			byteInMessage = 6; // Current byte in a message, counting from 0
 8000cf8:	2306      	movs	r3, #6
 8000cfa:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67

			if (isSentenceGGA == 1) {
 8000cfe:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 8000d02:	2b01      	cmp	r3, #1
 8000d04:	d1c8      	bne.n	8000c98 <ublox_neo6m_readData+0x38>
				do {
					HAL_UART_Receive(devConfig->huartNeo6m, &byteRead, 1, HAL_MAX_DELAY); // Read one char from the UART buffer
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	6818      	ldr	r0, [r3, #0]
 8000d0a:	f107 010f 	add.w	r1, r7, #15
 8000d0e:	f04f 33ff 	mov.w	r3, #4294967295
 8000d12:	2201      	movs	r2, #1
 8000d14:	f001 fd86 	bl	8002824 <HAL_UART_Receive>
					strncpy((sentenceBuffer + byteInMessage), &byteRead, 1);
 8000d18:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000d1c:	f107 0210 	add.w	r2, r7, #16
 8000d20:	4413      	add	r3, r2
 8000d22:	f107 010f 	add.w	r1, r7, #15
 8000d26:	2201      	movs	r2, #1
 8000d28:	4618      	mov	r0, r3
 8000d2a:	f002 ffd3 	bl	8003cd4 <strncpy>
					byteInMessage++;
 8000d2e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000d32:	3301      	adds	r3, #1
 8000d34:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67

					// Continue until Line Feed (LF or 0x0a in ASCI) is encountered or max length is reached
				} while ((byteRead != 0x0a) && (byteInMessage < NMEA_0183_MAX_MESSAGE_LENGTH));
 8000d38:	7bfb      	ldrb	r3, [r7, #15]
 8000d3a:	2b0a      	cmp	r3, #10
 8000d3c:	d003      	beq.n	8000d46 <ublox_neo6m_readData+0xe6>
 8000d3e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000d42:	2b51      	cmp	r3, #81	; 0x51
 8000d44:	d9df      	bls.n	8000d06 <ublox_neo6m_readData+0xa6>

				break;	// Now break from the while loop and return
 8000d46:	bf00      	nop
			}
		}
	}

	HAL_UART_Transmit(devConfig->huartLogging, (sentenceBuffer), byteInMessage, HAL_MAX_DELAY);
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	6858      	ldr	r0, [r3, #4]
 8000d4c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000d50:	b29a      	uxth	r2, r3
 8000d52:	f107 0110 	add.w	r1, r7, #16
 8000d56:	f04f 33ff 	mov.w	r3, #4294967295
 8000d5a:	f001 fccf 	bl	80026fc <HAL_UART_Transmit>

	return (UBLOX_OK);
 8000d5e:	2300      	movs	r3, #0
}
 8000d60:	4618      	mov	r0, r3
 8000d62:	3768      	adds	r7, #104	; 0x68
 8000d64:	46bd      	mov	sp, r7
 8000d66:	bd80      	pop	{r7, pc}
 8000d68:	08004ccc 	.word	0x08004ccc

08000d6c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000d6c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000da4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000d70:	f7ff ff58 	bl	8000c24 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d74:	480c      	ldr	r0, [pc, #48]	; (8000da8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000d76:	490d      	ldr	r1, [pc, #52]	; (8000dac <LoopForever+0xa>)
  ldr r2, =_sidata
 8000d78:	4a0d      	ldr	r2, [pc, #52]	; (8000db0 <LoopForever+0xe>)
  movs r3, #0
 8000d7a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d7c:	e002      	b.n	8000d84 <LoopCopyDataInit>

08000d7e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d7e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d80:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d82:	3304      	adds	r3, #4

08000d84 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d84:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d86:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d88:	d3f9      	bcc.n	8000d7e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d8a:	4a0a      	ldr	r2, [pc, #40]	; (8000db4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000d8c:	4c0a      	ldr	r4, [pc, #40]	; (8000db8 <LoopForever+0x16>)
  movs r3, #0
 8000d8e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d90:	e001      	b.n	8000d96 <LoopFillZerobss>

08000d92 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d92:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d94:	3204      	adds	r2, #4

08000d96 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d96:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d98:	d3fb      	bcc.n	8000d92 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d9a:	f002 fecd 	bl	8003b38 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000d9e:	f7ff fbfb 	bl	8000598 <main>

08000da2 <LoopForever>:

LoopForever:
    b LoopForever
 8000da2:	e7fe      	b.n	8000da2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000da4:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8000da8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000dac:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000db0:	08004dc4 	.word	0x08004dc4
  ldr r2, =_sbss
 8000db4:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000db8:	200001ac 	.word	0x200001ac

08000dbc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000dbc:	e7fe      	b.n	8000dbc <ADC1_2_IRQHandler>
	...

08000dc0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b082      	sub	sp, #8
 8000dc4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000dca:	4b0c      	ldr	r3, [pc, #48]	; (8000dfc <HAL_Init+0x3c>)
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	4a0b      	ldr	r2, [pc, #44]	; (8000dfc <HAL_Init+0x3c>)
 8000dd0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000dd4:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000dd6:	2003      	movs	r0, #3
 8000dd8:	f000 f962 	bl	80010a0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ddc:	2000      	movs	r0, #0
 8000dde:	f000 f80f 	bl	8000e00 <HAL_InitTick>
 8000de2:	4603      	mov	r3, r0
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d002      	beq.n	8000dee <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000de8:	2301      	movs	r3, #1
 8000dea:	71fb      	strb	r3, [r7, #7]
 8000dec:	e001      	b.n	8000df2 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000dee:	f7ff fd7d 	bl	80008ec <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000df2:	79fb      	ldrb	r3, [r7, #7]
}
 8000df4:	4618      	mov	r0, r3
 8000df6:	3708      	adds	r7, #8
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	bd80      	pop	{r7, pc}
 8000dfc:	40022000 	.word	0x40022000

08000e00 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b084      	sub	sp, #16
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000e0c:	4b17      	ldr	r3, [pc, #92]	; (8000e6c <HAL_InitTick+0x6c>)
 8000e0e:	781b      	ldrb	r3, [r3, #0]
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d023      	beq.n	8000e5c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000e14:	4b16      	ldr	r3, [pc, #88]	; (8000e70 <HAL_InitTick+0x70>)
 8000e16:	681a      	ldr	r2, [r3, #0]
 8000e18:	4b14      	ldr	r3, [pc, #80]	; (8000e6c <HAL_InitTick+0x6c>)
 8000e1a:	781b      	ldrb	r3, [r3, #0]
 8000e1c:	4619      	mov	r1, r3
 8000e1e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e22:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e26:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	f000 f96d 	bl	800110a <HAL_SYSTICK_Config>
 8000e30:	4603      	mov	r3, r0
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d10f      	bne.n	8000e56 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	2b0f      	cmp	r3, #15
 8000e3a:	d809      	bhi.n	8000e50 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	6879      	ldr	r1, [r7, #4]
 8000e40:	f04f 30ff 	mov.w	r0, #4294967295
 8000e44:	f000 f937 	bl	80010b6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000e48:	4a0a      	ldr	r2, [pc, #40]	; (8000e74 <HAL_InitTick+0x74>)
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	6013      	str	r3, [r2, #0]
 8000e4e:	e007      	b.n	8000e60 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000e50:	2301      	movs	r3, #1
 8000e52:	73fb      	strb	r3, [r7, #15]
 8000e54:	e004      	b.n	8000e60 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000e56:	2301      	movs	r3, #1
 8000e58:	73fb      	strb	r3, [r7, #15]
 8000e5a:	e001      	b.n	8000e60 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000e5c:	2301      	movs	r3, #1
 8000e5e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000e60:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e62:	4618      	mov	r0, r3
 8000e64:	3710      	adds	r7, #16
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bd80      	pop	{r7, pc}
 8000e6a:	bf00      	nop
 8000e6c:	20000008 	.word	0x20000008
 8000e70:	20000000 	.word	0x20000000
 8000e74:	20000004 	.word	0x20000004

08000e78 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000e7c:	4b06      	ldr	r3, [pc, #24]	; (8000e98 <HAL_IncTick+0x20>)
 8000e7e:	781b      	ldrb	r3, [r3, #0]
 8000e80:	461a      	mov	r2, r3
 8000e82:	4b06      	ldr	r3, [pc, #24]	; (8000e9c <HAL_IncTick+0x24>)
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	4413      	add	r3, r2
 8000e88:	4a04      	ldr	r2, [pc, #16]	; (8000e9c <HAL_IncTick+0x24>)
 8000e8a:	6013      	str	r3, [r2, #0]
}
 8000e8c:	bf00      	nop
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e94:	4770      	bx	lr
 8000e96:	bf00      	nop
 8000e98:	20000008 	.word	0x20000008
 8000e9c:	20000198 	.word	0x20000198

08000ea0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	af00      	add	r7, sp, #0
  return uwTick;
 8000ea4:	4b03      	ldr	r3, [pc, #12]	; (8000eb4 <HAL_GetTick+0x14>)
 8000ea6:	681b      	ldr	r3, [r3, #0]
}
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb0:	4770      	bx	lr
 8000eb2:	bf00      	nop
 8000eb4:	20000198 	.word	0x20000198

08000eb8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b084      	sub	sp, #16
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ec0:	f7ff ffee 	bl	8000ea0 <HAL_GetTick>
 8000ec4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000eca:	68fb      	ldr	r3, [r7, #12]
 8000ecc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ed0:	d005      	beq.n	8000ede <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000ed2:	4b0a      	ldr	r3, [pc, #40]	; (8000efc <HAL_Delay+0x44>)
 8000ed4:	781b      	ldrb	r3, [r3, #0]
 8000ed6:	461a      	mov	r2, r3
 8000ed8:	68fb      	ldr	r3, [r7, #12]
 8000eda:	4413      	add	r3, r2
 8000edc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000ede:	bf00      	nop
 8000ee0:	f7ff ffde 	bl	8000ea0 <HAL_GetTick>
 8000ee4:	4602      	mov	r2, r0
 8000ee6:	68bb      	ldr	r3, [r7, #8]
 8000ee8:	1ad3      	subs	r3, r2, r3
 8000eea:	68fa      	ldr	r2, [r7, #12]
 8000eec:	429a      	cmp	r2, r3
 8000eee:	d8f7      	bhi.n	8000ee0 <HAL_Delay+0x28>
  {
  }
}
 8000ef0:	bf00      	nop
 8000ef2:	bf00      	nop
 8000ef4:	3710      	adds	r7, #16
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bd80      	pop	{r7, pc}
 8000efa:	bf00      	nop
 8000efc:	20000008 	.word	0x20000008

08000f00 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f00:	b480      	push	{r7}
 8000f02:	b085      	sub	sp, #20
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	f003 0307 	and.w	r3, r3, #7
 8000f0e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f10:	4b0c      	ldr	r3, [pc, #48]	; (8000f44 <__NVIC_SetPriorityGrouping+0x44>)
 8000f12:	68db      	ldr	r3, [r3, #12]
 8000f14:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f16:	68ba      	ldr	r2, [r7, #8]
 8000f18:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f1c:	4013      	ands	r3, r2
 8000f1e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f24:	68bb      	ldr	r3, [r7, #8]
 8000f26:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f28:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f30:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f32:	4a04      	ldr	r2, [pc, #16]	; (8000f44 <__NVIC_SetPriorityGrouping+0x44>)
 8000f34:	68bb      	ldr	r3, [r7, #8]
 8000f36:	60d3      	str	r3, [r2, #12]
}
 8000f38:	bf00      	nop
 8000f3a:	3714      	adds	r7, #20
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f42:	4770      	bx	lr
 8000f44:	e000ed00 	.word	0xe000ed00

08000f48 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f4c:	4b04      	ldr	r3, [pc, #16]	; (8000f60 <__NVIC_GetPriorityGrouping+0x18>)
 8000f4e:	68db      	ldr	r3, [r3, #12]
 8000f50:	0a1b      	lsrs	r3, r3, #8
 8000f52:	f003 0307 	and.w	r3, r3, #7
}
 8000f56:	4618      	mov	r0, r3
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5e:	4770      	bx	lr
 8000f60:	e000ed00 	.word	0xe000ed00

08000f64 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f64:	b480      	push	{r7}
 8000f66:	b083      	sub	sp, #12
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	db0b      	blt.n	8000f8e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f76:	79fb      	ldrb	r3, [r7, #7]
 8000f78:	f003 021f 	and.w	r2, r3, #31
 8000f7c:	4907      	ldr	r1, [pc, #28]	; (8000f9c <__NVIC_EnableIRQ+0x38>)
 8000f7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f82:	095b      	lsrs	r3, r3, #5
 8000f84:	2001      	movs	r0, #1
 8000f86:	fa00 f202 	lsl.w	r2, r0, r2
 8000f8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000f8e:	bf00      	nop
 8000f90:	370c      	adds	r7, #12
 8000f92:	46bd      	mov	sp, r7
 8000f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f98:	4770      	bx	lr
 8000f9a:	bf00      	nop
 8000f9c:	e000e100 	.word	0xe000e100

08000fa0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	b083      	sub	sp, #12
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	6039      	str	r1, [r7, #0]
 8000faa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	db0a      	blt.n	8000fca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fb4:	683b      	ldr	r3, [r7, #0]
 8000fb6:	b2da      	uxtb	r2, r3
 8000fb8:	490c      	ldr	r1, [pc, #48]	; (8000fec <__NVIC_SetPriority+0x4c>)
 8000fba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fbe:	0112      	lsls	r2, r2, #4
 8000fc0:	b2d2      	uxtb	r2, r2
 8000fc2:	440b      	add	r3, r1
 8000fc4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fc8:	e00a      	b.n	8000fe0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fca:	683b      	ldr	r3, [r7, #0]
 8000fcc:	b2da      	uxtb	r2, r3
 8000fce:	4908      	ldr	r1, [pc, #32]	; (8000ff0 <__NVIC_SetPriority+0x50>)
 8000fd0:	79fb      	ldrb	r3, [r7, #7]
 8000fd2:	f003 030f 	and.w	r3, r3, #15
 8000fd6:	3b04      	subs	r3, #4
 8000fd8:	0112      	lsls	r2, r2, #4
 8000fda:	b2d2      	uxtb	r2, r2
 8000fdc:	440b      	add	r3, r1
 8000fde:	761a      	strb	r2, [r3, #24]
}
 8000fe0:	bf00      	nop
 8000fe2:	370c      	adds	r7, #12
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fea:	4770      	bx	lr
 8000fec:	e000e100 	.word	0xe000e100
 8000ff0:	e000ed00 	.word	0xe000ed00

08000ff4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	b089      	sub	sp, #36	; 0x24
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	60f8      	str	r0, [r7, #12]
 8000ffc:	60b9      	str	r1, [r7, #8]
 8000ffe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	f003 0307 	and.w	r3, r3, #7
 8001006:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001008:	69fb      	ldr	r3, [r7, #28]
 800100a:	f1c3 0307 	rsb	r3, r3, #7
 800100e:	2b04      	cmp	r3, #4
 8001010:	bf28      	it	cs
 8001012:	2304      	movcs	r3, #4
 8001014:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001016:	69fb      	ldr	r3, [r7, #28]
 8001018:	3304      	adds	r3, #4
 800101a:	2b06      	cmp	r3, #6
 800101c:	d902      	bls.n	8001024 <NVIC_EncodePriority+0x30>
 800101e:	69fb      	ldr	r3, [r7, #28]
 8001020:	3b03      	subs	r3, #3
 8001022:	e000      	b.n	8001026 <NVIC_EncodePriority+0x32>
 8001024:	2300      	movs	r3, #0
 8001026:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001028:	f04f 32ff 	mov.w	r2, #4294967295
 800102c:	69bb      	ldr	r3, [r7, #24]
 800102e:	fa02 f303 	lsl.w	r3, r2, r3
 8001032:	43da      	mvns	r2, r3
 8001034:	68bb      	ldr	r3, [r7, #8]
 8001036:	401a      	ands	r2, r3
 8001038:	697b      	ldr	r3, [r7, #20]
 800103a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800103c:	f04f 31ff 	mov.w	r1, #4294967295
 8001040:	697b      	ldr	r3, [r7, #20]
 8001042:	fa01 f303 	lsl.w	r3, r1, r3
 8001046:	43d9      	mvns	r1, r3
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800104c:	4313      	orrs	r3, r2
         );
}
 800104e:	4618      	mov	r0, r3
 8001050:	3724      	adds	r7, #36	; 0x24
 8001052:	46bd      	mov	sp, r7
 8001054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001058:	4770      	bx	lr
	...

0800105c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b082      	sub	sp, #8
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	3b01      	subs	r3, #1
 8001068:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800106c:	d301      	bcc.n	8001072 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800106e:	2301      	movs	r3, #1
 8001070:	e00f      	b.n	8001092 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001072:	4a0a      	ldr	r2, [pc, #40]	; (800109c <SysTick_Config+0x40>)
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	3b01      	subs	r3, #1
 8001078:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800107a:	210f      	movs	r1, #15
 800107c:	f04f 30ff 	mov.w	r0, #4294967295
 8001080:	f7ff ff8e 	bl	8000fa0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001084:	4b05      	ldr	r3, [pc, #20]	; (800109c <SysTick_Config+0x40>)
 8001086:	2200      	movs	r2, #0
 8001088:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800108a:	4b04      	ldr	r3, [pc, #16]	; (800109c <SysTick_Config+0x40>)
 800108c:	2207      	movs	r2, #7
 800108e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001090:	2300      	movs	r3, #0
}
 8001092:	4618      	mov	r0, r3
 8001094:	3708      	adds	r7, #8
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}
 800109a:	bf00      	nop
 800109c:	e000e010 	.word	0xe000e010

080010a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b082      	sub	sp, #8
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010a8:	6878      	ldr	r0, [r7, #4]
 80010aa:	f7ff ff29 	bl	8000f00 <__NVIC_SetPriorityGrouping>
}
 80010ae:	bf00      	nop
 80010b0:	3708      	adds	r7, #8
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}

080010b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010b6:	b580      	push	{r7, lr}
 80010b8:	b086      	sub	sp, #24
 80010ba:	af00      	add	r7, sp, #0
 80010bc:	4603      	mov	r3, r0
 80010be:	60b9      	str	r1, [r7, #8]
 80010c0:	607a      	str	r2, [r7, #4]
 80010c2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80010c4:	2300      	movs	r3, #0
 80010c6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80010c8:	f7ff ff3e 	bl	8000f48 <__NVIC_GetPriorityGrouping>
 80010cc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010ce:	687a      	ldr	r2, [r7, #4]
 80010d0:	68b9      	ldr	r1, [r7, #8]
 80010d2:	6978      	ldr	r0, [r7, #20]
 80010d4:	f7ff ff8e 	bl	8000ff4 <NVIC_EncodePriority>
 80010d8:	4602      	mov	r2, r0
 80010da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010de:	4611      	mov	r1, r2
 80010e0:	4618      	mov	r0, r3
 80010e2:	f7ff ff5d 	bl	8000fa0 <__NVIC_SetPriority>
}
 80010e6:	bf00      	nop
 80010e8:	3718      	adds	r7, #24
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}

080010ee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010ee:	b580      	push	{r7, lr}
 80010f0:	b082      	sub	sp, #8
 80010f2:	af00      	add	r7, sp, #0
 80010f4:	4603      	mov	r3, r0
 80010f6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010fc:	4618      	mov	r0, r3
 80010fe:	f7ff ff31 	bl	8000f64 <__NVIC_EnableIRQ>
}
 8001102:	bf00      	nop
 8001104:	3708      	adds	r7, #8
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}

0800110a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800110a:	b580      	push	{r7, lr}
 800110c:	b082      	sub	sp, #8
 800110e:	af00      	add	r7, sp, #0
 8001110:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001112:	6878      	ldr	r0, [r7, #4]
 8001114:	f7ff ffa2 	bl	800105c <SysTick_Config>
 8001118:	4603      	mov	r3, r0
}
 800111a:	4618      	mov	r0, r3
 800111c:	3708      	adds	r7, #8
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}

08001122 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001122:	b480      	push	{r7}
 8001124:	b085      	sub	sp, #20
 8001126:	af00      	add	r7, sp, #0
 8001128:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800112a:	2300      	movs	r3, #0
 800112c:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001134:	b2db      	uxtb	r3, r3
 8001136:	2b02      	cmp	r3, #2
 8001138:	d008      	beq.n	800114c <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	2204      	movs	r2, #4
 800113e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	2200      	movs	r2, #0
 8001144:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001148:	2301      	movs	r3, #1
 800114a:	e022      	b.n	8001192 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	681a      	ldr	r2, [r3, #0]
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	f022 020e 	bic.w	r2, r2, #14
 800115a:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	681a      	ldr	r2, [r3, #0]
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	f022 0201 	bic.w	r2, r2, #1
 800116a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001170:	f003 021c 	and.w	r2, r3, #28
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001178:	2101      	movs	r1, #1
 800117a:	fa01 f202 	lsl.w	r2, r1, r2
 800117e:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	2201      	movs	r2, #1
 8001184:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	2200      	movs	r2, #0
 800118c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8001190:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8001192:	4618      	mov	r0, r3
 8001194:	3714      	adds	r7, #20
 8001196:	46bd      	mov	sp, r7
 8001198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119c:	4770      	bx	lr

0800119e <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800119e:	b580      	push	{r7, lr}
 80011a0:	b084      	sub	sp, #16
 80011a2:	af00      	add	r7, sp, #0
 80011a4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80011a6:	2300      	movs	r3, #0
 80011a8:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80011b0:	b2db      	uxtb	r3, r3
 80011b2:	2b02      	cmp	r3, #2
 80011b4:	d005      	beq.n	80011c2 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	2204      	movs	r2, #4
 80011ba:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80011bc:	2301      	movs	r3, #1
 80011be:	73fb      	strb	r3, [r7, #15]
 80011c0:	e029      	b.n	8001216 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	681a      	ldr	r2, [r3, #0]
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	f022 020e 	bic.w	r2, r2, #14
 80011d0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	681a      	ldr	r2, [r3, #0]
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	f022 0201 	bic.w	r2, r2, #1
 80011e0:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011e6:	f003 021c 	and.w	r2, r3, #28
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ee:	2101      	movs	r1, #1
 80011f0:	fa01 f202 	lsl.w	r2, r1, r2
 80011f4:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	2201      	movs	r2, #1
 80011fa:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	2200      	movs	r2, #0
 8001202:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800120a:	2b00      	cmp	r3, #0
 800120c:	d003      	beq.n	8001216 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001212:	6878      	ldr	r0, [r7, #4]
 8001214:	4798      	blx	r3
    }
  }
  return status;
 8001216:	7bfb      	ldrb	r3, [r7, #15]
}
 8001218:	4618      	mov	r0, r3
 800121a:	3710      	adds	r7, #16
 800121c:	46bd      	mov	sp, r7
 800121e:	bd80      	pop	{r7, pc}

08001220 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8001220:	b480      	push	{r7}
 8001222:	b083      	sub	sp, #12
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
}
 800122c:	4618      	mov	r0, r3
 800122e:	370c      	adds	r7, #12
 8001230:	46bd      	mov	sp, r7
 8001232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001236:	4770      	bx	lr

08001238 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001238:	b480      	push	{r7}
 800123a:	b087      	sub	sp, #28
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
 8001240:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001242:	2300      	movs	r3, #0
 8001244:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001246:	e14e      	b.n	80014e6 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001248:	683b      	ldr	r3, [r7, #0]
 800124a:	681a      	ldr	r2, [r3, #0]
 800124c:	2101      	movs	r1, #1
 800124e:	697b      	ldr	r3, [r7, #20]
 8001250:	fa01 f303 	lsl.w	r3, r1, r3
 8001254:	4013      	ands	r3, r2
 8001256:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	2b00      	cmp	r3, #0
 800125c:	f000 8140 	beq.w	80014e0 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	685b      	ldr	r3, [r3, #4]
 8001264:	f003 0303 	and.w	r3, r3, #3
 8001268:	2b01      	cmp	r3, #1
 800126a:	d005      	beq.n	8001278 <HAL_GPIO_Init+0x40>
 800126c:	683b      	ldr	r3, [r7, #0]
 800126e:	685b      	ldr	r3, [r3, #4]
 8001270:	f003 0303 	and.w	r3, r3, #3
 8001274:	2b02      	cmp	r3, #2
 8001276:	d130      	bne.n	80012da <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	689b      	ldr	r3, [r3, #8]
 800127c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800127e:	697b      	ldr	r3, [r7, #20]
 8001280:	005b      	lsls	r3, r3, #1
 8001282:	2203      	movs	r2, #3
 8001284:	fa02 f303 	lsl.w	r3, r2, r3
 8001288:	43db      	mvns	r3, r3
 800128a:	693a      	ldr	r2, [r7, #16]
 800128c:	4013      	ands	r3, r2
 800128e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001290:	683b      	ldr	r3, [r7, #0]
 8001292:	68da      	ldr	r2, [r3, #12]
 8001294:	697b      	ldr	r3, [r7, #20]
 8001296:	005b      	lsls	r3, r3, #1
 8001298:	fa02 f303 	lsl.w	r3, r2, r3
 800129c:	693a      	ldr	r2, [r7, #16]
 800129e:	4313      	orrs	r3, r2
 80012a0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	693a      	ldr	r2, [r7, #16]
 80012a6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	685b      	ldr	r3, [r3, #4]
 80012ac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80012ae:	2201      	movs	r2, #1
 80012b0:	697b      	ldr	r3, [r7, #20]
 80012b2:	fa02 f303 	lsl.w	r3, r2, r3
 80012b6:	43db      	mvns	r3, r3
 80012b8:	693a      	ldr	r2, [r7, #16]
 80012ba:	4013      	ands	r3, r2
 80012bc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80012be:	683b      	ldr	r3, [r7, #0]
 80012c0:	685b      	ldr	r3, [r3, #4]
 80012c2:	091b      	lsrs	r3, r3, #4
 80012c4:	f003 0201 	and.w	r2, r3, #1
 80012c8:	697b      	ldr	r3, [r7, #20]
 80012ca:	fa02 f303 	lsl.w	r3, r2, r3
 80012ce:	693a      	ldr	r2, [r7, #16]
 80012d0:	4313      	orrs	r3, r2
 80012d2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	693a      	ldr	r2, [r7, #16]
 80012d8:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80012da:	683b      	ldr	r3, [r7, #0]
 80012dc:	685b      	ldr	r3, [r3, #4]
 80012de:	f003 0303 	and.w	r3, r3, #3
 80012e2:	2b03      	cmp	r3, #3
 80012e4:	d017      	beq.n	8001316 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	68db      	ldr	r3, [r3, #12]
 80012ea:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80012ec:	697b      	ldr	r3, [r7, #20]
 80012ee:	005b      	lsls	r3, r3, #1
 80012f0:	2203      	movs	r2, #3
 80012f2:	fa02 f303 	lsl.w	r3, r2, r3
 80012f6:	43db      	mvns	r3, r3
 80012f8:	693a      	ldr	r2, [r7, #16]
 80012fa:	4013      	ands	r3, r2
 80012fc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80012fe:	683b      	ldr	r3, [r7, #0]
 8001300:	689a      	ldr	r2, [r3, #8]
 8001302:	697b      	ldr	r3, [r7, #20]
 8001304:	005b      	lsls	r3, r3, #1
 8001306:	fa02 f303 	lsl.w	r3, r2, r3
 800130a:	693a      	ldr	r2, [r7, #16]
 800130c:	4313      	orrs	r3, r2
 800130e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	693a      	ldr	r2, [r7, #16]
 8001314:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001316:	683b      	ldr	r3, [r7, #0]
 8001318:	685b      	ldr	r3, [r3, #4]
 800131a:	f003 0303 	and.w	r3, r3, #3
 800131e:	2b02      	cmp	r3, #2
 8001320:	d123      	bne.n	800136a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001322:	697b      	ldr	r3, [r7, #20]
 8001324:	08da      	lsrs	r2, r3, #3
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	3208      	adds	r2, #8
 800132a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800132e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001330:	697b      	ldr	r3, [r7, #20]
 8001332:	f003 0307 	and.w	r3, r3, #7
 8001336:	009b      	lsls	r3, r3, #2
 8001338:	220f      	movs	r2, #15
 800133a:	fa02 f303 	lsl.w	r3, r2, r3
 800133e:	43db      	mvns	r3, r3
 8001340:	693a      	ldr	r2, [r7, #16]
 8001342:	4013      	ands	r3, r2
 8001344:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001346:	683b      	ldr	r3, [r7, #0]
 8001348:	691a      	ldr	r2, [r3, #16]
 800134a:	697b      	ldr	r3, [r7, #20]
 800134c:	f003 0307 	and.w	r3, r3, #7
 8001350:	009b      	lsls	r3, r3, #2
 8001352:	fa02 f303 	lsl.w	r3, r2, r3
 8001356:	693a      	ldr	r2, [r7, #16]
 8001358:	4313      	orrs	r3, r2
 800135a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800135c:	697b      	ldr	r3, [r7, #20]
 800135e:	08da      	lsrs	r2, r3, #3
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	3208      	adds	r2, #8
 8001364:	6939      	ldr	r1, [r7, #16]
 8001366:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001370:	697b      	ldr	r3, [r7, #20]
 8001372:	005b      	lsls	r3, r3, #1
 8001374:	2203      	movs	r2, #3
 8001376:	fa02 f303 	lsl.w	r3, r2, r3
 800137a:	43db      	mvns	r3, r3
 800137c:	693a      	ldr	r2, [r7, #16]
 800137e:	4013      	ands	r3, r2
 8001380:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001382:	683b      	ldr	r3, [r7, #0]
 8001384:	685b      	ldr	r3, [r3, #4]
 8001386:	f003 0203 	and.w	r2, r3, #3
 800138a:	697b      	ldr	r3, [r7, #20]
 800138c:	005b      	lsls	r3, r3, #1
 800138e:	fa02 f303 	lsl.w	r3, r2, r3
 8001392:	693a      	ldr	r2, [r7, #16]
 8001394:	4313      	orrs	r3, r2
 8001396:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	693a      	ldr	r2, [r7, #16]
 800139c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800139e:	683b      	ldr	r3, [r7, #0]
 80013a0:	685b      	ldr	r3, [r3, #4]
 80013a2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	f000 809a 	beq.w	80014e0 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013ac:	4b55      	ldr	r3, [pc, #340]	; (8001504 <HAL_GPIO_Init+0x2cc>)
 80013ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013b0:	4a54      	ldr	r2, [pc, #336]	; (8001504 <HAL_GPIO_Init+0x2cc>)
 80013b2:	f043 0301 	orr.w	r3, r3, #1
 80013b6:	6613      	str	r3, [r2, #96]	; 0x60
 80013b8:	4b52      	ldr	r3, [pc, #328]	; (8001504 <HAL_GPIO_Init+0x2cc>)
 80013ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013bc:	f003 0301 	and.w	r3, r3, #1
 80013c0:	60bb      	str	r3, [r7, #8]
 80013c2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80013c4:	4a50      	ldr	r2, [pc, #320]	; (8001508 <HAL_GPIO_Init+0x2d0>)
 80013c6:	697b      	ldr	r3, [r7, #20]
 80013c8:	089b      	lsrs	r3, r3, #2
 80013ca:	3302      	adds	r3, #2
 80013cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013d0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80013d2:	697b      	ldr	r3, [r7, #20]
 80013d4:	f003 0303 	and.w	r3, r3, #3
 80013d8:	009b      	lsls	r3, r3, #2
 80013da:	220f      	movs	r2, #15
 80013dc:	fa02 f303 	lsl.w	r3, r2, r3
 80013e0:	43db      	mvns	r3, r3
 80013e2:	693a      	ldr	r2, [r7, #16]
 80013e4:	4013      	ands	r3, r2
 80013e6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80013ee:	d013      	beq.n	8001418 <HAL_GPIO_Init+0x1e0>
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	4a46      	ldr	r2, [pc, #280]	; (800150c <HAL_GPIO_Init+0x2d4>)
 80013f4:	4293      	cmp	r3, r2
 80013f6:	d00d      	beq.n	8001414 <HAL_GPIO_Init+0x1dc>
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	4a45      	ldr	r2, [pc, #276]	; (8001510 <HAL_GPIO_Init+0x2d8>)
 80013fc:	4293      	cmp	r3, r2
 80013fe:	d007      	beq.n	8001410 <HAL_GPIO_Init+0x1d8>
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	4a44      	ldr	r2, [pc, #272]	; (8001514 <HAL_GPIO_Init+0x2dc>)
 8001404:	4293      	cmp	r3, r2
 8001406:	d101      	bne.n	800140c <HAL_GPIO_Init+0x1d4>
 8001408:	2303      	movs	r3, #3
 800140a:	e006      	b.n	800141a <HAL_GPIO_Init+0x1e2>
 800140c:	2307      	movs	r3, #7
 800140e:	e004      	b.n	800141a <HAL_GPIO_Init+0x1e2>
 8001410:	2302      	movs	r3, #2
 8001412:	e002      	b.n	800141a <HAL_GPIO_Init+0x1e2>
 8001414:	2301      	movs	r3, #1
 8001416:	e000      	b.n	800141a <HAL_GPIO_Init+0x1e2>
 8001418:	2300      	movs	r3, #0
 800141a:	697a      	ldr	r2, [r7, #20]
 800141c:	f002 0203 	and.w	r2, r2, #3
 8001420:	0092      	lsls	r2, r2, #2
 8001422:	4093      	lsls	r3, r2
 8001424:	693a      	ldr	r2, [r7, #16]
 8001426:	4313      	orrs	r3, r2
 8001428:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800142a:	4937      	ldr	r1, [pc, #220]	; (8001508 <HAL_GPIO_Init+0x2d0>)
 800142c:	697b      	ldr	r3, [r7, #20]
 800142e:	089b      	lsrs	r3, r3, #2
 8001430:	3302      	adds	r3, #2
 8001432:	693a      	ldr	r2, [r7, #16]
 8001434:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001438:	4b37      	ldr	r3, [pc, #220]	; (8001518 <HAL_GPIO_Init+0x2e0>)
 800143a:	689b      	ldr	r3, [r3, #8]
 800143c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	43db      	mvns	r3, r3
 8001442:	693a      	ldr	r2, [r7, #16]
 8001444:	4013      	ands	r3, r2
 8001446:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	685b      	ldr	r3, [r3, #4]
 800144c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001450:	2b00      	cmp	r3, #0
 8001452:	d003      	beq.n	800145c <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8001454:	693a      	ldr	r2, [r7, #16]
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	4313      	orrs	r3, r2
 800145a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800145c:	4a2e      	ldr	r2, [pc, #184]	; (8001518 <HAL_GPIO_Init+0x2e0>)
 800145e:	693b      	ldr	r3, [r7, #16]
 8001460:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001462:	4b2d      	ldr	r3, [pc, #180]	; (8001518 <HAL_GPIO_Init+0x2e0>)
 8001464:	68db      	ldr	r3, [r3, #12]
 8001466:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	43db      	mvns	r3, r3
 800146c:	693a      	ldr	r2, [r7, #16]
 800146e:	4013      	ands	r3, r2
 8001470:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001472:	683b      	ldr	r3, [r7, #0]
 8001474:	685b      	ldr	r3, [r3, #4]
 8001476:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800147a:	2b00      	cmp	r3, #0
 800147c:	d003      	beq.n	8001486 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 800147e:	693a      	ldr	r2, [r7, #16]
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	4313      	orrs	r3, r2
 8001484:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001486:	4a24      	ldr	r2, [pc, #144]	; (8001518 <HAL_GPIO_Init+0x2e0>)
 8001488:	693b      	ldr	r3, [r7, #16]
 800148a:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800148c:	4b22      	ldr	r3, [pc, #136]	; (8001518 <HAL_GPIO_Init+0x2e0>)
 800148e:	685b      	ldr	r3, [r3, #4]
 8001490:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	43db      	mvns	r3, r3
 8001496:	693a      	ldr	r2, [r7, #16]
 8001498:	4013      	ands	r3, r2
 800149a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800149c:	683b      	ldr	r3, [r7, #0]
 800149e:	685b      	ldr	r3, [r3, #4]
 80014a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d003      	beq.n	80014b0 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 80014a8:	693a      	ldr	r2, [r7, #16]
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	4313      	orrs	r3, r2
 80014ae:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80014b0:	4a19      	ldr	r2, [pc, #100]	; (8001518 <HAL_GPIO_Init+0x2e0>)
 80014b2:	693b      	ldr	r3, [r7, #16]
 80014b4:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80014b6:	4b18      	ldr	r3, [pc, #96]	; (8001518 <HAL_GPIO_Init+0x2e0>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	43db      	mvns	r3, r3
 80014c0:	693a      	ldr	r2, [r7, #16]
 80014c2:	4013      	ands	r3, r2
 80014c4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80014c6:	683b      	ldr	r3, [r7, #0]
 80014c8:	685b      	ldr	r3, [r3, #4]
 80014ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d003      	beq.n	80014da <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 80014d2:	693a      	ldr	r2, [r7, #16]
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	4313      	orrs	r3, r2
 80014d8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80014da:	4a0f      	ldr	r2, [pc, #60]	; (8001518 <HAL_GPIO_Init+0x2e0>)
 80014dc:	693b      	ldr	r3, [r7, #16]
 80014de:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80014e0:	697b      	ldr	r3, [r7, #20]
 80014e2:	3301      	adds	r3, #1
 80014e4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014e6:	683b      	ldr	r3, [r7, #0]
 80014e8:	681a      	ldr	r2, [r3, #0]
 80014ea:	697b      	ldr	r3, [r7, #20]
 80014ec:	fa22 f303 	lsr.w	r3, r2, r3
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	f47f aea9 	bne.w	8001248 <HAL_GPIO_Init+0x10>
  }
}
 80014f6:	bf00      	nop
 80014f8:	bf00      	nop
 80014fa:	371c      	adds	r7, #28
 80014fc:	46bd      	mov	sp, r7
 80014fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001502:	4770      	bx	lr
 8001504:	40021000 	.word	0x40021000
 8001508:	40010000 	.word	0x40010000
 800150c:	48000400 	.word	0x48000400
 8001510:	48000800 	.word	0x48000800
 8001514:	48000c00 	.word	0x48000c00
 8001518:	40010400 	.word	0x40010400

0800151c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800151c:	b480      	push	{r7}
 800151e:	b083      	sub	sp, #12
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
 8001524:	460b      	mov	r3, r1
 8001526:	807b      	strh	r3, [r7, #2]
 8001528:	4613      	mov	r3, r2
 800152a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800152c:	787b      	ldrb	r3, [r7, #1]
 800152e:	2b00      	cmp	r3, #0
 8001530:	d003      	beq.n	800153a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001532:	887a      	ldrh	r2, [r7, #2]
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001538:	e002      	b.n	8001540 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800153a:	887a      	ldrh	r2, [r7, #2]
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001540:	bf00      	nop
 8001542:	370c      	adds	r7, #12
 8001544:	46bd      	mov	sp, r7
 8001546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154a:	4770      	bx	lr

0800154c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800154c:	b480      	push	{r7}
 800154e:	b085      	sub	sp, #20
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
 8001554:	460b      	mov	r3, r1
 8001556:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	695b      	ldr	r3, [r3, #20]
 800155c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800155e:	887a      	ldrh	r2, [r7, #2]
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	4013      	ands	r3, r2
 8001564:	041a      	lsls	r2, r3, #16
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	43d9      	mvns	r1, r3
 800156a:	887b      	ldrh	r3, [r7, #2]
 800156c:	400b      	ands	r3, r1
 800156e:	431a      	orrs	r2, r3
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	619a      	str	r2, [r3, #24]
}
 8001574:	bf00      	nop
 8001576:	3714      	adds	r7, #20
 8001578:	46bd      	mov	sp, r7
 800157a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157e:	4770      	bx	lr

08001580 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001580:	b480      	push	{r7}
 8001582:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001584:	4b04      	ldr	r3, [pc, #16]	; (8001598 <HAL_PWREx_GetVoltageRange+0x18>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800158c:	4618      	mov	r0, r3
 800158e:	46bd      	mov	sp, r7
 8001590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001594:	4770      	bx	lr
 8001596:	bf00      	nop
 8001598:	40007000 	.word	0x40007000

0800159c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800159c:	b480      	push	{r7}
 800159e:	b085      	sub	sp, #20
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80015aa:	d130      	bne.n	800160e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80015ac:	4b23      	ldr	r3, [pc, #140]	; (800163c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80015b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80015b8:	d038      	beq.n	800162c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80015ba:	4b20      	ldr	r3, [pc, #128]	; (800163c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80015c2:	4a1e      	ldr	r2, [pc, #120]	; (800163c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80015c4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80015c8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80015ca:	4b1d      	ldr	r3, [pc, #116]	; (8001640 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	2232      	movs	r2, #50	; 0x32
 80015d0:	fb02 f303 	mul.w	r3, r2, r3
 80015d4:	4a1b      	ldr	r2, [pc, #108]	; (8001644 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80015d6:	fba2 2303 	umull	r2, r3, r2, r3
 80015da:	0c9b      	lsrs	r3, r3, #18
 80015dc:	3301      	adds	r3, #1
 80015de:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80015e0:	e002      	b.n	80015e8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	3b01      	subs	r3, #1
 80015e6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80015e8:	4b14      	ldr	r3, [pc, #80]	; (800163c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80015ea:	695b      	ldr	r3, [r3, #20]
 80015ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80015f4:	d102      	bne.n	80015fc <HAL_PWREx_ControlVoltageScaling+0x60>
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d1f2      	bne.n	80015e2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80015fc:	4b0f      	ldr	r3, [pc, #60]	; (800163c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80015fe:	695b      	ldr	r3, [r3, #20]
 8001600:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001604:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001608:	d110      	bne.n	800162c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800160a:	2303      	movs	r3, #3
 800160c:	e00f      	b.n	800162e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800160e:	4b0b      	ldr	r3, [pc, #44]	; (800163c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001616:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800161a:	d007      	beq.n	800162c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800161c:	4b07      	ldr	r3, [pc, #28]	; (800163c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001624:	4a05      	ldr	r2, [pc, #20]	; (800163c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001626:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800162a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800162c:	2300      	movs	r3, #0
}
 800162e:	4618      	mov	r0, r3
 8001630:	3714      	adds	r7, #20
 8001632:	46bd      	mov	sp, r7
 8001634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001638:	4770      	bx	lr
 800163a:	bf00      	nop
 800163c:	40007000 	.word	0x40007000
 8001640:	20000000 	.word	0x20000000
 8001644:	431bde83 	.word	0x431bde83

08001648 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b08a      	sub	sp, #40	; 0x28
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	2b00      	cmp	r3, #0
 8001654:	d102      	bne.n	800165c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001656:	2301      	movs	r3, #1
 8001658:	f000 bc4f 	b.w	8001efa <HAL_RCC_OscConfig+0x8b2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800165c:	4b97      	ldr	r3, [pc, #604]	; (80018bc <HAL_RCC_OscConfig+0x274>)
 800165e:	689b      	ldr	r3, [r3, #8]
 8001660:	f003 030c 	and.w	r3, r3, #12
 8001664:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001666:	4b95      	ldr	r3, [pc, #596]	; (80018bc <HAL_RCC_OscConfig+0x274>)
 8001668:	68db      	ldr	r3, [r3, #12]
 800166a:	f003 0303 	and.w	r3, r3, #3
 800166e:	61fb      	str	r3, [r7, #28]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	f003 0310 	and.w	r3, r3, #16
 8001678:	2b00      	cmp	r3, #0
 800167a:	f000 80e6 	beq.w	800184a <HAL_RCC_OscConfig+0x202>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800167e:	6a3b      	ldr	r3, [r7, #32]
 8001680:	2b00      	cmp	r3, #0
 8001682:	d007      	beq.n	8001694 <HAL_RCC_OscConfig+0x4c>
 8001684:	6a3b      	ldr	r3, [r7, #32]
 8001686:	2b0c      	cmp	r3, #12
 8001688:	f040 808d 	bne.w	80017a6 <HAL_RCC_OscConfig+0x15e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800168c:	69fb      	ldr	r3, [r7, #28]
 800168e:	2b01      	cmp	r3, #1
 8001690:	f040 8089 	bne.w	80017a6 <HAL_RCC_OscConfig+0x15e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001694:	4b89      	ldr	r3, [pc, #548]	; (80018bc <HAL_RCC_OscConfig+0x274>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	f003 0302 	and.w	r3, r3, #2
 800169c:	2b00      	cmp	r3, #0
 800169e:	d006      	beq.n	80016ae <HAL_RCC_OscConfig+0x66>
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	69db      	ldr	r3, [r3, #28]
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d102      	bne.n	80016ae <HAL_RCC_OscConfig+0x66>
      {
        return HAL_ERROR;
 80016a8:	2301      	movs	r3, #1
 80016aa:	f000 bc26 	b.w	8001efa <HAL_RCC_OscConfig+0x8b2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80016b2:	4b82      	ldr	r3, [pc, #520]	; (80018bc <HAL_RCC_OscConfig+0x274>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f003 0308 	and.w	r3, r3, #8
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d004      	beq.n	80016c8 <HAL_RCC_OscConfig+0x80>
 80016be:	4b7f      	ldr	r3, [pc, #508]	; (80018bc <HAL_RCC_OscConfig+0x274>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80016c6:	e005      	b.n	80016d4 <HAL_RCC_OscConfig+0x8c>
 80016c8:	4b7c      	ldr	r3, [pc, #496]	; (80018bc <HAL_RCC_OscConfig+0x274>)
 80016ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80016ce:	091b      	lsrs	r3, r3, #4
 80016d0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80016d4:	4293      	cmp	r3, r2
 80016d6:	d224      	bcs.n	8001722 <HAL_RCC_OscConfig+0xda>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016dc:	4618      	mov	r0, r3
 80016de:	f000 fdd9 	bl	8002294 <RCC_SetFlashLatencyFromMSIRange>
 80016e2:	4603      	mov	r3, r0
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d002      	beq.n	80016ee <HAL_RCC_OscConfig+0xa6>
          {
            return HAL_ERROR;
 80016e8:	2301      	movs	r3, #1
 80016ea:	f000 bc06 	b.w	8001efa <HAL_RCC_OscConfig+0x8b2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80016ee:	4b73      	ldr	r3, [pc, #460]	; (80018bc <HAL_RCC_OscConfig+0x274>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	4a72      	ldr	r2, [pc, #456]	; (80018bc <HAL_RCC_OscConfig+0x274>)
 80016f4:	f043 0308 	orr.w	r3, r3, #8
 80016f8:	6013      	str	r3, [r2, #0]
 80016fa:	4b70      	ldr	r3, [pc, #448]	; (80018bc <HAL_RCC_OscConfig+0x274>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001706:	496d      	ldr	r1, [pc, #436]	; (80018bc <HAL_RCC_OscConfig+0x274>)
 8001708:	4313      	orrs	r3, r2
 800170a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800170c:	4b6b      	ldr	r3, [pc, #428]	; (80018bc <HAL_RCC_OscConfig+0x274>)
 800170e:	685b      	ldr	r3, [r3, #4]
 8001710:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	6a1b      	ldr	r3, [r3, #32]
 8001718:	021b      	lsls	r3, r3, #8
 800171a:	4968      	ldr	r1, [pc, #416]	; (80018bc <HAL_RCC_OscConfig+0x274>)
 800171c:	4313      	orrs	r3, r2
 800171e:	604b      	str	r3, [r1, #4]
 8001720:	e025      	b.n	800176e <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001722:	4b66      	ldr	r3, [pc, #408]	; (80018bc <HAL_RCC_OscConfig+0x274>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	4a65      	ldr	r2, [pc, #404]	; (80018bc <HAL_RCC_OscConfig+0x274>)
 8001728:	f043 0308 	orr.w	r3, r3, #8
 800172c:	6013      	str	r3, [r2, #0]
 800172e:	4b63      	ldr	r3, [pc, #396]	; (80018bc <HAL_RCC_OscConfig+0x274>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800173a:	4960      	ldr	r1, [pc, #384]	; (80018bc <HAL_RCC_OscConfig+0x274>)
 800173c:	4313      	orrs	r3, r2
 800173e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001740:	4b5e      	ldr	r3, [pc, #376]	; (80018bc <HAL_RCC_OscConfig+0x274>)
 8001742:	685b      	ldr	r3, [r3, #4]
 8001744:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	6a1b      	ldr	r3, [r3, #32]
 800174c:	021b      	lsls	r3, r3, #8
 800174e:	495b      	ldr	r1, [pc, #364]	; (80018bc <HAL_RCC_OscConfig+0x274>)
 8001750:	4313      	orrs	r3, r2
 8001752:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001754:	6a3b      	ldr	r3, [r7, #32]
 8001756:	2b00      	cmp	r3, #0
 8001758:	d109      	bne.n	800176e <HAL_RCC_OscConfig+0x126>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800175e:	4618      	mov	r0, r3
 8001760:	f000 fd98 	bl	8002294 <RCC_SetFlashLatencyFromMSIRange>
 8001764:	4603      	mov	r3, r0
 8001766:	2b00      	cmp	r3, #0
 8001768:	d001      	beq.n	800176e <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 800176a:	2301      	movs	r3, #1
 800176c:	e3c5      	b.n	8001efa <HAL_RCC_OscConfig+0x8b2>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800176e:	f000 fccd 	bl	800210c <HAL_RCC_GetSysClockFreq>
 8001772:	4602      	mov	r2, r0
 8001774:	4b51      	ldr	r3, [pc, #324]	; (80018bc <HAL_RCC_OscConfig+0x274>)
 8001776:	689b      	ldr	r3, [r3, #8]
 8001778:	091b      	lsrs	r3, r3, #4
 800177a:	f003 030f 	and.w	r3, r3, #15
 800177e:	4950      	ldr	r1, [pc, #320]	; (80018c0 <HAL_RCC_OscConfig+0x278>)
 8001780:	5ccb      	ldrb	r3, [r1, r3]
 8001782:	f003 031f 	and.w	r3, r3, #31
 8001786:	fa22 f303 	lsr.w	r3, r2, r3
 800178a:	4a4e      	ldr	r2, [pc, #312]	; (80018c4 <HAL_RCC_OscConfig+0x27c>)
 800178c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800178e:	4b4e      	ldr	r3, [pc, #312]	; (80018c8 <HAL_RCC_OscConfig+0x280>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	4618      	mov	r0, r3
 8001794:	f7ff fb34 	bl	8000e00 <HAL_InitTick>
 8001798:	4603      	mov	r3, r0
 800179a:	75fb      	strb	r3, [r7, #23]
        if(status != HAL_OK)
 800179c:	7dfb      	ldrb	r3, [r7, #23]
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d052      	beq.n	8001848 <HAL_RCC_OscConfig+0x200>
        {
          return status;
 80017a2:	7dfb      	ldrb	r3, [r7, #23]
 80017a4:	e3a9      	b.n	8001efa <HAL_RCC_OscConfig+0x8b2>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	69db      	ldr	r3, [r3, #28]
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d032      	beq.n	8001814 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80017ae:	4b43      	ldr	r3, [pc, #268]	; (80018bc <HAL_RCC_OscConfig+0x274>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	4a42      	ldr	r2, [pc, #264]	; (80018bc <HAL_RCC_OscConfig+0x274>)
 80017b4:	f043 0301 	orr.w	r3, r3, #1
 80017b8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80017ba:	f7ff fb71 	bl	8000ea0 <HAL_GetTick>
 80017be:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80017c0:	e008      	b.n	80017d4 <HAL_RCC_OscConfig+0x18c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80017c2:	f7ff fb6d 	bl	8000ea0 <HAL_GetTick>
 80017c6:	4602      	mov	r2, r0
 80017c8:	69bb      	ldr	r3, [r7, #24]
 80017ca:	1ad3      	subs	r3, r2, r3
 80017cc:	2b02      	cmp	r3, #2
 80017ce:	d901      	bls.n	80017d4 <HAL_RCC_OscConfig+0x18c>
          {
            return HAL_TIMEOUT;
 80017d0:	2303      	movs	r3, #3
 80017d2:	e392      	b.n	8001efa <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80017d4:	4b39      	ldr	r3, [pc, #228]	; (80018bc <HAL_RCC_OscConfig+0x274>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f003 0302 	and.w	r3, r3, #2
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d0f0      	beq.n	80017c2 <HAL_RCC_OscConfig+0x17a>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80017e0:	4b36      	ldr	r3, [pc, #216]	; (80018bc <HAL_RCC_OscConfig+0x274>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	4a35      	ldr	r2, [pc, #212]	; (80018bc <HAL_RCC_OscConfig+0x274>)
 80017e6:	f043 0308 	orr.w	r3, r3, #8
 80017ea:	6013      	str	r3, [r2, #0]
 80017ec:	4b33      	ldr	r3, [pc, #204]	; (80018bc <HAL_RCC_OscConfig+0x274>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017f8:	4930      	ldr	r1, [pc, #192]	; (80018bc <HAL_RCC_OscConfig+0x274>)
 80017fa:	4313      	orrs	r3, r2
 80017fc:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80017fe:	4b2f      	ldr	r3, [pc, #188]	; (80018bc <HAL_RCC_OscConfig+0x274>)
 8001800:	685b      	ldr	r3, [r3, #4]
 8001802:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	6a1b      	ldr	r3, [r3, #32]
 800180a:	021b      	lsls	r3, r3, #8
 800180c:	492b      	ldr	r1, [pc, #172]	; (80018bc <HAL_RCC_OscConfig+0x274>)
 800180e:	4313      	orrs	r3, r2
 8001810:	604b      	str	r3, [r1, #4]
 8001812:	e01a      	b.n	800184a <HAL_RCC_OscConfig+0x202>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001814:	4b29      	ldr	r3, [pc, #164]	; (80018bc <HAL_RCC_OscConfig+0x274>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	4a28      	ldr	r2, [pc, #160]	; (80018bc <HAL_RCC_OscConfig+0x274>)
 800181a:	f023 0301 	bic.w	r3, r3, #1
 800181e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001820:	f7ff fb3e 	bl	8000ea0 <HAL_GetTick>
 8001824:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001826:	e008      	b.n	800183a <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001828:	f7ff fb3a 	bl	8000ea0 <HAL_GetTick>
 800182c:	4602      	mov	r2, r0
 800182e:	69bb      	ldr	r3, [r7, #24]
 8001830:	1ad3      	subs	r3, r2, r3
 8001832:	2b02      	cmp	r3, #2
 8001834:	d901      	bls.n	800183a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001836:	2303      	movs	r3, #3
 8001838:	e35f      	b.n	8001efa <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800183a:	4b20      	ldr	r3, [pc, #128]	; (80018bc <HAL_RCC_OscConfig+0x274>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	f003 0302 	and.w	r3, r3, #2
 8001842:	2b00      	cmp	r3, #0
 8001844:	d1f0      	bne.n	8001828 <HAL_RCC_OscConfig+0x1e0>
 8001846:	e000      	b.n	800184a <HAL_RCC_OscConfig+0x202>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001848:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f003 0301 	and.w	r3, r3, #1
 8001852:	2b00      	cmp	r3, #0
 8001854:	d073      	beq.n	800193e <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001856:	6a3b      	ldr	r3, [r7, #32]
 8001858:	2b08      	cmp	r3, #8
 800185a:	d005      	beq.n	8001868 <HAL_RCC_OscConfig+0x220>
 800185c:	6a3b      	ldr	r3, [r7, #32]
 800185e:	2b0c      	cmp	r3, #12
 8001860:	d10e      	bne.n	8001880 <HAL_RCC_OscConfig+0x238>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001862:	69fb      	ldr	r3, [r7, #28]
 8001864:	2b03      	cmp	r3, #3
 8001866:	d10b      	bne.n	8001880 <HAL_RCC_OscConfig+0x238>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001868:	4b14      	ldr	r3, [pc, #80]	; (80018bc <HAL_RCC_OscConfig+0x274>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001870:	2b00      	cmp	r3, #0
 8001872:	d063      	beq.n	800193c <HAL_RCC_OscConfig+0x2f4>
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	685b      	ldr	r3, [r3, #4]
 8001878:	2b00      	cmp	r3, #0
 800187a:	d15f      	bne.n	800193c <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 800187c:	2301      	movs	r3, #1
 800187e:	e33c      	b.n	8001efa <HAL_RCC_OscConfig+0x8b2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	685b      	ldr	r3, [r3, #4]
 8001884:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001888:	d106      	bne.n	8001898 <HAL_RCC_OscConfig+0x250>
 800188a:	4b0c      	ldr	r3, [pc, #48]	; (80018bc <HAL_RCC_OscConfig+0x274>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	4a0b      	ldr	r2, [pc, #44]	; (80018bc <HAL_RCC_OscConfig+0x274>)
 8001890:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001894:	6013      	str	r3, [r2, #0]
 8001896:	e025      	b.n	80018e4 <HAL_RCC_OscConfig+0x29c>
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	685b      	ldr	r3, [r3, #4]
 800189c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80018a0:	d114      	bne.n	80018cc <HAL_RCC_OscConfig+0x284>
 80018a2:	4b06      	ldr	r3, [pc, #24]	; (80018bc <HAL_RCC_OscConfig+0x274>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	4a05      	ldr	r2, [pc, #20]	; (80018bc <HAL_RCC_OscConfig+0x274>)
 80018a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80018ac:	6013      	str	r3, [r2, #0]
 80018ae:	4b03      	ldr	r3, [pc, #12]	; (80018bc <HAL_RCC_OscConfig+0x274>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	4a02      	ldr	r2, [pc, #8]	; (80018bc <HAL_RCC_OscConfig+0x274>)
 80018b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018b8:	6013      	str	r3, [r2, #0]
 80018ba:	e013      	b.n	80018e4 <HAL_RCC_OscConfig+0x29c>
 80018bc:	40021000 	.word	0x40021000
 80018c0:	08004cd4 	.word	0x08004cd4
 80018c4:	20000000 	.word	0x20000000
 80018c8:	20000004 	.word	0x20000004
 80018cc:	4b8f      	ldr	r3, [pc, #572]	; (8001b0c <HAL_RCC_OscConfig+0x4c4>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	4a8e      	ldr	r2, [pc, #568]	; (8001b0c <HAL_RCC_OscConfig+0x4c4>)
 80018d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018d6:	6013      	str	r3, [r2, #0]
 80018d8:	4b8c      	ldr	r3, [pc, #560]	; (8001b0c <HAL_RCC_OscConfig+0x4c4>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	4a8b      	ldr	r2, [pc, #556]	; (8001b0c <HAL_RCC_OscConfig+0x4c4>)
 80018de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80018e2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	685b      	ldr	r3, [r3, #4]
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d013      	beq.n	8001914 <HAL_RCC_OscConfig+0x2cc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018ec:	f7ff fad8 	bl	8000ea0 <HAL_GetTick>
 80018f0:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80018f2:	e008      	b.n	8001906 <HAL_RCC_OscConfig+0x2be>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80018f4:	f7ff fad4 	bl	8000ea0 <HAL_GetTick>
 80018f8:	4602      	mov	r2, r0
 80018fa:	69bb      	ldr	r3, [r7, #24]
 80018fc:	1ad3      	subs	r3, r2, r3
 80018fe:	2b64      	cmp	r3, #100	; 0x64
 8001900:	d901      	bls.n	8001906 <HAL_RCC_OscConfig+0x2be>
          {
            return HAL_TIMEOUT;
 8001902:	2303      	movs	r3, #3
 8001904:	e2f9      	b.n	8001efa <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001906:	4b81      	ldr	r3, [pc, #516]	; (8001b0c <HAL_RCC_OscConfig+0x4c4>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800190e:	2b00      	cmp	r3, #0
 8001910:	d0f0      	beq.n	80018f4 <HAL_RCC_OscConfig+0x2ac>
 8001912:	e014      	b.n	800193e <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001914:	f7ff fac4 	bl	8000ea0 <HAL_GetTick>
 8001918:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800191a:	e008      	b.n	800192e <HAL_RCC_OscConfig+0x2e6>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800191c:	f7ff fac0 	bl	8000ea0 <HAL_GetTick>
 8001920:	4602      	mov	r2, r0
 8001922:	69bb      	ldr	r3, [r7, #24]
 8001924:	1ad3      	subs	r3, r2, r3
 8001926:	2b64      	cmp	r3, #100	; 0x64
 8001928:	d901      	bls.n	800192e <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 800192a:	2303      	movs	r3, #3
 800192c:	e2e5      	b.n	8001efa <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800192e:	4b77      	ldr	r3, [pc, #476]	; (8001b0c <HAL_RCC_OscConfig+0x4c4>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001936:	2b00      	cmp	r3, #0
 8001938:	d1f0      	bne.n	800191c <HAL_RCC_OscConfig+0x2d4>
 800193a:	e000      	b.n	800193e <HAL_RCC_OscConfig+0x2f6>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800193c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f003 0302 	and.w	r3, r3, #2
 8001946:	2b00      	cmp	r3, #0
 8001948:	d060      	beq.n	8001a0c <HAL_RCC_OscConfig+0x3c4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800194a:	6a3b      	ldr	r3, [r7, #32]
 800194c:	2b04      	cmp	r3, #4
 800194e:	d005      	beq.n	800195c <HAL_RCC_OscConfig+0x314>
 8001950:	6a3b      	ldr	r3, [r7, #32]
 8001952:	2b0c      	cmp	r3, #12
 8001954:	d119      	bne.n	800198a <HAL_RCC_OscConfig+0x342>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001956:	69fb      	ldr	r3, [r7, #28]
 8001958:	2b02      	cmp	r3, #2
 800195a:	d116      	bne.n	800198a <HAL_RCC_OscConfig+0x342>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800195c:	4b6b      	ldr	r3, [pc, #428]	; (8001b0c <HAL_RCC_OscConfig+0x4c4>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001964:	2b00      	cmp	r3, #0
 8001966:	d005      	beq.n	8001974 <HAL_RCC_OscConfig+0x32c>
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	68db      	ldr	r3, [r3, #12]
 800196c:	2b00      	cmp	r3, #0
 800196e:	d101      	bne.n	8001974 <HAL_RCC_OscConfig+0x32c>
      {
        return HAL_ERROR;
 8001970:	2301      	movs	r3, #1
 8001972:	e2c2      	b.n	8001efa <HAL_RCC_OscConfig+0x8b2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001974:	4b65      	ldr	r3, [pc, #404]	; (8001b0c <HAL_RCC_OscConfig+0x4c4>)
 8001976:	685b      	ldr	r3, [r3, #4]
 8001978:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	691b      	ldr	r3, [r3, #16]
 8001980:	061b      	lsls	r3, r3, #24
 8001982:	4962      	ldr	r1, [pc, #392]	; (8001b0c <HAL_RCC_OscConfig+0x4c4>)
 8001984:	4313      	orrs	r3, r2
 8001986:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001988:	e040      	b.n	8001a0c <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	68db      	ldr	r3, [r3, #12]
 800198e:	2b00      	cmp	r3, #0
 8001990:	d023      	beq.n	80019da <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001992:	4b5e      	ldr	r3, [pc, #376]	; (8001b0c <HAL_RCC_OscConfig+0x4c4>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	4a5d      	ldr	r2, [pc, #372]	; (8001b0c <HAL_RCC_OscConfig+0x4c4>)
 8001998:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800199c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800199e:	f7ff fa7f 	bl	8000ea0 <HAL_GetTick>
 80019a2:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80019a4:	e008      	b.n	80019b8 <HAL_RCC_OscConfig+0x370>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019a6:	f7ff fa7b 	bl	8000ea0 <HAL_GetTick>
 80019aa:	4602      	mov	r2, r0
 80019ac:	69bb      	ldr	r3, [r7, #24]
 80019ae:	1ad3      	subs	r3, r2, r3
 80019b0:	2b02      	cmp	r3, #2
 80019b2:	d901      	bls.n	80019b8 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 80019b4:	2303      	movs	r3, #3
 80019b6:	e2a0      	b.n	8001efa <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80019b8:	4b54      	ldr	r3, [pc, #336]	; (8001b0c <HAL_RCC_OscConfig+0x4c4>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d0f0      	beq.n	80019a6 <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019c4:	4b51      	ldr	r3, [pc, #324]	; (8001b0c <HAL_RCC_OscConfig+0x4c4>)
 80019c6:	685b      	ldr	r3, [r3, #4]
 80019c8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	691b      	ldr	r3, [r3, #16]
 80019d0:	061b      	lsls	r3, r3, #24
 80019d2:	494e      	ldr	r1, [pc, #312]	; (8001b0c <HAL_RCC_OscConfig+0x4c4>)
 80019d4:	4313      	orrs	r3, r2
 80019d6:	604b      	str	r3, [r1, #4]
 80019d8:	e018      	b.n	8001a0c <HAL_RCC_OscConfig+0x3c4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80019da:	4b4c      	ldr	r3, [pc, #304]	; (8001b0c <HAL_RCC_OscConfig+0x4c4>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	4a4b      	ldr	r2, [pc, #300]	; (8001b0c <HAL_RCC_OscConfig+0x4c4>)
 80019e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80019e4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019e6:	f7ff fa5b 	bl	8000ea0 <HAL_GetTick>
 80019ea:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80019ec:	e008      	b.n	8001a00 <HAL_RCC_OscConfig+0x3b8>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019ee:	f7ff fa57 	bl	8000ea0 <HAL_GetTick>
 80019f2:	4602      	mov	r2, r0
 80019f4:	69bb      	ldr	r3, [r7, #24]
 80019f6:	1ad3      	subs	r3, r2, r3
 80019f8:	2b02      	cmp	r3, #2
 80019fa:	d901      	bls.n	8001a00 <HAL_RCC_OscConfig+0x3b8>
          {
            return HAL_TIMEOUT;
 80019fc:	2303      	movs	r3, #3
 80019fe:	e27c      	b.n	8001efa <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001a00:	4b42      	ldr	r3, [pc, #264]	; (8001b0c <HAL_RCC_OscConfig+0x4c4>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d1f0      	bne.n	80019ee <HAL_RCC_OscConfig+0x3a6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f003 0308 	and.w	r3, r3, #8
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	f000 8082 	beq.w	8001b1e <HAL_RCC_OscConfig+0x4d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	695b      	ldr	r3, [r3, #20]
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d05f      	beq.n	8001ae2 <HAL_RCC_OscConfig+0x49a>
    {
#if defined(RCC_CSR_LSIPREDIV)
      uint32_t csr_temp = RCC->CSR;
 8001a22:	4b3a      	ldr	r3, [pc, #232]	; (8001b0c <HAL_RCC_OscConfig+0x4c4>)
 8001a24:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a28:	613b      	str	r3, [r7, #16]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPREDIV))
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	699a      	ldr	r2, [r3, #24]
 8001a2e:	693b      	ldr	r3, [r7, #16]
 8001a30:	f003 0310 	and.w	r3, r3, #16
 8001a34:	429a      	cmp	r2, r3
 8001a36:	d037      	beq.n	8001aa8 <HAL_RCC_OscConfig+0x460>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8001a38:	693b      	ldr	r3, [r7, #16]
 8001a3a:	f003 0302 	and.w	r3, r3, #2
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d006      	beq.n	8001a50 <HAL_RCC_OscConfig+0x408>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8001a42:	693b      	ldr	r3, [r7, #16]
 8001a44:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d101      	bne.n	8001a50 <HAL_RCC_OscConfig+0x408>
        {
           /* If LSIRDY is set while LSION is not enabled,
              LSIPREDIV can't be updated  */
          return HAL_ERROR;
 8001a4c:	2301      	movs	r3, #1
 8001a4e:	e254      	b.n	8001efa <HAL_RCC_OscConfig+0x8b2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPREDIV */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8001a50:	693b      	ldr	r3, [r7, #16]
 8001a52:	f003 0301 	and.w	r3, r3, #1
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d01b      	beq.n	8001a92 <HAL_RCC_OscConfig+0x44a>
        {
          __HAL_RCC_LSI_DISABLE();
 8001a5a:	4b2c      	ldr	r3, [pc, #176]	; (8001b0c <HAL_RCC_OscConfig+0x4c4>)
 8001a5c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a60:	4a2a      	ldr	r2, [pc, #168]	; (8001b0c <HAL_RCC_OscConfig+0x4c4>)
 8001a62:	f023 0301 	bic.w	r3, r3, #1
 8001a66:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001a6a:	f7ff fa19 	bl	8000ea0 <HAL_GetTick>
 8001a6e:	61b8      	str	r0, [r7, #24]

          /* Wait till LSI is disabled */
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001a70:	e008      	b.n	8001a84 <HAL_RCC_OscConfig+0x43c>
          {
            if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a72:	f7ff fa15 	bl	8000ea0 <HAL_GetTick>
 8001a76:	4602      	mov	r2, r0
 8001a78:	69bb      	ldr	r3, [r7, #24]
 8001a7a:	1ad3      	subs	r3, r2, r3
 8001a7c:	2b11      	cmp	r3, #17
 8001a7e:	d901      	bls.n	8001a84 <HAL_RCC_OscConfig+0x43c>
            {
              return HAL_TIMEOUT;
 8001a80:	2303      	movs	r3, #3
 8001a82:	e23a      	b.n	8001efa <HAL_RCC_OscConfig+0x8b2>
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001a84:	4b21      	ldr	r3, [pc, #132]	; (8001b0c <HAL_RCC_OscConfig+0x4c4>)
 8001a86:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a8a:	f003 0302 	and.w	r3, r3, #2
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d1ef      	bne.n	8001a72 <HAL_RCC_OscConfig+0x42a>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
 8001a92:	4b1e      	ldr	r3, [pc, #120]	; (8001b0c <HAL_RCC_OscConfig+0x4c4>)
 8001a94:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a98:	f023 0210 	bic.w	r2, r3, #16
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	699b      	ldr	r3, [r3, #24]
 8001aa0:	491a      	ldr	r1, [pc, #104]	; (8001b0c <HAL_RCC_OscConfig+0x4c4>)
 8001aa2:	4313      	orrs	r3, r2
 8001aa4:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001aa8:	4b18      	ldr	r3, [pc, #96]	; (8001b0c <HAL_RCC_OscConfig+0x4c4>)
 8001aaa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001aae:	4a17      	ldr	r2, [pc, #92]	; (8001b0c <HAL_RCC_OscConfig+0x4c4>)
 8001ab0:	f043 0301 	orr.w	r3, r3, #1
 8001ab4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ab8:	f7ff f9f2 	bl	8000ea0 <HAL_GetTick>
 8001abc:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001abe:	e008      	b.n	8001ad2 <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ac0:	f7ff f9ee 	bl	8000ea0 <HAL_GetTick>
 8001ac4:	4602      	mov	r2, r0
 8001ac6:	69bb      	ldr	r3, [r7, #24]
 8001ac8:	1ad3      	subs	r3, r2, r3
 8001aca:	2b11      	cmp	r3, #17
 8001acc:	d901      	bls.n	8001ad2 <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 8001ace:	2303      	movs	r3, #3
 8001ad0:	e213      	b.n	8001efa <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001ad2:	4b0e      	ldr	r3, [pc, #56]	; (8001b0c <HAL_RCC_OscConfig+0x4c4>)
 8001ad4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ad8:	f003 0302 	and.w	r3, r3, #2
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d0ef      	beq.n	8001ac0 <HAL_RCC_OscConfig+0x478>
 8001ae0:	e01d      	b.n	8001b1e <HAL_RCC_OscConfig+0x4d6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ae2:	4b0a      	ldr	r3, [pc, #40]	; (8001b0c <HAL_RCC_OscConfig+0x4c4>)
 8001ae4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ae8:	4a08      	ldr	r2, [pc, #32]	; (8001b0c <HAL_RCC_OscConfig+0x4c4>)
 8001aea:	f023 0301 	bic.w	r3, r3, #1
 8001aee:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001af2:	f7ff f9d5 	bl	8000ea0 <HAL_GetTick>
 8001af6:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001af8:	e00a      	b.n	8001b10 <HAL_RCC_OscConfig+0x4c8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001afa:	f7ff f9d1 	bl	8000ea0 <HAL_GetTick>
 8001afe:	4602      	mov	r2, r0
 8001b00:	69bb      	ldr	r3, [r7, #24]
 8001b02:	1ad3      	subs	r3, r2, r3
 8001b04:	2b11      	cmp	r3, #17
 8001b06:	d903      	bls.n	8001b10 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_TIMEOUT;
 8001b08:	2303      	movs	r3, #3
 8001b0a:	e1f6      	b.n	8001efa <HAL_RCC_OscConfig+0x8b2>
 8001b0c:	40021000 	.word	0x40021000
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001b10:	4ba9      	ldr	r3, [pc, #676]	; (8001db8 <HAL_RCC_OscConfig+0x770>)
 8001b12:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b16:	f003 0302 	and.w	r3, r3, #2
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d1ed      	bne.n	8001afa <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f003 0304 	and.w	r3, r3, #4
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	f000 80bd 	beq.w	8001ca6 <HAL_RCC_OscConfig+0x65e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001b32:	4ba1      	ldr	r3, [pc, #644]	; (8001db8 <HAL_RCC_OscConfig+0x770>)
 8001b34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d10e      	bne.n	8001b5c <HAL_RCC_OscConfig+0x514>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b3e:	4b9e      	ldr	r3, [pc, #632]	; (8001db8 <HAL_RCC_OscConfig+0x770>)
 8001b40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b42:	4a9d      	ldr	r2, [pc, #628]	; (8001db8 <HAL_RCC_OscConfig+0x770>)
 8001b44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b48:	6593      	str	r3, [r2, #88]	; 0x58
 8001b4a:	4b9b      	ldr	r3, [pc, #620]	; (8001db8 <HAL_RCC_OscConfig+0x770>)
 8001b4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b52:	60fb      	str	r3, [r7, #12]
 8001b54:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001b56:	2301      	movs	r3, #1
 8001b58:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b5c:	4b97      	ldr	r3, [pc, #604]	; (8001dbc <HAL_RCC_OscConfig+0x774>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d118      	bne.n	8001b9a <HAL_RCC_OscConfig+0x552>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001b68:	4b94      	ldr	r3, [pc, #592]	; (8001dbc <HAL_RCC_OscConfig+0x774>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	4a93      	ldr	r2, [pc, #588]	; (8001dbc <HAL_RCC_OscConfig+0x774>)
 8001b6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b72:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b74:	f7ff f994 	bl	8000ea0 <HAL_GetTick>
 8001b78:	61b8      	str	r0, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b7a:	e008      	b.n	8001b8e <HAL_RCC_OscConfig+0x546>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b7c:	f7ff f990 	bl	8000ea0 <HAL_GetTick>
 8001b80:	4602      	mov	r2, r0
 8001b82:	69bb      	ldr	r3, [r7, #24]
 8001b84:	1ad3      	subs	r3, r2, r3
 8001b86:	2b02      	cmp	r3, #2
 8001b88:	d901      	bls.n	8001b8e <HAL_RCC_OscConfig+0x546>
        {
          return HAL_TIMEOUT;
 8001b8a:	2303      	movs	r3, #3
 8001b8c:	e1b5      	b.n	8001efa <HAL_RCC_OscConfig+0x8b2>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b8e:	4b8b      	ldr	r3, [pc, #556]	; (8001dbc <HAL_RCC_OscConfig+0x774>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d0f0      	beq.n	8001b7c <HAL_RCC_OscConfig+0x534>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
#if defined(RCC_BDCR_LSESYSDIS)
    if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	689b      	ldr	r3, [r3, #8]
 8001b9e:	f003 0301 	and.w	r3, r3, #1
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d02c      	beq.n	8001c00 <HAL_RCC_OscConfig+0x5b8>
    {
      /* Set LSESYSDIS bit according to LSE propagation option (enabled or disabled) */
      MODIFY_REG(RCC->BDCR, RCC_BDCR_LSESYSDIS, (RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSDIS));
 8001ba6:	4b84      	ldr	r3, [pc, #528]	; (8001db8 <HAL_RCC_OscConfig+0x770>)
 8001ba8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001bac:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	689b      	ldr	r3, [r3, #8]
 8001bb4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001bb8:	497f      	ldr	r1, [pc, #508]	; (8001db8 <HAL_RCC_OscConfig+0x770>)
 8001bba:	4313      	orrs	r3, r2
 8001bbc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

      if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	689b      	ldr	r3, [r3, #8]
 8001bc4:	f003 0304 	and.w	r3, r3, #4
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d010      	beq.n	8001bee <HAL_RCC_OscConfig+0x5a6>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001bcc:	4b7a      	ldr	r3, [pc, #488]	; (8001db8 <HAL_RCC_OscConfig+0x770>)
 8001bce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001bd2:	4a79      	ldr	r2, [pc, #484]	; (8001db8 <HAL_RCC_OscConfig+0x770>)
 8001bd4:	f043 0304 	orr.w	r3, r3, #4
 8001bd8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001bdc:	4b76      	ldr	r3, [pc, #472]	; (8001db8 <HAL_RCC_OscConfig+0x770>)
 8001bde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001be2:	4a75      	ldr	r2, [pc, #468]	; (8001db8 <HAL_RCC_OscConfig+0x770>)
 8001be4:	f043 0301 	orr.w	r3, r3, #1
 8001be8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001bec:	e018      	b.n	8001c20 <HAL_RCC_OscConfig+0x5d8>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001bee:	4b72      	ldr	r3, [pc, #456]	; (8001db8 <HAL_RCC_OscConfig+0x770>)
 8001bf0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001bf4:	4a70      	ldr	r2, [pc, #448]	; (8001db8 <HAL_RCC_OscConfig+0x770>)
 8001bf6:	f043 0301 	orr.w	r3, r3, #1
 8001bfa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001bfe:	e00f      	b.n	8001c20 <HAL_RCC_OscConfig+0x5d8>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001c00:	4b6d      	ldr	r3, [pc, #436]	; (8001db8 <HAL_RCC_OscConfig+0x770>)
 8001c02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c06:	4a6c      	ldr	r2, [pc, #432]	; (8001db8 <HAL_RCC_OscConfig+0x770>)
 8001c08:	f023 0301 	bic.w	r3, r3, #1
 8001c0c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001c10:	4b69      	ldr	r3, [pc, #420]	; (8001db8 <HAL_RCC_OscConfig+0x770>)
 8001c12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c16:	4a68      	ldr	r2, [pc, #416]	; (8001db8 <HAL_RCC_OscConfig+0x770>)
 8001c18:	f023 0304 	bic.w	r3, r3, #4
 8001c1c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	689b      	ldr	r3, [r3, #8]
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d016      	beq.n	8001c56 <HAL_RCC_OscConfig+0x60e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c28:	f7ff f93a 	bl	8000ea0 <HAL_GetTick>
 8001c2c:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001c2e:	e00a      	b.n	8001c46 <HAL_RCC_OscConfig+0x5fe>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c30:	f7ff f936 	bl	8000ea0 <HAL_GetTick>
 8001c34:	4602      	mov	r2, r0
 8001c36:	69bb      	ldr	r3, [r7, #24]
 8001c38:	1ad3      	subs	r3, r2, r3
 8001c3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c3e:	4293      	cmp	r3, r2
 8001c40:	d901      	bls.n	8001c46 <HAL_RCC_OscConfig+0x5fe>
        {
          return HAL_TIMEOUT;
 8001c42:	2303      	movs	r3, #3
 8001c44:	e159      	b.n	8001efa <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001c46:	4b5c      	ldr	r3, [pc, #368]	; (8001db8 <HAL_RCC_OscConfig+0x770>)
 8001c48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c4c:	f003 0302 	and.w	r3, r3, #2
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d0ed      	beq.n	8001c30 <HAL_RCC_OscConfig+0x5e8>
 8001c54:	e01d      	b.n	8001c92 <HAL_RCC_OscConfig+0x64a>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c56:	f7ff f923 	bl	8000ea0 <HAL_GetTick>
 8001c5a:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001c5c:	e00a      	b.n	8001c74 <HAL_RCC_OscConfig+0x62c>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c5e:	f7ff f91f 	bl	8000ea0 <HAL_GetTick>
 8001c62:	4602      	mov	r2, r0
 8001c64:	69bb      	ldr	r3, [r7, #24]
 8001c66:	1ad3      	subs	r3, r2, r3
 8001c68:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c6c:	4293      	cmp	r3, r2
 8001c6e:	d901      	bls.n	8001c74 <HAL_RCC_OscConfig+0x62c>
        {
          return HAL_TIMEOUT;
 8001c70:	2303      	movs	r3, #3
 8001c72:	e142      	b.n	8001efa <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001c74:	4b50      	ldr	r3, [pc, #320]	; (8001db8 <HAL_RCC_OscConfig+0x770>)
 8001c76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c7a:	f003 0302 	and.w	r3, r3, #2
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d1ed      	bne.n	8001c5e <HAL_RCC_OscConfig+0x616>
        }
      }

#if defined(RCC_BDCR_LSESYSDIS)
      /* By default, stop disabling LSE propagation */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
 8001c82:	4b4d      	ldr	r3, [pc, #308]	; (8001db8 <HAL_RCC_OscConfig+0x770>)
 8001c84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c88:	4a4b      	ldr	r2, [pc, #300]	; (8001db8 <HAL_RCC_OscConfig+0x770>)
 8001c8a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001c8e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001c92:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001c96:	2b01      	cmp	r3, #1
 8001c98:	d105      	bne.n	8001ca6 <HAL_RCC_OscConfig+0x65e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c9a:	4b47      	ldr	r3, [pc, #284]	; (8001db8 <HAL_RCC_OscConfig+0x770>)
 8001c9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c9e:	4a46      	ldr	r2, [pc, #280]	; (8001db8 <HAL_RCC_OscConfig+0x770>)
 8001ca0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ca4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f003 0320 	and.w	r3, r3, #32
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d03c      	beq.n	8001d2c <HAL_RCC_OscConfig+0x6e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d01c      	beq.n	8001cf4 <HAL_RCC_OscConfig+0x6ac>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001cba:	4b3f      	ldr	r3, [pc, #252]	; (8001db8 <HAL_RCC_OscConfig+0x770>)
 8001cbc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001cc0:	4a3d      	ldr	r2, [pc, #244]	; (8001db8 <HAL_RCC_OscConfig+0x770>)
 8001cc2:	f043 0301 	orr.w	r3, r3, #1
 8001cc6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cca:	f7ff f8e9 	bl	8000ea0 <HAL_GetTick>
 8001cce:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001cd0:	e008      	b.n	8001ce4 <HAL_RCC_OscConfig+0x69c>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001cd2:	f7ff f8e5 	bl	8000ea0 <HAL_GetTick>
 8001cd6:	4602      	mov	r2, r0
 8001cd8:	69bb      	ldr	r3, [r7, #24]
 8001cda:	1ad3      	subs	r3, r2, r3
 8001cdc:	2b02      	cmp	r3, #2
 8001cde:	d901      	bls.n	8001ce4 <HAL_RCC_OscConfig+0x69c>
        {
          return HAL_TIMEOUT;
 8001ce0:	2303      	movs	r3, #3
 8001ce2:	e10a      	b.n	8001efa <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001ce4:	4b34      	ldr	r3, [pc, #208]	; (8001db8 <HAL_RCC_OscConfig+0x770>)
 8001ce6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001cea:	f003 0302 	and.w	r3, r3, #2
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d0ef      	beq.n	8001cd2 <HAL_RCC_OscConfig+0x68a>
 8001cf2:	e01b      	b.n	8001d2c <HAL_RCC_OscConfig+0x6e4>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001cf4:	4b30      	ldr	r3, [pc, #192]	; (8001db8 <HAL_RCC_OscConfig+0x770>)
 8001cf6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001cfa:	4a2f      	ldr	r2, [pc, #188]	; (8001db8 <HAL_RCC_OscConfig+0x770>)
 8001cfc:	f023 0301 	bic.w	r3, r3, #1
 8001d00:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d04:	f7ff f8cc 	bl	8000ea0 <HAL_GetTick>
 8001d08:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001d0a:	e008      	b.n	8001d1e <HAL_RCC_OscConfig+0x6d6>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001d0c:	f7ff f8c8 	bl	8000ea0 <HAL_GetTick>
 8001d10:	4602      	mov	r2, r0
 8001d12:	69bb      	ldr	r3, [r7, #24]
 8001d14:	1ad3      	subs	r3, r2, r3
 8001d16:	2b02      	cmp	r3, #2
 8001d18:	d901      	bls.n	8001d1e <HAL_RCC_OscConfig+0x6d6>
        {
          return HAL_TIMEOUT;
 8001d1a:	2303      	movs	r3, #3
 8001d1c:	e0ed      	b.n	8001efa <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001d1e:	4b26      	ldr	r3, [pc, #152]	; (8001db8 <HAL_RCC_OscConfig+0x770>)
 8001d20:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001d24:	f003 0302 	and.w	r3, r3, #2
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d1ef      	bne.n	8001d0c <HAL_RCC_OscConfig+0x6c4>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	f000 80e1 	beq.w	8001ef8 <HAL_RCC_OscConfig+0x8b0>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d3a:	2b02      	cmp	r3, #2
 8001d3c:	f040 80b5 	bne.w	8001eaa <HAL_RCC_OscConfig+0x862>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001d40:	4b1d      	ldr	r3, [pc, #116]	; (8001db8 <HAL_RCC_OscConfig+0x770>)
 8001d42:	68db      	ldr	r3, [r3, #12]
 8001d44:	61fb      	str	r3, [r7, #28]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d46:	69fb      	ldr	r3, [r7, #28]
 8001d48:	f003 0203 	and.w	r2, r3, #3
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d50:	429a      	cmp	r2, r3
 8001d52:	d124      	bne.n	8001d9e <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001d54:	69fb      	ldr	r3, [r7, #28]
 8001d56:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d5e:	3b01      	subs	r3, #1
 8001d60:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d62:	429a      	cmp	r2, r3
 8001d64:	d11b      	bne.n	8001d9e <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001d66:	69fb      	ldr	r3, [r7, #28]
 8001d68:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d70:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001d72:	429a      	cmp	r2, r3
 8001d74:	d113      	bne.n	8001d9e <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001d76:	69fb      	ldr	r3, [r7, #28]
 8001d78:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d80:	085b      	lsrs	r3, r3, #1
 8001d82:	3b01      	subs	r3, #1
 8001d84:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001d86:	429a      	cmp	r2, r3
 8001d88:	d109      	bne.n	8001d9e <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001d8a:	69fb      	ldr	r3, [r7, #28]
 8001d8c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d94:	085b      	lsrs	r3, r3, #1
 8001d96:	3b01      	subs	r3, #1
 8001d98:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001d9a:	429a      	cmp	r2, r3
 8001d9c:	d05f      	beq.n	8001e5e <HAL_RCC_OscConfig+0x816>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001d9e:	6a3b      	ldr	r3, [r7, #32]
 8001da0:	2b0c      	cmp	r3, #12
 8001da2:	d05a      	beq.n	8001e5a <HAL_RCC_OscConfig+0x812>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001da4:	4b04      	ldr	r3, [pc, #16]	; (8001db8 <HAL_RCC_OscConfig+0x770>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	4a03      	ldr	r2, [pc, #12]	; (8001db8 <HAL_RCC_OscConfig+0x770>)
 8001daa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001dae:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001db0:	f7ff f876 	bl	8000ea0 <HAL_GetTick>
 8001db4:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001db6:	e00c      	b.n	8001dd2 <HAL_RCC_OscConfig+0x78a>
 8001db8:	40021000 	.word	0x40021000
 8001dbc:	40007000 	.word	0x40007000
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001dc0:	f7ff f86e 	bl	8000ea0 <HAL_GetTick>
 8001dc4:	4602      	mov	r2, r0
 8001dc6:	69bb      	ldr	r3, [r7, #24]
 8001dc8:	1ad3      	subs	r3, r2, r3
 8001dca:	2b02      	cmp	r3, #2
 8001dcc:	d901      	bls.n	8001dd2 <HAL_RCC_OscConfig+0x78a>
              {
                return HAL_TIMEOUT;
 8001dce:	2303      	movs	r3, #3
 8001dd0:	e093      	b.n	8001efa <HAL_RCC_OscConfig+0x8b2>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001dd2:	4b4c      	ldr	r3, [pc, #304]	; (8001f04 <HAL_RCC_OscConfig+0x8bc>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d1f0      	bne.n	8001dc0 <HAL_RCC_OscConfig+0x778>
                                 RCC_OscInitStruct->PLL.PLLN,
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#else
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001dde:	4b49      	ldr	r3, [pc, #292]	; (8001f04 <HAL_RCC_OscConfig+0x8bc>)
 8001de0:	68da      	ldr	r2, [r3, #12]
 8001de2:	4b49      	ldr	r3, [pc, #292]	; (8001f08 <HAL_RCC_OscConfig+0x8c0>)
 8001de4:	4013      	ands	r3, r2
 8001de6:	687a      	ldr	r2, [r7, #4]
 8001de8:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8001dea:	687a      	ldr	r2, [r7, #4]
 8001dec:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001dee:	3a01      	subs	r2, #1
 8001df0:	0112      	lsls	r2, r2, #4
 8001df2:	4311      	orrs	r1, r2
 8001df4:	687a      	ldr	r2, [r7, #4]
 8001df6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001df8:	0212      	lsls	r2, r2, #8
 8001dfa:	4311      	orrs	r1, r2
 8001dfc:	687a      	ldr	r2, [r7, #4]
 8001dfe:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001e00:	0852      	lsrs	r2, r2, #1
 8001e02:	3a01      	subs	r2, #1
 8001e04:	0552      	lsls	r2, r2, #21
 8001e06:	4311      	orrs	r1, r2
 8001e08:	687a      	ldr	r2, [r7, #4]
 8001e0a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001e0c:	0852      	lsrs	r2, r2, #1
 8001e0e:	3a01      	subs	r2, #1
 8001e10:	0652      	lsls	r2, r2, #25
 8001e12:	430a      	orrs	r2, r1
 8001e14:	493b      	ldr	r1, [pc, #236]	; (8001f04 <HAL_RCC_OscConfig+0x8bc>)
 8001e16:	4313      	orrs	r3, r2
 8001e18:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001e1a:	4b3a      	ldr	r3, [pc, #232]	; (8001f04 <HAL_RCC_OscConfig+0x8bc>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	4a39      	ldr	r2, [pc, #228]	; (8001f04 <HAL_RCC_OscConfig+0x8bc>)
 8001e20:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e24:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001e26:	4b37      	ldr	r3, [pc, #220]	; (8001f04 <HAL_RCC_OscConfig+0x8bc>)
 8001e28:	68db      	ldr	r3, [r3, #12]
 8001e2a:	4a36      	ldr	r2, [pc, #216]	; (8001f04 <HAL_RCC_OscConfig+0x8bc>)
 8001e2c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e30:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001e32:	f7ff f835 	bl	8000ea0 <HAL_GetTick>
 8001e36:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e38:	e008      	b.n	8001e4c <HAL_RCC_OscConfig+0x804>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e3a:	f7ff f831 	bl	8000ea0 <HAL_GetTick>
 8001e3e:	4602      	mov	r2, r0
 8001e40:	69bb      	ldr	r3, [r7, #24]
 8001e42:	1ad3      	subs	r3, r2, r3
 8001e44:	2b02      	cmp	r3, #2
 8001e46:	d901      	bls.n	8001e4c <HAL_RCC_OscConfig+0x804>
              {
                return HAL_TIMEOUT;
 8001e48:	2303      	movs	r3, #3
 8001e4a:	e056      	b.n	8001efa <HAL_RCC_OscConfig+0x8b2>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e4c:	4b2d      	ldr	r3, [pc, #180]	; (8001f04 <HAL_RCC_OscConfig+0x8bc>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d0f0      	beq.n	8001e3a <HAL_RCC_OscConfig+0x7f2>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001e58:	e04e      	b.n	8001ef8 <HAL_RCC_OscConfig+0x8b0>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001e5a:	2301      	movs	r3, #1
 8001e5c:	e04d      	b.n	8001efa <HAL_RCC_OscConfig+0x8b2>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e5e:	4b29      	ldr	r3, [pc, #164]	; (8001f04 <HAL_RCC_OscConfig+0x8bc>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d146      	bne.n	8001ef8 <HAL_RCC_OscConfig+0x8b0>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001e6a:	4b26      	ldr	r3, [pc, #152]	; (8001f04 <HAL_RCC_OscConfig+0x8bc>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	4a25      	ldr	r2, [pc, #148]	; (8001f04 <HAL_RCC_OscConfig+0x8bc>)
 8001e70:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e74:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001e76:	4b23      	ldr	r3, [pc, #140]	; (8001f04 <HAL_RCC_OscConfig+0x8bc>)
 8001e78:	68db      	ldr	r3, [r3, #12]
 8001e7a:	4a22      	ldr	r2, [pc, #136]	; (8001f04 <HAL_RCC_OscConfig+0x8bc>)
 8001e7c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e80:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001e82:	f7ff f80d 	bl	8000ea0 <HAL_GetTick>
 8001e86:	61b8      	str	r0, [r7, #24]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e88:	e008      	b.n	8001e9c <HAL_RCC_OscConfig+0x854>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e8a:	f7ff f809 	bl	8000ea0 <HAL_GetTick>
 8001e8e:	4602      	mov	r2, r0
 8001e90:	69bb      	ldr	r3, [r7, #24]
 8001e92:	1ad3      	subs	r3, r2, r3
 8001e94:	2b02      	cmp	r3, #2
 8001e96:	d901      	bls.n	8001e9c <HAL_RCC_OscConfig+0x854>
            {
              return HAL_TIMEOUT;
 8001e98:	2303      	movs	r3, #3
 8001e9a:	e02e      	b.n	8001efa <HAL_RCC_OscConfig+0x8b2>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e9c:	4b19      	ldr	r3, [pc, #100]	; (8001f04 <HAL_RCC_OscConfig+0x8bc>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d0f0      	beq.n	8001e8a <HAL_RCC_OscConfig+0x842>
 8001ea8:	e026      	b.n	8001ef8 <HAL_RCC_OscConfig+0x8b0>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001eaa:	6a3b      	ldr	r3, [r7, #32]
 8001eac:	2b0c      	cmp	r3, #12
 8001eae:	d021      	beq.n	8001ef4 <HAL_RCC_OscConfig+0x8ac>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001eb0:	4b14      	ldr	r3, [pc, #80]	; (8001f04 <HAL_RCC_OscConfig+0x8bc>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	4a13      	ldr	r2, [pc, #76]	; (8001f04 <HAL_RCC_OscConfig+0x8bc>)
 8001eb6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001eba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ebc:	f7fe fff0 	bl	8000ea0 <HAL_GetTick>
 8001ec0:	61b8      	str	r0, [r7, #24]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ec2:	e008      	b.n	8001ed6 <HAL_RCC_OscConfig+0x88e>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ec4:	f7fe ffec 	bl	8000ea0 <HAL_GetTick>
 8001ec8:	4602      	mov	r2, r0
 8001eca:	69bb      	ldr	r3, [r7, #24]
 8001ecc:	1ad3      	subs	r3, r2, r3
 8001ece:	2b02      	cmp	r3, #2
 8001ed0:	d901      	bls.n	8001ed6 <HAL_RCC_OscConfig+0x88e>
          {
            return HAL_TIMEOUT;
 8001ed2:	2303      	movs	r3, #3
 8001ed4:	e011      	b.n	8001efa <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ed6:	4b0b      	ldr	r3, [pc, #44]	; (8001f04 <HAL_RCC_OscConfig+0x8bc>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d1f0      	bne.n	8001ec4 <HAL_RCC_OscConfig+0x87c>
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
 8001ee2:	4b08      	ldr	r3, [pc, #32]	; (8001f04 <HAL_RCC_OscConfig+0x8bc>)
 8001ee4:	68db      	ldr	r3, [r3, #12]
 8001ee6:	4a07      	ldr	r2, [pc, #28]	; (8001f04 <HAL_RCC_OscConfig+0x8bc>)
 8001ee8:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001eec:	f023 0303 	bic.w	r3, r3, #3
 8001ef0:	60d3      	str	r3, [r2, #12]
 8001ef2:	e001      	b.n	8001ef8 <HAL_RCC_OscConfig+0x8b0>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001ef4:	2301      	movs	r3, #1
 8001ef6:	e000      	b.n	8001efa <HAL_RCC_OscConfig+0x8b2>
      }
    }
  }
  return HAL_OK;
 8001ef8:	2300      	movs	r3, #0
}
 8001efa:	4618      	mov	r0, r3
 8001efc:	3728      	adds	r7, #40	; 0x28
 8001efe:	46bd      	mov	sp, r7
 8001f00:	bd80      	pop	{r7, pc}
 8001f02:	bf00      	nop
 8001f04:	40021000 	.word	0x40021000
 8001f08:	f99f808c 	.word	0xf99f808c

08001f0c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b084      	sub	sp, #16
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
 8001f14:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d101      	bne.n	8001f20 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f1c:	2301      	movs	r3, #1
 8001f1e:	e0e7      	b.n	80020f0 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001f20:	4b75      	ldr	r3, [pc, #468]	; (80020f8 <HAL_RCC_ClockConfig+0x1ec>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f003 0307 	and.w	r3, r3, #7
 8001f28:	683a      	ldr	r2, [r7, #0]
 8001f2a:	429a      	cmp	r2, r3
 8001f2c:	d910      	bls.n	8001f50 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f2e:	4b72      	ldr	r3, [pc, #456]	; (80020f8 <HAL_RCC_ClockConfig+0x1ec>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f023 0207 	bic.w	r2, r3, #7
 8001f36:	4970      	ldr	r1, [pc, #448]	; (80020f8 <HAL_RCC_ClockConfig+0x1ec>)
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	4313      	orrs	r3, r2
 8001f3c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f3e:	4b6e      	ldr	r3, [pc, #440]	; (80020f8 <HAL_RCC_ClockConfig+0x1ec>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f003 0307 	and.w	r3, r3, #7
 8001f46:	683a      	ldr	r2, [r7, #0]
 8001f48:	429a      	cmp	r2, r3
 8001f4a:	d001      	beq.n	8001f50 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001f4c:	2301      	movs	r3, #1
 8001f4e:	e0cf      	b.n	80020f0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f003 0302 	and.w	r3, r3, #2
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d010      	beq.n	8001f7e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	689a      	ldr	r2, [r3, #8]
 8001f60:	4b66      	ldr	r3, [pc, #408]	; (80020fc <HAL_RCC_ClockConfig+0x1f0>)
 8001f62:	689b      	ldr	r3, [r3, #8]
 8001f64:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001f68:	429a      	cmp	r2, r3
 8001f6a:	d908      	bls.n	8001f7e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f6c:	4b63      	ldr	r3, [pc, #396]	; (80020fc <HAL_RCC_ClockConfig+0x1f0>)
 8001f6e:	689b      	ldr	r3, [r3, #8]
 8001f70:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	689b      	ldr	r3, [r3, #8]
 8001f78:	4960      	ldr	r1, [pc, #384]	; (80020fc <HAL_RCC_ClockConfig+0x1f0>)
 8001f7a:	4313      	orrs	r3, r2
 8001f7c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f003 0301 	and.w	r3, r3, #1
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d04c      	beq.n	8002024 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	685b      	ldr	r3, [r3, #4]
 8001f8e:	2b03      	cmp	r3, #3
 8001f90:	d107      	bne.n	8001fa2 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f92:	4b5a      	ldr	r3, [pc, #360]	; (80020fc <HAL_RCC_ClockConfig+0x1f0>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d121      	bne.n	8001fe2 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001f9e:	2301      	movs	r3, #1
 8001fa0:	e0a6      	b.n	80020f0 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	685b      	ldr	r3, [r3, #4]
 8001fa6:	2b02      	cmp	r3, #2
 8001fa8:	d107      	bne.n	8001fba <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001faa:	4b54      	ldr	r3, [pc, #336]	; (80020fc <HAL_RCC_ClockConfig+0x1f0>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d115      	bne.n	8001fe2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001fb6:	2301      	movs	r3, #1
 8001fb8:	e09a      	b.n	80020f0 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	685b      	ldr	r3, [r3, #4]
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d107      	bne.n	8001fd2 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001fc2:	4b4e      	ldr	r3, [pc, #312]	; (80020fc <HAL_RCC_ClockConfig+0x1f0>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f003 0302 	and.w	r3, r3, #2
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d109      	bne.n	8001fe2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001fce:	2301      	movs	r3, #1
 8001fd0:	e08e      	b.n	80020f0 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001fd2:	4b4a      	ldr	r3, [pc, #296]	; (80020fc <HAL_RCC_ClockConfig+0x1f0>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d101      	bne.n	8001fe2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001fde:	2301      	movs	r3, #1
 8001fe0:	e086      	b.n	80020f0 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001fe2:	4b46      	ldr	r3, [pc, #280]	; (80020fc <HAL_RCC_ClockConfig+0x1f0>)
 8001fe4:	689b      	ldr	r3, [r3, #8]
 8001fe6:	f023 0203 	bic.w	r2, r3, #3
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	685b      	ldr	r3, [r3, #4]
 8001fee:	4943      	ldr	r1, [pc, #268]	; (80020fc <HAL_RCC_ClockConfig+0x1f0>)
 8001ff0:	4313      	orrs	r3, r2
 8001ff2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001ff4:	f7fe ff54 	bl	8000ea0 <HAL_GetTick>
 8001ff8:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ffa:	e00a      	b.n	8002012 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ffc:	f7fe ff50 	bl	8000ea0 <HAL_GetTick>
 8002000:	4602      	mov	r2, r0
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	1ad3      	subs	r3, r2, r3
 8002006:	f241 3288 	movw	r2, #5000	; 0x1388
 800200a:	4293      	cmp	r3, r2
 800200c:	d901      	bls.n	8002012 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800200e:	2303      	movs	r3, #3
 8002010:	e06e      	b.n	80020f0 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002012:	4b3a      	ldr	r3, [pc, #232]	; (80020fc <HAL_RCC_ClockConfig+0x1f0>)
 8002014:	689b      	ldr	r3, [r3, #8]
 8002016:	f003 020c 	and.w	r2, r3, #12
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	685b      	ldr	r3, [r3, #4]
 800201e:	009b      	lsls	r3, r3, #2
 8002020:	429a      	cmp	r2, r3
 8002022:	d1eb      	bne.n	8001ffc <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f003 0302 	and.w	r3, r3, #2
 800202c:	2b00      	cmp	r3, #0
 800202e:	d010      	beq.n	8002052 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	689a      	ldr	r2, [r3, #8]
 8002034:	4b31      	ldr	r3, [pc, #196]	; (80020fc <HAL_RCC_ClockConfig+0x1f0>)
 8002036:	689b      	ldr	r3, [r3, #8]
 8002038:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800203c:	429a      	cmp	r2, r3
 800203e:	d208      	bcs.n	8002052 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002040:	4b2e      	ldr	r3, [pc, #184]	; (80020fc <HAL_RCC_ClockConfig+0x1f0>)
 8002042:	689b      	ldr	r3, [r3, #8]
 8002044:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	689b      	ldr	r3, [r3, #8]
 800204c:	492b      	ldr	r1, [pc, #172]	; (80020fc <HAL_RCC_ClockConfig+0x1f0>)
 800204e:	4313      	orrs	r3, r2
 8002050:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002052:	4b29      	ldr	r3, [pc, #164]	; (80020f8 <HAL_RCC_ClockConfig+0x1ec>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f003 0307 	and.w	r3, r3, #7
 800205a:	683a      	ldr	r2, [r7, #0]
 800205c:	429a      	cmp	r2, r3
 800205e:	d210      	bcs.n	8002082 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002060:	4b25      	ldr	r3, [pc, #148]	; (80020f8 <HAL_RCC_ClockConfig+0x1ec>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f023 0207 	bic.w	r2, r3, #7
 8002068:	4923      	ldr	r1, [pc, #140]	; (80020f8 <HAL_RCC_ClockConfig+0x1ec>)
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	4313      	orrs	r3, r2
 800206e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002070:	4b21      	ldr	r3, [pc, #132]	; (80020f8 <HAL_RCC_ClockConfig+0x1ec>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f003 0307 	and.w	r3, r3, #7
 8002078:	683a      	ldr	r2, [r7, #0]
 800207a:	429a      	cmp	r2, r3
 800207c:	d001      	beq.n	8002082 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800207e:	2301      	movs	r3, #1
 8002080:	e036      	b.n	80020f0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f003 0304 	and.w	r3, r3, #4
 800208a:	2b00      	cmp	r3, #0
 800208c:	d008      	beq.n	80020a0 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800208e:	4b1b      	ldr	r3, [pc, #108]	; (80020fc <HAL_RCC_ClockConfig+0x1f0>)
 8002090:	689b      	ldr	r3, [r3, #8]
 8002092:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	68db      	ldr	r3, [r3, #12]
 800209a:	4918      	ldr	r1, [pc, #96]	; (80020fc <HAL_RCC_ClockConfig+0x1f0>)
 800209c:	4313      	orrs	r3, r2
 800209e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f003 0308 	and.w	r3, r3, #8
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d009      	beq.n	80020c0 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80020ac:	4b13      	ldr	r3, [pc, #76]	; (80020fc <HAL_RCC_ClockConfig+0x1f0>)
 80020ae:	689b      	ldr	r3, [r3, #8]
 80020b0:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	691b      	ldr	r3, [r3, #16]
 80020b8:	00db      	lsls	r3, r3, #3
 80020ba:	4910      	ldr	r1, [pc, #64]	; (80020fc <HAL_RCC_ClockConfig+0x1f0>)
 80020bc:	4313      	orrs	r3, r2
 80020be:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80020c0:	f000 f824 	bl	800210c <HAL_RCC_GetSysClockFreq>
 80020c4:	4602      	mov	r2, r0
 80020c6:	4b0d      	ldr	r3, [pc, #52]	; (80020fc <HAL_RCC_ClockConfig+0x1f0>)
 80020c8:	689b      	ldr	r3, [r3, #8]
 80020ca:	091b      	lsrs	r3, r3, #4
 80020cc:	f003 030f 	and.w	r3, r3, #15
 80020d0:	490b      	ldr	r1, [pc, #44]	; (8002100 <HAL_RCC_ClockConfig+0x1f4>)
 80020d2:	5ccb      	ldrb	r3, [r1, r3]
 80020d4:	f003 031f 	and.w	r3, r3, #31
 80020d8:	fa22 f303 	lsr.w	r3, r2, r3
 80020dc:	4a09      	ldr	r2, [pc, #36]	; (8002104 <HAL_RCC_ClockConfig+0x1f8>)
 80020de:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80020e0:	4b09      	ldr	r3, [pc, #36]	; (8002108 <HAL_RCC_ClockConfig+0x1fc>)
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	4618      	mov	r0, r3
 80020e6:	f7fe fe8b 	bl	8000e00 <HAL_InitTick>
 80020ea:	4603      	mov	r3, r0
 80020ec:	72fb      	strb	r3, [r7, #11]

  return status;
 80020ee:	7afb      	ldrb	r3, [r7, #11]
}
 80020f0:	4618      	mov	r0, r3
 80020f2:	3710      	adds	r7, #16
 80020f4:	46bd      	mov	sp, r7
 80020f6:	bd80      	pop	{r7, pc}
 80020f8:	40022000 	.word	0x40022000
 80020fc:	40021000 	.word	0x40021000
 8002100:	08004cd4 	.word	0x08004cd4
 8002104:	20000000 	.word	0x20000000
 8002108:	20000004 	.word	0x20000004

0800210c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800210c:	b480      	push	{r7}
 800210e:	b089      	sub	sp, #36	; 0x24
 8002110:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002112:	2300      	movs	r3, #0
 8002114:	61fb      	str	r3, [r7, #28]
 8002116:	2300      	movs	r3, #0
 8002118:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800211a:	4b3e      	ldr	r3, [pc, #248]	; (8002214 <HAL_RCC_GetSysClockFreq+0x108>)
 800211c:	689b      	ldr	r3, [r3, #8]
 800211e:	f003 030c 	and.w	r3, r3, #12
 8002122:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002124:	4b3b      	ldr	r3, [pc, #236]	; (8002214 <HAL_RCC_GetSysClockFreq+0x108>)
 8002126:	68db      	ldr	r3, [r3, #12]
 8002128:	f003 0303 	and.w	r3, r3, #3
 800212c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800212e:	693b      	ldr	r3, [r7, #16]
 8002130:	2b00      	cmp	r3, #0
 8002132:	d005      	beq.n	8002140 <HAL_RCC_GetSysClockFreq+0x34>
 8002134:	693b      	ldr	r3, [r7, #16]
 8002136:	2b0c      	cmp	r3, #12
 8002138:	d121      	bne.n	800217e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	2b01      	cmp	r3, #1
 800213e:	d11e      	bne.n	800217e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002140:	4b34      	ldr	r3, [pc, #208]	; (8002214 <HAL_RCC_GetSysClockFreq+0x108>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f003 0308 	and.w	r3, r3, #8
 8002148:	2b00      	cmp	r3, #0
 800214a:	d107      	bne.n	800215c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800214c:	4b31      	ldr	r3, [pc, #196]	; (8002214 <HAL_RCC_GetSysClockFreq+0x108>)
 800214e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002152:	0a1b      	lsrs	r3, r3, #8
 8002154:	f003 030f 	and.w	r3, r3, #15
 8002158:	61fb      	str	r3, [r7, #28]
 800215a:	e005      	b.n	8002168 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800215c:	4b2d      	ldr	r3, [pc, #180]	; (8002214 <HAL_RCC_GetSysClockFreq+0x108>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	091b      	lsrs	r3, r3, #4
 8002162:	f003 030f 	and.w	r3, r3, #15
 8002166:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002168:	4a2b      	ldr	r2, [pc, #172]	; (8002218 <HAL_RCC_GetSysClockFreq+0x10c>)
 800216a:	69fb      	ldr	r3, [r7, #28]
 800216c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002170:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002172:	693b      	ldr	r3, [r7, #16]
 8002174:	2b00      	cmp	r3, #0
 8002176:	d10d      	bne.n	8002194 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002178:	69fb      	ldr	r3, [r7, #28]
 800217a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800217c:	e00a      	b.n	8002194 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800217e:	693b      	ldr	r3, [r7, #16]
 8002180:	2b04      	cmp	r3, #4
 8002182:	d102      	bne.n	800218a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002184:	4b25      	ldr	r3, [pc, #148]	; (800221c <HAL_RCC_GetSysClockFreq+0x110>)
 8002186:	61bb      	str	r3, [r7, #24]
 8002188:	e004      	b.n	8002194 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800218a:	693b      	ldr	r3, [r7, #16]
 800218c:	2b08      	cmp	r3, #8
 800218e:	d101      	bne.n	8002194 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002190:	4b23      	ldr	r3, [pc, #140]	; (8002220 <HAL_RCC_GetSysClockFreq+0x114>)
 8002192:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002194:	693b      	ldr	r3, [r7, #16]
 8002196:	2b0c      	cmp	r3, #12
 8002198:	d134      	bne.n	8002204 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800219a:	4b1e      	ldr	r3, [pc, #120]	; (8002214 <HAL_RCC_GetSysClockFreq+0x108>)
 800219c:	68db      	ldr	r3, [r3, #12]
 800219e:	f003 0303 	and.w	r3, r3, #3
 80021a2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80021a4:	68bb      	ldr	r3, [r7, #8]
 80021a6:	2b02      	cmp	r3, #2
 80021a8:	d003      	beq.n	80021b2 <HAL_RCC_GetSysClockFreq+0xa6>
 80021aa:	68bb      	ldr	r3, [r7, #8]
 80021ac:	2b03      	cmp	r3, #3
 80021ae:	d003      	beq.n	80021b8 <HAL_RCC_GetSysClockFreq+0xac>
 80021b0:	e005      	b.n	80021be <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80021b2:	4b1a      	ldr	r3, [pc, #104]	; (800221c <HAL_RCC_GetSysClockFreq+0x110>)
 80021b4:	617b      	str	r3, [r7, #20]
      break;
 80021b6:	e005      	b.n	80021c4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80021b8:	4b19      	ldr	r3, [pc, #100]	; (8002220 <HAL_RCC_GetSysClockFreq+0x114>)
 80021ba:	617b      	str	r3, [r7, #20]
      break;
 80021bc:	e002      	b.n	80021c4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80021be:	69fb      	ldr	r3, [r7, #28]
 80021c0:	617b      	str	r3, [r7, #20]
      break;
 80021c2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80021c4:	4b13      	ldr	r3, [pc, #76]	; (8002214 <HAL_RCC_GetSysClockFreq+0x108>)
 80021c6:	68db      	ldr	r3, [r3, #12]
 80021c8:	091b      	lsrs	r3, r3, #4
 80021ca:	f003 0307 	and.w	r3, r3, #7
 80021ce:	3301      	adds	r3, #1
 80021d0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80021d2:	4b10      	ldr	r3, [pc, #64]	; (8002214 <HAL_RCC_GetSysClockFreq+0x108>)
 80021d4:	68db      	ldr	r3, [r3, #12]
 80021d6:	0a1b      	lsrs	r3, r3, #8
 80021d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80021dc:	697a      	ldr	r2, [r7, #20]
 80021de:	fb03 f202 	mul.w	r2, r3, r2
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80021e8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80021ea:	4b0a      	ldr	r3, [pc, #40]	; (8002214 <HAL_RCC_GetSysClockFreq+0x108>)
 80021ec:	68db      	ldr	r3, [r3, #12]
 80021ee:	0e5b      	lsrs	r3, r3, #25
 80021f0:	f003 0303 	and.w	r3, r3, #3
 80021f4:	3301      	adds	r3, #1
 80021f6:	005b      	lsls	r3, r3, #1
 80021f8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80021fa:	697a      	ldr	r2, [r7, #20]
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8002202:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002204:	69bb      	ldr	r3, [r7, #24]
}
 8002206:	4618      	mov	r0, r3
 8002208:	3724      	adds	r7, #36	; 0x24
 800220a:	46bd      	mov	sp, r7
 800220c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002210:	4770      	bx	lr
 8002212:	bf00      	nop
 8002214:	40021000 	.word	0x40021000
 8002218:	08004cec 	.word	0x08004cec
 800221c:	00f42400 	.word	0x00f42400
 8002220:	007a1200 	.word	0x007a1200

08002224 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002224:	b480      	push	{r7}
 8002226:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002228:	4b03      	ldr	r3, [pc, #12]	; (8002238 <HAL_RCC_GetHCLKFreq+0x14>)
 800222a:	681b      	ldr	r3, [r3, #0]
}
 800222c:	4618      	mov	r0, r3
 800222e:	46bd      	mov	sp, r7
 8002230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002234:	4770      	bx	lr
 8002236:	bf00      	nop
 8002238:	20000000 	.word	0x20000000

0800223c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002240:	f7ff fff0 	bl	8002224 <HAL_RCC_GetHCLKFreq>
 8002244:	4602      	mov	r2, r0
 8002246:	4b06      	ldr	r3, [pc, #24]	; (8002260 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002248:	689b      	ldr	r3, [r3, #8]
 800224a:	0a1b      	lsrs	r3, r3, #8
 800224c:	f003 0307 	and.w	r3, r3, #7
 8002250:	4904      	ldr	r1, [pc, #16]	; (8002264 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002252:	5ccb      	ldrb	r3, [r1, r3]
 8002254:	f003 031f 	and.w	r3, r3, #31
 8002258:	fa22 f303 	lsr.w	r3, r2, r3
}
 800225c:	4618      	mov	r0, r3
 800225e:	bd80      	pop	{r7, pc}
 8002260:	40021000 	.word	0x40021000
 8002264:	08004ce4 	.word	0x08004ce4

08002268 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800226c:	f7ff ffda 	bl	8002224 <HAL_RCC_GetHCLKFreq>
 8002270:	4602      	mov	r2, r0
 8002272:	4b06      	ldr	r3, [pc, #24]	; (800228c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002274:	689b      	ldr	r3, [r3, #8]
 8002276:	0adb      	lsrs	r3, r3, #11
 8002278:	f003 0307 	and.w	r3, r3, #7
 800227c:	4904      	ldr	r1, [pc, #16]	; (8002290 <HAL_RCC_GetPCLK2Freq+0x28>)
 800227e:	5ccb      	ldrb	r3, [r1, r3]
 8002280:	f003 031f 	and.w	r3, r3, #31
 8002284:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002288:	4618      	mov	r0, r3
 800228a:	bd80      	pop	{r7, pc}
 800228c:	40021000 	.word	0x40021000
 8002290:	08004ce4 	.word	0x08004ce4

08002294 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b086      	sub	sp, #24
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800229c:	2300      	movs	r3, #0
 800229e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80022a0:	4b2a      	ldr	r3, [pc, #168]	; (800234c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80022a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d003      	beq.n	80022b4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80022ac:	f7ff f968 	bl	8001580 <HAL_PWREx_GetVoltageRange>
 80022b0:	6178      	str	r0, [r7, #20]
 80022b2:	e014      	b.n	80022de <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80022b4:	4b25      	ldr	r3, [pc, #148]	; (800234c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80022b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022b8:	4a24      	ldr	r2, [pc, #144]	; (800234c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80022ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022be:	6593      	str	r3, [r2, #88]	; 0x58
 80022c0:	4b22      	ldr	r3, [pc, #136]	; (800234c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80022c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022c8:	60fb      	str	r3, [r7, #12]
 80022ca:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80022cc:	f7ff f958 	bl	8001580 <HAL_PWREx_GetVoltageRange>
 80022d0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80022d2:	4b1e      	ldr	r3, [pc, #120]	; (800234c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80022d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022d6:	4a1d      	ldr	r2, [pc, #116]	; (800234c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80022d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80022dc:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80022de:	697b      	ldr	r3, [r7, #20]
 80022e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80022e4:	d10b      	bne.n	80022fe <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	2b80      	cmp	r3, #128	; 0x80
 80022ea:	d919      	bls.n	8002320 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	2ba0      	cmp	r3, #160	; 0xa0
 80022f0:	d902      	bls.n	80022f8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80022f2:	2302      	movs	r3, #2
 80022f4:	613b      	str	r3, [r7, #16]
 80022f6:	e013      	b.n	8002320 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80022f8:	2301      	movs	r3, #1
 80022fa:	613b      	str	r3, [r7, #16]
 80022fc:	e010      	b.n	8002320 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	2b80      	cmp	r3, #128	; 0x80
 8002302:	d902      	bls.n	800230a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002304:	2303      	movs	r3, #3
 8002306:	613b      	str	r3, [r7, #16]
 8002308:	e00a      	b.n	8002320 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	2b80      	cmp	r3, #128	; 0x80
 800230e:	d102      	bne.n	8002316 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002310:	2302      	movs	r3, #2
 8002312:	613b      	str	r3, [r7, #16]
 8002314:	e004      	b.n	8002320 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	2b70      	cmp	r3, #112	; 0x70
 800231a:	d101      	bne.n	8002320 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800231c:	2301      	movs	r3, #1
 800231e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002320:	4b0b      	ldr	r3, [pc, #44]	; (8002350 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f023 0207 	bic.w	r2, r3, #7
 8002328:	4909      	ldr	r1, [pc, #36]	; (8002350 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800232a:	693b      	ldr	r3, [r7, #16]
 800232c:	4313      	orrs	r3, r2
 800232e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002330:	4b07      	ldr	r3, [pc, #28]	; (8002350 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f003 0307 	and.w	r3, r3, #7
 8002338:	693a      	ldr	r2, [r7, #16]
 800233a:	429a      	cmp	r2, r3
 800233c:	d001      	beq.n	8002342 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800233e:	2301      	movs	r3, #1
 8002340:	e000      	b.n	8002344 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002342:	2300      	movs	r3, #0
}
 8002344:	4618      	mov	r0, r3
 8002346:	3718      	adds	r7, #24
 8002348:	46bd      	mov	sp, r7
 800234a:	bd80      	pop	{r7, pc}
 800234c:	40021000 	.word	0x40021000
 8002350:	40022000 	.word	0x40022000

08002354 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b086      	sub	sp, #24
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800235c:	2300      	movs	r3, #0
 800235e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002360:	2300      	movs	r3, #0
 8002362:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800236c:	2b00      	cmp	r3, #0
 800236e:	f000 809e 	beq.w	80024ae <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002372:	2300      	movs	r3, #0
 8002374:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002376:	4b46      	ldr	r3, [pc, #280]	; (8002490 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002378:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800237a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800237e:	2b00      	cmp	r3, #0
 8002380:	d101      	bne.n	8002386 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8002382:	2301      	movs	r3, #1
 8002384:	e000      	b.n	8002388 <HAL_RCCEx_PeriphCLKConfig+0x34>
 8002386:	2300      	movs	r3, #0
 8002388:	2b00      	cmp	r3, #0
 800238a:	d00d      	beq.n	80023a8 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800238c:	4b40      	ldr	r3, [pc, #256]	; (8002490 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800238e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002390:	4a3f      	ldr	r2, [pc, #252]	; (8002490 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002392:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002396:	6593      	str	r3, [r2, #88]	; 0x58
 8002398:	4b3d      	ldr	r3, [pc, #244]	; (8002490 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800239a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800239c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023a0:	60bb      	str	r3, [r7, #8]
 80023a2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80023a4:	2301      	movs	r3, #1
 80023a6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80023a8:	4b3a      	ldr	r3, [pc, #232]	; (8002494 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	4a39      	ldr	r2, [pc, #228]	; (8002494 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 80023ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023b2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80023b4:	f7fe fd74 	bl	8000ea0 <HAL_GetTick>
 80023b8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80023ba:	e009      	b.n	80023d0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023bc:	f7fe fd70 	bl	8000ea0 <HAL_GetTick>
 80023c0:	4602      	mov	r2, r0
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	1ad3      	subs	r3, r2, r3
 80023c6:	2b02      	cmp	r3, #2
 80023c8:	d902      	bls.n	80023d0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      {
        ret = HAL_TIMEOUT;
 80023ca:	2303      	movs	r3, #3
 80023cc:	74fb      	strb	r3, [r7, #19]
        break;
 80023ce:	e005      	b.n	80023dc <HAL_RCCEx_PeriphCLKConfig+0x88>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80023d0:	4b30      	ldr	r3, [pc, #192]	; (8002494 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d0ef      	beq.n	80023bc <HAL_RCCEx_PeriphCLKConfig+0x68>
      }
    }

    if(ret == HAL_OK)
 80023dc:	7cfb      	ldrb	r3, [r7, #19]
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d15a      	bne.n	8002498 <HAL_RCCEx_PeriphCLKConfig+0x144>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80023e2:	4b2b      	ldr	r3, [pc, #172]	; (8002490 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80023e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023e8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80023ec:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80023ee:	697b      	ldr	r3, [r7, #20]
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d01e      	beq.n	8002432 <HAL_RCCEx_PeriphCLKConfig+0xde>
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023f8:	697a      	ldr	r2, [r7, #20]
 80023fa:	429a      	cmp	r2, r3
 80023fc:	d019      	beq.n	8002432 <HAL_RCCEx_PeriphCLKConfig+0xde>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80023fe:	4b24      	ldr	r3, [pc, #144]	; (8002490 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002400:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002404:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002408:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800240a:	4b21      	ldr	r3, [pc, #132]	; (8002490 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800240c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002410:	4a1f      	ldr	r2, [pc, #124]	; (8002490 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002412:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002416:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800241a:	4b1d      	ldr	r3, [pc, #116]	; (8002490 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800241c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002420:	4a1b      	ldr	r2, [pc, #108]	; (8002490 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002422:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002426:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800242a:	4a19      	ldr	r2, [pc, #100]	; (8002490 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800242c:	697b      	ldr	r3, [r7, #20]
 800242e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002432:	697b      	ldr	r3, [r7, #20]
 8002434:	f003 0301 	and.w	r3, r3, #1
 8002438:	2b00      	cmp	r3, #0
 800243a:	d016      	beq.n	800246a <HAL_RCCEx_PeriphCLKConfig+0x116>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800243c:	f7fe fd30 	bl	8000ea0 <HAL_GetTick>
 8002440:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002442:	e00b      	b.n	800245c <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002444:	f7fe fd2c 	bl	8000ea0 <HAL_GetTick>
 8002448:	4602      	mov	r2, r0
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	1ad3      	subs	r3, r2, r3
 800244e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002452:	4293      	cmp	r3, r2
 8002454:	d902      	bls.n	800245c <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            ret = HAL_TIMEOUT;
 8002456:	2303      	movs	r3, #3
 8002458:	74fb      	strb	r3, [r7, #19]
            break;
 800245a:	e006      	b.n	800246a <HAL_RCCEx_PeriphCLKConfig+0x116>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800245c:	4b0c      	ldr	r3, [pc, #48]	; (8002490 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800245e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002462:	f003 0302 	and.w	r3, r3, #2
 8002466:	2b00      	cmp	r3, #0
 8002468:	d0ec      	beq.n	8002444 <HAL_RCCEx_PeriphCLKConfig+0xf0>
          }
        }
      }

      if(ret == HAL_OK)
 800246a:	7cfb      	ldrb	r3, [r7, #19]
 800246c:	2b00      	cmp	r3, #0
 800246e:	d10b      	bne.n	8002488 <HAL_RCCEx_PeriphCLKConfig+0x134>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002470:	4b07      	ldr	r3, [pc, #28]	; (8002490 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002472:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002476:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800247e:	4904      	ldr	r1, [pc, #16]	; (8002490 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002480:	4313      	orrs	r3, r2
 8002482:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002486:	e009      	b.n	800249c <HAL_RCCEx_PeriphCLKConfig+0x148>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002488:	7cfb      	ldrb	r3, [r7, #19]
 800248a:	74bb      	strb	r3, [r7, #18]
 800248c:	e006      	b.n	800249c <HAL_RCCEx_PeriphCLKConfig+0x148>
 800248e:	bf00      	nop
 8002490:	40021000 	.word	0x40021000
 8002494:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002498:	7cfb      	ldrb	r3, [r7, #19]
 800249a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800249c:	7c7b      	ldrb	r3, [r7, #17]
 800249e:	2b01      	cmp	r3, #1
 80024a0:	d105      	bne.n	80024ae <HAL_RCCEx_PeriphCLKConfig+0x15a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024a2:	4b6e      	ldr	r3, [pc, #440]	; (800265c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80024a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024a6:	4a6d      	ldr	r2, [pc, #436]	; (800265c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80024a8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80024ac:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f003 0301 	and.w	r3, r3, #1
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d00a      	beq.n	80024d0 <HAL_RCCEx_PeriphCLKConfig+0x17c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80024ba:	4b68      	ldr	r3, [pc, #416]	; (800265c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80024bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024c0:	f023 0203 	bic.w	r2, r3, #3
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	685b      	ldr	r3, [r3, #4]
 80024c8:	4964      	ldr	r1, [pc, #400]	; (800265c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80024ca:	4313      	orrs	r3, r2
 80024cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f003 0302 	and.w	r3, r3, #2
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d00a      	beq.n	80024f2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80024dc:	4b5f      	ldr	r3, [pc, #380]	; (800265c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80024de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024e2:	f023 020c 	bic.w	r2, r3, #12
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	689b      	ldr	r3, [r3, #8]
 80024ea:	495c      	ldr	r1, [pc, #368]	; (800265c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80024ec:	4313      	orrs	r3, r2
 80024ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f003 0304 	and.w	r3, r3, #4
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d00a      	beq.n	8002514 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80024fe:	4b57      	ldr	r3, [pc, #348]	; (800265c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002500:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002504:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	68db      	ldr	r3, [r3, #12]
 800250c:	4953      	ldr	r1, [pc, #332]	; (800265c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800250e:	4313      	orrs	r3, r2
 8002510:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f003 0320 	and.w	r3, r3, #32
 800251c:	2b00      	cmp	r3, #0
 800251e:	d00a      	beq.n	8002536 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002520:	4b4e      	ldr	r3, [pc, #312]	; (800265c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002522:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002526:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	691b      	ldr	r3, [r3, #16]
 800252e:	494b      	ldr	r1, [pc, #300]	; (800265c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002530:	4313      	orrs	r3, r2
 8002532:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800253e:	2b00      	cmp	r3, #0
 8002540:	d00a      	beq.n	8002558 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002542:	4b46      	ldr	r3, [pc, #280]	; (800265c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002544:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002548:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6a1b      	ldr	r3, [r3, #32]
 8002550:	4942      	ldr	r1, [pc, #264]	; (800265c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002552:	4313      	orrs	r3, r2
 8002554:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002560:	2b00      	cmp	r3, #0
 8002562:	d00a      	beq.n	800257a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002564:	4b3d      	ldr	r3, [pc, #244]	; (800265c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002566:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800256a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002572:	493a      	ldr	r1, [pc, #232]	; (800265c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002574:	4313      	orrs	r3, r2
 8002576:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002582:	2b00      	cmp	r3, #0
 8002584:	d00a      	beq.n	800259c <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002586:	4b35      	ldr	r3, [pc, #212]	; (800265c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002588:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800258c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	695b      	ldr	r3, [r3, #20]
 8002594:	4931      	ldr	r1, [pc, #196]	; (800265c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002596:	4313      	orrs	r3, r2
 8002598:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d00a      	beq.n	80025be <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80025a8:	4b2c      	ldr	r3, [pc, #176]	; (800265c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80025aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025ae:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	699b      	ldr	r3, [r3, #24]
 80025b6:	4929      	ldr	r1, [pc, #164]	; (800265c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80025b8:	4313      	orrs	r3, r2
 80025ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d00a      	beq.n	80025e0 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80025ca:	4b24      	ldr	r3, [pc, #144]	; (800265c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80025cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025d0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	69db      	ldr	r3, [r3, #28]
 80025d8:	4920      	ldr	r1, [pc, #128]	; (800265c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80025da:	4313      	orrs	r3, r2
 80025dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d015      	beq.n	8002618 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80025ec:	4b1b      	ldr	r3, [pc, #108]	; (800265c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80025ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025f2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025fa:	4918      	ldr	r1, [pc, #96]	; (800265c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80025fc:	4313      	orrs	r3, r2
 80025fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002606:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800260a:	d105      	bne.n	8002618 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800260c:	4b13      	ldr	r3, [pc, #76]	; (800265c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800260e:	68db      	ldr	r3, [r3, #12]
 8002610:	4a12      	ldr	r2, [pc, #72]	; (800265c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002612:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002616:	60d3      	str	r3, [r2, #12]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002620:	2b00      	cmp	r3, #0
 8002622:	d015      	beq.n	8002650 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002624:	4b0d      	ldr	r3, [pc, #52]	; (800265c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002626:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800262a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002632:	490a      	ldr	r1, [pc, #40]	; (800265c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002634:	4313      	orrs	r3, r2
 8002636:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800263e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002642:	d105      	bne.n	8002650 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002644:	4b05      	ldr	r3, [pc, #20]	; (800265c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002646:	68db      	ldr	r3, [r3, #12]
 8002648:	4a04      	ldr	r2, [pc, #16]	; (800265c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800264a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800264e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002650:	7cbb      	ldrb	r3, [r7, #18]
}
 8002652:	4618      	mov	r0, r3
 8002654:	3718      	adds	r7, #24
 8002656:	46bd      	mov	sp, r7
 8002658:	bd80      	pop	{r7, pc}
 800265a:	bf00      	nop
 800265c:	40021000 	.word	0x40021000

08002660 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	b082      	sub	sp, #8
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	2b00      	cmp	r3, #0
 800266c:	d101      	bne.n	8002672 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800266e:	2301      	movs	r3, #1
 8002670:	e040      	b.n	80026f4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002676:	2b00      	cmp	r3, #0
 8002678:	d106      	bne.n	8002688 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	2200      	movs	r2, #0
 800267e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002682:	6878      	ldr	r0, [r7, #4]
 8002684:	f7fe f956 	bl	8000934 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	2224      	movs	r2, #36	; 0x24
 800268c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	681a      	ldr	r2, [r3, #0]
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f022 0201 	bic.w	r2, r2, #1
 800269c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800269e:	6878      	ldr	r0, [r7, #4]
 80026a0:	f000 fd8e 	bl	80031c0 <UART_SetConfig>
 80026a4:	4603      	mov	r3, r0
 80026a6:	2b01      	cmp	r3, #1
 80026a8:	d101      	bne.n	80026ae <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80026aa:	2301      	movs	r3, #1
 80026ac:	e022      	b.n	80026f4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d002      	beq.n	80026bc <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80026b6:	6878      	ldr	r0, [r7, #4]
 80026b8:	f000 ffdc 	bl	8003674 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	685a      	ldr	r2, [r3, #4]
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80026ca:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	689a      	ldr	r2, [r3, #8]
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80026da:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	681a      	ldr	r2, [r3, #0]
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f042 0201 	orr.w	r2, r2, #1
 80026ea:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80026ec:	6878      	ldr	r0, [r7, #4]
 80026ee:	f001 f863 	bl	80037b8 <UART_CheckIdleState>
 80026f2:	4603      	mov	r3, r0
}
 80026f4:	4618      	mov	r0, r3
 80026f6:	3708      	adds	r7, #8
 80026f8:	46bd      	mov	sp, r7
 80026fa:	bd80      	pop	{r7, pc}

080026fc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b08a      	sub	sp, #40	; 0x28
 8002700:	af02      	add	r7, sp, #8
 8002702:	60f8      	str	r0, [r7, #12]
 8002704:	60b9      	str	r1, [r7, #8]
 8002706:	603b      	str	r3, [r7, #0]
 8002708:	4613      	mov	r3, r2
 800270a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002710:	2b20      	cmp	r3, #32
 8002712:	f040 8082 	bne.w	800281a <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8002716:	68bb      	ldr	r3, [r7, #8]
 8002718:	2b00      	cmp	r3, #0
 800271a:	d002      	beq.n	8002722 <HAL_UART_Transmit+0x26>
 800271c:	88fb      	ldrh	r3, [r7, #6]
 800271e:	2b00      	cmp	r3, #0
 8002720:	d101      	bne.n	8002726 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8002722:	2301      	movs	r3, #1
 8002724:	e07a      	b.n	800281c <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800272c:	2b01      	cmp	r3, #1
 800272e:	d101      	bne.n	8002734 <HAL_UART_Transmit+0x38>
 8002730:	2302      	movs	r3, #2
 8002732:	e073      	b.n	800281c <HAL_UART_Transmit+0x120>
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	2201      	movs	r2, #1
 8002738:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	2200      	movs	r2, #0
 8002740:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	2221      	movs	r2, #33	; 0x21
 8002748:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800274a:	f7fe fba9 	bl	8000ea0 <HAL_GetTick>
 800274e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	88fa      	ldrh	r2, [r7, #6]
 8002754:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	88fa      	ldrh	r2, [r7, #6]
 800275c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	689b      	ldr	r3, [r3, #8]
 8002764:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002768:	d108      	bne.n	800277c <HAL_UART_Transmit+0x80>
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	691b      	ldr	r3, [r3, #16]
 800276e:	2b00      	cmp	r3, #0
 8002770:	d104      	bne.n	800277c <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8002772:	2300      	movs	r3, #0
 8002774:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002776:	68bb      	ldr	r3, [r7, #8]
 8002778:	61bb      	str	r3, [r7, #24]
 800277a:	e003      	b.n	8002784 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 800277c:	68bb      	ldr	r3, [r7, #8]
 800277e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002780:	2300      	movs	r3, #0
 8002782:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	2200      	movs	r2, #0
 8002788:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 800278c:	e02d      	b.n	80027ea <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	9300      	str	r3, [sp, #0]
 8002792:	697b      	ldr	r3, [r7, #20]
 8002794:	2200      	movs	r2, #0
 8002796:	2180      	movs	r1, #128	; 0x80
 8002798:	68f8      	ldr	r0, [r7, #12]
 800279a:	f001 f856 	bl	800384a <UART_WaitOnFlagUntilTimeout>
 800279e:	4603      	mov	r3, r0
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d001      	beq.n	80027a8 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80027a4:	2303      	movs	r3, #3
 80027a6:	e039      	b.n	800281c <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 80027a8:	69fb      	ldr	r3, [r7, #28]
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d10b      	bne.n	80027c6 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80027ae:	69bb      	ldr	r3, [r7, #24]
 80027b0:	881a      	ldrh	r2, [r3, #0]
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80027ba:	b292      	uxth	r2, r2
 80027bc:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80027be:	69bb      	ldr	r3, [r7, #24]
 80027c0:	3302      	adds	r3, #2
 80027c2:	61bb      	str	r3, [r7, #24]
 80027c4:	e008      	b.n	80027d8 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80027c6:	69fb      	ldr	r3, [r7, #28]
 80027c8:	781a      	ldrb	r2, [r3, #0]
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	b292      	uxth	r2, r2
 80027d0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80027d2:	69fb      	ldr	r3, [r7, #28]
 80027d4:	3301      	adds	r3, #1
 80027d6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80027de:	b29b      	uxth	r3, r3
 80027e0:	3b01      	subs	r3, #1
 80027e2:	b29a      	uxth	r2, r3
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80027f0:	b29b      	uxth	r3, r3
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d1cb      	bne.n	800278e <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	9300      	str	r3, [sp, #0]
 80027fa:	697b      	ldr	r3, [r7, #20]
 80027fc:	2200      	movs	r2, #0
 80027fe:	2140      	movs	r1, #64	; 0x40
 8002800:	68f8      	ldr	r0, [r7, #12]
 8002802:	f001 f822 	bl	800384a <UART_WaitOnFlagUntilTimeout>
 8002806:	4603      	mov	r3, r0
 8002808:	2b00      	cmp	r3, #0
 800280a:	d001      	beq.n	8002810 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 800280c:	2303      	movs	r3, #3
 800280e:	e005      	b.n	800281c <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	2220      	movs	r2, #32
 8002814:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8002816:	2300      	movs	r3, #0
 8002818:	e000      	b.n	800281c <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 800281a:	2302      	movs	r3, #2
  }
}
 800281c:	4618      	mov	r0, r3
 800281e:	3720      	adds	r7, #32
 8002820:	46bd      	mov	sp, r7
 8002822:	bd80      	pop	{r7, pc}

08002824 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	b08a      	sub	sp, #40	; 0x28
 8002828:	af02      	add	r7, sp, #8
 800282a:	60f8      	str	r0, [r7, #12]
 800282c:	60b9      	str	r1, [r7, #8]
 800282e:	603b      	str	r3, [r7, #0]
 8002830:	4613      	mov	r3, r2
 8002832:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002838:	2b20      	cmp	r3, #32
 800283a:	f040 80bf 	bne.w	80029bc <HAL_UART_Receive+0x198>
  {
    if ((pData == NULL) || (Size == 0U))
 800283e:	68bb      	ldr	r3, [r7, #8]
 8002840:	2b00      	cmp	r3, #0
 8002842:	d002      	beq.n	800284a <HAL_UART_Receive+0x26>
 8002844:	88fb      	ldrh	r3, [r7, #6]
 8002846:	2b00      	cmp	r3, #0
 8002848:	d101      	bne.n	800284e <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 800284a:	2301      	movs	r3, #1
 800284c:	e0b7      	b.n	80029be <HAL_UART_Receive+0x19a>
    }

    __HAL_LOCK(huart);
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8002854:	2b01      	cmp	r3, #1
 8002856:	d101      	bne.n	800285c <HAL_UART_Receive+0x38>
 8002858:	2302      	movs	r3, #2
 800285a:	e0b0      	b.n	80029be <HAL_UART_Receive+0x19a>
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	2201      	movs	r2, #1
 8002860:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	2200      	movs	r2, #0
 8002868:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	2222      	movs	r2, #34	; 0x22
 8002870:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	2200      	movs	r2, #0
 8002876:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002878:	f7fe fb12 	bl	8000ea0 <HAL_GetTick>
 800287c:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	88fa      	ldrh	r2, [r7, #6]
 8002882:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	88fa      	ldrh	r2, [r7, #6]
 800288a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	689b      	ldr	r3, [r3, #8]
 8002892:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002896:	d10e      	bne.n	80028b6 <HAL_UART_Receive+0x92>
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	691b      	ldr	r3, [r3, #16]
 800289c:	2b00      	cmp	r3, #0
 800289e:	d105      	bne.n	80028ac <HAL_UART_Receive+0x88>
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	f240 12ff 	movw	r2, #511	; 0x1ff
 80028a6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80028aa:	e02d      	b.n	8002908 <HAL_UART_Receive+0xe4>
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	22ff      	movs	r2, #255	; 0xff
 80028b0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80028b4:	e028      	b.n	8002908 <HAL_UART_Receive+0xe4>
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	689b      	ldr	r3, [r3, #8]
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d10d      	bne.n	80028da <HAL_UART_Receive+0xb6>
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	691b      	ldr	r3, [r3, #16]
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d104      	bne.n	80028d0 <HAL_UART_Receive+0xac>
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	22ff      	movs	r2, #255	; 0xff
 80028ca:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80028ce:	e01b      	b.n	8002908 <HAL_UART_Receive+0xe4>
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	227f      	movs	r2, #127	; 0x7f
 80028d4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80028d8:	e016      	b.n	8002908 <HAL_UART_Receive+0xe4>
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	689b      	ldr	r3, [r3, #8]
 80028de:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80028e2:	d10d      	bne.n	8002900 <HAL_UART_Receive+0xdc>
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	691b      	ldr	r3, [r3, #16]
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d104      	bne.n	80028f6 <HAL_UART_Receive+0xd2>
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	227f      	movs	r2, #127	; 0x7f
 80028f0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80028f4:	e008      	b.n	8002908 <HAL_UART_Receive+0xe4>
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	223f      	movs	r2, #63	; 0x3f
 80028fa:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80028fe:	e003      	b.n	8002908 <HAL_UART_Receive+0xe4>
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	2200      	movs	r2, #0
 8002904:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800290e:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	689b      	ldr	r3, [r3, #8]
 8002914:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002918:	d108      	bne.n	800292c <HAL_UART_Receive+0x108>
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	691b      	ldr	r3, [r3, #16]
 800291e:	2b00      	cmp	r3, #0
 8002920:	d104      	bne.n	800292c <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 8002922:	2300      	movs	r3, #0
 8002924:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002926:	68bb      	ldr	r3, [r7, #8]
 8002928:	61bb      	str	r3, [r7, #24]
 800292a:	e003      	b.n	8002934 <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 800292c:	68bb      	ldr	r3, [r7, #8]
 800292e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002930:	2300      	movs	r3, #0
 8002932:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	2200      	movs	r2, #0
 8002938:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800293c:	e033      	b.n	80029a6 <HAL_UART_Receive+0x182>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	9300      	str	r3, [sp, #0]
 8002942:	697b      	ldr	r3, [r7, #20]
 8002944:	2200      	movs	r2, #0
 8002946:	2120      	movs	r1, #32
 8002948:	68f8      	ldr	r0, [r7, #12]
 800294a:	f000 ff7e 	bl	800384a <UART_WaitOnFlagUntilTimeout>
 800294e:	4603      	mov	r3, r0
 8002950:	2b00      	cmp	r3, #0
 8002952:	d001      	beq.n	8002958 <HAL_UART_Receive+0x134>
      {
        return HAL_TIMEOUT;
 8002954:	2303      	movs	r3, #3
 8002956:	e032      	b.n	80029be <HAL_UART_Receive+0x19a>
      }
      if (pdata8bits == NULL)
 8002958:	69fb      	ldr	r3, [r7, #28]
 800295a:	2b00      	cmp	r3, #0
 800295c:	d10c      	bne.n	8002978 <HAL_UART_Receive+0x154>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8002964:	b29a      	uxth	r2, r3
 8002966:	8a7b      	ldrh	r3, [r7, #18]
 8002968:	4013      	ands	r3, r2
 800296a:	b29a      	uxth	r2, r3
 800296c:	69bb      	ldr	r3, [r7, #24]
 800296e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002970:	69bb      	ldr	r3, [r7, #24]
 8002972:	3302      	adds	r3, #2
 8002974:	61bb      	str	r3, [r7, #24]
 8002976:	e00d      	b.n	8002994 <HAL_UART_Receive+0x170>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800297e:	b29b      	uxth	r3, r3
 8002980:	b2da      	uxtb	r2, r3
 8002982:	8a7b      	ldrh	r3, [r7, #18]
 8002984:	b2db      	uxtb	r3, r3
 8002986:	4013      	ands	r3, r2
 8002988:	b2da      	uxtb	r2, r3
 800298a:	69fb      	ldr	r3, [r7, #28]
 800298c:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800298e:	69fb      	ldr	r3, [r7, #28]
 8002990:	3301      	adds	r3, #1
 8002992:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800299a:	b29b      	uxth	r3, r3
 800299c:	3b01      	subs	r3, #1
 800299e:	b29a      	uxth	r2, r3
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80029ac:	b29b      	uxth	r3, r3
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d1c5      	bne.n	800293e <HAL_UART_Receive+0x11a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	2220      	movs	r2, #32
 80029b6:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80029b8:	2300      	movs	r3, #0
 80029ba:	e000      	b.n	80029be <HAL_UART_Receive+0x19a>
  }
  else
  {
    return HAL_BUSY;
 80029bc:	2302      	movs	r3, #2
  }
}
 80029be:	4618      	mov	r0, r3
 80029c0:	3720      	adds	r7, #32
 80029c2:	46bd      	mov	sp, r7
 80029c4:	bd80      	pop	{r7, pc}

080029c6 <HAL_UART_Abort>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Abort(UART_HandleTypeDef *huart)
{
 80029c6:	b580      	push	{r7, lr}
 80029c8:	b0a0      	sub	sp, #128	; 0x80
 80029ca:	af00      	add	r7, sp, #0
 80029cc:	6078      	str	r0, [r7, #4]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                          USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE | USART_CR3_RXFTIE | USART_CR3_TXFTIE);
#else
  /* Disable TXEIE, TCIE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_TCIE));
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	65fb      	str	r3, [r7, #92]	; 0x5c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029d4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80029d6:	e853 3f00 	ldrex	r3, [r3]
 80029da:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 80029dc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80029de:	f423 73f0 	bic.w	r3, r3, #480	; 0x1e0
 80029e2:	67fb      	str	r3, [r7, #124]	; 0x7c
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	461a      	mov	r2, r3
 80029ea:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80029ec:	66bb      	str	r3, [r7, #104]	; 0x68
 80029ee:	667a      	str	r2, [r7, #100]	; 0x64
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029f0:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80029f2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80029f4:	e841 2300 	strex	r3, r2, [r1]
 80029f8:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 80029fa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d1e6      	bne.n	80029ce <HAL_UART_Abort+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	3308      	adds	r3, #8
 8002a06:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a08:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002a0a:	e853 3f00 	ldrex	r3, [r3]
 8002a0e:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8002a10:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002a12:	f023 0301 	bic.w	r3, r3, #1
 8002a16:	67bb      	str	r3, [r7, #120]	; 0x78
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	3308      	adds	r3, #8
 8002a1e:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8002a20:	657a      	str	r2, [r7, #84]	; 0x54
 8002a22:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a24:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8002a26:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002a28:	e841 2300 	strex	r3, r2, [r1]
 8002a2c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8002a2e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d1e5      	bne.n	8002a00 <HAL_UART_Abort+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a38:	2b01      	cmp	r3, #1
 8002a3a:	d118      	bne.n	8002a6e <HAL_UART_Abort+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a44:	e853 3f00 	ldrex	r3, [r3]
 8002a48:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002a4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a4c:	f023 0310 	bic.w	r3, r3, #16
 8002a50:	677b      	str	r3, [r7, #116]	; 0x74
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	461a      	mov	r2, r3
 8002a58:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002a5a:	643b      	str	r3, [r7, #64]	; 0x40
 8002a5c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a5e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002a60:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002a62:	e841 2300 	strex	r3, r2, [r1]
 8002a66:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002a68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d1e6      	bne.n	8002a3c <HAL_UART_Abort+0x76>
  }

  /* Abort the UART DMA Tx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	689b      	ldr	r3, [r3, #8]
 8002a74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a78:	2b80      	cmp	r3, #128	; 0x80
 8002a7a:	d137      	bne.n	8002aec <HAL_UART_Abort+0x126>
  {
    /* Disable the UART DMA Tx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	3308      	adds	r3, #8
 8002a82:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a84:	6a3b      	ldr	r3, [r7, #32]
 8002a86:	e853 3f00 	ldrex	r3, [r3]
 8002a8a:	61fb      	str	r3, [r7, #28]
   return(result);
 8002a8c:	69fb      	ldr	r3, [r7, #28]
 8002a8e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002a92:	673b      	str	r3, [r7, #112]	; 0x70
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	3308      	adds	r3, #8
 8002a9a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8002a9c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002a9e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002aa0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002aa2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002aa4:	e841 2300 	strex	r3, r2, [r1]
 8002aa8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d1e5      	bne.n	8002a7c <HAL_UART_Abort+0xb6>

    /* Abort the UART DMA Tx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmatx != NULL)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d019      	beq.n	8002aec <HAL_UART_Abort+0x126>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = NULL;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002abc:	2200      	movs	r2, #0
 8002abe:	639a      	str	r2, [r3, #56]	; 0x38

      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	f7fe fb2c 	bl	8001122 <HAL_DMA_Abort>
 8002aca:	4603      	mov	r3, r0
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d00d      	beq.n	8002aec <HAL_UART_Abort+0x126>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	f7fe fba3 	bl	8001220 <HAL_DMA_GetError>
 8002ada:	4603      	mov	r3, r0
 8002adc:	2b20      	cmp	r3, #32
 8002ade:	d105      	bne.n	8002aec <HAL_UART_Abort+0x126>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2210      	movs	r2, #16
 8002ae4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8002ae8:	2303      	movs	r3, #3
 8002aea:	e062      	b.n	8002bb2 <HAL_UART_Abort+0x1ec>
      }
    }
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	689b      	ldr	r3, [r3, #8]
 8002af2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002af6:	2b40      	cmp	r3, #64	; 0x40
 8002af8:	d137      	bne.n	8002b6a <HAL_UART_Abort+0x1a4>
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	3308      	adds	r3, #8
 8002b00:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	e853 3f00 	ldrex	r3, [r3]
 8002b08:	60bb      	str	r3, [r7, #8]
   return(result);
 8002b0a:	68bb      	ldr	r3, [r7, #8]
 8002b0c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002b10:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	3308      	adds	r3, #8
 8002b18:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002b1a:	61ba      	str	r2, [r7, #24]
 8002b1c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b1e:	6979      	ldr	r1, [r7, #20]
 8002b20:	69ba      	ldr	r2, [r7, #24]
 8002b22:	e841 2300 	strex	r3, r2, [r1]
 8002b26:	613b      	str	r3, [r7, #16]
   return(result);
 8002b28:	693b      	ldr	r3, [r7, #16]
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d1e5      	bne.n	8002afa <HAL_UART_Abort+0x134>

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d019      	beq.n	8002b6a <HAL_UART_Abort+0x1a4>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	639a      	str	r2, [r3, #56]	; 0x38

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b42:	4618      	mov	r0, r3
 8002b44:	f7fe faed 	bl	8001122 <HAL_DMA_Abort>
 8002b48:	4603      	mov	r3, r0
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d00d      	beq.n	8002b6a <HAL_UART_Abort+0x1a4>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b52:	4618      	mov	r0, r3
 8002b54:	f7fe fb64 	bl	8001220 <HAL_DMA_GetError>
 8002b58:	4603      	mov	r3, r0
 8002b5a:	2b20      	cmp	r3, #32
 8002b5c:	d105      	bne.n	8002b6a <HAL_UART_Abort+0x1a4>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	2210      	movs	r2, #16
 8002b62:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8002b66:	2303      	movs	r3, #3
 8002b68:	e023      	b.n	8002bb2 <HAL_UART_Abort+0x1ec>
      }
    }
  }

  /* Reset Tx and Rx transfer counters */
  huart->TxXferCount = 0U;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
  huart->RxXferCount = 0U;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	2200      	movs	r2, #0
 8002b76:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	220f      	movs	r2, #15
 8002b80:	621a      	str	r2, [r3, #32]
    __HAL_UART_SEND_REQ(huart, UART_TXDATA_FLUSH_REQUEST);
  }
#endif /* USART_CR1_FIFOEN */

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	8b1b      	ldrh	r3, [r3, #24]
 8002b88:	b29a      	uxth	r2, r3
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f042 0208 	orr.w	r2, r2, #8
 8002b92:	b292      	uxth	r2, r2
 8002b94:	831a      	strh	r2, [r3, #24]

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	2220      	movs	r2, #32
 8002b9a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2220      	movs	r2, #32
 8002ba0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	661a      	str	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	2200      	movs	r2, #0
 8002bac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8002bb0:	2300      	movs	r3, #0
}
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	3780      	adds	r7, #128	; 0x80
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	bd80      	pop	{r7, pc}
	...

08002bbc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b0ba      	sub	sp, #232	; 0xe8
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	69db      	ldr	r3, [r3, #28]
 8002bca:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	689b      	ldr	r3, [r3, #8]
 8002bde:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002be2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8002be6:	f640 030f 	movw	r3, #2063	; 0x80f
 8002bea:	4013      	ands	r3, r2
 8002bec:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8002bf0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d115      	bne.n	8002c24 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002bf8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002bfc:	f003 0320 	and.w	r3, r3, #32
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d00f      	beq.n	8002c24 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002c04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002c08:	f003 0320 	and.w	r3, r3, #32
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d009      	beq.n	8002c24 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	f000 82a6 	beq.w	8003166 <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002c1e:	6878      	ldr	r0, [r7, #4]
 8002c20:	4798      	blx	r3
      }
      return;
 8002c22:	e2a0      	b.n	8003166 <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8002c24:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	f000 8117 	beq.w	8002e5c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8002c2e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002c32:	f003 0301 	and.w	r3, r3, #1
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d106      	bne.n	8002c48 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8002c3a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8002c3e:	4b85      	ldr	r3, [pc, #532]	; (8002e54 <HAL_UART_IRQHandler+0x298>)
 8002c40:	4013      	ands	r3, r2
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	f000 810a 	beq.w	8002e5c <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002c48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c4c:	f003 0301 	and.w	r3, r3, #1
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d011      	beq.n	8002c78 <HAL_UART_IRQHandler+0xbc>
 8002c54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002c58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d00b      	beq.n	8002c78 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	2201      	movs	r2, #1
 8002c66:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002c6e:	f043 0201 	orr.w	r2, r3, #1
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002c78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c7c:	f003 0302 	and.w	r3, r3, #2
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d011      	beq.n	8002ca8 <HAL_UART_IRQHandler+0xec>
 8002c84:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002c88:	f003 0301 	and.w	r3, r3, #1
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d00b      	beq.n	8002ca8 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	2202      	movs	r2, #2
 8002c96:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002c9e:	f043 0204 	orr.w	r2, r3, #4
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002ca8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002cac:	f003 0304 	and.w	r3, r3, #4
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d011      	beq.n	8002cd8 <HAL_UART_IRQHandler+0x11c>
 8002cb4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002cb8:	f003 0301 	and.w	r3, r3, #1
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d00b      	beq.n	8002cd8 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	2204      	movs	r2, #4
 8002cc6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002cce:	f043 0202 	orr.w	r2, r3, #2
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002cd8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002cdc:	f003 0308 	and.w	r3, r3, #8
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d017      	beq.n	8002d14 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002ce4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002ce8:	f003 0320 	and.w	r3, r3, #32
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d105      	bne.n	8002cfc <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8002cf0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002cf4:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d00b      	beq.n	8002d14 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	2208      	movs	r2, #8
 8002d02:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002d0a:	f043 0208 	orr.w	r2, r3, #8
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002d14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d18:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d012      	beq.n	8002d46 <HAL_UART_IRQHandler+0x18a>
 8002d20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002d24:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d00c      	beq.n	8002d46 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002d34:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002d3c:	f043 0220 	orr.w	r2, r3, #32
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	f000 820c 	beq.w	800316a <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8002d52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d56:	f003 0320 	and.w	r3, r3, #32
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d00d      	beq.n	8002d7a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002d5e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002d62:	f003 0320 	and.w	r3, r3, #32
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d007      	beq.n	8002d7a <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d003      	beq.n	8002d7a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002d76:	6878      	ldr	r0, [r7, #4]
 8002d78:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002d80:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	689b      	ldr	r3, [r3, #8]
 8002d8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d8e:	2b40      	cmp	r3, #64	; 0x40
 8002d90:	d005      	beq.n	8002d9e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002d92:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002d96:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d04f      	beq.n	8002e3e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002d9e:	6878      	ldr	r0, [r7, #4]
 8002da0:	f000 fe17 	bl	80039d2 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	689b      	ldr	r3, [r3, #8]
 8002daa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dae:	2b40      	cmp	r3, #64	; 0x40
 8002db0:	d141      	bne.n	8002e36 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	3308      	adds	r3, #8
 8002db8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002dbc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002dc0:	e853 3f00 	ldrex	r3, [r3]
 8002dc4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002dc8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002dcc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002dd0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	3308      	adds	r3, #8
 8002dda:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002dde:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002de2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002de6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002dea:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002dee:	e841 2300 	strex	r3, r2, [r1]
 8002df2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002df6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d1d9      	bne.n	8002db2 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d013      	beq.n	8002e2e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e0a:	4a13      	ldr	r2, [pc, #76]	; (8002e58 <HAL_UART_IRQHandler+0x29c>)
 8002e0c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e12:	4618      	mov	r0, r3
 8002e14:	f7fe f9c3 	bl	800119e <HAL_DMA_Abort_IT>
 8002e18:	4603      	mov	r3, r0
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d017      	beq.n	8002e4e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e24:	687a      	ldr	r2, [r7, #4]
 8002e26:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8002e28:	4610      	mov	r0, r2
 8002e2a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e2c:	e00f      	b.n	8002e4e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002e2e:	6878      	ldr	r0, [r7, #4]
 8002e30:	f000 f9b0 	bl	8003194 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e34:	e00b      	b.n	8002e4e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002e36:	6878      	ldr	r0, [r7, #4]
 8002e38:	f000 f9ac 	bl	8003194 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e3c:	e007      	b.n	8002e4e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002e3e:	6878      	ldr	r0, [r7, #4]
 8002e40:	f000 f9a8 	bl	8003194 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2200      	movs	r2, #0
 8002e48:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8002e4c:	e18d      	b.n	800316a <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e4e:	bf00      	nop
    return;
 8002e50:	e18b      	b.n	800316a <HAL_UART_IRQHandler+0x5ae>
 8002e52:	bf00      	nop
 8002e54:	04000120 	.word	0x04000120
 8002e58:	08003a99 	.word	0x08003a99

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e60:	2b01      	cmp	r3, #1
 8002e62:	f040 8146 	bne.w	80030f2 <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002e66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e6a:	f003 0310 	and.w	r3, r3, #16
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	f000 813f 	beq.w	80030f2 <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002e74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002e78:	f003 0310 	and.w	r3, r3, #16
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	f000 8138 	beq.w	80030f2 <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	2210      	movs	r2, #16
 8002e88:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	689b      	ldr	r3, [r3, #8]
 8002e90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e94:	2b40      	cmp	r3, #64	; 0x40
 8002e96:	f040 80b4 	bne.w	8003002 <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	685b      	ldr	r3, [r3, #4]
 8002ea2:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002ea6:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	f000 815f 	beq.w	800316e <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8002eb6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002eba:	429a      	cmp	r2, r3
 8002ebc:	f080 8157 	bcs.w	800316e <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002ec6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f003 0320 	and.w	r3, r3, #32
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	f040 8085 	bne.w	8002fe6 <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ee4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002ee8:	e853 3f00 	ldrex	r3, [r3]
 8002eec:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002ef0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002ef4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002ef8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	461a      	mov	r2, r3
 8002f02:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002f06:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002f0a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f0e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002f12:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002f16:	e841 2300 	strex	r3, r2, [r1]
 8002f1a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002f1e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d1da      	bne.n	8002edc <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	3308      	adds	r3, #8
 8002f2c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f2e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002f30:	e853 3f00 	ldrex	r3, [r3]
 8002f34:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002f36:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002f38:	f023 0301 	bic.w	r3, r3, #1
 8002f3c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	3308      	adds	r3, #8
 8002f46:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002f4a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002f4e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f50:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002f52:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002f56:	e841 2300 	strex	r3, r2, [r1]
 8002f5a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002f5c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d1e1      	bne.n	8002f26 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	3308      	adds	r3, #8
 8002f68:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f6a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002f6c:	e853 3f00 	ldrex	r3, [r3]
 8002f70:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002f72:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f74:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002f78:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	3308      	adds	r3, #8
 8002f82:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002f86:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002f88:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f8a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002f8c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002f8e:	e841 2300 	strex	r3, r2, [r1]
 8002f92:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002f94:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d1e3      	bne.n	8002f62 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	2220      	movs	r2, #32
 8002f9e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002fae:	e853 3f00 	ldrex	r3, [r3]
 8002fb2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002fb4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002fb6:	f023 0310 	bic.w	r3, r3, #16
 8002fba:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	461a      	mov	r2, r3
 8002fc4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002fc8:	65bb      	str	r3, [r7, #88]	; 0x58
 8002fca:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fcc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002fce:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002fd0:	e841 2300 	strex	r3, r2, [r1]
 8002fd4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002fd6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d1e4      	bne.n	8002fa6 <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	f7fe f89e 	bl	8001122 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002ff2:	b29b      	uxth	r3, r3
 8002ff4:	1ad3      	subs	r3, r2, r3
 8002ff6:	b29b      	uxth	r3, r3
 8002ff8:	4619      	mov	r1, r3
 8002ffa:	6878      	ldr	r0, [r7, #4]
 8002ffc:	f000 f8d4 	bl	80031a8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003000:	e0b5      	b.n	800316e <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800300e:	b29b      	uxth	r3, r3
 8003010:	1ad3      	subs	r3, r2, r3
 8003012:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800301c:	b29b      	uxth	r3, r3
 800301e:	2b00      	cmp	r3, #0
 8003020:	f000 80a7 	beq.w	8003172 <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 8003024:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003028:	2b00      	cmp	r3, #0
 800302a:	f000 80a2 	beq.w	8003172 <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003034:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003036:	e853 3f00 	ldrex	r3, [r3]
 800303a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800303c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800303e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003042:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	461a      	mov	r2, r3
 800304c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003050:	647b      	str	r3, [r7, #68]	; 0x44
 8003052:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003054:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003056:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003058:	e841 2300 	strex	r3, r2, [r1]
 800305c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800305e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003060:	2b00      	cmp	r3, #0
 8003062:	d1e4      	bne.n	800302e <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	3308      	adds	r3, #8
 800306a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800306c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800306e:	e853 3f00 	ldrex	r3, [r3]
 8003072:	623b      	str	r3, [r7, #32]
   return(result);
 8003074:	6a3b      	ldr	r3, [r7, #32]
 8003076:	f023 0301 	bic.w	r3, r3, #1
 800307a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	3308      	adds	r3, #8
 8003084:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003088:	633a      	str	r2, [r7, #48]	; 0x30
 800308a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800308c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800308e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003090:	e841 2300 	strex	r3, r2, [r1]
 8003094:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003096:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003098:	2b00      	cmp	r3, #0
 800309a:	d1e3      	bne.n	8003064 <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	2220      	movs	r2, #32
 80030a0:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	2200      	movs	r2, #0
 80030a6:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2200      	movs	r2, #0
 80030ac:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030b4:	693b      	ldr	r3, [r7, #16]
 80030b6:	e853 3f00 	ldrex	r3, [r3]
 80030ba:	60fb      	str	r3, [r7, #12]
   return(result);
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	f023 0310 	bic.w	r3, r3, #16
 80030c2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	461a      	mov	r2, r3
 80030cc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80030d0:	61fb      	str	r3, [r7, #28]
 80030d2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030d4:	69b9      	ldr	r1, [r7, #24]
 80030d6:	69fa      	ldr	r2, [r7, #28]
 80030d8:	e841 2300 	strex	r3, r2, [r1]
 80030dc:	617b      	str	r3, [r7, #20]
   return(result);
 80030de:	697b      	ldr	r3, [r7, #20]
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d1e4      	bne.n	80030ae <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80030e4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80030e8:	4619      	mov	r1, r3
 80030ea:	6878      	ldr	r0, [r7, #4]
 80030ec:	f000 f85c 	bl	80031a8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80030f0:	e03f      	b.n	8003172 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80030f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80030f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d00e      	beq.n	800311c <HAL_UART_IRQHandler+0x560>
 80030fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003102:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003106:	2b00      	cmp	r3, #0
 8003108:	d008      	beq.n	800311c <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003112:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003114:	6878      	ldr	r0, [r7, #4]
 8003116:	f000 fcff 	bl	8003b18 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800311a:	e02d      	b.n	8003178 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 800311c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003120:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003124:	2b00      	cmp	r3, #0
 8003126:	d00e      	beq.n	8003146 <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003128:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800312c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003130:	2b00      	cmp	r3, #0
 8003132:	d008      	beq.n	8003146 <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003138:	2b00      	cmp	r3, #0
 800313a:	d01c      	beq.n	8003176 <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003140:	6878      	ldr	r0, [r7, #4]
 8003142:	4798      	blx	r3
    }
    return;
 8003144:	e017      	b.n	8003176 <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003146:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800314a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800314e:	2b00      	cmp	r3, #0
 8003150:	d012      	beq.n	8003178 <HAL_UART_IRQHandler+0x5bc>
 8003152:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003156:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800315a:	2b00      	cmp	r3, #0
 800315c:	d00c      	beq.n	8003178 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 800315e:	6878      	ldr	r0, [r7, #4]
 8003160:	f000 fcb0 	bl	8003ac4 <UART_EndTransmit_IT>
    return;
 8003164:	e008      	b.n	8003178 <HAL_UART_IRQHandler+0x5bc>
      return;
 8003166:	bf00      	nop
 8003168:	e006      	b.n	8003178 <HAL_UART_IRQHandler+0x5bc>
    return;
 800316a:	bf00      	nop
 800316c:	e004      	b.n	8003178 <HAL_UART_IRQHandler+0x5bc>
      return;
 800316e:	bf00      	nop
 8003170:	e002      	b.n	8003178 <HAL_UART_IRQHandler+0x5bc>
      return;
 8003172:	bf00      	nop
 8003174:	e000      	b.n	8003178 <HAL_UART_IRQHandler+0x5bc>
    return;
 8003176:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8003178:	37e8      	adds	r7, #232	; 0xe8
 800317a:	46bd      	mov	sp, r7
 800317c:	bd80      	pop	{r7, pc}
 800317e:	bf00      	nop

08003180 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003180:	b480      	push	{r7}
 8003182:	b083      	sub	sp, #12
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003188:	bf00      	nop
 800318a:	370c      	adds	r7, #12
 800318c:	46bd      	mov	sp, r7
 800318e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003192:	4770      	bx	lr

08003194 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003194:	b480      	push	{r7}
 8003196:	b083      	sub	sp, #12
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800319c:	bf00      	nop
 800319e:	370c      	adds	r7, #12
 80031a0:	46bd      	mov	sp, r7
 80031a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a6:	4770      	bx	lr

080031a8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80031a8:	b480      	push	{r7}
 80031aa:	b083      	sub	sp, #12
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
 80031b0:	460b      	mov	r3, r1
 80031b2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80031b4:	bf00      	nop
 80031b6:	370c      	adds	r7, #12
 80031b8:	46bd      	mov	sp, r7
 80031ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031be:	4770      	bx	lr

080031c0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80031c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80031c4:	b08a      	sub	sp, #40	; 0x28
 80031c6:	af00      	add	r7, sp, #0
 80031c8:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80031ca:	2300      	movs	r3, #0
 80031cc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	689a      	ldr	r2, [r3, #8]
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	691b      	ldr	r3, [r3, #16]
 80031d8:	431a      	orrs	r2, r3
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	695b      	ldr	r3, [r3, #20]
 80031de:	431a      	orrs	r2, r3
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	69db      	ldr	r3, [r3, #28]
 80031e4:	4313      	orrs	r3, r2
 80031e6:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	681a      	ldr	r2, [r3, #0]
 80031ee:	4b9e      	ldr	r3, [pc, #632]	; (8003468 <UART_SetConfig+0x2a8>)
 80031f0:	4013      	ands	r3, r2
 80031f2:	68fa      	ldr	r2, [r7, #12]
 80031f4:	6812      	ldr	r2, [r2, #0]
 80031f6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80031f8:	430b      	orrs	r3, r1
 80031fa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	685b      	ldr	r3, [r3, #4]
 8003202:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	68da      	ldr	r2, [r3, #12]
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	430a      	orrs	r2, r1
 8003210:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	699b      	ldr	r3, [r3, #24]
 8003216:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	4a93      	ldr	r2, [pc, #588]	; (800346c <UART_SetConfig+0x2ac>)
 800321e:	4293      	cmp	r3, r2
 8003220:	d004      	beq.n	800322c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	6a1b      	ldr	r3, [r3, #32]
 8003226:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003228:	4313      	orrs	r3, r2
 800322a:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	689b      	ldr	r3, [r3, #8]
 8003232:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800323c:	430a      	orrs	r2, r1
 800323e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	4a8a      	ldr	r2, [pc, #552]	; (8003470 <UART_SetConfig+0x2b0>)
 8003246:	4293      	cmp	r3, r2
 8003248:	d126      	bne.n	8003298 <UART_SetConfig+0xd8>
 800324a:	4b8a      	ldr	r3, [pc, #552]	; (8003474 <UART_SetConfig+0x2b4>)
 800324c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003250:	f003 0303 	and.w	r3, r3, #3
 8003254:	2b03      	cmp	r3, #3
 8003256:	d81b      	bhi.n	8003290 <UART_SetConfig+0xd0>
 8003258:	a201      	add	r2, pc, #4	; (adr r2, 8003260 <UART_SetConfig+0xa0>)
 800325a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800325e:	bf00      	nop
 8003260:	08003271 	.word	0x08003271
 8003264:	08003281 	.word	0x08003281
 8003268:	08003279 	.word	0x08003279
 800326c:	08003289 	.word	0x08003289
 8003270:	2301      	movs	r3, #1
 8003272:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003276:	e0ab      	b.n	80033d0 <UART_SetConfig+0x210>
 8003278:	2302      	movs	r3, #2
 800327a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800327e:	e0a7      	b.n	80033d0 <UART_SetConfig+0x210>
 8003280:	2304      	movs	r3, #4
 8003282:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003286:	e0a3      	b.n	80033d0 <UART_SetConfig+0x210>
 8003288:	2308      	movs	r3, #8
 800328a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800328e:	e09f      	b.n	80033d0 <UART_SetConfig+0x210>
 8003290:	2310      	movs	r3, #16
 8003292:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003296:	e09b      	b.n	80033d0 <UART_SetConfig+0x210>
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	4a76      	ldr	r2, [pc, #472]	; (8003478 <UART_SetConfig+0x2b8>)
 800329e:	4293      	cmp	r3, r2
 80032a0:	d138      	bne.n	8003314 <UART_SetConfig+0x154>
 80032a2:	4b74      	ldr	r3, [pc, #464]	; (8003474 <UART_SetConfig+0x2b4>)
 80032a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032a8:	f003 030c 	and.w	r3, r3, #12
 80032ac:	2b0c      	cmp	r3, #12
 80032ae:	d82d      	bhi.n	800330c <UART_SetConfig+0x14c>
 80032b0:	a201      	add	r2, pc, #4	; (adr r2, 80032b8 <UART_SetConfig+0xf8>)
 80032b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032b6:	bf00      	nop
 80032b8:	080032ed 	.word	0x080032ed
 80032bc:	0800330d 	.word	0x0800330d
 80032c0:	0800330d 	.word	0x0800330d
 80032c4:	0800330d 	.word	0x0800330d
 80032c8:	080032fd 	.word	0x080032fd
 80032cc:	0800330d 	.word	0x0800330d
 80032d0:	0800330d 	.word	0x0800330d
 80032d4:	0800330d 	.word	0x0800330d
 80032d8:	080032f5 	.word	0x080032f5
 80032dc:	0800330d 	.word	0x0800330d
 80032e0:	0800330d 	.word	0x0800330d
 80032e4:	0800330d 	.word	0x0800330d
 80032e8:	08003305 	.word	0x08003305
 80032ec:	2300      	movs	r3, #0
 80032ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80032f2:	e06d      	b.n	80033d0 <UART_SetConfig+0x210>
 80032f4:	2302      	movs	r3, #2
 80032f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80032fa:	e069      	b.n	80033d0 <UART_SetConfig+0x210>
 80032fc:	2304      	movs	r3, #4
 80032fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003302:	e065      	b.n	80033d0 <UART_SetConfig+0x210>
 8003304:	2308      	movs	r3, #8
 8003306:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800330a:	e061      	b.n	80033d0 <UART_SetConfig+0x210>
 800330c:	2310      	movs	r3, #16
 800330e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003312:	e05d      	b.n	80033d0 <UART_SetConfig+0x210>
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	4a58      	ldr	r2, [pc, #352]	; (800347c <UART_SetConfig+0x2bc>)
 800331a:	4293      	cmp	r3, r2
 800331c:	d125      	bne.n	800336a <UART_SetConfig+0x1aa>
 800331e:	4b55      	ldr	r3, [pc, #340]	; (8003474 <UART_SetConfig+0x2b4>)
 8003320:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003324:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003328:	2b30      	cmp	r3, #48	; 0x30
 800332a:	d016      	beq.n	800335a <UART_SetConfig+0x19a>
 800332c:	2b30      	cmp	r3, #48	; 0x30
 800332e:	d818      	bhi.n	8003362 <UART_SetConfig+0x1a2>
 8003330:	2b20      	cmp	r3, #32
 8003332:	d00a      	beq.n	800334a <UART_SetConfig+0x18a>
 8003334:	2b20      	cmp	r3, #32
 8003336:	d814      	bhi.n	8003362 <UART_SetConfig+0x1a2>
 8003338:	2b00      	cmp	r3, #0
 800333a:	d002      	beq.n	8003342 <UART_SetConfig+0x182>
 800333c:	2b10      	cmp	r3, #16
 800333e:	d008      	beq.n	8003352 <UART_SetConfig+0x192>
 8003340:	e00f      	b.n	8003362 <UART_SetConfig+0x1a2>
 8003342:	2300      	movs	r3, #0
 8003344:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003348:	e042      	b.n	80033d0 <UART_SetConfig+0x210>
 800334a:	2302      	movs	r3, #2
 800334c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003350:	e03e      	b.n	80033d0 <UART_SetConfig+0x210>
 8003352:	2304      	movs	r3, #4
 8003354:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003358:	e03a      	b.n	80033d0 <UART_SetConfig+0x210>
 800335a:	2308      	movs	r3, #8
 800335c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003360:	e036      	b.n	80033d0 <UART_SetConfig+0x210>
 8003362:	2310      	movs	r3, #16
 8003364:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003368:	e032      	b.n	80033d0 <UART_SetConfig+0x210>
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	4a3f      	ldr	r2, [pc, #252]	; (800346c <UART_SetConfig+0x2ac>)
 8003370:	4293      	cmp	r3, r2
 8003372:	d12a      	bne.n	80033ca <UART_SetConfig+0x20a>
 8003374:	4b3f      	ldr	r3, [pc, #252]	; (8003474 <UART_SetConfig+0x2b4>)
 8003376:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800337a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800337e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003382:	d01a      	beq.n	80033ba <UART_SetConfig+0x1fa>
 8003384:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003388:	d81b      	bhi.n	80033c2 <UART_SetConfig+0x202>
 800338a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800338e:	d00c      	beq.n	80033aa <UART_SetConfig+0x1ea>
 8003390:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003394:	d815      	bhi.n	80033c2 <UART_SetConfig+0x202>
 8003396:	2b00      	cmp	r3, #0
 8003398:	d003      	beq.n	80033a2 <UART_SetConfig+0x1e2>
 800339a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800339e:	d008      	beq.n	80033b2 <UART_SetConfig+0x1f2>
 80033a0:	e00f      	b.n	80033c2 <UART_SetConfig+0x202>
 80033a2:	2300      	movs	r3, #0
 80033a4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80033a8:	e012      	b.n	80033d0 <UART_SetConfig+0x210>
 80033aa:	2302      	movs	r3, #2
 80033ac:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80033b0:	e00e      	b.n	80033d0 <UART_SetConfig+0x210>
 80033b2:	2304      	movs	r3, #4
 80033b4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80033b8:	e00a      	b.n	80033d0 <UART_SetConfig+0x210>
 80033ba:	2308      	movs	r3, #8
 80033bc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80033c0:	e006      	b.n	80033d0 <UART_SetConfig+0x210>
 80033c2:	2310      	movs	r3, #16
 80033c4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80033c8:	e002      	b.n	80033d0 <UART_SetConfig+0x210>
 80033ca:	2310      	movs	r3, #16
 80033cc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	4a25      	ldr	r2, [pc, #148]	; (800346c <UART_SetConfig+0x2ac>)
 80033d6:	4293      	cmp	r3, r2
 80033d8:	f040 808a 	bne.w	80034f0 <UART_SetConfig+0x330>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80033dc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80033e0:	2b08      	cmp	r3, #8
 80033e2:	d824      	bhi.n	800342e <UART_SetConfig+0x26e>
 80033e4:	a201      	add	r2, pc, #4	; (adr r2, 80033ec <UART_SetConfig+0x22c>)
 80033e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033ea:	bf00      	nop
 80033ec:	08003411 	.word	0x08003411
 80033f0:	0800342f 	.word	0x0800342f
 80033f4:	08003419 	.word	0x08003419
 80033f8:	0800342f 	.word	0x0800342f
 80033fc:	0800341f 	.word	0x0800341f
 8003400:	0800342f 	.word	0x0800342f
 8003404:	0800342f 	.word	0x0800342f
 8003408:	0800342f 	.word	0x0800342f
 800340c:	08003427 	.word	0x08003427
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003410:	f7fe ff14 	bl	800223c <HAL_RCC_GetPCLK1Freq>
 8003414:	61f8      	str	r0, [r7, #28]
        break;
 8003416:	e010      	b.n	800343a <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003418:	4b19      	ldr	r3, [pc, #100]	; (8003480 <UART_SetConfig+0x2c0>)
 800341a:	61fb      	str	r3, [r7, #28]
        break;
 800341c:	e00d      	b.n	800343a <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800341e:	f7fe fe75 	bl	800210c <HAL_RCC_GetSysClockFreq>
 8003422:	61f8      	str	r0, [r7, #28]
        break;
 8003424:	e009      	b.n	800343a <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003426:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800342a:	61fb      	str	r3, [r7, #28]
        break;
 800342c:	e005      	b.n	800343a <UART_SetConfig+0x27a>
      default:
        pclk = 0U;
 800342e:	2300      	movs	r3, #0
 8003430:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003432:	2301      	movs	r3, #1
 8003434:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003438:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800343a:	69fb      	ldr	r3, [r7, #28]
 800343c:	2b00      	cmp	r3, #0
 800343e:	f000 8109 	beq.w	8003654 <UART_SetConfig+0x494>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	685a      	ldr	r2, [r3, #4]
 8003446:	4613      	mov	r3, r2
 8003448:	005b      	lsls	r3, r3, #1
 800344a:	4413      	add	r3, r2
 800344c:	69fa      	ldr	r2, [r7, #28]
 800344e:	429a      	cmp	r2, r3
 8003450:	d305      	bcc.n	800345e <UART_SetConfig+0x29e>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	685b      	ldr	r3, [r3, #4]
 8003456:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003458:	69fa      	ldr	r2, [r7, #28]
 800345a:	429a      	cmp	r2, r3
 800345c:	d912      	bls.n	8003484 <UART_SetConfig+0x2c4>
      {
        ret = HAL_ERROR;
 800345e:	2301      	movs	r3, #1
 8003460:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003464:	e0f6      	b.n	8003654 <UART_SetConfig+0x494>
 8003466:	bf00      	nop
 8003468:	efff69f3 	.word	0xefff69f3
 800346c:	40008000 	.word	0x40008000
 8003470:	40013800 	.word	0x40013800
 8003474:	40021000 	.word	0x40021000
 8003478:	40004400 	.word	0x40004400
 800347c:	40004800 	.word	0x40004800
 8003480:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003484:	69fb      	ldr	r3, [r7, #28]
 8003486:	2200      	movs	r2, #0
 8003488:	461c      	mov	r4, r3
 800348a:	4615      	mov	r5, r2
 800348c:	f04f 0200 	mov.w	r2, #0
 8003490:	f04f 0300 	mov.w	r3, #0
 8003494:	022b      	lsls	r3, r5, #8
 8003496:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800349a:	0222      	lsls	r2, r4, #8
 800349c:	68f9      	ldr	r1, [r7, #12]
 800349e:	6849      	ldr	r1, [r1, #4]
 80034a0:	0849      	lsrs	r1, r1, #1
 80034a2:	2000      	movs	r0, #0
 80034a4:	4688      	mov	r8, r1
 80034a6:	4681      	mov	r9, r0
 80034a8:	eb12 0a08 	adds.w	sl, r2, r8
 80034ac:	eb43 0b09 	adc.w	fp, r3, r9
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	685b      	ldr	r3, [r3, #4]
 80034b4:	2200      	movs	r2, #0
 80034b6:	603b      	str	r3, [r7, #0]
 80034b8:	607a      	str	r2, [r7, #4]
 80034ba:	e9d7 2300 	ldrd	r2, r3, [r7]
 80034be:	4650      	mov	r0, sl
 80034c0:	4659      	mov	r1, fp
 80034c2:	f7fc fed5 	bl	8000270 <__aeabi_uldivmod>
 80034c6:	4602      	mov	r2, r0
 80034c8:	460b      	mov	r3, r1
 80034ca:	4613      	mov	r3, r2
 80034cc:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80034ce:	69bb      	ldr	r3, [r7, #24]
 80034d0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80034d4:	d308      	bcc.n	80034e8 <UART_SetConfig+0x328>
 80034d6:	69bb      	ldr	r3, [r7, #24]
 80034d8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80034dc:	d204      	bcs.n	80034e8 <UART_SetConfig+0x328>
        {
          huart->Instance->BRR = usartdiv;
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	69ba      	ldr	r2, [r7, #24]
 80034e4:	60da      	str	r2, [r3, #12]
 80034e6:	e0b5      	b.n	8003654 <UART_SetConfig+0x494>
        }
        else
        {
          ret = HAL_ERROR;
 80034e8:	2301      	movs	r3, #1
 80034ea:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80034ee:	e0b1      	b.n	8003654 <UART_SetConfig+0x494>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	69db      	ldr	r3, [r3, #28]
 80034f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80034f8:	d15d      	bne.n	80035b6 <UART_SetConfig+0x3f6>
  {
    switch (clocksource)
 80034fa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80034fe:	2b08      	cmp	r3, #8
 8003500:	d827      	bhi.n	8003552 <UART_SetConfig+0x392>
 8003502:	a201      	add	r2, pc, #4	; (adr r2, 8003508 <UART_SetConfig+0x348>)
 8003504:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003508:	0800352d 	.word	0x0800352d
 800350c:	08003535 	.word	0x08003535
 8003510:	0800353d 	.word	0x0800353d
 8003514:	08003553 	.word	0x08003553
 8003518:	08003543 	.word	0x08003543
 800351c:	08003553 	.word	0x08003553
 8003520:	08003553 	.word	0x08003553
 8003524:	08003553 	.word	0x08003553
 8003528:	0800354b 	.word	0x0800354b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800352c:	f7fe fe86 	bl	800223c <HAL_RCC_GetPCLK1Freq>
 8003530:	61f8      	str	r0, [r7, #28]
        break;
 8003532:	e014      	b.n	800355e <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003534:	f7fe fe98 	bl	8002268 <HAL_RCC_GetPCLK2Freq>
 8003538:	61f8      	str	r0, [r7, #28]
        break;
 800353a:	e010      	b.n	800355e <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800353c:	4b4c      	ldr	r3, [pc, #304]	; (8003670 <UART_SetConfig+0x4b0>)
 800353e:	61fb      	str	r3, [r7, #28]
        break;
 8003540:	e00d      	b.n	800355e <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003542:	f7fe fde3 	bl	800210c <HAL_RCC_GetSysClockFreq>
 8003546:	61f8      	str	r0, [r7, #28]
        break;
 8003548:	e009      	b.n	800355e <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800354a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800354e:	61fb      	str	r3, [r7, #28]
        break;
 8003550:	e005      	b.n	800355e <UART_SetConfig+0x39e>
      default:
        pclk = 0U;
 8003552:	2300      	movs	r3, #0
 8003554:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003556:	2301      	movs	r3, #1
 8003558:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800355c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800355e:	69fb      	ldr	r3, [r7, #28]
 8003560:	2b00      	cmp	r3, #0
 8003562:	d077      	beq.n	8003654 <UART_SetConfig+0x494>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003564:	69fb      	ldr	r3, [r7, #28]
 8003566:	005a      	lsls	r2, r3, #1
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	685b      	ldr	r3, [r3, #4]
 800356c:	085b      	lsrs	r3, r3, #1
 800356e:	441a      	add	r2, r3
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	685b      	ldr	r3, [r3, #4]
 8003574:	fbb2 f3f3 	udiv	r3, r2, r3
 8003578:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800357a:	69bb      	ldr	r3, [r7, #24]
 800357c:	2b0f      	cmp	r3, #15
 800357e:	d916      	bls.n	80035ae <UART_SetConfig+0x3ee>
 8003580:	69bb      	ldr	r3, [r7, #24]
 8003582:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003586:	d212      	bcs.n	80035ae <UART_SetConfig+0x3ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003588:	69bb      	ldr	r3, [r7, #24]
 800358a:	b29b      	uxth	r3, r3
 800358c:	f023 030f 	bic.w	r3, r3, #15
 8003590:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003592:	69bb      	ldr	r3, [r7, #24]
 8003594:	085b      	lsrs	r3, r3, #1
 8003596:	b29b      	uxth	r3, r3
 8003598:	f003 0307 	and.w	r3, r3, #7
 800359c:	b29a      	uxth	r2, r3
 800359e:	8afb      	ldrh	r3, [r7, #22]
 80035a0:	4313      	orrs	r3, r2
 80035a2:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	8afa      	ldrh	r2, [r7, #22]
 80035aa:	60da      	str	r2, [r3, #12]
 80035ac:	e052      	b.n	8003654 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 80035ae:	2301      	movs	r3, #1
 80035b0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80035b4:	e04e      	b.n	8003654 <UART_SetConfig+0x494>
      }
    }
  }
  else
  {
    switch (clocksource)
 80035b6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80035ba:	2b08      	cmp	r3, #8
 80035bc:	d827      	bhi.n	800360e <UART_SetConfig+0x44e>
 80035be:	a201      	add	r2, pc, #4	; (adr r2, 80035c4 <UART_SetConfig+0x404>)
 80035c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035c4:	080035e9 	.word	0x080035e9
 80035c8:	080035f1 	.word	0x080035f1
 80035cc:	080035f9 	.word	0x080035f9
 80035d0:	0800360f 	.word	0x0800360f
 80035d4:	080035ff 	.word	0x080035ff
 80035d8:	0800360f 	.word	0x0800360f
 80035dc:	0800360f 	.word	0x0800360f
 80035e0:	0800360f 	.word	0x0800360f
 80035e4:	08003607 	.word	0x08003607
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80035e8:	f7fe fe28 	bl	800223c <HAL_RCC_GetPCLK1Freq>
 80035ec:	61f8      	str	r0, [r7, #28]
        break;
 80035ee:	e014      	b.n	800361a <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80035f0:	f7fe fe3a 	bl	8002268 <HAL_RCC_GetPCLK2Freq>
 80035f4:	61f8      	str	r0, [r7, #28]
        break;
 80035f6:	e010      	b.n	800361a <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80035f8:	4b1d      	ldr	r3, [pc, #116]	; (8003670 <UART_SetConfig+0x4b0>)
 80035fa:	61fb      	str	r3, [r7, #28]
        break;
 80035fc:	e00d      	b.n	800361a <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80035fe:	f7fe fd85 	bl	800210c <HAL_RCC_GetSysClockFreq>
 8003602:	61f8      	str	r0, [r7, #28]
        break;
 8003604:	e009      	b.n	800361a <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003606:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800360a:	61fb      	str	r3, [r7, #28]
        break;
 800360c:	e005      	b.n	800361a <UART_SetConfig+0x45a>
      default:
        pclk = 0U;
 800360e:	2300      	movs	r3, #0
 8003610:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003612:	2301      	movs	r3, #1
 8003614:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003618:	bf00      	nop
    }

    if (pclk != 0U)
 800361a:	69fb      	ldr	r3, [r7, #28]
 800361c:	2b00      	cmp	r3, #0
 800361e:	d019      	beq.n	8003654 <UART_SetConfig+0x494>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	685b      	ldr	r3, [r3, #4]
 8003624:	085a      	lsrs	r2, r3, #1
 8003626:	69fb      	ldr	r3, [r7, #28]
 8003628:	441a      	add	r2, r3
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	685b      	ldr	r3, [r3, #4]
 800362e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003632:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003634:	69bb      	ldr	r3, [r7, #24]
 8003636:	2b0f      	cmp	r3, #15
 8003638:	d909      	bls.n	800364e <UART_SetConfig+0x48e>
 800363a:	69bb      	ldr	r3, [r7, #24]
 800363c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003640:	d205      	bcs.n	800364e <UART_SetConfig+0x48e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003642:	69bb      	ldr	r3, [r7, #24]
 8003644:	b29a      	uxth	r2, r3
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	60da      	str	r2, [r3, #12]
 800364c:	e002      	b.n	8003654 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 800364e:	2301      	movs	r3, #1
 8003650:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	2200      	movs	r2, #0
 8003658:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	2200      	movs	r2, #0
 800365e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003660:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8003664:	4618      	mov	r0, r3
 8003666:	3728      	adds	r7, #40	; 0x28
 8003668:	46bd      	mov	sp, r7
 800366a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800366e:	bf00      	nop
 8003670:	00f42400 	.word	0x00f42400

08003674 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003674:	b480      	push	{r7}
 8003676:	b083      	sub	sp, #12
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003680:	f003 0301 	and.w	r3, r3, #1
 8003684:	2b00      	cmp	r3, #0
 8003686:	d00a      	beq.n	800369e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	685b      	ldr	r3, [r3, #4]
 800368e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	430a      	orrs	r2, r1
 800369c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036a2:	f003 0302 	and.w	r3, r3, #2
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d00a      	beq.n	80036c0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	685b      	ldr	r3, [r3, #4]
 80036b0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	430a      	orrs	r2, r1
 80036be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036c4:	f003 0304 	and.w	r3, r3, #4
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d00a      	beq.n	80036e2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	685b      	ldr	r3, [r3, #4]
 80036d2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	430a      	orrs	r2, r1
 80036e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036e6:	f003 0308 	and.w	r3, r3, #8
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d00a      	beq.n	8003704 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	685b      	ldr	r3, [r3, #4]
 80036f4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	430a      	orrs	r2, r1
 8003702:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003708:	f003 0310 	and.w	r3, r3, #16
 800370c:	2b00      	cmp	r3, #0
 800370e:	d00a      	beq.n	8003726 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	689b      	ldr	r3, [r3, #8]
 8003716:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	430a      	orrs	r2, r1
 8003724:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800372a:	f003 0320 	and.w	r3, r3, #32
 800372e:	2b00      	cmp	r3, #0
 8003730:	d00a      	beq.n	8003748 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	689b      	ldr	r3, [r3, #8]
 8003738:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	430a      	orrs	r2, r1
 8003746:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800374c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003750:	2b00      	cmp	r3, #0
 8003752:	d01a      	beq.n	800378a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	685b      	ldr	r3, [r3, #4]
 800375a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	430a      	orrs	r2, r1
 8003768:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800376e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003772:	d10a      	bne.n	800378a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	685b      	ldr	r3, [r3, #4]
 800377a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	430a      	orrs	r2, r1
 8003788:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800378e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003792:	2b00      	cmp	r3, #0
 8003794:	d00a      	beq.n	80037ac <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	685b      	ldr	r3, [r3, #4]
 800379c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	430a      	orrs	r2, r1
 80037aa:	605a      	str	r2, [r3, #4]
  }
}
 80037ac:	bf00      	nop
 80037ae:	370c      	adds	r7, #12
 80037b0:	46bd      	mov	sp, r7
 80037b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b6:	4770      	bx	lr

080037b8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80037b8:	b580      	push	{r7, lr}
 80037ba:	b086      	sub	sp, #24
 80037bc:	af02      	add	r7, sp, #8
 80037be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2200      	movs	r2, #0
 80037c4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80037c8:	f7fd fb6a 	bl	8000ea0 <HAL_GetTick>
 80037cc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f003 0308 	and.w	r3, r3, #8
 80037d8:	2b08      	cmp	r3, #8
 80037da:	d10e      	bne.n	80037fa <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80037dc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80037e0:	9300      	str	r3, [sp, #0]
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	2200      	movs	r2, #0
 80037e6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80037ea:	6878      	ldr	r0, [r7, #4]
 80037ec:	f000 f82d 	bl	800384a <UART_WaitOnFlagUntilTimeout>
 80037f0:	4603      	mov	r3, r0
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d001      	beq.n	80037fa <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80037f6:	2303      	movs	r3, #3
 80037f8:	e023      	b.n	8003842 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f003 0304 	and.w	r3, r3, #4
 8003804:	2b04      	cmp	r3, #4
 8003806:	d10e      	bne.n	8003826 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003808:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800380c:	9300      	str	r3, [sp, #0]
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	2200      	movs	r2, #0
 8003812:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003816:	6878      	ldr	r0, [r7, #4]
 8003818:	f000 f817 	bl	800384a <UART_WaitOnFlagUntilTimeout>
 800381c:	4603      	mov	r3, r0
 800381e:	2b00      	cmp	r3, #0
 8003820:	d001      	beq.n	8003826 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003822:	2303      	movs	r3, #3
 8003824:	e00d      	b.n	8003842 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	2220      	movs	r2, #32
 800382a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2220      	movs	r2, #32
 8003830:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	2200      	movs	r2, #0
 8003836:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2200      	movs	r2, #0
 800383c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003840:	2300      	movs	r3, #0
}
 8003842:	4618      	mov	r0, r3
 8003844:	3710      	adds	r7, #16
 8003846:	46bd      	mov	sp, r7
 8003848:	bd80      	pop	{r7, pc}

0800384a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800384a:	b580      	push	{r7, lr}
 800384c:	b09c      	sub	sp, #112	; 0x70
 800384e:	af00      	add	r7, sp, #0
 8003850:	60f8      	str	r0, [r7, #12]
 8003852:	60b9      	str	r1, [r7, #8]
 8003854:	603b      	str	r3, [r7, #0]
 8003856:	4613      	mov	r3, r2
 8003858:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800385a:	e0a5      	b.n	80039a8 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800385c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800385e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003862:	f000 80a1 	beq.w	80039a8 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003866:	f7fd fb1b 	bl	8000ea0 <HAL_GetTick>
 800386a:	4602      	mov	r2, r0
 800386c:	683b      	ldr	r3, [r7, #0]
 800386e:	1ad3      	subs	r3, r2, r3
 8003870:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003872:	429a      	cmp	r2, r3
 8003874:	d302      	bcc.n	800387c <UART_WaitOnFlagUntilTimeout+0x32>
 8003876:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003878:	2b00      	cmp	r3, #0
 800387a:	d13e      	bne.n	80038fa <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003882:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003884:	e853 3f00 	ldrex	r3, [r3]
 8003888:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800388a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800388c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003890:	667b      	str	r3, [r7, #100]	; 0x64
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	461a      	mov	r2, r3
 8003898:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800389a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800389c:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800389e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80038a0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80038a2:	e841 2300 	strex	r3, r2, [r1]
 80038a6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80038a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d1e6      	bne.n	800387c <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	3308      	adds	r3, #8
 80038b4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80038b8:	e853 3f00 	ldrex	r3, [r3]
 80038bc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80038be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038c0:	f023 0301 	bic.w	r3, r3, #1
 80038c4:	663b      	str	r3, [r7, #96]	; 0x60
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	3308      	adds	r3, #8
 80038cc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80038ce:	64ba      	str	r2, [r7, #72]	; 0x48
 80038d0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038d2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80038d4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80038d6:	e841 2300 	strex	r3, r2, [r1]
 80038da:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80038dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d1e5      	bne.n	80038ae <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	2220      	movs	r2, #32
 80038e6:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	2220      	movs	r2, #32
 80038ec:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	2200      	movs	r2, #0
 80038f2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80038f6:	2303      	movs	r3, #3
 80038f8:	e067      	b.n	80039ca <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f003 0304 	and.w	r3, r3, #4
 8003904:	2b00      	cmp	r3, #0
 8003906:	d04f      	beq.n	80039a8 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	69db      	ldr	r3, [r3, #28]
 800390e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003912:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003916:	d147      	bne.n	80039a8 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003920:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003928:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800392a:	e853 3f00 	ldrex	r3, [r3]
 800392e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003932:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003936:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	461a      	mov	r2, r3
 800393e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003940:	637b      	str	r3, [r7, #52]	; 0x34
 8003942:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003944:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003946:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003948:	e841 2300 	strex	r3, r2, [r1]
 800394c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800394e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003950:	2b00      	cmp	r3, #0
 8003952:	d1e6      	bne.n	8003922 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	3308      	adds	r3, #8
 800395a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800395c:	697b      	ldr	r3, [r7, #20]
 800395e:	e853 3f00 	ldrex	r3, [r3]
 8003962:	613b      	str	r3, [r7, #16]
   return(result);
 8003964:	693b      	ldr	r3, [r7, #16]
 8003966:	f023 0301 	bic.w	r3, r3, #1
 800396a:	66bb      	str	r3, [r7, #104]	; 0x68
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	3308      	adds	r3, #8
 8003972:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003974:	623a      	str	r2, [r7, #32]
 8003976:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003978:	69f9      	ldr	r1, [r7, #28]
 800397a:	6a3a      	ldr	r2, [r7, #32]
 800397c:	e841 2300 	strex	r3, r2, [r1]
 8003980:	61bb      	str	r3, [r7, #24]
   return(result);
 8003982:	69bb      	ldr	r3, [r7, #24]
 8003984:	2b00      	cmp	r3, #0
 8003986:	d1e5      	bne.n	8003954 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	2220      	movs	r2, #32
 800398c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	2220      	movs	r2, #32
 8003992:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	2220      	movs	r2, #32
 8003998:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	2200      	movs	r2, #0
 80039a0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80039a4:	2303      	movs	r3, #3
 80039a6:	e010      	b.n	80039ca <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	69da      	ldr	r2, [r3, #28]
 80039ae:	68bb      	ldr	r3, [r7, #8]
 80039b0:	4013      	ands	r3, r2
 80039b2:	68ba      	ldr	r2, [r7, #8]
 80039b4:	429a      	cmp	r2, r3
 80039b6:	bf0c      	ite	eq
 80039b8:	2301      	moveq	r3, #1
 80039ba:	2300      	movne	r3, #0
 80039bc:	b2db      	uxtb	r3, r3
 80039be:	461a      	mov	r2, r3
 80039c0:	79fb      	ldrb	r3, [r7, #7]
 80039c2:	429a      	cmp	r2, r3
 80039c4:	f43f af4a 	beq.w	800385c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80039c8:	2300      	movs	r3, #0
}
 80039ca:	4618      	mov	r0, r3
 80039cc:	3770      	adds	r7, #112	; 0x70
 80039ce:	46bd      	mov	sp, r7
 80039d0:	bd80      	pop	{r7, pc}

080039d2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80039d2:	b480      	push	{r7}
 80039d4:	b095      	sub	sp, #84	; 0x54
 80039d6:	af00      	add	r7, sp, #0
 80039d8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039e2:	e853 3f00 	ldrex	r3, [r3]
 80039e6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80039e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039ea:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80039ee:	64fb      	str	r3, [r7, #76]	; 0x4c
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	461a      	mov	r2, r3
 80039f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80039f8:	643b      	str	r3, [r7, #64]	; 0x40
 80039fa:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039fc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80039fe:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003a00:	e841 2300 	strex	r3, r2, [r1]
 8003a04:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003a06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d1e6      	bne.n	80039da <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	3308      	adds	r3, #8
 8003a12:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a14:	6a3b      	ldr	r3, [r7, #32]
 8003a16:	e853 3f00 	ldrex	r3, [r3]
 8003a1a:	61fb      	str	r3, [r7, #28]
   return(result);
 8003a1c:	69fb      	ldr	r3, [r7, #28]
 8003a1e:	f023 0301 	bic.w	r3, r3, #1
 8003a22:	64bb      	str	r3, [r7, #72]	; 0x48
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	3308      	adds	r3, #8
 8003a2a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003a2c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003a2e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a30:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003a32:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003a34:	e841 2300 	strex	r3, r2, [r1]
 8003a38:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d1e5      	bne.n	8003a0c <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a44:	2b01      	cmp	r3, #1
 8003a46:	d118      	bne.n	8003a7a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	e853 3f00 	ldrex	r3, [r3]
 8003a54:	60bb      	str	r3, [r7, #8]
   return(result);
 8003a56:	68bb      	ldr	r3, [r7, #8]
 8003a58:	f023 0310 	bic.w	r3, r3, #16
 8003a5c:	647b      	str	r3, [r7, #68]	; 0x44
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	461a      	mov	r2, r3
 8003a64:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a66:	61bb      	str	r3, [r7, #24]
 8003a68:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a6a:	6979      	ldr	r1, [r7, #20]
 8003a6c:	69ba      	ldr	r2, [r7, #24]
 8003a6e:	e841 2300 	strex	r3, r2, [r1]
 8003a72:	613b      	str	r3, [r7, #16]
   return(result);
 8003a74:	693b      	ldr	r3, [r7, #16]
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d1e6      	bne.n	8003a48 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	2220      	movs	r2, #32
 8003a7e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2200      	movs	r2, #0
 8003a84:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	2200      	movs	r2, #0
 8003a8a:	665a      	str	r2, [r3, #100]	; 0x64
}
 8003a8c:	bf00      	nop
 8003a8e:	3754      	adds	r7, #84	; 0x54
 8003a90:	46bd      	mov	sp, r7
 8003a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a96:	4770      	bx	lr

08003a98 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	b084      	sub	sp, #16
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003aa4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003ab6:	68f8      	ldr	r0, [r7, #12]
 8003ab8:	f7ff fb6c 	bl	8003194 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003abc:	bf00      	nop
 8003abe:	3710      	adds	r7, #16
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	bd80      	pop	{r7, pc}

08003ac4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	b088      	sub	sp, #32
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	e853 3f00 	ldrex	r3, [r3]
 8003ad8:	60bb      	str	r3, [r7, #8]
   return(result);
 8003ada:	68bb      	ldr	r3, [r7, #8]
 8003adc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003ae0:	61fb      	str	r3, [r7, #28]
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	461a      	mov	r2, r3
 8003ae8:	69fb      	ldr	r3, [r7, #28]
 8003aea:	61bb      	str	r3, [r7, #24]
 8003aec:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003aee:	6979      	ldr	r1, [r7, #20]
 8003af0:	69ba      	ldr	r2, [r7, #24]
 8003af2:	e841 2300 	strex	r3, r2, [r1]
 8003af6:	613b      	str	r3, [r7, #16]
   return(result);
 8003af8:	693b      	ldr	r3, [r7, #16]
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d1e6      	bne.n	8003acc <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	2220      	movs	r2, #32
 8003b02:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2200      	movs	r2, #0
 8003b08:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003b0a:	6878      	ldr	r0, [r7, #4]
 8003b0c:	f7ff fb38 	bl	8003180 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003b10:	bf00      	nop
 8003b12:	3720      	adds	r7, #32
 8003b14:	46bd      	mov	sp, r7
 8003b16:	bd80      	pop	{r7, pc}

08003b18 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003b18:	b480      	push	{r7}
 8003b1a:	b083      	sub	sp, #12
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003b20:	bf00      	nop
 8003b22:	370c      	adds	r7, #12
 8003b24:	46bd      	mov	sp, r7
 8003b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2a:	4770      	bx	lr

08003b2c <__errno>:
 8003b2c:	4b01      	ldr	r3, [pc, #4]	; (8003b34 <__errno+0x8>)
 8003b2e:	6818      	ldr	r0, [r3, #0]
 8003b30:	4770      	bx	lr
 8003b32:	bf00      	nop
 8003b34:	2000000c 	.word	0x2000000c

08003b38 <__libc_init_array>:
 8003b38:	b570      	push	{r4, r5, r6, lr}
 8003b3a:	4d0d      	ldr	r5, [pc, #52]	; (8003b70 <__libc_init_array+0x38>)
 8003b3c:	4c0d      	ldr	r4, [pc, #52]	; (8003b74 <__libc_init_array+0x3c>)
 8003b3e:	1b64      	subs	r4, r4, r5
 8003b40:	10a4      	asrs	r4, r4, #2
 8003b42:	2600      	movs	r6, #0
 8003b44:	42a6      	cmp	r6, r4
 8003b46:	d109      	bne.n	8003b5c <__libc_init_array+0x24>
 8003b48:	4d0b      	ldr	r5, [pc, #44]	; (8003b78 <__libc_init_array+0x40>)
 8003b4a:	4c0c      	ldr	r4, [pc, #48]	; (8003b7c <__libc_init_array+0x44>)
 8003b4c:	f001 f84c 	bl	8004be8 <_init>
 8003b50:	1b64      	subs	r4, r4, r5
 8003b52:	10a4      	asrs	r4, r4, #2
 8003b54:	2600      	movs	r6, #0
 8003b56:	42a6      	cmp	r6, r4
 8003b58:	d105      	bne.n	8003b66 <__libc_init_array+0x2e>
 8003b5a:	bd70      	pop	{r4, r5, r6, pc}
 8003b5c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b60:	4798      	blx	r3
 8003b62:	3601      	adds	r6, #1
 8003b64:	e7ee      	b.n	8003b44 <__libc_init_array+0xc>
 8003b66:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b6a:	4798      	blx	r3
 8003b6c:	3601      	adds	r6, #1
 8003b6e:	e7f2      	b.n	8003b56 <__libc_init_array+0x1e>
 8003b70:	08004dbc 	.word	0x08004dbc
 8003b74:	08004dbc 	.word	0x08004dbc
 8003b78:	08004dbc 	.word	0x08004dbc
 8003b7c:	08004dc0 	.word	0x08004dc0

08003b80 <memset>:
 8003b80:	4402      	add	r2, r0
 8003b82:	4603      	mov	r3, r0
 8003b84:	4293      	cmp	r3, r2
 8003b86:	d100      	bne.n	8003b8a <memset+0xa>
 8003b88:	4770      	bx	lr
 8003b8a:	f803 1b01 	strb.w	r1, [r3], #1
 8003b8e:	e7f9      	b.n	8003b84 <memset+0x4>

08003b90 <iprintf>:
 8003b90:	b40f      	push	{r0, r1, r2, r3}
 8003b92:	4b0a      	ldr	r3, [pc, #40]	; (8003bbc <iprintf+0x2c>)
 8003b94:	b513      	push	{r0, r1, r4, lr}
 8003b96:	681c      	ldr	r4, [r3, #0]
 8003b98:	b124      	cbz	r4, 8003ba4 <iprintf+0x14>
 8003b9a:	69a3      	ldr	r3, [r4, #24]
 8003b9c:	b913      	cbnz	r3, 8003ba4 <iprintf+0x14>
 8003b9e:	4620      	mov	r0, r4
 8003ba0:	f000 fa86 	bl	80040b0 <__sinit>
 8003ba4:	ab05      	add	r3, sp, #20
 8003ba6:	9a04      	ldr	r2, [sp, #16]
 8003ba8:	68a1      	ldr	r1, [r4, #8]
 8003baa:	9301      	str	r3, [sp, #4]
 8003bac:	4620      	mov	r0, r4
 8003bae:	f000 fc8f 	bl	80044d0 <_vfiprintf_r>
 8003bb2:	b002      	add	sp, #8
 8003bb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003bb8:	b004      	add	sp, #16
 8003bba:	4770      	bx	lr
 8003bbc:	2000000c 	.word	0x2000000c

08003bc0 <_puts_r>:
 8003bc0:	b570      	push	{r4, r5, r6, lr}
 8003bc2:	460e      	mov	r6, r1
 8003bc4:	4605      	mov	r5, r0
 8003bc6:	b118      	cbz	r0, 8003bd0 <_puts_r+0x10>
 8003bc8:	6983      	ldr	r3, [r0, #24]
 8003bca:	b90b      	cbnz	r3, 8003bd0 <_puts_r+0x10>
 8003bcc:	f000 fa70 	bl	80040b0 <__sinit>
 8003bd0:	69ab      	ldr	r3, [r5, #24]
 8003bd2:	68ac      	ldr	r4, [r5, #8]
 8003bd4:	b913      	cbnz	r3, 8003bdc <_puts_r+0x1c>
 8003bd6:	4628      	mov	r0, r5
 8003bd8:	f000 fa6a 	bl	80040b0 <__sinit>
 8003bdc:	4b2c      	ldr	r3, [pc, #176]	; (8003c90 <_puts_r+0xd0>)
 8003bde:	429c      	cmp	r4, r3
 8003be0:	d120      	bne.n	8003c24 <_puts_r+0x64>
 8003be2:	686c      	ldr	r4, [r5, #4]
 8003be4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003be6:	07db      	lsls	r3, r3, #31
 8003be8:	d405      	bmi.n	8003bf6 <_puts_r+0x36>
 8003bea:	89a3      	ldrh	r3, [r4, #12]
 8003bec:	0598      	lsls	r0, r3, #22
 8003bee:	d402      	bmi.n	8003bf6 <_puts_r+0x36>
 8003bf0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003bf2:	f000 fafb 	bl	80041ec <__retarget_lock_acquire_recursive>
 8003bf6:	89a3      	ldrh	r3, [r4, #12]
 8003bf8:	0719      	lsls	r1, r3, #28
 8003bfa:	d51d      	bpl.n	8003c38 <_puts_r+0x78>
 8003bfc:	6923      	ldr	r3, [r4, #16]
 8003bfe:	b1db      	cbz	r3, 8003c38 <_puts_r+0x78>
 8003c00:	3e01      	subs	r6, #1
 8003c02:	68a3      	ldr	r3, [r4, #8]
 8003c04:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003c08:	3b01      	subs	r3, #1
 8003c0a:	60a3      	str	r3, [r4, #8]
 8003c0c:	bb39      	cbnz	r1, 8003c5e <_puts_r+0x9e>
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	da38      	bge.n	8003c84 <_puts_r+0xc4>
 8003c12:	4622      	mov	r2, r4
 8003c14:	210a      	movs	r1, #10
 8003c16:	4628      	mov	r0, r5
 8003c18:	f000 f870 	bl	8003cfc <__swbuf_r>
 8003c1c:	3001      	adds	r0, #1
 8003c1e:	d011      	beq.n	8003c44 <_puts_r+0x84>
 8003c20:	250a      	movs	r5, #10
 8003c22:	e011      	b.n	8003c48 <_puts_r+0x88>
 8003c24:	4b1b      	ldr	r3, [pc, #108]	; (8003c94 <_puts_r+0xd4>)
 8003c26:	429c      	cmp	r4, r3
 8003c28:	d101      	bne.n	8003c2e <_puts_r+0x6e>
 8003c2a:	68ac      	ldr	r4, [r5, #8]
 8003c2c:	e7da      	b.n	8003be4 <_puts_r+0x24>
 8003c2e:	4b1a      	ldr	r3, [pc, #104]	; (8003c98 <_puts_r+0xd8>)
 8003c30:	429c      	cmp	r4, r3
 8003c32:	bf08      	it	eq
 8003c34:	68ec      	ldreq	r4, [r5, #12]
 8003c36:	e7d5      	b.n	8003be4 <_puts_r+0x24>
 8003c38:	4621      	mov	r1, r4
 8003c3a:	4628      	mov	r0, r5
 8003c3c:	f000 f8b0 	bl	8003da0 <__swsetup_r>
 8003c40:	2800      	cmp	r0, #0
 8003c42:	d0dd      	beq.n	8003c00 <_puts_r+0x40>
 8003c44:	f04f 35ff 	mov.w	r5, #4294967295
 8003c48:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003c4a:	07da      	lsls	r2, r3, #31
 8003c4c:	d405      	bmi.n	8003c5a <_puts_r+0x9a>
 8003c4e:	89a3      	ldrh	r3, [r4, #12]
 8003c50:	059b      	lsls	r3, r3, #22
 8003c52:	d402      	bmi.n	8003c5a <_puts_r+0x9a>
 8003c54:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003c56:	f000 faca 	bl	80041ee <__retarget_lock_release_recursive>
 8003c5a:	4628      	mov	r0, r5
 8003c5c:	bd70      	pop	{r4, r5, r6, pc}
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	da04      	bge.n	8003c6c <_puts_r+0xac>
 8003c62:	69a2      	ldr	r2, [r4, #24]
 8003c64:	429a      	cmp	r2, r3
 8003c66:	dc06      	bgt.n	8003c76 <_puts_r+0xb6>
 8003c68:	290a      	cmp	r1, #10
 8003c6a:	d004      	beq.n	8003c76 <_puts_r+0xb6>
 8003c6c:	6823      	ldr	r3, [r4, #0]
 8003c6e:	1c5a      	adds	r2, r3, #1
 8003c70:	6022      	str	r2, [r4, #0]
 8003c72:	7019      	strb	r1, [r3, #0]
 8003c74:	e7c5      	b.n	8003c02 <_puts_r+0x42>
 8003c76:	4622      	mov	r2, r4
 8003c78:	4628      	mov	r0, r5
 8003c7a:	f000 f83f 	bl	8003cfc <__swbuf_r>
 8003c7e:	3001      	adds	r0, #1
 8003c80:	d1bf      	bne.n	8003c02 <_puts_r+0x42>
 8003c82:	e7df      	b.n	8003c44 <_puts_r+0x84>
 8003c84:	6823      	ldr	r3, [r4, #0]
 8003c86:	250a      	movs	r5, #10
 8003c88:	1c5a      	adds	r2, r3, #1
 8003c8a:	6022      	str	r2, [r4, #0]
 8003c8c:	701d      	strb	r5, [r3, #0]
 8003c8e:	e7db      	b.n	8003c48 <_puts_r+0x88>
 8003c90:	08004d40 	.word	0x08004d40
 8003c94:	08004d60 	.word	0x08004d60
 8003c98:	08004d20 	.word	0x08004d20

08003c9c <puts>:
 8003c9c:	4b02      	ldr	r3, [pc, #8]	; (8003ca8 <puts+0xc>)
 8003c9e:	4601      	mov	r1, r0
 8003ca0:	6818      	ldr	r0, [r3, #0]
 8003ca2:	f7ff bf8d 	b.w	8003bc0 <_puts_r>
 8003ca6:	bf00      	nop
 8003ca8:	2000000c 	.word	0x2000000c

08003cac <strncmp>:
 8003cac:	b510      	push	{r4, lr}
 8003cae:	b17a      	cbz	r2, 8003cd0 <strncmp+0x24>
 8003cb0:	4603      	mov	r3, r0
 8003cb2:	3901      	subs	r1, #1
 8003cb4:	1884      	adds	r4, r0, r2
 8003cb6:	f813 0b01 	ldrb.w	r0, [r3], #1
 8003cba:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8003cbe:	4290      	cmp	r0, r2
 8003cc0:	d101      	bne.n	8003cc6 <strncmp+0x1a>
 8003cc2:	42a3      	cmp	r3, r4
 8003cc4:	d101      	bne.n	8003cca <strncmp+0x1e>
 8003cc6:	1a80      	subs	r0, r0, r2
 8003cc8:	bd10      	pop	{r4, pc}
 8003cca:	2800      	cmp	r0, #0
 8003ccc:	d1f3      	bne.n	8003cb6 <strncmp+0xa>
 8003cce:	e7fa      	b.n	8003cc6 <strncmp+0x1a>
 8003cd0:	4610      	mov	r0, r2
 8003cd2:	e7f9      	b.n	8003cc8 <strncmp+0x1c>

08003cd4 <strncpy>:
 8003cd4:	b510      	push	{r4, lr}
 8003cd6:	3901      	subs	r1, #1
 8003cd8:	4603      	mov	r3, r0
 8003cda:	b132      	cbz	r2, 8003cea <strncpy+0x16>
 8003cdc:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8003ce0:	f803 4b01 	strb.w	r4, [r3], #1
 8003ce4:	3a01      	subs	r2, #1
 8003ce6:	2c00      	cmp	r4, #0
 8003ce8:	d1f7      	bne.n	8003cda <strncpy+0x6>
 8003cea:	441a      	add	r2, r3
 8003cec:	2100      	movs	r1, #0
 8003cee:	4293      	cmp	r3, r2
 8003cf0:	d100      	bne.n	8003cf4 <strncpy+0x20>
 8003cf2:	bd10      	pop	{r4, pc}
 8003cf4:	f803 1b01 	strb.w	r1, [r3], #1
 8003cf8:	e7f9      	b.n	8003cee <strncpy+0x1a>
	...

08003cfc <__swbuf_r>:
 8003cfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003cfe:	460e      	mov	r6, r1
 8003d00:	4614      	mov	r4, r2
 8003d02:	4605      	mov	r5, r0
 8003d04:	b118      	cbz	r0, 8003d0e <__swbuf_r+0x12>
 8003d06:	6983      	ldr	r3, [r0, #24]
 8003d08:	b90b      	cbnz	r3, 8003d0e <__swbuf_r+0x12>
 8003d0a:	f000 f9d1 	bl	80040b0 <__sinit>
 8003d0e:	4b21      	ldr	r3, [pc, #132]	; (8003d94 <__swbuf_r+0x98>)
 8003d10:	429c      	cmp	r4, r3
 8003d12:	d12b      	bne.n	8003d6c <__swbuf_r+0x70>
 8003d14:	686c      	ldr	r4, [r5, #4]
 8003d16:	69a3      	ldr	r3, [r4, #24]
 8003d18:	60a3      	str	r3, [r4, #8]
 8003d1a:	89a3      	ldrh	r3, [r4, #12]
 8003d1c:	071a      	lsls	r2, r3, #28
 8003d1e:	d52f      	bpl.n	8003d80 <__swbuf_r+0x84>
 8003d20:	6923      	ldr	r3, [r4, #16]
 8003d22:	b36b      	cbz	r3, 8003d80 <__swbuf_r+0x84>
 8003d24:	6923      	ldr	r3, [r4, #16]
 8003d26:	6820      	ldr	r0, [r4, #0]
 8003d28:	1ac0      	subs	r0, r0, r3
 8003d2a:	6963      	ldr	r3, [r4, #20]
 8003d2c:	b2f6      	uxtb	r6, r6
 8003d2e:	4283      	cmp	r3, r0
 8003d30:	4637      	mov	r7, r6
 8003d32:	dc04      	bgt.n	8003d3e <__swbuf_r+0x42>
 8003d34:	4621      	mov	r1, r4
 8003d36:	4628      	mov	r0, r5
 8003d38:	f000 f926 	bl	8003f88 <_fflush_r>
 8003d3c:	bb30      	cbnz	r0, 8003d8c <__swbuf_r+0x90>
 8003d3e:	68a3      	ldr	r3, [r4, #8]
 8003d40:	3b01      	subs	r3, #1
 8003d42:	60a3      	str	r3, [r4, #8]
 8003d44:	6823      	ldr	r3, [r4, #0]
 8003d46:	1c5a      	adds	r2, r3, #1
 8003d48:	6022      	str	r2, [r4, #0]
 8003d4a:	701e      	strb	r6, [r3, #0]
 8003d4c:	6963      	ldr	r3, [r4, #20]
 8003d4e:	3001      	adds	r0, #1
 8003d50:	4283      	cmp	r3, r0
 8003d52:	d004      	beq.n	8003d5e <__swbuf_r+0x62>
 8003d54:	89a3      	ldrh	r3, [r4, #12]
 8003d56:	07db      	lsls	r3, r3, #31
 8003d58:	d506      	bpl.n	8003d68 <__swbuf_r+0x6c>
 8003d5a:	2e0a      	cmp	r6, #10
 8003d5c:	d104      	bne.n	8003d68 <__swbuf_r+0x6c>
 8003d5e:	4621      	mov	r1, r4
 8003d60:	4628      	mov	r0, r5
 8003d62:	f000 f911 	bl	8003f88 <_fflush_r>
 8003d66:	b988      	cbnz	r0, 8003d8c <__swbuf_r+0x90>
 8003d68:	4638      	mov	r0, r7
 8003d6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003d6c:	4b0a      	ldr	r3, [pc, #40]	; (8003d98 <__swbuf_r+0x9c>)
 8003d6e:	429c      	cmp	r4, r3
 8003d70:	d101      	bne.n	8003d76 <__swbuf_r+0x7a>
 8003d72:	68ac      	ldr	r4, [r5, #8]
 8003d74:	e7cf      	b.n	8003d16 <__swbuf_r+0x1a>
 8003d76:	4b09      	ldr	r3, [pc, #36]	; (8003d9c <__swbuf_r+0xa0>)
 8003d78:	429c      	cmp	r4, r3
 8003d7a:	bf08      	it	eq
 8003d7c:	68ec      	ldreq	r4, [r5, #12]
 8003d7e:	e7ca      	b.n	8003d16 <__swbuf_r+0x1a>
 8003d80:	4621      	mov	r1, r4
 8003d82:	4628      	mov	r0, r5
 8003d84:	f000 f80c 	bl	8003da0 <__swsetup_r>
 8003d88:	2800      	cmp	r0, #0
 8003d8a:	d0cb      	beq.n	8003d24 <__swbuf_r+0x28>
 8003d8c:	f04f 37ff 	mov.w	r7, #4294967295
 8003d90:	e7ea      	b.n	8003d68 <__swbuf_r+0x6c>
 8003d92:	bf00      	nop
 8003d94:	08004d40 	.word	0x08004d40
 8003d98:	08004d60 	.word	0x08004d60
 8003d9c:	08004d20 	.word	0x08004d20

08003da0 <__swsetup_r>:
 8003da0:	4b32      	ldr	r3, [pc, #200]	; (8003e6c <__swsetup_r+0xcc>)
 8003da2:	b570      	push	{r4, r5, r6, lr}
 8003da4:	681d      	ldr	r5, [r3, #0]
 8003da6:	4606      	mov	r6, r0
 8003da8:	460c      	mov	r4, r1
 8003daa:	b125      	cbz	r5, 8003db6 <__swsetup_r+0x16>
 8003dac:	69ab      	ldr	r3, [r5, #24]
 8003dae:	b913      	cbnz	r3, 8003db6 <__swsetup_r+0x16>
 8003db0:	4628      	mov	r0, r5
 8003db2:	f000 f97d 	bl	80040b0 <__sinit>
 8003db6:	4b2e      	ldr	r3, [pc, #184]	; (8003e70 <__swsetup_r+0xd0>)
 8003db8:	429c      	cmp	r4, r3
 8003dba:	d10f      	bne.n	8003ddc <__swsetup_r+0x3c>
 8003dbc:	686c      	ldr	r4, [r5, #4]
 8003dbe:	89a3      	ldrh	r3, [r4, #12]
 8003dc0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003dc4:	0719      	lsls	r1, r3, #28
 8003dc6:	d42c      	bmi.n	8003e22 <__swsetup_r+0x82>
 8003dc8:	06dd      	lsls	r5, r3, #27
 8003dca:	d411      	bmi.n	8003df0 <__swsetup_r+0x50>
 8003dcc:	2309      	movs	r3, #9
 8003dce:	6033      	str	r3, [r6, #0]
 8003dd0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003dd4:	81a3      	strh	r3, [r4, #12]
 8003dd6:	f04f 30ff 	mov.w	r0, #4294967295
 8003dda:	e03e      	b.n	8003e5a <__swsetup_r+0xba>
 8003ddc:	4b25      	ldr	r3, [pc, #148]	; (8003e74 <__swsetup_r+0xd4>)
 8003dde:	429c      	cmp	r4, r3
 8003de0:	d101      	bne.n	8003de6 <__swsetup_r+0x46>
 8003de2:	68ac      	ldr	r4, [r5, #8]
 8003de4:	e7eb      	b.n	8003dbe <__swsetup_r+0x1e>
 8003de6:	4b24      	ldr	r3, [pc, #144]	; (8003e78 <__swsetup_r+0xd8>)
 8003de8:	429c      	cmp	r4, r3
 8003dea:	bf08      	it	eq
 8003dec:	68ec      	ldreq	r4, [r5, #12]
 8003dee:	e7e6      	b.n	8003dbe <__swsetup_r+0x1e>
 8003df0:	0758      	lsls	r0, r3, #29
 8003df2:	d512      	bpl.n	8003e1a <__swsetup_r+0x7a>
 8003df4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003df6:	b141      	cbz	r1, 8003e0a <__swsetup_r+0x6a>
 8003df8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003dfc:	4299      	cmp	r1, r3
 8003dfe:	d002      	beq.n	8003e06 <__swsetup_r+0x66>
 8003e00:	4630      	mov	r0, r6
 8003e02:	f000 fa5b 	bl	80042bc <_free_r>
 8003e06:	2300      	movs	r3, #0
 8003e08:	6363      	str	r3, [r4, #52]	; 0x34
 8003e0a:	89a3      	ldrh	r3, [r4, #12]
 8003e0c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003e10:	81a3      	strh	r3, [r4, #12]
 8003e12:	2300      	movs	r3, #0
 8003e14:	6063      	str	r3, [r4, #4]
 8003e16:	6923      	ldr	r3, [r4, #16]
 8003e18:	6023      	str	r3, [r4, #0]
 8003e1a:	89a3      	ldrh	r3, [r4, #12]
 8003e1c:	f043 0308 	orr.w	r3, r3, #8
 8003e20:	81a3      	strh	r3, [r4, #12]
 8003e22:	6923      	ldr	r3, [r4, #16]
 8003e24:	b94b      	cbnz	r3, 8003e3a <__swsetup_r+0x9a>
 8003e26:	89a3      	ldrh	r3, [r4, #12]
 8003e28:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003e2c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e30:	d003      	beq.n	8003e3a <__swsetup_r+0x9a>
 8003e32:	4621      	mov	r1, r4
 8003e34:	4630      	mov	r0, r6
 8003e36:	f000 fa01 	bl	800423c <__smakebuf_r>
 8003e3a:	89a0      	ldrh	r0, [r4, #12]
 8003e3c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003e40:	f010 0301 	ands.w	r3, r0, #1
 8003e44:	d00a      	beq.n	8003e5c <__swsetup_r+0xbc>
 8003e46:	2300      	movs	r3, #0
 8003e48:	60a3      	str	r3, [r4, #8]
 8003e4a:	6963      	ldr	r3, [r4, #20]
 8003e4c:	425b      	negs	r3, r3
 8003e4e:	61a3      	str	r3, [r4, #24]
 8003e50:	6923      	ldr	r3, [r4, #16]
 8003e52:	b943      	cbnz	r3, 8003e66 <__swsetup_r+0xc6>
 8003e54:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003e58:	d1ba      	bne.n	8003dd0 <__swsetup_r+0x30>
 8003e5a:	bd70      	pop	{r4, r5, r6, pc}
 8003e5c:	0781      	lsls	r1, r0, #30
 8003e5e:	bf58      	it	pl
 8003e60:	6963      	ldrpl	r3, [r4, #20]
 8003e62:	60a3      	str	r3, [r4, #8]
 8003e64:	e7f4      	b.n	8003e50 <__swsetup_r+0xb0>
 8003e66:	2000      	movs	r0, #0
 8003e68:	e7f7      	b.n	8003e5a <__swsetup_r+0xba>
 8003e6a:	bf00      	nop
 8003e6c:	2000000c 	.word	0x2000000c
 8003e70:	08004d40 	.word	0x08004d40
 8003e74:	08004d60 	.word	0x08004d60
 8003e78:	08004d20 	.word	0x08004d20

08003e7c <__sflush_r>:
 8003e7c:	898a      	ldrh	r2, [r1, #12]
 8003e7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003e82:	4605      	mov	r5, r0
 8003e84:	0710      	lsls	r0, r2, #28
 8003e86:	460c      	mov	r4, r1
 8003e88:	d458      	bmi.n	8003f3c <__sflush_r+0xc0>
 8003e8a:	684b      	ldr	r3, [r1, #4]
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	dc05      	bgt.n	8003e9c <__sflush_r+0x20>
 8003e90:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	dc02      	bgt.n	8003e9c <__sflush_r+0x20>
 8003e96:	2000      	movs	r0, #0
 8003e98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003e9c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003e9e:	2e00      	cmp	r6, #0
 8003ea0:	d0f9      	beq.n	8003e96 <__sflush_r+0x1a>
 8003ea2:	2300      	movs	r3, #0
 8003ea4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003ea8:	682f      	ldr	r7, [r5, #0]
 8003eaa:	602b      	str	r3, [r5, #0]
 8003eac:	d032      	beq.n	8003f14 <__sflush_r+0x98>
 8003eae:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003eb0:	89a3      	ldrh	r3, [r4, #12]
 8003eb2:	075a      	lsls	r2, r3, #29
 8003eb4:	d505      	bpl.n	8003ec2 <__sflush_r+0x46>
 8003eb6:	6863      	ldr	r3, [r4, #4]
 8003eb8:	1ac0      	subs	r0, r0, r3
 8003eba:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003ebc:	b10b      	cbz	r3, 8003ec2 <__sflush_r+0x46>
 8003ebe:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003ec0:	1ac0      	subs	r0, r0, r3
 8003ec2:	2300      	movs	r3, #0
 8003ec4:	4602      	mov	r2, r0
 8003ec6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003ec8:	6a21      	ldr	r1, [r4, #32]
 8003eca:	4628      	mov	r0, r5
 8003ecc:	47b0      	blx	r6
 8003ece:	1c43      	adds	r3, r0, #1
 8003ed0:	89a3      	ldrh	r3, [r4, #12]
 8003ed2:	d106      	bne.n	8003ee2 <__sflush_r+0x66>
 8003ed4:	6829      	ldr	r1, [r5, #0]
 8003ed6:	291d      	cmp	r1, #29
 8003ed8:	d82c      	bhi.n	8003f34 <__sflush_r+0xb8>
 8003eda:	4a2a      	ldr	r2, [pc, #168]	; (8003f84 <__sflush_r+0x108>)
 8003edc:	40ca      	lsrs	r2, r1
 8003ede:	07d6      	lsls	r6, r2, #31
 8003ee0:	d528      	bpl.n	8003f34 <__sflush_r+0xb8>
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	6062      	str	r2, [r4, #4]
 8003ee6:	04d9      	lsls	r1, r3, #19
 8003ee8:	6922      	ldr	r2, [r4, #16]
 8003eea:	6022      	str	r2, [r4, #0]
 8003eec:	d504      	bpl.n	8003ef8 <__sflush_r+0x7c>
 8003eee:	1c42      	adds	r2, r0, #1
 8003ef0:	d101      	bne.n	8003ef6 <__sflush_r+0x7a>
 8003ef2:	682b      	ldr	r3, [r5, #0]
 8003ef4:	b903      	cbnz	r3, 8003ef8 <__sflush_r+0x7c>
 8003ef6:	6560      	str	r0, [r4, #84]	; 0x54
 8003ef8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003efa:	602f      	str	r7, [r5, #0]
 8003efc:	2900      	cmp	r1, #0
 8003efe:	d0ca      	beq.n	8003e96 <__sflush_r+0x1a>
 8003f00:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003f04:	4299      	cmp	r1, r3
 8003f06:	d002      	beq.n	8003f0e <__sflush_r+0x92>
 8003f08:	4628      	mov	r0, r5
 8003f0a:	f000 f9d7 	bl	80042bc <_free_r>
 8003f0e:	2000      	movs	r0, #0
 8003f10:	6360      	str	r0, [r4, #52]	; 0x34
 8003f12:	e7c1      	b.n	8003e98 <__sflush_r+0x1c>
 8003f14:	6a21      	ldr	r1, [r4, #32]
 8003f16:	2301      	movs	r3, #1
 8003f18:	4628      	mov	r0, r5
 8003f1a:	47b0      	blx	r6
 8003f1c:	1c41      	adds	r1, r0, #1
 8003f1e:	d1c7      	bne.n	8003eb0 <__sflush_r+0x34>
 8003f20:	682b      	ldr	r3, [r5, #0]
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d0c4      	beq.n	8003eb0 <__sflush_r+0x34>
 8003f26:	2b1d      	cmp	r3, #29
 8003f28:	d001      	beq.n	8003f2e <__sflush_r+0xb2>
 8003f2a:	2b16      	cmp	r3, #22
 8003f2c:	d101      	bne.n	8003f32 <__sflush_r+0xb6>
 8003f2e:	602f      	str	r7, [r5, #0]
 8003f30:	e7b1      	b.n	8003e96 <__sflush_r+0x1a>
 8003f32:	89a3      	ldrh	r3, [r4, #12]
 8003f34:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003f38:	81a3      	strh	r3, [r4, #12]
 8003f3a:	e7ad      	b.n	8003e98 <__sflush_r+0x1c>
 8003f3c:	690f      	ldr	r7, [r1, #16]
 8003f3e:	2f00      	cmp	r7, #0
 8003f40:	d0a9      	beq.n	8003e96 <__sflush_r+0x1a>
 8003f42:	0793      	lsls	r3, r2, #30
 8003f44:	680e      	ldr	r6, [r1, #0]
 8003f46:	bf08      	it	eq
 8003f48:	694b      	ldreq	r3, [r1, #20]
 8003f4a:	600f      	str	r7, [r1, #0]
 8003f4c:	bf18      	it	ne
 8003f4e:	2300      	movne	r3, #0
 8003f50:	eba6 0807 	sub.w	r8, r6, r7
 8003f54:	608b      	str	r3, [r1, #8]
 8003f56:	f1b8 0f00 	cmp.w	r8, #0
 8003f5a:	dd9c      	ble.n	8003e96 <__sflush_r+0x1a>
 8003f5c:	6a21      	ldr	r1, [r4, #32]
 8003f5e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003f60:	4643      	mov	r3, r8
 8003f62:	463a      	mov	r2, r7
 8003f64:	4628      	mov	r0, r5
 8003f66:	47b0      	blx	r6
 8003f68:	2800      	cmp	r0, #0
 8003f6a:	dc06      	bgt.n	8003f7a <__sflush_r+0xfe>
 8003f6c:	89a3      	ldrh	r3, [r4, #12]
 8003f6e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003f72:	81a3      	strh	r3, [r4, #12]
 8003f74:	f04f 30ff 	mov.w	r0, #4294967295
 8003f78:	e78e      	b.n	8003e98 <__sflush_r+0x1c>
 8003f7a:	4407      	add	r7, r0
 8003f7c:	eba8 0800 	sub.w	r8, r8, r0
 8003f80:	e7e9      	b.n	8003f56 <__sflush_r+0xda>
 8003f82:	bf00      	nop
 8003f84:	20400001 	.word	0x20400001

08003f88 <_fflush_r>:
 8003f88:	b538      	push	{r3, r4, r5, lr}
 8003f8a:	690b      	ldr	r3, [r1, #16]
 8003f8c:	4605      	mov	r5, r0
 8003f8e:	460c      	mov	r4, r1
 8003f90:	b913      	cbnz	r3, 8003f98 <_fflush_r+0x10>
 8003f92:	2500      	movs	r5, #0
 8003f94:	4628      	mov	r0, r5
 8003f96:	bd38      	pop	{r3, r4, r5, pc}
 8003f98:	b118      	cbz	r0, 8003fa2 <_fflush_r+0x1a>
 8003f9a:	6983      	ldr	r3, [r0, #24]
 8003f9c:	b90b      	cbnz	r3, 8003fa2 <_fflush_r+0x1a>
 8003f9e:	f000 f887 	bl	80040b0 <__sinit>
 8003fa2:	4b14      	ldr	r3, [pc, #80]	; (8003ff4 <_fflush_r+0x6c>)
 8003fa4:	429c      	cmp	r4, r3
 8003fa6:	d11b      	bne.n	8003fe0 <_fflush_r+0x58>
 8003fa8:	686c      	ldr	r4, [r5, #4]
 8003faa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d0ef      	beq.n	8003f92 <_fflush_r+0xa>
 8003fb2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003fb4:	07d0      	lsls	r0, r2, #31
 8003fb6:	d404      	bmi.n	8003fc2 <_fflush_r+0x3a>
 8003fb8:	0599      	lsls	r1, r3, #22
 8003fba:	d402      	bmi.n	8003fc2 <_fflush_r+0x3a>
 8003fbc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003fbe:	f000 f915 	bl	80041ec <__retarget_lock_acquire_recursive>
 8003fc2:	4628      	mov	r0, r5
 8003fc4:	4621      	mov	r1, r4
 8003fc6:	f7ff ff59 	bl	8003e7c <__sflush_r>
 8003fca:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003fcc:	07da      	lsls	r2, r3, #31
 8003fce:	4605      	mov	r5, r0
 8003fd0:	d4e0      	bmi.n	8003f94 <_fflush_r+0xc>
 8003fd2:	89a3      	ldrh	r3, [r4, #12]
 8003fd4:	059b      	lsls	r3, r3, #22
 8003fd6:	d4dd      	bmi.n	8003f94 <_fflush_r+0xc>
 8003fd8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003fda:	f000 f908 	bl	80041ee <__retarget_lock_release_recursive>
 8003fde:	e7d9      	b.n	8003f94 <_fflush_r+0xc>
 8003fe0:	4b05      	ldr	r3, [pc, #20]	; (8003ff8 <_fflush_r+0x70>)
 8003fe2:	429c      	cmp	r4, r3
 8003fe4:	d101      	bne.n	8003fea <_fflush_r+0x62>
 8003fe6:	68ac      	ldr	r4, [r5, #8]
 8003fe8:	e7df      	b.n	8003faa <_fflush_r+0x22>
 8003fea:	4b04      	ldr	r3, [pc, #16]	; (8003ffc <_fflush_r+0x74>)
 8003fec:	429c      	cmp	r4, r3
 8003fee:	bf08      	it	eq
 8003ff0:	68ec      	ldreq	r4, [r5, #12]
 8003ff2:	e7da      	b.n	8003faa <_fflush_r+0x22>
 8003ff4:	08004d40 	.word	0x08004d40
 8003ff8:	08004d60 	.word	0x08004d60
 8003ffc:	08004d20 	.word	0x08004d20

08004000 <std>:
 8004000:	2300      	movs	r3, #0
 8004002:	b510      	push	{r4, lr}
 8004004:	4604      	mov	r4, r0
 8004006:	e9c0 3300 	strd	r3, r3, [r0]
 800400a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800400e:	6083      	str	r3, [r0, #8]
 8004010:	8181      	strh	r1, [r0, #12]
 8004012:	6643      	str	r3, [r0, #100]	; 0x64
 8004014:	81c2      	strh	r2, [r0, #14]
 8004016:	6183      	str	r3, [r0, #24]
 8004018:	4619      	mov	r1, r3
 800401a:	2208      	movs	r2, #8
 800401c:	305c      	adds	r0, #92	; 0x5c
 800401e:	f7ff fdaf 	bl	8003b80 <memset>
 8004022:	4b05      	ldr	r3, [pc, #20]	; (8004038 <std+0x38>)
 8004024:	6263      	str	r3, [r4, #36]	; 0x24
 8004026:	4b05      	ldr	r3, [pc, #20]	; (800403c <std+0x3c>)
 8004028:	62a3      	str	r3, [r4, #40]	; 0x28
 800402a:	4b05      	ldr	r3, [pc, #20]	; (8004040 <std+0x40>)
 800402c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800402e:	4b05      	ldr	r3, [pc, #20]	; (8004044 <std+0x44>)
 8004030:	6224      	str	r4, [r4, #32]
 8004032:	6323      	str	r3, [r4, #48]	; 0x30
 8004034:	bd10      	pop	{r4, pc}
 8004036:	bf00      	nop
 8004038:	08004a79 	.word	0x08004a79
 800403c:	08004a9b 	.word	0x08004a9b
 8004040:	08004ad3 	.word	0x08004ad3
 8004044:	08004af7 	.word	0x08004af7

08004048 <_cleanup_r>:
 8004048:	4901      	ldr	r1, [pc, #4]	; (8004050 <_cleanup_r+0x8>)
 800404a:	f000 b8af 	b.w	80041ac <_fwalk_reent>
 800404e:	bf00      	nop
 8004050:	08003f89 	.word	0x08003f89

08004054 <__sfmoreglue>:
 8004054:	b570      	push	{r4, r5, r6, lr}
 8004056:	2268      	movs	r2, #104	; 0x68
 8004058:	1e4d      	subs	r5, r1, #1
 800405a:	4355      	muls	r5, r2
 800405c:	460e      	mov	r6, r1
 800405e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004062:	f000 f997 	bl	8004394 <_malloc_r>
 8004066:	4604      	mov	r4, r0
 8004068:	b140      	cbz	r0, 800407c <__sfmoreglue+0x28>
 800406a:	2100      	movs	r1, #0
 800406c:	e9c0 1600 	strd	r1, r6, [r0]
 8004070:	300c      	adds	r0, #12
 8004072:	60a0      	str	r0, [r4, #8]
 8004074:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004078:	f7ff fd82 	bl	8003b80 <memset>
 800407c:	4620      	mov	r0, r4
 800407e:	bd70      	pop	{r4, r5, r6, pc}

08004080 <__sfp_lock_acquire>:
 8004080:	4801      	ldr	r0, [pc, #4]	; (8004088 <__sfp_lock_acquire+0x8>)
 8004082:	f000 b8b3 	b.w	80041ec <__retarget_lock_acquire_recursive>
 8004086:	bf00      	nop
 8004088:	2000019d 	.word	0x2000019d

0800408c <__sfp_lock_release>:
 800408c:	4801      	ldr	r0, [pc, #4]	; (8004094 <__sfp_lock_release+0x8>)
 800408e:	f000 b8ae 	b.w	80041ee <__retarget_lock_release_recursive>
 8004092:	bf00      	nop
 8004094:	2000019d 	.word	0x2000019d

08004098 <__sinit_lock_acquire>:
 8004098:	4801      	ldr	r0, [pc, #4]	; (80040a0 <__sinit_lock_acquire+0x8>)
 800409a:	f000 b8a7 	b.w	80041ec <__retarget_lock_acquire_recursive>
 800409e:	bf00      	nop
 80040a0:	2000019e 	.word	0x2000019e

080040a4 <__sinit_lock_release>:
 80040a4:	4801      	ldr	r0, [pc, #4]	; (80040ac <__sinit_lock_release+0x8>)
 80040a6:	f000 b8a2 	b.w	80041ee <__retarget_lock_release_recursive>
 80040aa:	bf00      	nop
 80040ac:	2000019e 	.word	0x2000019e

080040b0 <__sinit>:
 80040b0:	b510      	push	{r4, lr}
 80040b2:	4604      	mov	r4, r0
 80040b4:	f7ff fff0 	bl	8004098 <__sinit_lock_acquire>
 80040b8:	69a3      	ldr	r3, [r4, #24]
 80040ba:	b11b      	cbz	r3, 80040c4 <__sinit+0x14>
 80040bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80040c0:	f7ff bff0 	b.w	80040a4 <__sinit_lock_release>
 80040c4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80040c8:	6523      	str	r3, [r4, #80]	; 0x50
 80040ca:	4b13      	ldr	r3, [pc, #76]	; (8004118 <__sinit+0x68>)
 80040cc:	4a13      	ldr	r2, [pc, #76]	; (800411c <__sinit+0x6c>)
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	62a2      	str	r2, [r4, #40]	; 0x28
 80040d2:	42a3      	cmp	r3, r4
 80040d4:	bf04      	itt	eq
 80040d6:	2301      	moveq	r3, #1
 80040d8:	61a3      	streq	r3, [r4, #24]
 80040da:	4620      	mov	r0, r4
 80040dc:	f000 f820 	bl	8004120 <__sfp>
 80040e0:	6060      	str	r0, [r4, #4]
 80040e2:	4620      	mov	r0, r4
 80040e4:	f000 f81c 	bl	8004120 <__sfp>
 80040e8:	60a0      	str	r0, [r4, #8]
 80040ea:	4620      	mov	r0, r4
 80040ec:	f000 f818 	bl	8004120 <__sfp>
 80040f0:	2200      	movs	r2, #0
 80040f2:	60e0      	str	r0, [r4, #12]
 80040f4:	2104      	movs	r1, #4
 80040f6:	6860      	ldr	r0, [r4, #4]
 80040f8:	f7ff ff82 	bl	8004000 <std>
 80040fc:	68a0      	ldr	r0, [r4, #8]
 80040fe:	2201      	movs	r2, #1
 8004100:	2109      	movs	r1, #9
 8004102:	f7ff ff7d 	bl	8004000 <std>
 8004106:	68e0      	ldr	r0, [r4, #12]
 8004108:	2202      	movs	r2, #2
 800410a:	2112      	movs	r1, #18
 800410c:	f7ff ff78 	bl	8004000 <std>
 8004110:	2301      	movs	r3, #1
 8004112:	61a3      	str	r3, [r4, #24]
 8004114:	e7d2      	b.n	80040bc <__sinit+0xc>
 8004116:	bf00      	nop
 8004118:	08004d1c 	.word	0x08004d1c
 800411c:	08004049 	.word	0x08004049

08004120 <__sfp>:
 8004120:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004122:	4607      	mov	r7, r0
 8004124:	f7ff ffac 	bl	8004080 <__sfp_lock_acquire>
 8004128:	4b1e      	ldr	r3, [pc, #120]	; (80041a4 <__sfp+0x84>)
 800412a:	681e      	ldr	r6, [r3, #0]
 800412c:	69b3      	ldr	r3, [r6, #24]
 800412e:	b913      	cbnz	r3, 8004136 <__sfp+0x16>
 8004130:	4630      	mov	r0, r6
 8004132:	f7ff ffbd 	bl	80040b0 <__sinit>
 8004136:	3648      	adds	r6, #72	; 0x48
 8004138:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800413c:	3b01      	subs	r3, #1
 800413e:	d503      	bpl.n	8004148 <__sfp+0x28>
 8004140:	6833      	ldr	r3, [r6, #0]
 8004142:	b30b      	cbz	r3, 8004188 <__sfp+0x68>
 8004144:	6836      	ldr	r6, [r6, #0]
 8004146:	e7f7      	b.n	8004138 <__sfp+0x18>
 8004148:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800414c:	b9d5      	cbnz	r5, 8004184 <__sfp+0x64>
 800414e:	4b16      	ldr	r3, [pc, #88]	; (80041a8 <__sfp+0x88>)
 8004150:	60e3      	str	r3, [r4, #12]
 8004152:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004156:	6665      	str	r5, [r4, #100]	; 0x64
 8004158:	f000 f847 	bl	80041ea <__retarget_lock_init_recursive>
 800415c:	f7ff ff96 	bl	800408c <__sfp_lock_release>
 8004160:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004164:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004168:	6025      	str	r5, [r4, #0]
 800416a:	61a5      	str	r5, [r4, #24]
 800416c:	2208      	movs	r2, #8
 800416e:	4629      	mov	r1, r5
 8004170:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004174:	f7ff fd04 	bl	8003b80 <memset>
 8004178:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800417c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004180:	4620      	mov	r0, r4
 8004182:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004184:	3468      	adds	r4, #104	; 0x68
 8004186:	e7d9      	b.n	800413c <__sfp+0x1c>
 8004188:	2104      	movs	r1, #4
 800418a:	4638      	mov	r0, r7
 800418c:	f7ff ff62 	bl	8004054 <__sfmoreglue>
 8004190:	4604      	mov	r4, r0
 8004192:	6030      	str	r0, [r6, #0]
 8004194:	2800      	cmp	r0, #0
 8004196:	d1d5      	bne.n	8004144 <__sfp+0x24>
 8004198:	f7ff ff78 	bl	800408c <__sfp_lock_release>
 800419c:	230c      	movs	r3, #12
 800419e:	603b      	str	r3, [r7, #0]
 80041a0:	e7ee      	b.n	8004180 <__sfp+0x60>
 80041a2:	bf00      	nop
 80041a4:	08004d1c 	.word	0x08004d1c
 80041a8:	ffff0001 	.word	0xffff0001

080041ac <_fwalk_reent>:
 80041ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80041b0:	4606      	mov	r6, r0
 80041b2:	4688      	mov	r8, r1
 80041b4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80041b8:	2700      	movs	r7, #0
 80041ba:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80041be:	f1b9 0901 	subs.w	r9, r9, #1
 80041c2:	d505      	bpl.n	80041d0 <_fwalk_reent+0x24>
 80041c4:	6824      	ldr	r4, [r4, #0]
 80041c6:	2c00      	cmp	r4, #0
 80041c8:	d1f7      	bne.n	80041ba <_fwalk_reent+0xe>
 80041ca:	4638      	mov	r0, r7
 80041cc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80041d0:	89ab      	ldrh	r3, [r5, #12]
 80041d2:	2b01      	cmp	r3, #1
 80041d4:	d907      	bls.n	80041e6 <_fwalk_reent+0x3a>
 80041d6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80041da:	3301      	adds	r3, #1
 80041dc:	d003      	beq.n	80041e6 <_fwalk_reent+0x3a>
 80041de:	4629      	mov	r1, r5
 80041e0:	4630      	mov	r0, r6
 80041e2:	47c0      	blx	r8
 80041e4:	4307      	orrs	r7, r0
 80041e6:	3568      	adds	r5, #104	; 0x68
 80041e8:	e7e9      	b.n	80041be <_fwalk_reent+0x12>

080041ea <__retarget_lock_init_recursive>:
 80041ea:	4770      	bx	lr

080041ec <__retarget_lock_acquire_recursive>:
 80041ec:	4770      	bx	lr

080041ee <__retarget_lock_release_recursive>:
 80041ee:	4770      	bx	lr

080041f0 <__swhatbuf_r>:
 80041f0:	b570      	push	{r4, r5, r6, lr}
 80041f2:	460e      	mov	r6, r1
 80041f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80041f8:	2900      	cmp	r1, #0
 80041fa:	b096      	sub	sp, #88	; 0x58
 80041fc:	4614      	mov	r4, r2
 80041fe:	461d      	mov	r5, r3
 8004200:	da08      	bge.n	8004214 <__swhatbuf_r+0x24>
 8004202:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8004206:	2200      	movs	r2, #0
 8004208:	602a      	str	r2, [r5, #0]
 800420a:	061a      	lsls	r2, r3, #24
 800420c:	d410      	bmi.n	8004230 <__swhatbuf_r+0x40>
 800420e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004212:	e00e      	b.n	8004232 <__swhatbuf_r+0x42>
 8004214:	466a      	mov	r2, sp
 8004216:	f000 fc95 	bl	8004b44 <_fstat_r>
 800421a:	2800      	cmp	r0, #0
 800421c:	dbf1      	blt.n	8004202 <__swhatbuf_r+0x12>
 800421e:	9a01      	ldr	r2, [sp, #4]
 8004220:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004224:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004228:	425a      	negs	r2, r3
 800422a:	415a      	adcs	r2, r3
 800422c:	602a      	str	r2, [r5, #0]
 800422e:	e7ee      	b.n	800420e <__swhatbuf_r+0x1e>
 8004230:	2340      	movs	r3, #64	; 0x40
 8004232:	2000      	movs	r0, #0
 8004234:	6023      	str	r3, [r4, #0]
 8004236:	b016      	add	sp, #88	; 0x58
 8004238:	bd70      	pop	{r4, r5, r6, pc}
	...

0800423c <__smakebuf_r>:
 800423c:	898b      	ldrh	r3, [r1, #12]
 800423e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004240:	079d      	lsls	r5, r3, #30
 8004242:	4606      	mov	r6, r0
 8004244:	460c      	mov	r4, r1
 8004246:	d507      	bpl.n	8004258 <__smakebuf_r+0x1c>
 8004248:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800424c:	6023      	str	r3, [r4, #0]
 800424e:	6123      	str	r3, [r4, #16]
 8004250:	2301      	movs	r3, #1
 8004252:	6163      	str	r3, [r4, #20]
 8004254:	b002      	add	sp, #8
 8004256:	bd70      	pop	{r4, r5, r6, pc}
 8004258:	ab01      	add	r3, sp, #4
 800425a:	466a      	mov	r2, sp
 800425c:	f7ff ffc8 	bl	80041f0 <__swhatbuf_r>
 8004260:	9900      	ldr	r1, [sp, #0]
 8004262:	4605      	mov	r5, r0
 8004264:	4630      	mov	r0, r6
 8004266:	f000 f895 	bl	8004394 <_malloc_r>
 800426a:	b948      	cbnz	r0, 8004280 <__smakebuf_r+0x44>
 800426c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004270:	059a      	lsls	r2, r3, #22
 8004272:	d4ef      	bmi.n	8004254 <__smakebuf_r+0x18>
 8004274:	f023 0303 	bic.w	r3, r3, #3
 8004278:	f043 0302 	orr.w	r3, r3, #2
 800427c:	81a3      	strh	r3, [r4, #12]
 800427e:	e7e3      	b.n	8004248 <__smakebuf_r+0xc>
 8004280:	4b0d      	ldr	r3, [pc, #52]	; (80042b8 <__smakebuf_r+0x7c>)
 8004282:	62b3      	str	r3, [r6, #40]	; 0x28
 8004284:	89a3      	ldrh	r3, [r4, #12]
 8004286:	6020      	str	r0, [r4, #0]
 8004288:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800428c:	81a3      	strh	r3, [r4, #12]
 800428e:	9b00      	ldr	r3, [sp, #0]
 8004290:	6163      	str	r3, [r4, #20]
 8004292:	9b01      	ldr	r3, [sp, #4]
 8004294:	6120      	str	r0, [r4, #16]
 8004296:	b15b      	cbz	r3, 80042b0 <__smakebuf_r+0x74>
 8004298:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800429c:	4630      	mov	r0, r6
 800429e:	f000 fc63 	bl	8004b68 <_isatty_r>
 80042a2:	b128      	cbz	r0, 80042b0 <__smakebuf_r+0x74>
 80042a4:	89a3      	ldrh	r3, [r4, #12]
 80042a6:	f023 0303 	bic.w	r3, r3, #3
 80042aa:	f043 0301 	orr.w	r3, r3, #1
 80042ae:	81a3      	strh	r3, [r4, #12]
 80042b0:	89a0      	ldrh	r0, [r4, #12]
 80042b2:	4305      	orrs	r5, r0
 80042b4:	81a5      	strh	r5, [r4, #12]
 80042b6:	e7cd      	b.n	8004254 <__smakebuf_r+0x18>
 80042b8:	08004049 	.word	0x08004049

080042bc <_free_r>:
 80042bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80042be:	2900      	cmp	r1, #0
 80042c0:	d044      	beq.n	800434c <_free_r+0x90>
 80042c2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80042c6:	9001      	str	r0, [sp, #4]
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	f1a1 0404 	sub.w	r4, r1, #4
 80042ce:	bfb8      	it	lt
 80042d0:	18e4      	addlt	r4, r4, r3
 80042d2:	f000 fc6b 	bl	8004bac <__malloc_lock>
 80042d6:	4a1e      	ldr	r2, [pc, #120]	; (8004350 <_free_r+0x94>)
 80042d8:	9801      	ldr	r0, [sp, #4]
 80042da:	6813      	ldr	r3, [r2, #0]
 80042dc:	b933      	cbnz	r3, 80042ec <_free_r+0x30>
 80042de:	6063      	str	r3, [r4, #4]
 80042e0:	6014      	str	r4, [r2, #0]
 80042e2:	b003      	add	sp, #12
 80042e4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80042e8:	f000 bc66 	b.w	8004bb8 <__malloc_unlock>
 80042ec:	42a3      	cmp	r3, r4
 80042ee:	d908      	bls.n	8004302 <_free_r+0x46>
 80042f0:	6825      	ldr	r5, [r4, #0]
 80042f2:	1961      	adds	r1, r4, r5
 80042f4:	428b      	cmp	r3, r1
 80042f6:	bf01      	itttt	eq
 80042f8:	6819      	ldreq	r1, [r3, #0]
 80042fa:	685b      	ldreq	r3, [r3, #4]
 80042fc:	1949      	addeq	r1, r1, r5
 80042fe:	6021      	streq	r1, [r4, #0]
 8004300:	e7ed      	b.n	80042de <_free_r+0x22>
 8004302:	461a      	mov	r2, r3
 8004304:	685b      	ldr	r3, [r3, #4]
 8004306:	b10b      	cbz	r3, 800430c <_free_r+0x50>
 8004308:	42a3      	cmp	r3, r4
 800430a:	d9fa      	bls.n	8004302 <_free_r+0x46>
 800430c:	6811      	ldr	r1, [r2, #0]
 800430e:	1855      	adds	r5, r2, r1
 8004310:	42a5      	cmp	r5, r4
 8004312:	d10b      	bne.n	800432c <_free_r+0x70>
 8004314:	6824      	ldr	r4, [r4, #0]
 8004316:	4421      	add	r1, r4
 8004318:	1854      	adds	r4, r2, r1
 800431a:	42a3      	cmp	r3, r4
 800431c:	6011      	str	r1, [r2, #0]
 800431e:	d1e0      	bne.n	80042e2 <_free_r+0x26>
 8004320:	681c      	ldr	r4, [r3, #0]
 8004322:	685b      	ldr	r3, [r3, #4]
 8004324:	6053      	str	r3, [r2, #4]
 8004326:	4421      	add	r1, r4
 8004328:	6011      	str	r1, [r2, #0]
 800432a:	e7da      	b.n	80042e2 <_free_r+0x26>
 800432c:	d902      	bls.n	8004334 <_free_r+0x78>
 800432e:	230c      	movs	r3, #12
 8004330:	6003      	str	r3, [r0, #0]
 8004332:	e7d6      	b.n	80042e2 <_free_r+0x26>
 8004334:	6825      	ldr	r5, [r4, #0]
 8004336:	1961      	adds	r1, r4, r5
 8004338:	428b      	cmp	r3, r1
 800433a:	bf04      	itt	eq
 800433c:	6819      	ldreq	r1, [r3, #0]
 800433e:	685b      	ldreq	r3, [r3, #4]
 8004340:	6063      	str	r3, [r4, #4]
 8004342:	bf04      	itt	eq
 8004344:	1949      	addeq	r1, r1, r5
 8004346:	6021      	streq	r1, [r4, #0]
 8004348:	6054      	str	r4, [r2, #4]
 800434a:	e7ca      	b.n	80042e2 <_free_r+0x26>
 800434c:	b003      	add	sp, #12
 800434e:	bd30      	pop	{r4, r5, pc}
 8004350:	200001a0 	.word	0x200001a0

08004354 <sbrk_aligned>:
 8004354:	b570      	push	{r4, r5, r6, lr}
 8004356:	4e0e      	ldr	r6, [pc, #56]	; (8004390 <sbrk_aligned+0x3c>)
 8004358:	460c      	mov	r4, r1
 800435a:	6831      	ldr	r1, [r6, #0]
 800435c:	4605      	mov	r5, r0
 800435e:	b911      	cbnz	r1, 8004366 <sbrk_aligned+0x12>
 8004360:	f000 fb7a 	bl	8004a58 <_sbrk_r>
 8004364:	6030      	str	r0, [r6, #0]
 8004366:	4621      	mov	r1, r4
 8004368:	4628      	mov	r0, r5
 800436a:	f000 fb75 	bl	8004a58 <_sbrk_r>
 800436e:	1c43      	adds	r3, r0, #1
 8004370:	d00a      	beq.n	8004388 <sbrk_aligned+0x34>
 8004372:	1cc4      	adds	r4, r0, #3
 8004374:	f024 0403 	bic.w	r4, r4, #3
 8004378:	42a0      	cmp	r0, r4
 800437a:	d007      	beq.n	800438c <sbrk_aligned+0x38>
 800437c:	1a21      	subs	r1, r4, r0
 800437e:	4628      	mov	r0, r5
 8004380:	f000 fb6a 	bl	8004a58 <_sbrk_r>
 8004384:	3001      	adds	r0, #1
 8004386:	d101      	bne.n	800438c <sbrk_aligned+0x38>
 8004388:	f04f 34ff 	mov.w	r4, #4294967295
 800438c:	4620      	mov	r0, r4
 800438e:	bd70      	pop	{r4, r5, r6, pc}
 8004390:	200001a4 	.word	0x200001a4

08004394 <_malloc_r>:
 8004394:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004398:	1ccd      	adds	r5, r1, #3
 800439a:	f025 0503 	bic.w	r5, r5, #3
 800439e:	3508      	adds	r5, #8
 80043a0:	2d0c      	cmp	r5, #12
 80043a2:	bf38      	it	cc
 80043a4:	250c      	movcc	r5, #12
 80043a6:	2d00      	cmp	r5, #0
 80043a8:	4607      	mov	r7, r0
 80043aa:	db01      	blt.n	80043b0 <_malloc_r+0x1c>
 80043ac:	42a9      	cmp	r1, r5
 80043ae:	d905      	bls.n	80043bc <_malloc_r+0x28>
 80043b0:	230c      	movs	r3, #12
 80043b2:	603b      	str	r3, [r7, #0]
 80043b4:	2600      	movs	r6, #0
 80043b6:	4630      	mov	r0, r6
 80043b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80043bc:	4e2e      	ldr	r6, [pc, #184]	; (8004478 <_malloc_r+0xe4>)
 80043be:	f000 fbf5 	bl	8004bac <__malloc_lock>
 80043c2:	6833      	ldr	r3, [r6, #0]
 80043c4:	461c      	mov	r4, r3
 80043c6:	bb34      	cbnz	r4, 8004416 <_malloc_r+0x82>
 80043c8:	4629      	mov	r1, r5
 80043ca:	4638      	mov	r0, r7
 80043cc:	f7ff ffc2 	bl	8004354 <sbrk_aligned>
 80043d0:	1c43      	adds	r3, r0, #1
 80043d2:	4604      	mov	r4, r0
 80043d4:	d14d      	bne.n	8004472 <_malloc_r+0xde>
 80043d6:	6834      	ldr	r4, [r6, #0]
 80043d8:	4626      	mov	r6, r4
 80043da:	2e00      	cmp	r6, #0
 80043dc:	d140      	bne.n	8004460 <_malloc_r+0xcc>
 80043de:	6823      	ldr	r3, [r4, #0]
 80043e0:	4631      	mov	r1, r6
 80043e2:	4638      	mov	r0, r7
 80043e4:	eb04 0803 	add.w	r8, r4, r3
 80043e8:	f000 fb36 	bl	8004a58 <_sbrk_r>
 80043ec:	4580      	cmp	r8, r0
 80043ee:	d13a      	bne.n	8004466 <_malloc_r+0xd2>
 80043f0:	6821      	ldr	r1, [r4, #0]
 80043f2:	3503      	adds	r5, #3
 80043f4:	1a6d      	subs	r5, r5, r1
 80043f6:	f025 0503 	bic.w	r5, r5, #3
 80043fa:	3508      	adds	r5, #8
 80043fc:	2d0c      	cmp	r5, #12
 80043fe:	bf38      	it	cc
 8004400:	250c      	movcc	r5, #12
 8004402:	4629      	mov	r1, r5
 8004404:	4638      	mov	r0, r7
 8004406:	f7ff ffa5 	bl	8004354 <sbrk_aligned>
 800440a:	3001      	adds	r0, #1
 800440c:	d02b      	beq.n	8004466 <_malloc_r+0xd2>
 800440e:	6823      	ldr	r3, [r4, #0]
 8004410:	442b      	add	r3, r5
 8004412:	6023      	str	r3, [r4, #0]
 8004414:	e00e      	b.n	8004434 <_malloc_r+0xa0>
 8004416:	6822      	ldr	r2, [r4, #0]
 8004418:	1b52      	subs	r2, r2, r5
 800441a:	d41e      	bmi.n	800445a <_malloc_r+0xc6>
 800441c:	2a0b      	cmp	r2, #11
 800441e:	d916      	bls.n	800444e <_malloc_r+0xba>
 8004420:	1961      	adds	r1, r4, r5
 8004422:	42a3      	cmp	r3, r4
 8004424:	6025      	str	r5, [r4, #0]
 8004426:	bf18      	it	ne
 8004428:	6059      	strne	r1, [r3, #4]
 800442a:	6863      	ldr	r3, [r4, #4]
 800442c:	bf08      	it	eq
 800442e:	6031      	streq	r1, [r6, #0]
 8004430:	5162      	str	r2, [r4, r5]
 8004432:	604b      	str	r3, [r1, #4]
 8004434:	4638      	mov	r0, r7
 8004436:	f104 060b 	add.w	r6, r4, #11
 800443a:	f000 fbbd 	bl	8004bb8 <__malloc_unlock>
 800443e:	f026 0607 	bic.w	r6, r6, #7
 8004442:	1d23      	adds	r3, r4, #4
 8004444:	1af2      	subs	r2, r6, r3
 8004446:	d0b6      	beq.n	80043b6 <_malloc_r+0x22>
 8004448:	1b9b      	subs	r3, r3, r6
 800444a:	50a3      	str	r3, [r4, r2]
 800444c:	e7b3      	b.n	80043b6 <_malloc_r+0x22>
 800444e:	6862      	ldr	r2, [r4, #4]
 8004450:	42a3      	cmp	r3, r4
 8004452:	bf0c      	ite	eq
 8004454:	6032      	streq	r2, [r6, #0]
 8004456:	605a      	strne	r2, [r3, #4]
 8004458:	e7ec      	b.n	8004434 <_malloc_r+0xa0>
 800445a:	4623      	mov	r3, r4
 800445c:	6864      	ldr	r4, [r4, #4]
 800445e:	e7b2      	b.n	80043c6 <_malloc_r+0x32>
 8004460:	4634      	mov	r4, r6
 8004462:	6876      	ldr	r6, [r6, #4]
 8004464:	e7b9      	b.n	80043da <_malloc_r+0x46>
 8004466:	230c      	movs	r3, #12
 8004468:	603b      	str	r3, [r7, #0]
 800446a:	4638      	mov	r0, r7
 800446c:	f000 fba4 	bl	8004bb8 <__malloc_unlock>
 8004470:	e7a1      	b.n	80043b6 <_malloc_r+0x22>
 8004472:	6025      	str	r5, [r4, #0]
 8004474:	e7de      	b.n	8004434 <_malloc_r+0xa0>
 8004476:	bf00      	nop
 8004478:	200001a0 	.word	0x200001a0

0800447c <__sfputc_r>:
 800447c:	6893      	ldr	r3, [r2, #8]
 800447e:	3b01      	subs	r3, #1
 8004480:	2b00      	cmp	r3, #0
 8004482:	b410      	push	{r4}
 8004484:	6093      	str	r3, [r2, #8]
 8004486:	da08      	bge.n	800449a <__sfputc_r+0x1e>
 8004488:	6994      	ldr	r4, [r2, #24]
 800448a:	42a3      	cmp	r3, r4
 800448c:	db01      	blt.n	8004492 <__sfputc_r+0x16>
 800448e:	290a      	cmp	r1, #10
 8004490:	d103      	bne.n	800449a <__sfputc_r+0x1e>
 8004492:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004496:	f7ff bc31 	b.w	8003cfc <__swbuf_r>
 800449a:	6813      	ldr	r3, [r2, #0]
 800449c:	1c58      	adds	r0, r3, #1
 800449e:	6010      	str	r0, [r2, #0]
 80044a0:	7019      	strb	r1, [r3, #0]
 80044a2:	4608      	mov	r0, r1
 80044a4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80044a8:	4770      	bx	lr

080044aa <__sfputs_r>:
 80044aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044ac:	4606      	mov	r6, r0
 80044ae:	460f      	mov	r7, r1
 80044b0:	4614      	mov	r4, r2
 80044b2:	18d5      	adds	r5, r2, r3
 80044b4:	42ac      	cmp	r4, r5
 80044b6:	d101      	bne.n	80044bc <__sfputs_r+0x12>
 80044b8:	2000      	movs	r0, #0
 80044ba:	e007      	b.n	80044cc <__sfputs_r+0x22>
 80044bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80044c0:	463a      	mov	r2, r7
 80044c2:	4630      	mov	r0, r6
 80044c4:	f7ff ffda 	bl	800447c <__sfputc_r>
 80044c8:	1c43      	adds	r3, r0, #1
 80044ca:	d1f3      	bne.n	80044b4 <__sfputs_r+0xa>
 80044cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080044d0 <_vfiprintf_r>:
 80044d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80044d4:	460d      	mov	r5, r1
 80044d6:	b09d      	sub	sp, #116	; 0x74
 80044d8:	4614      	mov	r4, r2
 80044da:	4698      	mov	r8, r3
 80044dc:	4606      	mov	r6, r0
 80044de:	b118      	cbz	r0, 80044e8 <_vfiprintf_r+0x18>
 80044e0:	6983      	ldr	r3, [r0, #24]
 80044e2:	b90b      	cbnz	r3, 80044e8 <_vfiprintf_r+0x18>
 80044e4:	f7ff fde4 	bl	80040b0 <__sinit>
 80044e8:	4b89      	ldr	r3, [pc, #548]	; (8004710 <_vfiprintf_r+0x240>)
 80044ea:	429d      	cmp	r5, r3
 80044ec:	d11b      	bne.n	8004526 <_vfiprintf_r+0x56>
 80044ee:	6875      	ldr	r5, [r6, #4]
 80044f0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80044f2:	07d9      	lsls	r1, r3, #31
 80044f4:	d405      	bmi.n	8004502 <_vfiprintf_r+0x32>
 80044f6:	89ab      	ldrh	r3, [r5, #12]
 80044f8:	059a      	lsls	r2, r3, #22
 80044fa:	d402      	bmi.n	8004502 <_vfiprintf_r+0x32>
 80044fc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80044fe:	f7ff fe75 	bl	80041ec <__retarget_lock_acquire_recursive>
 8004502:	89ab      	ldrh	r3, [r5, #12]
 8004504:	071b      	lsls	r3, r3, #28
 8004506:	d501      	bpl.n	800450c <_vfiprintf_r+0x3c>
 8004508:	692b      	ldr	r3, [r5, #16]
 800450a:	b9eb      	cbnz	r3, 8004548 <_vfiprintf_r+0x78>
 800450c:	4629      	mov	r1, r5
 800450e:	4630      	mov	r0, r6
 8004510:	f7ff fc46 	bl	8003da0 <__swsetup_r>
 8004514:	b1c0      	cbz	r0, 8004548 <_vfiprintf_r+0x78>
 8004516:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004518:	07dc      	lsls	r4, r3, #31
 800451a:	d50e      	bpl.n	800453a <_vfiprintf_r+0x6a>
 800451c:	f04f 30ff 	mov.w	r0, #4294967295
 8004520:	b01d      	add	sp, #116	; 0x74
 8004522:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004526:	4b7b      	ldr	r3, [pc, #492]	; (8004714 <_vfiprintf_r+0x244>)
 8004528:	429d      	cmp	r5, r3
 800452a:	d101      	bne.n	8004530 <_vfiprintf_r+0x60>
 800452c:	68b5      	ldr	r5, [r6, #8]
 800452e:	e7df      	b.n	80044f0 <_vfiprintf_r+0x20>
 8004530:	4b79      	ldr	r3, [pc, #484]	; (8004718 <_vfiprintf_r+0x248>)
 8004532:	429d      	cmp	r5, r3
 8004534:	bf08      	it	eq
 8004536:	68f5      	ldreq	r5, [r6, #12]
 8004538:	e7da      	b.n	80044f0 <_vfiprintf_r+0x20>
 800453a:	89ab      	ldrh	r3, [r5, #12]
 800453c:	0598      	lsls	r0, r3, #22
 800453e:	d4ed      	bmi.n	800451c <_vfiprintf_r+0x4c>
 8004540:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004542:	f7ff fe54 	bl	80041ee <__retarget_lock_release_recursive>
 8004546:	e7e9      	b.n	800451c <_vfiprintf_r+0x4c>
 8004548:	2300      	movs	r3, #0
 800454a:	9309      	str	r3, [sp, #36]	; 0x24
 800454c:	2320      	movs	r3, #32
 800454e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004552:	f8cd 800c 	str.w	r8, [sp, #12]
 8004556:	2330      	movs	r3, #48	; 0x30
 8004558:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800471c <_vfiprintf_r+0x24c>
 800455c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004560:	f04f 0901 	mov.w	r9, #1
 8004564:	4623      	mov	r3, r4
 8004566:	469a      	mov	sl, r3
 8004568:	f813 2b01 	ldrb.w	r2, [r3], #1
 800456c:	b10a      	cbz	r2, 8004572 <_vfiprintf_r+0xa2>
 800456e:	2a25      	cmp	r2, #37	; 0x25
 8004570:	d1f9      	bne.n	8004566 <_vfiprintf_r+0x96>
 8004572:	ebba 0b04 	subs.w	fp, sl, r4
 8004576:	d00b      	beq.n	8004590 <_vfiprintf_r+0xc0>
 8004578:	465b      	mov	r3, fp
 800457a:	4622      	mov	r2, r4
 800457c:	4629      	mov	r1, r5
 800457e:	4630      	mov	r0, r6
 8004580:	f7ff ff93 	bl	80044aa <__sfputs_r>
 8004584:	3001      	adds	r0, #1
 8004586:	f000 80aa 	beq.w	80046de <_vfiprintf_r+0x20e>
 800458a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800458c:	445a      	add	r2, fp
 800458e:	9209      	str	r2, [sp, #36]	; 0x24
 8004590:	f89a 3000 	ldrb.w	r3, [sl]
 8004594:	2b00      	cmp	r3, #0
 8004596:	f000 80a2 	beq.w	80046de <_vfiprintf_r+0x20e>
 800459a:	2300      	movs	r3, #0
 800459c:	f04f 32ff 	mov.w	r2, #4294967295
 80045a0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80045a4:	f10a 0a01 	add.w	sl, sl, #1
 80045a8:	9304      	str	r3, [sp, #16]
 80045aa:	9307      	str	r3, [sp, #28]
 80045ac:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80045b0:	931a      	str	r3, [sp, #104]	; 0x68
 80045b2:	4654      	mov	r4, sl
 80045b4:	2205      	movs	r2, #5
 80045b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80045ba:	4858      	ldr	r0, [pc, #352]	; (800471c <_vfiprintf_r+0x24c>)
 80045bc:	f7fb fe08 	bl	80001d0 <memchr>
 80045c0:	9a04      	ldr	r2, [sp, #16]
 80045c2:	b9d8      	cbnz	r0, 80045fc <_vfiprintf_r+0x12c>
 80045c4:	06d1      	lsls	r1, r2, #27
 80045c6:	bf44      	itt	mi
 80045c8:	2320      	movmi	r3, #32
 80045ca:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80045ce:	0713      	lsls	r3, r2, #28
 80045d0:	bf44      	itt	mi
 80045d2:	232b      	movmi	r3, #43	; 0x2b
 80045d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80045d8:	f89a 3000 	ldrb.w	r3, [sl]
 80045dc:	2b2a      	cmp	r3, #42	; 0x2a
 80045de:	d015      	beq.n	800460c <_vfiprintf_r+0x13c>
 80045e0:	9a07      	ldr	r2, [sp, #28]
 80045e2:	4654      	mov	r4, sl
 80045e4:	2000      	movs	r0, #0
 80045e6:	f04f 0c0a 	mov.w	ip, #10
 80045ea:	4621      	mov	r1, r4
 80045ec:	f811 3b01 	ldrb.w	r3, [r1], #1
 80045f0:	3b30      	subs	r3, #48	; 0x30
 80045f2:	2b09      	cmp	r3, #9
 80045f4:	d94e      	bls.n	8004694 <_vfiprintf_r+0x1c4>
 80045f6:	b1b0      	cbz	r0, 8004626 <_vfiprintf_r+0x156>
 80045f8:	9207      	str	r2, [sp, #28]
 80045fa:	e014      	b.n	8004626 <_vfiprintf_r+0x156>
 80045fc:	eba0 0308 	sub.w	r3, r0, r8
 8004600:	fa09 f303 	lsl.w	r3, r9, r3
 8004604:	4313      	orrs	r3, r2
 8004606:	9304      	str	r3, [sp, #16]
 8004608:	46a2      	mov	sl, r4
 800460a:	e7d2      	b.n	80045b2 <_vfiprintf_r+0xe2>
 800460c:	9b03      	ldr	r3, [sp, #12]
 800460e:	1d19      	adds	r1, r3, #4
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	9103      	str	r1, [sp, #12]
 8004614:	2b00      	cmp	r3, #0
 8004616:	bfbb      	ittet	lt
 8004618:	425b      	neglt	r3, r3
 800461a:	f042 0202 	orrlt.w	r2, r2, #2
 800461e:	9307      	strge	r3, [sp, #28]
 8004620:	9307      	strlt	r3, [sp, #28]
 8004622:	bfb8      	it	lt
 8004624:	9204      	strlt	r2, [sp, #16]
 8004626:	7823      	ldrb	r3, [r4, #0]
 8004628:	2b2e      	cmp	r3, #46	; 0x2e
 800462a:	d10c      	bne.n	8004646 <_vfiprintf_r+0x176>
 800462c:	7863      	ldrb	r3, [r4, #1]
 800462e:	2b2a      	cmp	r3, #42	; 0x2a
 8004630:	d135      	bne.n	800469e <_vfiprintf_r+0x1ce>
 8004632:	9b03      	ldr	r3, [sp, #12]
 8004634:	1d1a      	adds	r2, r3, #4
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	9203      	str	r2, [sp, #12]
 800463a:	2b00      	cmp	r3, #0
 800463c:	bfb8      	it	lt
 800463e:	f04f 33ff 	movlt.w	r3, #4294967295
 8004642:	3402      	adds	r4, #2
 8004644:	9305      	str	r3, [sp, #20]
 8004646:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800472c <_vfiprintf_r+0x25c>
 800464a:	7821      	ldrb	r1, [r4, #0]
 800464c:	2203      	movs	r2, #3
 800464e:	4650      	mov	r0, sl
 8004650:	f7fb fdbe 	bl	80001d0 <memchr>
 8004654:	b140      	cbz	r0, 8004668 <_vfiprintf_r+0x198>
 8004656:	2340      	movs	r3, #64	; 0x40
 8004658:	eba0 000a 	sub.w	r0, r0, sl
 800465c:	fa03 f000 	lsl.w	r0, r3, r0
 8004660:	9b04      	ldr	r3, [sp, #16]
 8004662:	4303      	orrs	r3, r0
 8004664:	3401      	adds	r4, #1
 8004666:	9304      	str	r3, [sp, #16]
 8004668:	f814 1b01 	ldrb.w	r1, [r4], #1
 800466c:	482c      	ldr	r0, [pc, #176]	; (8004720 <_vfiprintf_r+0x250>)
 800466e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004672:	2206      	movs	r2, #6
 8004674:	f7fb fdac 	bl	80001d0 <memchr>
 8004678:	2800      	cmp	r0, #0
 800467a:	d03f      	beq.n	80046fc <_vfiprintf_r+0x22c>
 800467c:	4b29      	ldr	r3, [pc, #164]	; (8004724 <_vfiprintf_r+0x254>)
 800467e:	bb1b      	cbnz	r3, 80046c8 <_vfiprintf_r+0x1f8>
 8004680:	9b03      	ldr	r3, [sp, #12]
 8004682:	3307      	adds	r3, #7
 8004684:	f023 0307 	bic.w	r3, r3, #7
 8004688:	3308      	adds	r3, #8
 800468a:	9303      	str	r3, [sp, #12]
 800468c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800468e:	443b      	add	r3, r7
 8004690:	9309      	str	r3, [sp, #36]	; 0x24
 8004692:	e767      	b.n	8004564 <_vfiprintf_r+0x94>
 8004694:	fb0c 3202 	mla	r2, ip, r2, r3
 8004698:	460c      	mov	r4, r1
 800469a:	2001      	movs	r0, #1
 800469c:	e7a5      	b.n	80045ea <_vfiprintf_r+0x11a>
 800469e:	2300      	movs	r3, #0
 80046a0:	3401      	adds	r4, #1
 80046a2:	9305      	str	r3, [sp, #20]
 80046a4:	4619      	mov	r1, r3
 80046a6:	f04f 0c0a 	mov.w	ip, #10
 80046aa:	4620      	mov	r0, r4
 80046ac:	f810 2b01 	ldrb.w	r2, [r0], #1
 80046b0:	3a30      	subs	r2, #48	; 0x30
 80046b2:	2a09      	cmp	r2, #9
 80046b4:	d903      	bls.n	80046be <_vfiprintf_r+0x1ee>
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d0c5      	beq.n	8004646 <_vfiprintf_r+0x176>
 80046ba:	9105      	str	r1, [sp, #20]
 80046bc:	e7c3      	b.n	8004646 <_vfiprintf_r+0x176>
 80046be:	fb0c 2101 	mla	r1, ip, r1, r2
 80046c2:	4604      	mov	r4, r0
 80046c4:	2301      	movs	r3, #1
 80046c6:	e7f0      	b.n	80046aa <_vfiprintf_r+0x1da>
 80046c8:	ab03      	add	r3, sp, #12
 80046ca:	9300      	str	r3, [sp, #0]
 80046cc:	462a      	mov	r2, r5
 80046ce:	4b16      	ldr	r3, [pc, #88]	; (8004728 <_vfiprintf_r+0x258>)
 80046d0:	a904      	add	r1, sp, #16
 80046d2:	4630      	mov	r0, r6
 80046d4:	f3af 8000 	nop.w
 80046d8:	4607      	mov	r7, r0
 80046da:	1c78      	adds	r0, r7, #1
 80046dc:	d1d6      	bne.n	800468c <_vfiprintf_r+0x1bc>
 80046de:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80046e0:	07d9      	lsls	r1, r3, #31
 80046e2:	d405      	bmi.n	80046f0 <_vfiprintf_r+0x220>
 80046e4:	89ab      	ldrh	r3, [r5, #12]
 80046e6:	059a      	lsls	r2, r3, #22
 80046e8:	d402      	bmi.n	80046f0 <_vfiprintf_r+0x220>
 80046ea:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80046ec:	f7ff fd7f 	bl	80041ee <__retarget_lock_release_recursive>
 80046f0:	89ab      	ldrh	r3, [r5, #12]
 80046f2:	065b      	lsls	r3, r3, #25
 80046f4:	f53f af12 	bmi.w	800451c <_vfiprintf_r+0x4c>
 80046f8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80046fa:	e711      	b.n	8004520 <_vfiprintf_r+0x50>
 80046fc:	ab03      	add	r3, sp, #12
 80046fe:	9300      	str	r3, [sp, #0]
 8004700:	462a      	mov	r2, r5
 8004702:	4b09      	ldr	r3, [pc, #36]	; (8004728 <_vfiprintf_r+0x258>)
 8004704:	a904      	add	r1, sp, #16
 8004706:	4630      	mov	r0, r6
 8004708:	f000 f880 	bl	800480c <_printf_i>
 800470c:	e7e4      	b.n	80046d8 <_vfiprintf_r+0x208>
 800470e:	bf00      	nop
 8004710:	08004d40 	.word	0x08004d40
 8004714:	08004d60 	.word	0x08004d60
 8004718:	08004d20 	.word	0x08004d20
 800471c:	08004d80 	.word	0x08004d80
 8004720:	08004d8a 	.word	0x08004d8a
 8004724:	00000000 	.word	0x00000000
 8004728:	080044ab 	.word	0x080044ab
 800472c:	08004d86 	.word	0x08004d86

08004730 <_printf_common>:
 8004730:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004734:	4616      	mov	r6, r2
 8004736:	4699      	mov	r9, r3
 8004738:	688a      	ldr	r2, [r1, #8]
 800473a:	690b      	ldr	r3, [r1, #16]
 800473c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004740:	4293      	cmp	r3, r2
 8004742:	bfb8      	it	lt
 8004744:	4613      	movlt	r3, r2
 8004746:	6033      	str	r3, [r6, #0]
 8004748:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800474c:	4607      	mov	r7, r0
 800474e:	460c      	mov	r4, r1
 8004750:	b10a      	cbz	r2, 8004756 <_printf_common+0x26>
 8004752:	3301      	adds	r3, #1
 8004754:	6033      	str	r3, [r6, #0]
 8004756:	6823      	ldr	r3, [r4, #0]
 8004758:	0699      	lsls	r1, r3, #26
 800475a:	bf42      	ittt	mi
 800475c:	6833      	ldrmi	r3, [r6, #0]
 800475e:	3302      	addmi	r3, #2
 8004760:	6033      	strmi	r3, [r6, #0]
 8004762:	6825      	ldr	r5, [r4, #0]
 8004764:	f015 0506 	ands.w	r5, r5, #6
 8004768:	d106      	bne.n	8004778 <_printf_common+0x48>
 800476a:	f104 0a19 	add.w	sl, r4, #25
 800476e:	68e3      	ldr	r3, [r4, #12]
 8004770:	6832      	ldr	r2, [r6, #0]
 8004772:	1a9b      	subs	r3, r3, r2
 8004774:	42ab      	cmp	r3, r5
 8004776:	dc26      	bgt.n	80047c6 <_printf_common+0x96>
 8004778:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800477c:	1e13      	subs	r3, r2, #0
 800477e:	6822      	ldr	r2, [r4, #0]
 8004780:	bf18      	it	ne
 8004782:	2301      	movne	r3, #1
 8004784:	0692      	lsls	r2, r2, #26
 8004786:	d42b      	bmi.n	80047e0 <_printf_common+0xb0>
 8004788:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800478c:	4649      	mov	r1, r9
 800478e:	4638      	mov	r0, r7
 8004790:	47c0      	blx	r8
 8004792:	3001      	adds	r0, #1
 8004794:	d01e      	beq.n	80047d4 <_printf_common+0xa4>
 8004796:	6823      	ldr	r3, [r4, #0]
 8004798:	68e5      	ldr	r5, [r4, #12]
 800479a:	6832      	ldr	r2, [r6, #0]
 800479c:	f003 0306 	and.w	r3, r3, #6
 80047a0:	2b04      	cmp	r3, #4
 80047a2:	bf08      	it	eq
 80047a4:	1aad      	subeq	r5, r5, r2
 80047a6:	68a3      	ldr	r3, [r4, #8]
 80047a8:	6922      	ldr	r2, [r4, #16]
 80047aa:	bf0c      	ite	eq
 80047ac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80047b0:	2500      	movne	r5, #0
 80047b2:	4293      	cmp	r3, r2
 80047b4:	bfc4      	itt	gt
 80047b6:	1a9b      	subgt	r3, r3, r2
 80047b8:	18ed      	addgt	r5, r5, r3
 80047ba:	2600      	movs	r6, #0
 80047bc:	341a      	adds	r4, #26
 80047be:	42b5      	cmp	r5, r6
 80047c0:	d11a      	bne.n	80047f8 <_printf_common+0xc8>
 80047c2:	2000      	movs	r0, #0
 80047c4:	e008      	b.n	80047d8 <_printf_common+0xa8>
 80047c6:	2301      	movs	r3, #1
 80047c8:	4652      	mov	r2, sl
 80047ca:	4649      	mov	r1, r9
 80047cc:	4638      	mov	r0, r7
 80047ce:	47c0      	blx	r8
 80047d0:	3001      	adds	r0, #1
 80047d2:	d103      	bne.n	80047dc <_printf_common+0xac>
 80047d4:	f04f 30ff 	mov.w	r0, #4294967295
 80047d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80047dc:	3501      	adds	r5, #1
 80047de:	e7c6      	b.n	800476e <_printf_common+0x3e>
 80047e0:	18e1      	adds	r1, r4, r3
 80047e2:	1c5a      	adds	r2, r3, #1
 80047e4:	2030      	movs	r0, #48	; 0x30
 80047e6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80047ea:	4422      	add	r2, r4
 80047ec:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80047f0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80047f4:	3302      	adds	r3, #2
 80047f6:	e7c7      	b.n	8004788 <_printf_common+0x58>
 80047f8:	2301      	movs	r3, #1
 80047fa:	4622      	mov	r2, r4
 80047fc:	4649      	mov	r1, r9
 80047fe:	4638      	mov	r0, r7
 8004800:	47c0      	blx	r8
 8004802:	3001      	adds	r0, #1
 8004804:	d0e6      	beq.n	80047d4 <_printf_common+0xa4>
 8004806:	3601      	adds	r6, #1
 8004808:	e7d9      	b.n	80047be <_printf_common+0x8e>
	...

0800480c <_printf_i>:
 800480c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004810:	7e0f      	ldrb	r7, [r1, #24]
 8004812:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004814:	2f78      	cmp	r7, #120	; 0x78
 8004816:	4691      	mov	r9, r2
 8004818:	4680      	mov	r8, r0
 800481a:	460c      	mov	r4, r1
 800481c:	469a      	mov	sl, r3
 800481e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004822:	d807      	bhi.n	8004834 <_printf_i+0x28>
 8004824:	2f62      	cmp	r7, #98	; 0x62
 8004826:	d80a      	bhi.n	800483e <_printf_i+0x32>
 8004828:	2f00      	cmp	r7, #0
 800482a:	f000 80d8 	beq.w	80049de <_printf_i+0x1d2>
 800482e:	2f58      	cmp	r7, #88	; 0x58
 8004830:	f000 80a3 	beq.w	800497a <_printf_i+0x16e>
 8004834:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004838:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800483c:	e03a      	b.n	80048b4 <_printf_i+0xa8>
 800483e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004842:	2b15      	cmp	r3, #21
 8004844:	d8f6      	bhi.n	8004834 <_printf_i+0x28>
 8004846:	a101      	add	r1, pc, #4	; (adr r1, 800484c <_printf_i+0x40>)
 8004848:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800484c:	080048a5 	.word	0x080048a5
 8004850:	080048b9 	.word	0x080048b9
 8004854:	08004835 	.word	0x08004835
 8004858:	08004835 	.word	0x08004835
 800485c:	08004835 	.word	0x08004835
 8004860:	08004835 	.word	0x08004835
 8004864:	080048b9 	.word	0x080048b9
 8004868:	08004835 	.word	0x08004835
 800486c:	08004835 	.word	0x08004835
 8004870:	08004835 	.word	0x08004835
 8004874:	08004835 	.word	0x08004835
 8004878:	080049c5 	.word	0x080049c5
 800487c:	080048e9 	.word	0x080048e9
 8004880:	080049a7 	.word	0x080049a7
 8004884:	08004835 	.word	0x08004835
 8004888:	08004835 	.word	0x08004835
 800488c:	080049e7 	.word	0x080049e7
 8004890:	08004835 	.word	0x08004835
 8004894:	080048e9 	.word	0x080048e9
 8004898:	08004835 	.word	0x08004835
 800489c:	08004835 	.word	0x08004835
 80048a0:	080049af 	.word	0x080049af
 80048a4:	682b      	ldr	r3, [r5, #0]
 80048a6:	1d1a      	adds	r2, r3, #4
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	602a      	str	r2, [r5, #0]
 80048ac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80048b0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80048b4:	2301      	movs	r3, #1
 80048b6:	e0a3      	b.n	8004a00 <_printf_i+0x1f4>
 80048b8:	6820      	ldr	r0, [r4, #0]
 80048ba:	6829      	ldr	r1, [r5, #0]
 80048bc:	0606      	lsls	r6, r0, #24
 80048be:	f101 0304 	add.w	r3, r1, #4
 80048c2:	d50a      	bpl.n	80048da <_printf_i+0xce>
 80048c4:	680e      	ldr	r6, [r1, #0]
 80048c6:	602b      	str	r3, [r5, #0]
 80048c8:	2e00      	cmp	r6, #0
 80048ca:	da03      	bge.n	80048d4 <_printf_i+0xc8>
 80048cc:	232d      	movs	r3, #45	; 0x2d
 80048ce:	4276      	negs	r6, r6
 80048d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80048d4:	485e      	ldr	r0, [pc, #376]	; (8004a50 <_printf_i+0x244>)
 80048d6:	230a      	movs	r3, #10
 80048d8:	e019      	b.n	800490e <_printf_i+0x102>
 80048da:	680e      	ldr	r6, [r1, #0]
 80048dc:	602b      	str	r3, [r5, #0]
 80048de:	f010 0f40 	tst.w	r0, #64	; 0x40
 80048e2:	bf18      	it	ne
 80048e4:	b236      	sxthne	r6, r6
 80048e6:	e7ef      	b.n	80048c8 <_printf_i+0xbc>
 80048e8:	682b      	ldr	r3, [r5, #0]
 80048ea:	6820      	ldr	r0, [r4, #0]
 80048ec:	1d19      	adds	r1, r3, #4
 80048ee:	6029      	str	r1, [r5, #0]
 80048f0:	0601      	lsls	r1, r0, #24
 80048f2:	d501      	bpl.n	80048f8 <_printf_i+0xec>
 80048f4:	681e      	ldr	r6, [r3, #0]
 80048f6:	e002      	b.n	80048fe <_printf_i+0xf2>
 80048f8:	0646      	lsls	r6, r0, #25
 80048fa:	d5fb      	bpl.n	80048f4 <_printf_i+0xe8>
 80048fc:	881e      	ldrh	r6, [r3, #0]
 80048fe:	4854      	ldr	r0, [pc, #336]	; (8004a50 <_printf_i+0x244>)
 8004900:	2f6f      	cmp	r7, #111	; 0x6f
 8004902:	bf0c      	ite	eq
 8004904:	2308      	moveq	r3, #8
 8004906:	230a      	movne	r3, #10
 8004908:	2100      	movs	r1, #0
 800490a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800490e:	6865      	ldr	r5, [r4, #4]
 8004910:	60a5      	str	r5, [r4, #8]
 8004912:	2d00      	cmp	r5, #0
 8004914:	bfa2      	ittt	ge
 8004916:	6821      	ldrge	r1, [r4, #0]
 8004918:	f021 0104 	bicge.w	r1, r1, #4
 800491c:	6021      	strge	r1, [r4, #0]
 800491e:	b90e      	cbnz	r6, 8004924 <_printf_i+0x118>
 8004920:	2d00      	cmp	r5, #0
 8004922:	d04d      	beq.n	80049c0 <_printf_i+0x1b4>
 8004924:	4615      	mov	r5, r2
 8004926:	fbb6 f1f3 	udiv	r1, r6, r3
 800492a:	fb03 6711 	mls	r7, r3, r1, r6
 800492e:	5dc7      	ldrb	r7, [r0, r7]
 8004930:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004934:	4637      	mov	r7, r6
 8004936:	42bb      	cmp	r3, r7
 8004938:	460e      	mov	r6, r1
 800493a:	d9f4      	bls.n	8004926 <_printf_i+0x11a>
 800493c:	2b08      	cmp	r3, #8
 800493e:	d10b      	bne.n	8004958 <_printf_i+0x14c>
 8004940:	6823      	ldr	r3, [r4, #0]
 8004942:	07de      	lsls	r6, r3, #31
 8004944:	d508      	bpl.n	8004958 <_printf_i+0x14c>
 8004946:	6923      	ldr	r3, [r4, #16]
 8004948:	6861      	ldr	r1, [r4, #4]
 800494a:	4299      	cmp	r1, r3
 800494c:	bfde      	ittt	le
 800494e:	2330      	movle	r3, #48	; 0x30
 8004950:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004954:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004958:	1b52      	subs	r2, r2, r5
 800495a:	6122      	str	r2, [r4, #16]
 800495c:	f8cd a000 	str.w	sl, [sp]
 8004960:	464b      	mov	r3, r9
 8004962:	aa03      	add	r2, sp, #12
 8004964:	4621      	mov	r1, r4
 8004966:	4640      	mov	r0, r8
 8004968:	f7ff fee2 	bl	8004730 <_printf_common>
 800496c:	3001      	adds	r0, #1
 800496e:	d14c      	bne.n	8004a0a <_printf_i+0x1fe>
 8004970:	f04f 30ff 	mov.w	r0, #4294967295
 8004974:	b004      	add	sp, #16
 8004976:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800497a:	4835      	ldr	r0, [pc, #212]	; (8004a50 <_printf_i+0x244>)
 800497c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004980:	6829      	ldr	r1, [r5, #0]
 8004982:	6823      	ldr	r3, [r4, #0]
 8004984:	f851 6b04 	ldr.w	r6, [r1], #4
 8004988:	6029      	str	r1, [r5, #0]
 800498a:	061d      	lsls	r5, r3, #24
 800498c:	d514      	bpl.n	80049b8 <_printf_i+0x1ac>
 800498e:	07df      	lsls	r7, r3, #31
 8004990:	bf44      	itt	mi
 8004992:	f043 0320 	orrmi.w	r3, r3, #32
 8004996:	6023      	strmi	r3, [r4, #0]
 8004998:	b91e      	cbnz	r6, 80049a2 <_printf_i+0x196>
 800499a:	6823      	ldr	r3, [r4, #0]
 800499c:	f023 0320 	bic.w	r3, r3, #32
 80049a0:	6023      	str	r3, [r4, #0]
 80049a2:	2310      	movs	r3, #16
 80049a4:	e7b0      	b.n	8004908 <_printf_i+0xfc>
 80049a6:	6823      	ldr	r3, [r4, #0]
 80049a8:	f043 0320 	orr.w	r3, r3, #32
 80049ac:	6023      	str	r3, [r4, #0]
 80049ae:	2378      	movs	r3, #120	; 0x78
 80049b0:	4828      	ldr	r0, [pc, #160]	; (8004a54 <_printf_i+0x248>)
 80049b2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80049b6:	e7e3      	b.n	8004980 <_printf_i+0x174>
 80049b8:	0659      	lsls	r1, r3, #25
 80049ba:	bf48      	it	mi
 80049bc:	b2b6      	uxthmi	r6, r6
 80049be:	e7e6      	b.n	800498e <_printf_i+0x182>
 80049c0:	4615      	mov	r5, r2
 80049c2:	e7bb      	b.n	800493c <_printf_i+0x130>
 80049c4:	682b      	ldr	r3, [r5, #0]
 80049c6:	6826      	ldr	r6, [r4, #0]
 80049c8:	6961      	ldr	r1, [r4, #20]
 80049ca:	1d18      	adds	r0, r3, #4
 80049cc:	6028      	str	r0, [r5, #0]
 80049ce:	0635      	lsls	r5, r6, #24
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	d501      	bpl.n	80049d8 <_printf_i+0x1cc>
 80049d4:	6019      	str	r1, [r3, #0]
 80049d6:	e002      	b.n	80049de <_printf_i+0x1d2>
 80049d8:	0670      	lsls	r0, r6, #25
 80049da:	d5fb      	bpl.n	80049d4 <_printf_i+0x1c8>
 80049dc:	8019      	strh	r1, [r3, #0]
 80049de:	2300      	movs	r3, #0
 80049e0:	6123      	str	r3, [r4, #16]
 80049e2:	4615      	mov	r5, r2
 80049e4:	e7ba      	b.n	800495c <_printf_i+0x150>
 80049e6:	682b      	ldr	r3, [r5, #0]
 80049e8:	1d1a      	adds	r2, r3, #4
 80049ea:	602a      	str	r2, [r5, #0]
 80049ec:	681d      	ldr	r5, [r3, #0]
 80049ee:	6862      	ldr	r2, [r4, #4]
 80049f0:	2100      	movs	r1, #0
 80049f2:	4628      	mov	r0, r5
 80049f4:	f7fb fbec 	bl	80001d0 <memchr>
 80049f8:	b108      	cbz	r0, 80049fe <_printf_i+0x1f2>
 80049fa:	1b40      	subs	r0, r0, r5
 80049fc:	6060      	str	r0, [r4, #4]
 80049fe:	6863      	ldr	r3, [r4, #4]
 8004a00:	6123      	str	r3, [r4, #16]
 8004a02:	2300      	movs	r3, #0
 8004a04:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004a08:	e7a8      	b.n	800495c <_printf_i+0x150>
 8004a0a:	6923      	ldr	r3, [r4, #16]
 8004a0c:	462a      	mov	r2, r5
 8004a0e:	4649      	mov	r1, r9
 8004a10:	4640      	mov	r0, r8
 8004a12:	47d0      	blx	sl
 8004a14:	3001      	adds	r0, #1
 8004a16:	d0ab      	beq.n	8004970 <_printf_i+0x164>
 8004a18:	6823      	ldr	r3, [r4, #0]
 8004a1a:	079b      	lsls	r3, r3, #30
 8004a1c:	d413      	bmi.n	8004a46 <_printf_i+0x23a>
 8004a1e:	68e0      	ldr	r0, [r4, #12]
 8004a20:	9b03      	ldr	r3, [sp, #12]
 8004a22:	4298      	cmp	r0, r3
 8004a24:	bfb8      	it	lt
 8004a26:	4618      	movlt	r0, r3
 8004a28:	e7a4      	b.n	8004974 <_printf_i+0x168>
 8004a2a:	2301      	movs	r3, #1
 8004a2c:	4632      	mov	r2, r6
 8004a2e:	4649      	mov	r1, r9
 8004a30:	4640      	mov	r0, r8
 8004a32:	47d0      	blx	sl
 8004a34:	3001      	adds	r0, #1
 8004a36:	d09b      	beq.n	8004970 <_printf_i+0x164>
 8004a38:	3501      	adds	r5, #1
 8004a3a:	68e3      	ldr	r3, [r4, #12]
 8004a3c:	9903      	ldr	r1, [sp, #12]
 8004a3e:	1a5b      	subs	r3, r3, r1
 8004a40:	42ab      	cmp	r3, r5
 8004a42:	dcf2      	bgt.n	8004a2a <_printf_i+0x21e>
 8004a44:	e7eb      	b.n	8004a1e <_printf_i+0x212>
 8004a46:	2500      	movs	r5, #0
 8004a48:	f104 0619 	add.w	r6, r4, #25
 8004a4c:	e7f5      	b.n	8004a3a <_printf_i+0x22e>
 8004a4e:	bf00      	nop
 8004a50:	08004d91 	.word	0x08004d91
 8004a54:	08004da2 	.word	0x08004da2

08004a58 <_sbrk_r>:
 8004a58:	b538      	push	{r3, r4, r5, lr}
 8004a5a:	4d06      	ldr	r5, [pc, #24]	; (8004a74 <_sbrk_r+0x1c>)
 8004a5c:	2300      	movs	r3, #0
 8004a5e:	4604      	mov	r4, r0
 8004a60:	4608      	mov	r0, r1
 8004a62:	602b      	str	r3, [r5, #0]
 8004a64:	f7fc f8a8 	bl	8000bb8 <_sbrk>
 8004a68:	1c43      	adds	r3, r0, #1
 8004a6a:	d102      	bne.n	8004a72 <_sbrk_r+0x1a>
 8004a6c:	682b      	ldr	r3, [r5, #0]
 8004a6e:	b103      	cbz	r3, 8004a72 <_sbrk_r+0x1a>
 8004a70:	6023      	str	r3, [r4, #0]
 8004a72:	bd38      	pop	{r3, r4, r5, pc}
 8004a74:	200001a8 	.word	0x200001a8

08004a78 <__sread>:
 8004a78:	b510      	push	{r4, lr}
 8004a7a:	460c      	mov	r4, r1
 8004a7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004a80:	f000 f8a0 	bl	8004bc4 <_read_r>
 8004a84:	2800      	cmp	r0, #0
 8004a86:	bfab      	itete	ge
 8004a88:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004a8a:	89a3      	ldrhlt	r3, [r4, #12]
 8004a8c:	181b      	addge	r3, r3, r0
 8004a8e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004a92:	bfac      	ite	ge
 8004a94:	6563      	strge	r3, [r4, #84]	; 0x54
 8004a96:	81a3      	strhlt	r3, [r4, #12]
 8004a98:	bd10      	pop	{r4, pc}

08004a9a <__swrite>:
 8004a9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004a9e:	461f      	mov	r7, r3
 8004aa0:	898b      	ldrh	r3, [r1, #12]
 8004aa2:	05db      	lsls	r3, r3, #23
 8004aa4:	4605      	mov	r5, r0
 8004aa6:	460c      	mov	r4, r1
 8004aa8:	4616      	mov	r6, r2
 8004aaa:	d505      	bpl.n	8004ab8 <__swrite+0x1e>
 8004aac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004ab0:	2302      	movs	r3, #2
 8004ab2:	2200      	movs	r2, #0
 8004ab4:	f000 f868 	bl	8004b88 <_lseek_r>
 8004ab8:	89a3      	ldrh	r3, [r4, #12]
 8004aba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004abe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004ac2:	81a3      	strh	r3, [r4, #12]
 8004ac4:	4632      	mov	r2, r6
 8004ac6:	463b      	mov	r3, r7
 8004ac8:	4628      	mov	r0, r5
 8004aca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004ace:	f000 b817 	b.w	8004b00 <_write_r>

08004ad2 <__sseek>:
 8004ad2:	b510      	push	{r4, lr}
 8004ad4:	460c      	mov	r4, r1
 8004ad6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004ada:	f000 f855 	bl	8004b88 <_lseek_r>
 8004ade:	1c43      	adds	r3, r0, #1
 8004ae0:	89a3      	ldrh	r3, [r4, #12]
 8004ae2:	bf15      	itete	ne
 8004ae4:	6560      	strne	r0, [r4, #84]	; 0x54
 8004ae6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004aea:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004aee:	81a3      	strheq	r3, [r4, #12]
 8004af0:	bf18      	it	ne
 8004af2:	81a3      	strhne	r3, [r4, #12]
 8004af4:	bd10      	pop	{r4, pc}

08004af6 <__sclose>:
 8004af6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004afa:	f000 b813 	b.w	8004b24 <_close_r>
	...

08004b00 <_write_r>:
 8004b00:	b538      	push	{r3, r4, r5, lr}
 8004b02:	4d07      	ldr	r5, [pc, #28]	; (8004b20 <_write_r+0x20>)
 8004b04:	4604      	mov	r4, r0
 8004b06:	4608      	mov	r0, r1
 8004b08:	4611      	mov	r1, r2
 8004b0a:	2200      	movs	r2, #0
 8004b0c:	602a      	str	r2, [r5, #0]
 8004b0e:	461a      	mov	r2, r3
 8004b10:	f7fc f801 	bl	8000b16 <_write>
 8004b14:	1c43      	adds	r3, r0, #1
 8004b16:	d102      	bne.n	8004b1e <_write_r+0x1e>
 8004b18:	682b      	ldr	r3, [r5, #0]
 8004b1a:	b103      	cbz	r3, 8004b1e <_write_r+0x1e>
 8004b1c:	6023      	str	r3, [r4, #0]
 8004b1e:	bd38      	pop	{r3, r4, r5, pc}
 8004b20:	200001a8 	.word	0x200001a8

08004b24 <_close_r>:
 8004b24:	b538      	push	{r3, r4, r5, lr}
 8004b26:	4d06      	ldr	r5, [pc, #24]	; (8004b40 <_close_r+0x1c>)
 8004b28:	2300      	movs	r3, #0
 8004b2a:	4604      	mov	r4, r0
 8004b2c:	4608      	mov	r0, r1
 8004b2e:	602b      	str	r3, [r5, #0]
 8004b30:	f7fc f80d 	bl	8000b4e <_close>
 8004b34:	1c43      	adds	r3, r0, #1
 8004b36:	d102      	bne.n	8004b3e <_close_r+0x1a>
 8004b38:	682b      	ldr	r3, [r5, #0]
 8004b3a:	b103      	cbz	r3, 8004b3e <_close_r+0x1a>
 8004b3c:	6023      	str	r3, [r4, #0]
 8004b3e:	bd38      	pop	{r3, r4, r5, pc}
 8004b40:	200001a8 	.word	0x200001a8

08004b44 <_fstat_r>:
 8004b44:	b538      	push	{r3, r4, r5, lr}
 8004b46:	4d07      	ldr	r5, [pc, #28]	; (8004b64 <_fstat_r+0x20>)
 8004b48:	2300      	movs	r3, #0
 8004b4a:	4604      	mov	r4, r0
 8004b4c:	4608      	mov	r0, r1
 8004b4e:	4611      	mov	r1, r2
 8004b50:	602b      	str	r3, [r5, #0]
 8004b52:	f7fc f808 	bl	8000b66 <_fstat>
 8004b56:	1c43      	adds	r3, r0, #1
 8004b58:	d102      	bne.n	8004b60 <_fstat_r+0x1c>
 8004b5a:	682b      	ldr	r3, [r5, #0]
 8004b5c:	b103      	cbz	r3, 8004b60 <_fstat_r+0x1c>
 8004b5e:	6023      	str	r3, [r4, #0]
 8004b60:	bd38      	pop	{r3, r4, r5, pc}
 8004b62:	bf00      	nop
 8004b64:	200001a8 	.word	0x200001a8

08004b68 <_isatty_r>:
 8004b68:	b538      	push	{r3, r4, r5, lr}
 8004b6a:	4d06      	ldr	r5, [pc, #24]	; (8004b84 <_isatty_r+0x1c>)
 8004b6c:	2300      	movs	r3, #0
 8004b6e:	4604      	mov	r4, r0
 8004b70:	4608      	mov	r0, r1
 8004b72:	602b      	str	r3, [r5, #0]
 8004b74:	f7fc f807 	bl	8000b86 <_isatty>
 8004b78:	1c43      	adds	r3, r0, #1
 8004b7a:	d102      	bne.n	8004b82 <_isatty_r+0x1a>
 8004b7c:	682b      	ldr	r3, [r5, #0]
 8004b7e:	b103      	cbz	r3, 8004b82 <_isatty_r+0x1a>
 8004b80:	6023      	str	r3, [r4, #0]
 8004b82:	bd38      	pop	{r3, r4, r5, pc}
 8004b84:	200001a8 	.word	0x200001a8

08004b88 <_lseek_r>:
 8004b88:	b538      	push	{r3, r4, r5, lr}
 8004b8a:	4d07      	ldr	r5, [pc, #28]	; (8004ba8 <_lseek_r+0x20>)
 8004b8c:	4604      	mov	r4, r0
 8004b8e:	4608      	mov	r0, r1
 8004b90:	4611      	mov	r1, r2
 8004b92:	2200      	movs	r2, #0
 8004b94:	602a      	str	r2, [r5, #0]
 8004b96:	461a      	mov	r2, r3
 8004b98:	f7fc f800 	bl	8000b9c <_lseek>
 8004b9c:	1c43      	adds	r3, r0, #1
 8004b9e:	d102      	bne.n	8004ba6 <_lseek_r+0x1e>
 8004ba0:	682b      	ldr	r3, [r5, #0]
 8004ba2:	b103      	cbz	r3, 8004ba6 <_lseek_r+0x1e>
 8004ba4:	6023      	str	r3, [r4, #0]
 8004ba6:	bd38      	pop	{r3, r4, r5, pc}
 8004ba8:	200001a8 	.word	0x200001a8

08004bac <__malloc_lock>:
 8004bac:	4801      	ldr	r0, [pc, #4]	; (8004bb4 <__malloc_lock+0x8>)
 8004bae:	f7ff bb1d 	b.w	80041ec <__retarget_lock_acquire_recursive>
 8004bb2:	bf00      	nop
 8004bb4:	2000019c 	.word	0x2000019c

08004bb8 <__malloc_unlock>:
 8004bb8:	4801      	ldr	r0, [pc, #4]	; (8004bc0 <__malloc_unlock+0x8>)
 8004bba:	f7ff bb18 	b.w	80041ee <__retarget_lock_release_recursive>
 8004bbe:	bf00      	nop
 8004bc0:	2000019c 	.word	0x2000019c

08004bc4 <_read_r>:
 8004bc4:	b538      	push	{r3, r4, r5, lr}
 8004bc6:	4d07      	ldr	r5, [pc, #28]	; (8004be4 <_read_r+0x20>)
 8004bc8:	4604      	mov	r4, r0
 8004bca:	4608      	mov	r0, r1
 8004bcc:	4611      	mov	r1, r2
 8004bce:	2200      	movs	r2, #0
 8004bd0:	602a      	str	r2, [r5, #0]
 8004bd2:	461a      	mov	r2, r3
 8004bd4:	f7fb ff82 	bl	8000adc <_read>
 8004bd8:	1c43      	adds	r3, r0, #1
 8004bda:	d102      	bne.n	8004be2 <_read_r+0x1e>
 8004bdc:	682b      	ldr	r3, [r5, #0]
 8004bde:	b103      	cbz	r3, 8004be2 <_read_r+0x1e>
 8004be0:	6023      	str	r3, [r4, #0]
 8004be2:	bd38      	pop	{r3, r4, r5, pc}
 8004be4:	200001a8 	.word	0x200001a8

08004be8 <_init>:
 8004be8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004bea:	bf00      	nop
 8004bec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004bee:	bc08      	pop	{r3}
 8004bf0:	469e      	mov	lr, r3
 8004bf2:	4770      	bx	lr

08004bf4 <_fini>:
 8004bf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004bf6:	bf00      	nop
 8004bf8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004bfa:	bc08      	pop	{r3}
 8004bfc:	469e      	mov	lr, r3
 8004bfe:	4770      	bx	lr
