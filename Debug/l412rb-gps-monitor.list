
l412rb-gps-monitor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000038c4  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000190  08003a50  08003a50  00013a50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003be0  08003be0  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08003be0  08003be0  00013be0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003be8  08003be8  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003be8  08003be8  00013be8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003bec  08003bec  00013bec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003bf0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000013c  20000070  08003c60  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001ac  08003c60  000201ac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b569  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001afb  00000000  00000000  0002b609  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000968  00000000  00000000  0002d108  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000008b0  00000000  00000000  0002da70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a38a  00000000  00000000  0002e320  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b2e5  00000000  00000000  000486aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a01f9  00000000  00000000  0005398f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f3b88  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002bc8  00000000  00000000  000f3bd8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	20000070 	.word	0x20000070
 80001a8:	00000000 	.word	0x00000000
 80001ac:	08003a38 	.word	0x08003a38

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000074 	.word	0x20000074
 80001c8:	08003a38 	.word	0x08003a38

080001cc <__aeabi_uldivmod>:
 80001cc:	b953      	cbnz	r3, 80001e4 <__aeabi_uldivmod+0x18>
 80001ce:	b94a      	cbnz	r2, 80001e4 <__aeabi_uldivmod+0x18>
 80001d0:	2900      	cmp	r1, #0
 80001d2:	bf08      	it	eq
 80001d4:	2800      	cmpeq	r0, #0
 80001d6:	bf1c      	itt	ne
 80001d8:	f04f 31ff 	movne.w	r1, #4294967295
 80001dc:	f04f 30ff 	movne.w	r0, #4294967295
 80001e0:	f000 b974 	b.w	80004cc <__aeabi_idiv0>
 80001e4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001ec:	f000 f806 	bl	80001fc <__udivmoddi4>
 80001f0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f8:	b004      	add	sp, #16
 80001fa:	4770      	bx	lr

080001fc <__udivmoddi4>:
 80001fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000200:	9d08      	ldr	r5, [sp, #32]
 8000202:	4604      	mov	r4, r0
 8000204:	468e      	mov	lr, r1
 8000206:	2b00      	cmp	r3, #0
 8000208:	d14d      	bne.n	80002a6 <__udivmoddi4+0xaa>
 800020a:	428a      	cmp	r2, r1
 800020c:	4694      	mov	ip, r2
 800020e:	d969      	bls.n	80002e4 <__udivmoddi4+0xe8>
 8000210:	fab2 f282 	clz	r2, r2
 8000214:	b152      	cbz	r2, 800022c <__udivmoddi4+0x30>
 8000216:	fa01 f302 	lsl.w	r3, r1, r2
 800021a:	f1c2 0120 	rsb	r1, r2, #32
 800021e:	fa20 f101 	lsr.w	r1, r0, r1
 8000222:	fa0c fc02 	lsl.w	ip, ip, r2
 8000226:	ea41 0e03 	orr.w	lr, r1, r3
 800022a:	4094      	lsls	r4, r2
 800022c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000230:	0c21      	lsrs	r1, r4, #16
 8000232:	fbbe f6f8 	udiv	r6, lr, r8
 8000236:	fa1f f78c 	uxth.w	r7, ip
 800023a:	fb08 e316 	mls	r3, r8, r6, lr
 800023e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000242:	fb06 f107 	mul.w	r1, r6, r7
 8000246:	4299      	cmp	r1, r3
 8000248:	d90a      	bls.n	8000260 <__udivmoddi4+0x64>
 800024a:	eb1c 0303 	adds.w	r3, ip, r3
 800024e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000252:	f080 811f 	bcs.w	8000494 <__udivmoddi4+0x298>
 8000256:	4299      	cmp	r1, r3
 8000258:	f240 811c 	bls.w	8000494 <__udivmoddi4+0x298>
 800025c:	3e02      	subs	r6, #2
 800025e:	4463      	add	r3, ip
 8000260:	1a5b      	subs	r3, r3, r1
 8000262:	b2a4      	uxth	r4, r4
 8000264:	fbb3 f0f8 	udiv	r0, r3, r8
 8000268:	fb08 3310 	mls	r3, r8, r0, r3
 800026c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000270:	fb00 f707 	mul.w	r7, r0, r7
 8000274:	42a7      	cmp	r7, r4
 8000276:	d90a      	bls.n	800028e <__udivmoddi4+0x92>
 8000278:	eb1c 0404 	adds.w	r4, ip, r4
 800027c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000280:	f080 810a 	bcs.w	8000498 <__udivmoddi4+0x29c>
 8000284:	42a7      	cmp	r7, r4
 8000286:	f240 8107 	bls.w	8000498 <__udivmoddi4+0x29c>
 800028a:	4464      	add	r4, ip
 800028c:	3802      	subs	r0, #2
 800028e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000292:	1be4      	subs	r4, r4, r7
 8000294:	2600      	movs	r6, #0
 8000296:	b11d      	cbz	r5, 80002a0 <__udivmoddi4+0xa4>
 8000298:	40d4      	lsrs	r4, r2
 800029a:	2300      	movs	r3, #0
 800029c:	e9c5 4300 	strd	r4, r3, [r5]
 80002a0:	4631      	mov	r1, r6
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	428b      	cmp	r3, r1
 80002a8:	d909      	bls.n	80002be <__udivmoddi4+0xc2>
 80002aa:	2d00      	cmp	r5, #0
 80002ac:	f000 80ef 	beq.w	800048e <__udivmoddi4+0x292>
 80002b0:	2600      	movs	r6, #0
 80002b2:	e9c5 0100 	strd	r0, r1, [r5]
 80002b6:	4630      	mov	r0, r6
 80002b8:	4631      	mov	r1, r6
 80002ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002be:	fab3 f683 	clz	r6, r3
 80002c2:	2e00      	cmp	r6, #0
 80002c4:	d14a      	bne.n	800035c <__udivmoddi4+0x160>
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d302      	bcc.n	80002d0 <__udivmoddi4+0xd4>
 80002ca:	4282      	cmp	r2, r0
 80002cc:	f200 80f9 	bhi.w	80004c2 <__udivmoddi4+0x2c6>
 80002d0:	1a84      	subs	r4, r0, r2
 80002d2:	eb61 0303 	sbc.w	r3, r1, r3
 80002d6:	2001      	movs	r0, #1
 80002d8:	469e      	mov	lr, r3
 80002da:	2d00      	cmp	r5, #0
 80002dc:	d0e0      	beq.n	80002a0 <__udivmoddi4+0xa4>
 80002de:	e9c5 4e00 	strd	r4, lr, [r5]
 80002e2:	e7dd      	b.n	80002a0 <__udivmoddi4+0xa4>
 80002e4:	b902      	cbnz	r2, 80002e8 <__udivmoddi4+0xec>
 80002e6:	deff      	udf	#255	; 0xff
 80002e8:	fab2 f282 	clz	r2, r2
 80002ec:	2a00      	cmp	r2, #0
 80002ee:	f040 8092 	bne.w	8000416 <__udivmoddi4+0x21a>
 80002f2:	eba1 010c 	sub.w	r1, r1, ip
 80002f6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fa:	fa1f fe8c 	uxth.w	lr, ip
 80002fe:	2601      	movs	r6, #1
 8000300:	0c20      	lsrs	r0, r4, #16
 8000302:	fbb1 f3f7 	udiv	r3, r1, r7
 8000306:	fb07 1113 	mls	r1, r7, r3, r1
 800030a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030e:	fb0e f003 	mul.w	r0, lr, r3
 8000312:	4288      	cmp	r0, r1
 8000314:	d908      	bls.n	8000328 <__udivmoddi4+0x12c>
 8000316:	eb1c 0101 	adds.w	r1, ip, r1
 800031a:	f103 38ff 	add.w	r8, r3, #4294967295
 800031e:	d202      	bcs.n	8000326 <__udivmoddi4+0x12a>
 8000320:	4288      	cmp	r0, r1
 8000322:	f200 80cb 	bhi.w	80004bc <__udivmoddi4+0x2c0>
 8000326:	4643      	mov	r3, r8
 8000328:	1a09      	subs	r1, r1, r0
 800032a:	b2a4      	uxth	r4, r4
 800032c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000330:	fb07 1110 	mls	r1, r7, r0, r1
 8000334:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000338:	fb0e fe00 	mul.w	lr, lr, r0
 800033c:	45a6      	cmp	lr, r4
 800033e:	d908      	bls.n	8000352 <__udivmoddi4+0x156>
 8000340:	eb1c 0404 	adds.w	r4, ip, r4
 8000344:	f100 31ff 	add.w	r1, r0, #4294967295
 8000348:	d202      	bcs.n	8000350 <__udivmoddi4+0x154>
 800034a:	45a6      	cmp	lr, r4
 800034c:	f200 80bb 	bhi.w	80004c6 <__udivmoddi4+0x2ca>
 8000350:	4608      	mov	r0, r1
 8000352:	eba4 040e 	sub.w	r4, r4, lr
 8000356:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800035a:	e79c      	b.n	8000296 <__udivmoddi4+0x9a>
 800035c:	f1c6 0720 	rsb	r7, r6, #32
 8000360:	40b3      	lsls	r3, r6
 8000362:	fa22 fc07 	lsr.w	ip, r2, r7
 8000366:	ea4c 0c03 	orr.w	ip, ip, r3
 800036a:	fa20 f407 	lsr.w	r4, r0, r7
 800036e:	fa01 f306 	lsl.w	r3, r1, r6
 8000372:	431c      	orrs	r4, r3
 8000374:	40f9      	lsrs	r1, r7
 8000376:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800037a:	fa00 f306 	lsl.w	r3, r0, r6
 800037e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000382:	0c20      	lsrs	r0, r4, #16
 8000384:	fa1f fe8c 	uxth.w	lr, ip
 8000388:	fb09 1118 	mls	r1, r9, r8, r1
 800038c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000390:	fb08 f00e 	mul.w	r0, r8, lr
 8000394:	4288      	cmp	r0, r1
 8000396:	fa02 f206 	lsl.w	r2, r2, r6
 800039a:	d90b      	bls.n	80003b4 <__udivmoddi4+0x1b8>
 800039c:	eb1c 0101 	adds.w	r1, ip, r1
 80003a0:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a4:	f080 8088 	bcs.w	80004b8 <__udivmoddi4+0x2bc>
 80003a8:	4288      	cmp	r0, r1
 80003aa:	f240 8085 	bls.w	80004b8 <__udivmoddi4+0x2bc>
 80003ae:	f1a8 0802 	sub.w	r8, r8, #2
 80003b2:	4461      	add	r1, ip
 80003b4:	1a09      	subs	r1, r1, r0
 80003b6:	b2a4      	uxth	r4, r4
 80003b8:	fbb1 f0f9 	udiv	r0, r1, r9
 80003bc:	fb09 1110 	mls	r1, r9, r0, r1
 80003c0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c4:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c8:	458e      	cmp	lr, r1
 80003ca:	d908      	bls.n	80003de <__udivmoddi4+0x1e2>
 80003cc:	eb1c 0101 	adds.w	r1, ip, r1
 80003d0:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d4:	d26c      	bcs.n	80004b0 <__udivmoddi4+0x2b4>
 80003d6:	458e      	cmp	lr, r1
 80003d8:	d96a      	bls.n	80004b0 <__udivmoddi4+0x2b4>
 80003da:	3802      	subs	r0, #2
 80003dc:	4461      	add	r1, ip
 80003de:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003e2:	fba0 9402 	umull	r9, r4, r0, r2
 80003e6:	eba1 010e 	sub.w	r1, r1, lr
 80003ea:	42a1      	cmp	r1, r4
 80003ec:	46c8      	mov	r8, r9
 80003ee:	46a6      	mov	lr, r4
 80003f0:	d356      	bcc.n	80004a0 <__udivmoddi4+0x2a4>
 80003f2:	d053      	beq.n	800049c <__udivmoddi4+0x2a0>
 80003f4:	b15d      	cbz	r5, 800040e <__udivmoddi4+0x212>
 80003f6:	ebb3 0208 	subs.w	r2, r3, r8
 80003fa:	eb61 010e 	sbc.w	r1, r1, lr
 80003fe:	fa01 f707 	lsl.w	r7, r1, r7
 8000402:	fa22 f306 	lsr.w	r3, r2, r6
 8000406:	40f1      	lsrs	r1, r6
 8000408:	431f      	orrs	r7, r3
 800040a:	e9c5 7100 	strd	r7, r1, [r5]
 800040e:	2600      	movs	r6, #0
 8000410:	4631      	mov	r1, r6
 8000412:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000416:	f1c2 0320 	rsb	r3, r2, #32
 800041a:	40d8      	lsrs	r0, r3
 800041c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000420:	fa21 f303 	lsr.w	r3, r1, r3
 8000424:	4091      	lsls	r1, r2
 8000426:	4301      	orrs	r1, r0
 8000428:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800042c:	fa1f fe8c 	uxth.w	lr, ip
 8000430:	fbb3 f0f7 	udiv	r0, r3, r7
 8000434:	fb07 3610 	mls	r6, r7, r0, r3
 8000438:	0c0b      	lsrs	r3, r1, #16
 800043a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043e:	fb00 f60e 	mul.w	r6, r0, lr
 8000442:	429e      	cmp	r6, r3
 8000444:	fa04 f402 	lsl.w	r4, r4, r2
 8000448:	d908      	bls.n	800045c <__udivmoddi4+0x260>
 800044a:	eb1c 0303 	adds.w	r3, ip, r3
 800044e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000452:	d22f      	bcs.n	80004b4 <__udivmoddi4+0x2b8>
 8000454:	429e      	cmp	r6, r3
 8000456:	d92d      	bls.n	80004b4 <__udivmoddi4+0x2b8>
 8000458:	3802      	subs	r0, #2
 800045a:	4463      	add	r3, ip
 800045c:	1b9b      	subs	r3, r3, r6
 800045e:	b289      	uxth	r1, r1
 8000460:	fbb3 f6f7 	udiv	r6, r3, r7
 8000464:	fb07 3316 	mls	r3, r7, r6, r3
 8000468:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046c:	fb06 f30e 	mul.w	r3, r6, lr
 8000470:	428b      	cmp	r3, r1
 8000472:	d908      	bls.n	8000486 <__udivmoddi4+0x28a>
 8000474:	eb1c 0101 	adds.w	r1, ip, r1
 8000478:	f106 38ff 	add.w	r8, r6, #4294967295
 800047c:	d216      	bcs.n	80004ac <__udivmoddi4+0x2b0>
 800047e:	428b      	cmp	r3, r1
 8000480:	d914      	bls.n	80004ac <__udivmoddi4+0x2b0>
 8000482:	3e02      	subs	r6, #2
 8000484:	4461      	add	r1, ip
 8000486:	1ac9      	subs	r1, r1, r3
 8000488:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 800048c:	e738      	b.n	8000300 <__udivmoddi4+0x104>
 800048e:	462e      	mov	r6, r5
 8000490:	4628      	mov	r0, r5
 8000492:	e705      	b.n	80002a0 <__udivmoddi4+0xa4>
 8000494:	4606      	mov	r6, r0
 8000496:	e6e3      	b.n	8000260 <__udivmoddi4+0x64>
 8000498:	4618      	mov	r0, r3
 800049a:	e6f8      	b.n	800028e <__udivmoddi4+0x92>
 800049c:	454b      	cmp	r3, r9
 800049e:	d2a9      	bcs.n	80003f4 <__udivmoddi4+0x1f8>
 80004a0:	ebb9 0802 	subs.w	r8, r9, r2
 80004a4:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a8:	3801      	subs	r0, #1
 80004aa:	e7a3      	b.n	80003f4 <__udivmoddi4+0x1f8>
 80004ac:	4646      	mov	r6, r8
 80004ae:	e7ea      	b.n	8000486 <__udivmoddi4+0x28a>
 80004b0:	4620      	mov	r0, r4
 80004b2:	e794      	b.n	80003de <__udivmoddi4+0x1e2>
 80004b4:	4640      	mov	r0, r8
 80004b6:	e7d1      	b.n	800045c <__udivmoddi4+0x260>
 80004b8:	46d0      	mov	r8, sl
 80004ba:	e77b      	b.n	80003b4 <__udivmoddi4+0x1b8>
 80004bc:	3b02      	subs	r3, #2
 80004be:	4461      	add	r1, ip
 80004c0:	e732      	b.n	8000328 <__udivmoddi4+0x12c>
 80004c2:	4630      	mov	r0, r6
 80004c4:	e709      	b.n	80002da <__udivmoddi4+0xde>
 80004c6:	4464      	add	r4, ip
 80004c8:	3802      	subs	r0, #2
 80004ca:	e742      	b.n	8000352 <__udivmoddi4+0x156>

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <__io_putchar>:
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE {
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b082      	sub	sp, #8
 80004d4:	af00      	add	r7, sp, #0
 80004d6:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*) &ch, 1, HAL_MAX_DELAY);
 80004d8:	1d39      	adds	r1, r7, #4
 80004da:	f04f 33ff 	mov.w	r3, #4294967295
 80004de:	2201      	movs	r2, #1
 80004e0:	4803      	ldr	r0, [pc, #12]	; (80004f0 <__io_putchar+0x20>)
 80004e2:	f001 ffe1 	bl	80024a8 <HAL_UART_Transmit>
	return ch;
 80004e6:	687b      	ldr	r3, [r7, #4]
}
 80004e8:	4618      	mov	r0, r3
 80004ea:	3708      	adds	r7, #8
 80004ec:	46bd      	mov	sp, r7
 80004ee:	bd80      	pop	{r7, pc}
 80004f0:	20000110 	.word	0x20000110

080004f4 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b08a      	sub	sp, #40	; 0x28
 80004f8:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80004fa:	f000 fbed 	bl	8000cd8 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80004fe:	f000 f85d 	bl	80005bc <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000502:	f000 f90b 	bl	800071c <MX_GPIO_Init>
	MX_USART2_UART_Init();
 8000506:	f000 f8d9 	bl	80006bc <MX_USART2_UART_Init>
	MX_USART1_UART_Init();
 800050a:	f000 f8a7 	bl	800065c <MX_USART1_UART_Init>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */

	printf("GPS Monitor Startup\n\n");
 800050e:	4824      	ldr	r0, [pc, #144]	; (80005a0 <main+0xac>)
 8000510:	f002 fdda 	bl	80030c8 <puts>

	ublox_neo6m_ConfigStruct neo6m_conf = {
 8000514:	4a23      	ldr	r2, [pc, #140]	; (80005a4 <main+0xb0>)
 8000516:	f107 031c 	add.w	r3, r7, #28
 800051a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800051e:	e883 0003 	stmia.w	r3, {r0, r1}
			.huartNeo6m = &huart1,
			.huartLogging = &huart2 };

	ublox_neo6m_DataStruct neo6m_data;
	ublox_neo6m_ErrorType err = UBLOX_OK;
 8000522:	2300      	movs	r3, #0
 8000524:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	err = ublox_neo6m_init(&neo6m_conf);
 8000528:	f107 031c 	add.w	r3, r7, #28
 800052c:	4618      	mov	r0, r3
 800052e:	f000 fb21 	bl	8000b74 <ublox_neo6m_init>
 8000532:	4603      	mov	r3, r0
 8000534:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (err == UBLOX_OK) {
 8000538:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800053c:	2b00      	cmp	r3, #0
 800053e:	d103      	bne.n	8000548 <main+0x54>
		printf("Dbg: U-blox NEO-6M Initialised correctly\n");
 8000540:	4819      	ldr	r0, [pc, #100]	; (80005a8 <main+0xb4>)
 8000542:	f002 fdc1 	bl	80030c8 <puts>
 8000546:	e002      	b.n	800054e <main+0x5a>
	} else {
		printf("Err: U-blox NEO-6M Initialisation error!\n");
 8000548:	4818      	ldr	r0, [pc, #96]	; (80005ac <main+0xb8>)
 800054a:	f002 fdbd 	bl	80030c8 <puts>
	}

	err = ublox_neo6m_readData(&neo6m_conf, &neo6m_data);
 800054e:	463a      	mov	r2, r7
 8000550:	f107 031c 	add.w	r3, r7, #28
 8000554:	4611      	mov	r1, r2
 8000556:	4618      	mov	r0, r3
 8000558:	f000 fb18 	bl	8000b8c <ublox_neo6m_readData>
 800055c:	4603      	mov	r3, r0
 800055e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (err == UBLOX_OK) {
 8000562:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000566:	2b00      	cmp	r3, #0
 8000568:	d103      	bne.n	8000572 <main+0x7e>
		printf("Dbg: U-blox NEO-6M Data read correctly\n");
 800056a:	4811      	ldr	r0, [pc, #68]	; (80005b0 <main+0xbc>)
 800056c:	f002 fdac 	bl	80030c8 <puts>
 8000570:	e002      	b.n	8000578 <main+0x84>
	} else {
		printf("Err: U-blox NEO-6M Data reading error!\n");
 8000572:	4810      	ldr	r0, [pc, #64]	; (80005b4 <main+0xc0>)
 8000574:	f002 fda8 	bl	80030c8 <puts>
	}

	while (1) {
		// Blink an LED to indicate that new data has been received
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_13);
 8000578:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800057c:	480e      	ldr	r0, [pc, #56]	; (80005b8 <main+0xc4>)
 800057e:	f000 febb 	bl	80012f8 <HAL_GPIO_TogglePin>
		HAL_Delay(1000);
 8000582:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000586:	f000 fc23 	bl	8000dd0 <HAL_Delay>
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_13);
 800058a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800058e:	480a      	ldr	r0, [pc, #40]	; (80005b8 <main+0xc4>)
 8000590:	f000 feb2 	bl	80012f8 <HAL_GPIO_TogglePin>
		HAL_Delay(1000);
 8000594:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000598:	f000 fc1a 	bl	8000dd0 <HAL_Delay>
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_13);
 800059c:	e7ec      	b.n	8000578 <main+0x84>
 800059e:	bf00      	nop
 80005a0:	08003a50 	.word	0x08003a50
 80005a4:	08003b10 	.word	0x08003b10
 80005a8:	08003a68 	.word	0x08003a68
 80005ac:	08003a94 	.word	0x08003a94
 80005b0:	08003ac0 	.word	0x08003ac0
 80005b4:	08003ae8 	.word	0x08003ae8
 80005b8:	48000400 	.word	0x48000400

080005bc <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80005bc:	b580      	push	{r7, lr}
 80005be:	b096      	sub	sp, #88	; 0x58
 80005c0:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {
 80005c2:	f107 0314 	add.w	r3, r7, #20
 80005c6:	2244      	movs	r2, #68	; 0x44
 80005c8:	2100      	movs	r1, #0
 80005ca:	4618      	mov	r0, r3
 80005cc:	f002 fd06 	bl	8002fdc <memset>
			0 };
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {
 80005d0:	463b      	mov	r3, r7
 80005d2:	2200      	movs	r2, #0
 80005d4:	601a      	str	r2, [r3, #0]
 80005d6:	605a      	str	r2, [r3, #4]
 80005d8:	609a      	str	r2, [r3, #8]
 80005da:	60da      	str	r2, [r3, #12]
 80005dc:	611a      	str	r2, [r3, #16]
			0 };

	/** Configure the main internal regulator output voltage
	 */
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK) {
 80005de:	f44f 7000 	mov.w	r0, #512	; 0x200
 80005e2:	f000 feb1 	bl	8001348 <HAL_PWREx_ControlVoltageScaling>
 80005e6:	4603      	mov	r3, r0
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d001      	beq.n	80005f0 <SystemClock_Config+0x34>
		Error_Handler();
 80005ec:	f000 f920 	bl	8000830 <Error_Handler>
	}

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80005f0:	2310      	movs	r3, #16
 80005f2:	617b      	str	r3, [r7, #20]
	RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80005f4:	2301      	movs	r3, #1
 80005f6:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.MSICalibrationValue = 0;
 80005f8:	2300      	movs	r3, #0
 80005fa:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80005fc:	2360      	movs	r3, #96	; 0x60
 80005fe:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000600:	2302      	movs	r3, #2
 8000602:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000604:	2301      	movs	r3, #1
 8000606:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLM = 1;
 8000608:	2301      	movs	r3, #1
 800060a:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLN = 40;
 800060c:	2328      	movs	r3, #40	; 0x28
 800060e:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000610:	2302      	movs	r3, #2
 8000612:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000614:	2302      	movs	r3, #2
 8000616:	657b      	str	r3, [r7, #84]	; 0x54
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000618:	f107 0314 	add.w	r3, r7, #20
 800061c:	4618      	mov	r0, r3
 800061e:	f000 fee9 	bl	80013f4 <HAL_RCC_OscConfig>
 8000622:	4603      	mov	r3, r0
 8000624:	2b00      	cmp	r3, #0
 8000626:	d001      	beq.n	800062c <SystemClock_Config+0x70>
		Error_Handler();
 8000628:	f000 f902 	bl	8000830 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800062c:	230f      	movs	r3, #15
 800062e:	603b      	str	r3, [r7, #0]
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000630:	2303      	movs	r3, #3
 8000632:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000634:	2300      	movs	r3, #0
 8000636:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000638:	2300      	movs	r3, #0
 800063a:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800063c:	2300      	movs	r3, #0
 800063e:	613b      	str	r3, [r7, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK) {
 8000640:	463b      	mov	r3, r7
 8000642:	2104      	movs	r1, #4
 8000644:	4618      	mov	r0, r3
 8000646:	f001 fb37 	bl	8001cb8 <HAL_RCC_ClockConfig>
 800064a:	4603      	mov	r3, r0
 800064c:	2b00      	cmp	r3, #0
 800064e:	d001      	beq.n	8000654 <SystemClock_Config+0x98>
		Error_Handler();
 8000650:	f000 f8ee 	bl	8000830 <Error_Handler>
	}
}
 8000654:	bf00      	nop
 8000656:	3758      	adds	r7, #88	; 0x58
 8000658:	46bd      	mov	sp, r7
 800065a:	bd80      	pop	{r7, pc}

0800065c <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 800065c:	b580      	push	{r7, lr}
 800065e:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8000660:	4b14      	ldr	r3, [pc, #80]	; (80006b4 <MX_USART1_UART_Init+0x58>)
 8000662:	4a15      	ldr	r2, [pc, #84]	; (80006b8 <MX_USART1_UART_Init+0x5c>)
 8000664:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 9600;
 8000666:	4b13      	ldr	r3, [pc, #76]	; (80006b4 <MX_USART1_UART_Init+0x58>)
 8000668:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800066c:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800066e:	4b11      	ldr	r3, [pc, #68]	; (80006b4 <MX_USART1_UART_Init+0x58>)
 8000670:	2200      	movs	r2, #0
 8000672:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8000674:	4b0f      	ldr	r3, [pc, #60]	; (80006b4 <MX_USART1_UART_Init+0x58>)
 8000676:	2200      	movs	r2, #0
 8000678:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 800067a:	4b0e      	ldr	r3, [pc, #56]	; (80006b4 <MX_USART1_UART_Init+0x58>)
 800067c:	2200      	movs	r2, #0
 800067e:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8000680:	4b0c      	ldr	r3, [pc, #48]	; (80006b4 <MX_USART1_UART_Init+0x58>)
 8000682:	220c      	movs	r2, #12
 8000684:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000686:	4b0b      	ldr	r3, [pc, #44]	; (80006b4 <MX_USART1_UART_Init+0x58>)
 8000688:	2200      	movs	r2, #0
 800068a:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800068c:	4b09      	ldr	r3, [pc, #36]	; (80006b4 <MX_USART1_UART_Init+0x58>)
 800068e:	2200      	movs	r2, #0
 8000690:	61da      	str	r2, [r3, #28]
	huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000692:	4b08      	ldr	r3, [pc, #32]	; (80006b4 <MX_USART1_UART_Init+0x58>)
 8000694:	2200      	movs	r2, #0
 8000696:	621a      	str	r2, [r3, #32]
	huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000698:	4b06      	ldr	r3, [pc, #24]	; (80006b4 <MX_USART1_UART_Init+0x58>)
 800069a:	2200      	movs	r2, #0
 800069c:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 800069e:	4805      	ldr	r0, [pc, #20]	; (80006b4 <MX_USART1_UART_Init+0x58>)
 80006a0:	f001 feb4 	bl	800240c <HAL_UART_Init>
 80006a4:	4603      	mov	r3, r0
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d001      	beq.n	80006ae <MX_USART1_UART_Init+0x52>
		Error_Handler();
 80006aa:	f000 f8c1 	bl	8000830 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 80006ae:	bf00      	nop
 80006b0:	bd80      	pop	{r7, pc}
 80006b2:	bf00      	nop
 80006b4:	2000008c 	.word	0x2000008c
 80006b8:	40013800 	.word	0x40013800

080006bc <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 80006bc:	b580      	push	{r7, lr}
 80006be:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 80006c0:	4b14      	ldr	r3, [pc, #80]	; (8000714 <MX_USART2_UART_Init+0x58>)
 80006c2:	4a15      	ldr	r2, [pc, #84]	; (8000718 <MX_USART2_UART_Init+0x5c>)
 80006c4:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 80006c6:	4b13      	ldr	r3, [pc, #76]	; (8000714 <MX_USART2_UART_Init+0x58>)
 80006c8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006cc:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006ce:	4b11      	ldr	r3, [pc, #68]	; (8000714 <MX_USART2_UART_Init+0x58>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 80006d4:	4b0f      	ldr	r3, [pc, #60]	; (8000714 <MX_USART2_UART_Init+0x58>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 80006da:	4b0e      	ldr	r3, [pc, #56]	; (8000714 <MX_USART2_UART_Init+0x58>)
 80006dc:	2200      	movs	r2, #0
 80006de:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 80006e0:	4b0c      	ldr	r3, [pc, #48]	; (8000714 <MX_USART2_UART_Init+0x58>)
 80006e2:	220c      	movs	r2, #12
 80006e4:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006e6:	4b0b      	ldr	r3, [pc, #44]	; (8000714 <MX_USART2_UART_Init+0x58>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006ec:	4b09      	ldr	r3, [pc, #36]	; (8000714 <MX_USART2_UART_Init+0x58>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006f2:	4b08      	ldr	r3, [pc, #32]	; (8000714 <MX_USART2_UART_Init+0x58>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	621a      	str	r2, [r3, #32]
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006f8:	4b06      	ldr	r3, [pc, #24]	; (8000714 <MX_USART2_UART_Init+0x58>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 80006fe:	4805      	ldr	r0, [pc, #20]	; (8000714 <MX_USART2_UART_Init+0x58>)
 8000700:	f001 fe84 	bl	800240c <HAL_UART_Init>
 8000704:	4603      	mov	r3, r0
 8000706:	2b00      	cmp	r3, #0
 8000708:	d001      	beq.n	800070e <MX_USART2_UART_Init+0x52>
		Error_Handler();
 800070a:	f000 f891 	bl	8000830 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 800070e:	bf00      	nop
 8000710:	bd80      	pop	{r7, pc}
 8000712:	bf00      	nop
 8000714:	20000110 	.word	0x20000110
 8000718:	40004400 	.word	0x40004400

0800071c <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 800071c:	b580      	push	{r7, lr}
 800071e:	b08a      	sub	sp, #40	; 0x28
 8000720:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {
 8000722:	f107 0314 	add.w	r3, r7, #20
 8000726:	2200      	movs	r2, #0
 8000728:	601a      	str	r2, [r3, #0]
 800072a:	605a      	str	r2, [r3, #4]
 800072c:	609a      	str	r2, [r3, #8]
 800072e:	60da      	str	r2, [r3, #12]
 8000730:	611a      	str	r2, [r3, #16]
			0 };
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000732:	4b3c      	ldr	r3, [pc, #240]	; (8000824 <MX_GPIO_Init+0x108>)
 8000734:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000736:	4a3b      	ldr	r2, [pc, #236]	; (8000824 <MX_GPIO_Init+0x108>)
 8000738:	f043 0304 	orr.w	r3, r3, #4
 800073c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800073e:	4b39      	ldr	r3, [pc, #228]	; (8000824 <MX_GPIO_Init+0x108>)
 8000740:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000742:	f003 0304 	and.w	r3, r3, #4
 8000746:	613b      	str	r3, [r7, #16]
 8000748:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 800074a:	4b36      	ldr	r3, [pc, #216]	; (8000824 <MX_GPIO_Init+0x108>)
 800074c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800074e:	4a35      	ldr	r2, [pc, #212]	; (8000824 <MX_GPIO_Init+0x108>)
 8000750:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000754:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000756:	4b33      	ldr	r3, [pc, #204]	; (8000824 <MX_GPIO_Init+0x108>)
 8000758:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800075a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800075e:	60fb      	str	r3, [r7, #12]
 8000760:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000762:	4b30      	ldr	r3, [pc, #192]	; (8000824 <MX_GPIO_Init+0x108>)
 8000764:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000766:	4a2f      	ldr	r2, [pc, #188]	; (8000824 <MX_GPIO_Init+0x108>)
 8000768:	f043 0301 	orr.w	r3, r3, #1
 800076c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800076e:	4b2d      	ldr	r3, [pc, #180]	; (8000824 <MX_GPIO_Init+0x108>)
 8000770:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000772:	f003 0301 	and.w	r3, r3, #1
 8000776:	60bb      	str	r3, [r7, #8]
 8000778:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800077a:	4b2a      	ldr	r3, [pc, #168]	; (8000824 <MX_GPIO_Init+0x108>)
 800077c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800077e:	4a29      	ldr	r2, [pc, #164]	; (8000824 <MX_GPIO_Init+0x108>)
 8000780:	f043 0302 	orr.w	r3, r3, #2
 8000784:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000786:	4b27      	ldr	r3, [pc, #156]	; (8000824 <MX_GPIO_Init+0x108>)
 8000788:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800078a:	f003 0302 	and.w	r3, r3, #2
 800078e:	607b      	str	r3, [r7, #4]
 8000790:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, SMPS_EN_Pin | SMPS_V1_Pin | SMPS_SW_Pin, GPIO_PIN_RESET);
 8000792:	2200      	movs	r2, #0
 8000794:	21b0      	movs	r1, #176	; 0xb0
 8000796:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800079a:	f000 fd95 	bl	80012c8 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_RESET);
 800079e:	2200      	movs	r2, #0
 80007a0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007a4:	4820      	ldr	r0, [pc, #128]	; (8000828 <MX_GPIO_Init+0x10c>)
 80007a6:	f000 fd8f 	bl	80012c8 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 80007aa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007ae:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80007b0:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80007b4:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b6:	2300      	movs	r3, #0
 80007b8:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80007ba:	f107 0314 	add.w	r3, r7, #20
 80007be:	4619      	mov	r1, r3
 80007c0:	481a      	ldr	r0, [pc, #104]	; (800082c <MX_GPIO_Init+0x110>)
 80007c2:	f000 fc0f 	bl	8000fe4 <HAL_GPIO_Init>

	/*Configure GPIO pins : SMPS_EN_Pin SMPS_V1_Pin SMPS_SW_Pin */
	GPIO_InitStruct.Pin = SMPS_EN_Pin | SMPS_V1_Pin | SMPS_SW_Pin;
 80007c6:	23b0      	movs	r3, #176	; 0xb0
 80007c8:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007ca:	2301      	movs	r3, #1
 80007cc:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ce:	2300      	movs	r3, #0
 80007d0:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007d2:	2300      	movs	r3, #0
 80007d4:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007d6:	f107 0314 	add.w	r3, r7, #20
 80007da:	4619      	mov	r1, r3
 80007dc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007e0:	f000 fc00 	bl	8000fe4 <HAL_GPIO_Init>

	/*Configure GPIO pin : SMPS_PG_Pin */
	GPIO_InitStruct.Pin = SMPS_PG_Pin;
 80007e4:	2340      	movs	r3, #64	; 0x40
 80007e6:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007e8:	2300      	movs	r3, #0
 80007ea:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80007ec:	2301      	movs	r3, #1
 80007ee:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(SMPS_PG_GPIO_Port, &GPIO_InitStruct);
 80007f0:	f107 0314 	add.w	r3, r7, #20
 80007f4:	4619      	mov	r1, r3
 80007f6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007fa:	f000 fbf3 	bl	8000fe4 <HAL_GPIO_Init>

	/*Configure GPIO pin : LD4_Pin */
	GPIO_InitStruct.Pin = LD4_Pin;
 80007fe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000802:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000804:	2301      	movs	r3, #1
 8000806:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000808:	2300      	movs	r3, #0
 800080a:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800080c:	2300      	movs	r3, #0
 800080e:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(LD4_GPIO_Port, &GPIO_InitStruct);
 8000810:	f107 0314 	add.w	r3, r7, #20
 8000814:	4619      	mov	r1, r3
 8000816:	4804      	ldr	r0, [pc, #16]	; (8000828 <MX_GPIO_Init+0x10c>)
 8000818:	f000 fbe4 	bl	8000fe4 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 800081c:	bf00      	nop
 800081e:	3728      	adds	r7, #40	; 0x28
 8000820:	46bd      	mov	sp, r7
 8000822:	bd80      	pop	{r7, pc}
 8000824:	40021000 	.word	0x40021000
 8000828:	48000400 	.word	0x48000400
 800082c:	48000800 	.word	0x48000800

08000830 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000830:	b480      	push	{r7}
 8000832:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000834:	b672      	cpsid	i
}
 8000836:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000838:	e7fe      	b.n	8000838 <Error_Handler+0x8>
	...

0800083c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800083c:	b480      	push	{r7}
 800083e:	b083      	sub	sp, #12
 8000840:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000842:	4b0f      	ldr	r3, [pc, #60]	; (8000880 <HAL_MspInit+0x44>)
 8000844:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000846:	4a0e      	ldr	r2, [pc, #56]	; (8000880 <HAL_MspInit+0x44>)
 8000848:	f043 0301 	orr.w	r3, r3, #1
 800084c:	6613      	str	r3, [r2, #96]	; 0x60
 800084e:	4b0c      	ldr	r3, [pc, #48]	; (8000880 <HAL_MspInit+0x44>)
 8000850:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000852:	f003 0301 	and.w	r3, r3, #1
 8000856:	607b      	str	r3, [r7, #4]
 8000858:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800085a:	4b09      	ldr	r3, [pc, #36]	; (8000880 <HAL_MspInit+0x44>)
 800085c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800085e:	4a08      	ldr	r2, [pc, #32]	; (8000880 <HAL_MspInit+0x44>)
 8000860:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000864:	6593      	str	r3, [r2, #88]	; 0x58
 8000866:	4b06      	ldr	r3, [pc, #24]	; (8000880 <HAL_MspInit+0x44>)
 8000868:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800086a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800086e:	603b      	str	r3, [r7, #0]
 8000870:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000872:	bf00      	nop
 8000874:	370c      	adds	r7, #12
 8000876:	46bd      	mov	sp, r7
 8000878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087c:	4770      	bx	lr
 800087e:	bf00      	nop
 8000880:	40021000 	.word	0x40021000

08000884 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b098      	sub	sp, #96	; 0x60
 8000888:	af00      	add	r7, sp, #0
 800088a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800088c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000890:	2200      	movs	r2, #0
 8000892:	601a      	str	r2, [r3, #0]
 8000894:	605a      	str	r2, [r3, #4]
 8000896:	609a      	str	r2, [r3, #8]
 8000898:	60da      	str	r2, [r3, #12]
 800089a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800089c:	f107 0318 	add.w	r3, r7, #24
 80008a0:	2234      	movs	r2, #52	; 0x34
 80008a2:	2100      	movs	r1, #0
 80008a4:	4618      	mov	r0, r3
 80008a6:	f002 fb99 	bl	8002fdc <memset>
  if(huart->Instance==USART1)
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	681b      	ldr	r3, [r3, #0]
 80008ae:	4a3e      	ldr	r2, [pc, #248]	; (80009a8 <HAL_UART_MspInit+0x124>)
 80008b0:	4293      	cmp	r3, r2
 80008b2:	d138      	bne.n	8000926 <HAL_UART_MspInit+0xa2>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80008b4:	2301      	movs	r3, #1
 80008b6:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80008b8:	2300      	movs	r3, #0
 80008ba:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80008bc:	f107 0318 	add.w	r3, r7, #24
 80008c0:	4618      	mov	r0, r3
 80008c2:	f001 fc1d 	bl	8002100 <HAL_RCCEx_PeriphCLKConfig>
 80008c6:	4603      	mov	r3, r0
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d001      	beq.n	80008d0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80008cc:	f7ff ffb0 	bl	8000830 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80008d0:	4b36      	ldr	r3, [pc, #216]	; (80009ac <HAL_UART_MspInit+0x128>)
 80008d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008d4:	4a35      	ldr	r2, [pc, #212]	; (80009ac <HAL_UART_MspInit+0x128>)
 80008d6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008da:	6613      	str	r3, [r2, #96]	; 0x60
 80008dc:	4b33      	ldr	r3, [pc, #204]	; (80009ac <HAL_UART_MspInit+0x128>)
 80008de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008e4:	617b      	str	r3, [r7, #20]
 80008e6:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008e8:	4b30      	ldr	r3, [pc, #192]	; (80009ac <HAL_UART_MspInit+0x128>)
 80008ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008ec:	4a2f      	ldr	r2, [pc, #188]	; (80009ac <HAL_UART_MspInit+0x128>)
 80008ee:	f043 0301 	orr.w	r3, r3, #1
 80008f2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008f4:	4b2d      	ldr	r3, [pc, #180]	; (80009ac <HAL_UART_MspInit+0x128>)
 80008f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008f8:	f003 0301 	and.w	r3, r3, #1
 80008fc:	613b      	str	r3, [r7, #16]
 80008fe:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000900:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000904:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000906:	2302      	movs	r3, #2
 8000908:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090a:	2300      	movs	r3, #0
 800090c:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800090e:	2303      	movs	r3, #3
 8000910:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000912:	2307      	movs	r3, #7
 8000914:	65fb      	str	r3, [r7, #92]	; 0x5c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000916:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800091a:	4619      	mov	r1, r3
 800091c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000920:	f000 fb60 	bl	8000fe4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000924:	e03b      	b.n	800099e <HAL_UART_MspInit+0x11a>
  else if(huart->Instance==USART2)
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	4a21      	ldr	r2, [pc, #132]	; (80009b0 <HAL_UART_MspInit+0x12c>)
 800092c:	4293      	cmp	r3, r2
 800092e:	d136      	bne.n	800099e <HAL_UART_MspInit+0x11a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000930:	2302      	movs	r3, #2
 8000932:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000934:	2300      	movs	r3, #0
 8000936:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000938:	f107 0318 	add.w	r3, r7, #24
 800093c:	4618      	mov	r0, r3
 800093e:	f001 fbdf 	bl	8002100 <HAL_RCCEx_PeriphCLKConfig>
 8000942:	4603      	mov	r3, r0
 8000944:	2b00      	cmp	r3, #0
 8000946:	d001      	beq.n	800094c <HAL_UART_MspInit+0xc8>
      Error_Handler();
 8000948:	f7ff ff72 	bl	8000830 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 800094c:	4b17      	ldr	r3, [pc, #92]	; (80009ac <HAL_UART_MspInit+0x128>)
 800094e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000950:	4a16      	ldr	r2, [pc, #88]	; (80009ac <HAL_UART_MspInit+0x128>)
 8000952:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000956:	6593      	str	r3, [r2, #88]	; 0x58
 8000958:	4b14      	ldr	r3, [pc, #80]	; (80009ac <HAL_UART_MspInit+0x128>)
 800095a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800095c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000960:	60fb      	str	r3, [r7, #12]
 8000962:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000964:	4b11      	ldr	r3, [pc, #68]	; (80009ac <HAL_UART_MspInit+0x128>)
 8000966:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000968:	4a10      	ldr	r2, [pc, #64]	; (80009ac <HAL_UART_MspInit+0x128>)
 800096a:	f043 0301 	orr.w	r3, r3, #1
 800096e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000970:	4b0e      	ldr	r3, [pc, #56]	; (80009ac <HAL_UART_MspInit+0x128>)
 8000972:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000974:	f003 0301 	and.w	r3, r3, #1
 8000978:	60bb      	str	r3, [r7, #8]
 800097a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800097c:	230c      	movs	r3, #12
 800097e:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000980:	2302      	movs	r3, #2
 8000982:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000984:	2300      	movs	r3, #0
 8000986:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000988:	2303      	movs	r3, #3
 800098a:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800098c:	2307      	movs	r3, #7
 800098e:	65fb      	str	r3, [r7, #92]	; 0x5c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000990:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000994:	4619      	mov	r1, r3
 8000996:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800099a:	f000 fb23 	bl	8000fe4 <HAL_GPIO_Init>
}
 800099e:	bf00      	nop
 80009a0:	3760      	adds	r7, #96	; 0x60
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bd80      	pop	{r7, pc}
 80009a6:	bf00      	nop
 80009a8:	40013800 	.word	0x40013800
 80009ac:	40021000 	.word	0x40021000
 80009b0:	40004400 	.word	0x40004400

080009b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009b4:	b480      	push	{r7}
 80009b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009b8:	e7fe      	b.n	80009b8 <NMI_Handler+0x4>

080009ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009ba:	b480      	push	{r7}
 80009bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009be:	e7fe      	b.n	80009be <HardFault_Handler+0x4>

080009c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009c0:	b480      	push	{r7}
 80009c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009c4:	e7fe      	b.n	80009c4 <MemManage_Handler+0x4>

080009c6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009c6:	b480      	push	{r7}
 80009c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009ca:	e7fe      	b.n	80009ca <BusFault_Handler+0x4>

080009cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009cc:	b480      	push	{r7}
 80009ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009d0:	e7fe      	b.n	80009d0 <UsageFault_Handler+0x4>

080009d2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009d2:	b480      	push	{r7}
 80009d4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009d6:	bf00      	nop
 80009d8:	46bd      	mov	sp, r7
 80009da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009de:	4770      	bx	lr

080009e0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009e0:	b480      	push	{r7}
 80009e2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009e4:	bf00      	nop
 80009e6:	46bd      	mov	sp, r7
 80009e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ec:	4770      	bx	lr

080009ee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009ee:	b480      	push	{r7}
 80009f0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009f2:	bf00      	nop
 80009f4:	46bd      	mov	sp, r7
 80009f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fa:	4770      	bx	lr

080009fc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a00:	f000 f9c6 	bl	8000d90 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a04:	bf00      	nop
 8000a06:	bd80      	pop	{r7, pc}

08000a08 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b086      	sub	sp, #24
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	60f8      	str	r0, [r7, #12]
 8000a10:	60b9      	str	r1, [r7, #8]
 8000a12:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a14:	2300      	movs	r3, #0
 8000a16:	617b      	str	r3, [r7, #20]
 8000a18:	e00a      	b.n	8000a30 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000a1a:	f3af 8000 	nop.w
 8000a1e:	4601      	mov	r1, r0
 8000a20:	68bb      	ldr	r3, [r7, #8]
 8000a22:	1c5a      	adds	r2, r3, #1
 8000a24:	60ba      	str	r2, [r7, #8]
 8000a26:	b2ca      	uxtb	r2, r1
 8000a28:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a2a:	697b      	ldr	r3, [r7, #20]
 8000a2c:	3301      	adds	r3, #1
 8000a2e:	617b      	str	r3, [r7, #20]
 8000a30:	697a      	ldr	r2, [r7, #20]
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	429a      	cmp	r2, r3
 8000a36:	dbf0      	blt.n	8000a1a <_read+0x12>
  }

  return len;
 8000a38:	687b      	ldr	r3, [r7, #4]
}
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	3718      	adds	r7, #24
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	bd80      	pop	{r7, pc}

08000a42 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000a42:	b580      	push	{r7, lr}
 8000a44:	b086      	sub	sp, #24
 8000a46:	af00      	add	r7, sp, #0
 8000a48:	60f8      	str	r0, [r7, #12]
 8000a4a:	60b9      	str	r1, [r7, #8]
 8000a4c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a4e:	2300      	movs	r3, #0
 8000a50:	617b      	str	r3, [r7, #20]
 8000a52:	e009      	b.n	8000a68 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000a54:	68bb      	ldr	r3, [r7, #8]
 8000a56:	1c5a      	adds	r2, r3, #1
 8000a58:	60ba      	str	r2, [r7, #8]
 8000a5a:	781b      	ldrb	r3, [r3, #0]
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	f7ff fd37 	bl	80004d0 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a62:	697b      	ldr	r3, [r7, #20]
 8000a64:	3301      	adds	r3, #1
 8000a66:	617b      	str	r3, [r7, #20]
 8000a68:	697a      	ldr	r2, [r7, #20]
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	429a      	cmp	r2, r3
 8000a6e:	dbf1      	blt.n	8000a54 <_write+0x12>
  }
  return len;
 8000a70:	687b      	ldr	r3, [r7, #4]
}
 8000a72:	4618      	mov	r0, r3
 8000a74:	3718      	adds	r7, #24
 8000a76:	46bd      	mov	sp, r7
 8000a78:	bd80      	pop	{r7, pc}

08000a7a <_close>:

int _close(int file)
{
 8000a7a:	b480      	push	{r7}
 8000a7c:	b083      	sub	sp, #12
 8000a7e:	af00      	add	r7, sp, #0
 8000a80:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000a82:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000a86:	4618      	mov	r0, r3
 8000a88:	370c      	adds	r7, #12
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a90:	4770      	bx	lr

08000a92 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000a92:	b480      	push	{r7}
 8000a94:	b083      	sub	sp, #12
 8000a96:	af00      	add	r7, sp, #0
 8000a98:	6078      	str	r0, [r7, #4]
 8000a9a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000a9c:	683b      	ldr	r3, [r7, #0]
 8000a9e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000aa2:	605a      	str	r2, [r3, #4]
  return 0;
 8000aa4:	2300      	movs	r3, #0
}
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	370c      	adds	r7, #12
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab0:	4770      	bx	lr

08000ab2 <_isatty>:

int _isatty(int file)
{
 8000ab2:	b480      	push	{r7}
 8000ab4:	b083      	sub	sp, #12
 8000ab6:	af00      	add	r7, sp, #0
 8000ab8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000aba:	2301      	movs	r3, #1
}
 8000abc:	4618      	mov	r0, r3
 8000abe:	370c      	adds	r7, #12
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac6:	4770      	bx	lr

08000ac8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	b085      	sub	sp, #20
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	60f8      	str	r0, [r7, #12]
 8000ad0:	60b9      	str	r1, [r7, #8]
 8000ad2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000ad4:	2300      	movs	r3, #0
}
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	3714      	adds	r7, #20
 8000ada:	46bd      	mov	sp, r7
 8000adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae0:	4770      	bx	lr
	...

08000ae4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b086      	sub	sp, #24
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000aec:	4a14      	ldr	r2, [pc, #80]	; (8000b40 <_sbrk+0x5c>)
 8000aee:	4b15      	ldr	r3, [pc, #84]	; (8000b44 <_sbrk+0x60>)
 8000af0:	1ad3      	subs	r3, r2, r3
 8000af2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000af4:	697b      	ldr	r3, [r7, #20]
 8000af6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000af8:	4b13      	ldr	r3, [pc, #76]	; (8000b48 <_sbrk+0x64>)
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d102      	bne.n	8000b06 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b00:	4b11      	ldr	r3, [pc, #68]	; (8000b48 <_sbrk+0x64>)
 8000b02:	4a12      	ldr	r2, [pc, #72]	; (8000b4c <_sbrk+0x68>)
 8000b04:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b06:	4b10      	ldr	r3, [pc, #64]	; (8000b48 <_sbrk+0x64>)
 8000b08:	681a      	ldr	r2, [r3, #0]
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	4413      	add	r3, r2
 8000b0e:	693a      	ldr	r2, [r7, #16]
 8000b10:	429a      	cmp	r2, r3
 8000b12:	d207      	bcs.n	8000b24 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b14:	f002 fa38 	bl	8002f88 <__errno>
 8000b18:	4603      	mov	r3, r0
 8000b1a:	220c      	movs	r2, #12
 8000b1c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b1e:	f04f 33ff 	mov.w	r3, #4294967295
 8000b22:	e009      	b.n	8000b38 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b24:	4b08      	ldr	r3, [pc, #32]	; (8000b48 <_sbrk+0x64>)
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b2a:	4b07      	ldr	r3, [pc, #28]	; (8000b48 <_sbrk+0x64>)
 8000b2c:	681a      	ldr	r2, [r3, #0]
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	4413      	add	r3, r2
 8000b32:	4a05      	ldr	r2, [pc, #20]	; (8000b48 <_sbrk+0x64>)
 8000b34:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b36:	68fb      	ldr	r3, [r7, #12]
}
 8000b38:	4618      	mov	r0, r3
 8000b3a:	3718      	adds	r7, #24
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	bd80      	pop	{r7, pc}
 8000b40:	2000a000 	.word	0x2000a000
 8000b44:	00000400 	.word	0x00000400
 8000b48:	20000194 	.word	0x20000194
 8000b4c:	200001b0 	.word	0x200001b0

08000b50 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000b50:	b480      	push	{r7}
 8000b52:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000b54:	4b06      	ldr	r3, [pc, #24]	; (8000b70 <SystemInit+0x20>)
 8000b56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b5a:	4a05      	ldr	r2, [pc, #20]	; (8000b70 <SystemInit+0x20>)
 8000b5c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b60:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000b64:	bf00      	nop
 8000b66:	46bd      	mov	sp, r7
 8000b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6c:	4770      	bx	lr
 8000b6e:	bf00      	nop
 8000b70:	e000ed00 	.word	0xe000ed00

08000b74 <ublox_neo6m_init>:
 *      Author: wojsl
 */

#include "ublox_neo6m.h"

ublox_neo6m_ErrorType ublox_neo6m_init(ublox_neo6m_ConfigStruct *devConfig) {
 8000b74:	b480      	push	{r7}
 8000b76:	b083      	sub	sp, #12
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
	return (UBLOX_OK);
 8000b7c:	2300      	movs	r3, #0
}
 8000b7e:	4618      	mov	r0, r3
 8000b80:	370c      	adds	r7, #12
 8000b82:	46bd      	mov	sp, r7
 8000b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b88:	4770      	bx	lr
	...

08000b8c <ublox_neo6m_readData>:

/*
 * Read data from the $GPGGA (Global Positioning System Fix Data) sentence.
 */
ublox_neo6m_ErrorType ublox_neo6m_readData(ublox_neo6m_ConfigStruct *devConfig, ublox_neo6m_DataStruct *devData) {
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b09a      	sub	sp, #104	; 0x68
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
 8000b94:	6039      	str	r1, [r7, #0]

	uint8_t sentenceBuffer[NMEA_0183_MAX_MESSAGE_LENGTH];
	uint8_t byteInMessage = 0;
 8000b96:	2300      	movs	r3, #0
 8000b98:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	uint8_t byteRead = 0;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	73fb      	strb	r3, [r7, #15]

	while (1) {
		// Read last character from the UART buffer and store as the first element of the sentence buffer
		HAL_StatusTypeDef ret = HAL_UART_Receive(devConfig->huartNeo6m, (sentenceBuffer), 1, 10000);
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	6818      	ldr	r0, [r3, #0]
 8000ba4:	f107 0110 	add.w	r1, r7, #16
 8000ba8:	f242 7310 	movw	r3, #10000	; 0x2710
 8000bac:	2201      	movs	r2, #1
 8000bae:	f001 fd0f 	bl	80025d0 <HAL_UART_Receive>
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
		if (ret == HAL_TIMEOUT) {
 8000bb8:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8000bbc:	2b03      	cmp	r3, #3
 8000bbe:	d107      	bne.n	8000bd0 <ublox_neo6m_readData+0x44>
			HAL_UART_Transmit(devConfig->huartLogging, "Err, HAL Timeout!", sizeof("Err, HAL Timeout!"),
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	6858      	ldr	r0, [r3, #4]
 8000bc4:	f04f 33ff 	mov.w	r3, #4294967295
 8000bc8:	2212      	movs	r2, #18
 8000bca:	492c      	ldr	r1, [pc, #176]	; (8000c7c <ublox_neo6m_readData+0xf0>)
 8000bcc:	f001 fc6c 	bl	80024a8 <HAL_UART_Transmit>
			HAL_MAX_DELAY);
		}

		// Test if it is a start character ($) indicating a new sentence
		if ((*sentenceBuffer) == '$') {
 8000bd0:	7c3b      	ldrb	r3, [r7, #16]
 8000bd2:	2b24      	cmp	r3, #36	; 0x24
 8000bd4:	d1e4      	bne.n	8000ba0 <ublox_neo6m_readData+0x14>
			// Read talker ID and sentence type (5 bytes) and store as 5 consecutive elements of the sentence buffer
			HAL_UART_Receive(devConfig->huartNeo6m, (sentenceBuffer + 1), 5, HAL_MAX_DELAY);
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	6818      	ldr	r0, [r3, #0]
 8000bda:	f107 0110 	add.w	r1, r7, #16
 8000bde:	3101      	adds	r1, #1
 8000be0:	f04f 33ff 	mov.w	r3, #4294967295
 8000be4:	2205      	movs	r2, #5
 8000be6:	f001 fcf3 	bl	80025d0 <HAL_UART_Receive>

			// Proceed only if it is a GGA sentence
			uint8_t isSentenceGGA = !(strncmp((sentenceBuffer + 1), "GPGGA", 5));
 8000bea:	f107 0310 	add.w	r3, r7, #16
 8000bee:	3301      	adds	r3, #1
 8000bf0:	2205      	movs	r2, #5
 8000bf2:	4923      	ldr	r1, [pc, #140]	; (8000c80 <ublox_neo6m_readData+0xf4>)
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	f002 fa6f 	bl	80030d8 <strncmp>
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	bf0c      	ite	eq
 8000c00:	2301      	moveq	r3, #1
 8000c02:	2300      	movne	r3, #0
 8000c04:	b2db      	uxtb	r3, r3
 8000c06:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
			byteInMessage = 6; // Current byte in a message, counting from 0
 8000c0a:	2306      	movs	r3, #6
 8000c0c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67

			if (isSentenceGGA == 1) {
 8000c10:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 8000c14:	2b01      	cmp	r3, #1
 8000c16:	d1c3      	bne.n	8000ba0 <ublox_neo6m_readData+0x14>
				do {
					HAL_UART_Receive(devConfig->huartNeo6m, &byteRead, 1, HAL_MAX_DELAY); // Read one char from the UART buffer
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	6818      	ldr	r0, [r3, #0]
 8000c1c:	f107 010f 	add.w	r1, r7, #15
 8000c20:	f04f 33ff 	mov.w	r3, #4294967295
 8000c24:	2201      	movs	r2, #1
 8000c26:	f001 fcd3 	bl	80025d0 <HAL_UART_Receive>
					strncpy((sentenceBuffer + byteInMessage), &byteRead, 1);
 8000c2a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000c2e:	f107 0210 	add.w	r2, r7, #16
 8000c32:	4413      	add	r3, r2
 8000c34:	f107 010f 	add.w	r1, r7, #15
 8000c38:	2201      	movs	r2, #1
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	f002 fa60 	bl	8003100 <strncpy>
					byteInMessage++;
 8000c40:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000c44:	3301      	adds	r3, #1
 8000c46:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67

					// Continue until Line Feed (LF or 0x0a in ASCI) is encountered or max length is reached
				} while ((byteRead != 0x0a) && (byteInMessage < NMEA_0183_MAX_MESSAGE_LENGTH));
 8000c4a:	7bfb      	ldrb	r3, [r7, #15]
 8000c4c:	2b0a      	cmp	r3, #10
 8000c4e:	d003      	beq.n	8000c58 <ublox_neo6m_readData+0xcc>
 8000c50:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000c54:	2b51      	cmp	r3, #81	; 0x51
 8000c56:	d9df      	bls.n	8000c18 <ublox_neo6m_readData+0x8c>

				break;	// Now break from the while loop and return
 8000c58:	bf00      	nop
			}
		}
	}

	HAL_UART_Transmit(devConfig->huartLogging, (sentenceBuffer), byteInMessage, HAL_MAX_DELAY);
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	6858      	ldr	r0, [r3, #4]
 8000c5e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000c62:	b29a      	uxth	r2, r3
 8000c64:	f107 0110 	add.w	r1, r7, #16
 8000c68:	f04f 33ff 	mov.w	r3, #4294967295
 8000c6c:	f001 fc1c 	bl	80024a8 <HAL_UART_Transmit>

	return (UBLOX_OK);
 8000c70:	2300      	movs	r3, #0
}
 8000c72:	4618      	mov	r0, r3
 8000c74:	3768      	adds	r7, #104	; 0x68
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	bf00      	nop
 8000c7c:	08003b18 	.word	0x08003b18
 8000c80:	08003b2c 	.word	0x08003b2c

08000c84 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000c84:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000cbc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000c88:	f7ff ff62 	bl	8000b50 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c8c:	480c      	ldr	r0, [pc, #48]	; (8000cc0 <LoopForever+0x6>)
  ldr r1, =_edata
 8000c8e:	490d      	ldr	r1, [pc, #52]	; (8000cc4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c90:	4a0d      	ldr	r2, [pc, #52]	; (8000cc8 <LoopForever+0xe>)
  movs r3, #0
 8000c92:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c94:	e002      	b.n	8000c9c <LoopCopyDataInit>

08000c96 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c96:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c98:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c9a:	3304      	adds	r3, #4

08000c9c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c9c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c9e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ca0:	d3f9      	bcc.n	8000c96 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ca2:	4a0a      	ldr	r2, [pc, #40]	; (8000ccc <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ca4:	4c0a      	ldr	r4, [pc, #40]	; (8000cd0 <LoopForever+0x16>)
  movs r3, #0
 8000ca6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ca8:	e001      	b.n	8000cae <LoopFillZerobss>

08000caa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000caa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cac:	3204      	adds	r2, #4

08000cae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cb0:	d3fb      	bcc.n	8000caa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000cb2:	f002 f96f 	bl	8002f94 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000cb6:	f7ff fc1d 	bl	80004f4 <main>

08000cba <LoopForever>:

LoopForever:
    b LoopForever
 8000cba:	e7fe      	b.n	8000cba <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000cbc:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8000cc0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cc4:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000cc8:	08003bf0 	.word	0x08003bf0
  ldr r2, =_sbss
 8000ccc:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000cd0:	200001ac 	.word	0x200001ac

08000cd4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000cd4:	e7fe      	b.n	8000cd4 <ADC1_2_IRQHandler>
	...

08000cd8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b082      	sub	sp, #8
 8000cdc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ce2:	4b0c      	ldr	r3, [pc, #48]	; (8000d14 <HAL_Init+0x3c>)
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	4a0b      	ldr	r2, [pc, #44]	; (8000d14 <HAL_Init+0x3c>)
 8000ce8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000cec:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cee:	2003      	movs	r0, #3
 8000cf0:	f000 f944 	bl	8000f7c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000cf4:	2000      	movs	r0, #0
 8000cf6:	f000 f80f 	bl	8000d18 <HAL_InitTick>
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d002      	beq.n	8000d06 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000d00:	2301      	movs	r3, #1
 8000d02:	71fb      	strb	r3, [r7, #7]
 8000d04:	e001      	b.n	8000d0a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000d06:	f7ff fd99 	bl	800083c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000d0a:	79fb      	ldrb	r3, [r7, #7]
}
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	3708      	adds	r7, #8
 8000d10:	46bd      	mov	sp, r7
 8000d12:	bd80      	pop	{r7, pc}
 8000d14:	40022000 	.word	0x40022000

08000d18 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b084      	sub	sp, #16
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000d20:	2300      	movs	r3, #0
 8000d22:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000d24:	4b17      	ldr	r3, [pc, #92]	; (8000d84 <HAL_InitTick+0x6c>)
 8000d26:	781b      	ldrb	r3, [r3, #0]
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d023      	beq.n	8000d74 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000d2c:	4b16      	ldr	r3, [pc, #88]	; (8000d88 <HAL_InitTick+0x70>)
 8000d2e:	681a      	ldr	r2, [r3, #0]
 8000d30:	4b14      	ldr	r3, [pc, #80]	; (8000d84 <HAL_InitTick+0x6c>)
 8000d32:	781b      	ldrb	r3, [r3, #0]
 8000d34:	4619      	mov	r1, r3
 8000d36:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d3a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d42:	4618      	mov	r0, r3
 8000d44:	f000 f941 	bl	8000fca <HAL_SYSTICK_Config>
 8000d48:	4603      	mov	r3, r0
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d10f      	bne.n	8000d6e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	2b0f      	cmp	r3, #15
 8000d52:	d809      	bhi.n	8000d68 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d54:	2200      	movs	r2, #0
 8000d56:	6879      	ldr	r1, [r7, #4]
 8000d58:	f04f 30ff 	mov.w	r0, #4294967295
 8000d5c:	f000 f919 	bl	8000f92 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d60:	4a0a      	ldr	r2, [pc, #40]	; (8000d8c <HAL_InitTick+0x74>)
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	6013      	str	r3, [r2, #0]
 8000d66:	e007      	b.n	8000d78 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000d68:	2301      	movs	r3, #1
 8000d6a:	73fb      	strb	r3, [r7, #15]
 8000d6c:	e004      	b.n	8000d78 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000d6e:	2301      	movs	r3, #1
 8000d70:	73fb      	strb	r3, [r7, #15]
 8000d72:	e001      	b.n	8000d78 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000d74:	2301      	movs	r3, #1
 8000d76:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000d78:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	3710      	adds	r7, #16
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd80      	pop	{r7, pc}
 8000d82:	bf00      	nop
 8000d84:	20000008 	.word	0x20000008
 8000d88:	20000000 	.word	0x20000000
 8000d8c:	20000004 	.word	0x20000004

08000d90 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d90:	b480      	push	{r7}
 8000d92:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000d94:	4b06      	ldr	r3, [pc, #24]	; (8000db0 <HAL_IncTick+0x20>)
 8000d96:	781b      	ldrb	r3, [r3, #0]
 8000d98:	461a      	mov	r2, r3
 8000d9a:	4b06      	ldr	r3, [pc, #24]	; (8000db4 <HAL_IncTick+0x24>)
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	4413      	add	r3, r2
 8000da0:	4a04      	ldr	r2, [pc, #16]	; (8000db4 <HAL_IncTick+0x24>)
 8000da2:	6013      	str	r3, [r2, #0]
}
 8000da4:	bf00      	nop
 8000da6:	46bd      	mov	sp, r7
 8000da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dac:	4770      	bx	lr
 8000dae:	bf00      	nop
 8000db0:	20000008 	.word	0x20000008
 8000db4:	20000198 	.word	0x20000198

08000db8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000db8:	b480      	push	{r7}
 8000dba:	af00      	add	r7, sp, #0
  return uwTick;
 8000dbc:	4b03      	ldr	r3, [pc, #12]	; (8000dcc <HAL_GetTick+0x14>)
 8000dbe:	681b      	ldr	r3, [r3, #0]
}
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc8:	4770      	bx	lr
 8000dca:	bf00      	nop
 8000dcc:	20000198 	.word	0x20000198

08000dd0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b084      	sub	sp, #16
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000dd8:	f7ff ffee 	bl	8000db8 <HAL_GetTick>
 8000ddc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000de2:	68fb      	ldr	r3, [r7, #12]
 8000de4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000de8:	d005      	beq.n	8000df6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000dea:	4b0a      	ldr	r3, [pc, #40]	; (8000e14 <HAL_Delay+0x44>)
 8000dec:	781b      	ldrb	r3, [r3, #0]
 8000dee:	461a      	mov	r2, r3
 8000df0:	68fb      	ldr	r3, [r7, #12]
 8000df2:	4413      	add	r3, r2
 8000df4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000df6:	bf00      	nop
 8000df8:	f7ff ffde 	bl	8000db8 <HAL_GetTick>
 8000dfc:	4602      	mov	r2, r0
 8000dfe:	68bb      	ldr	r3, [r7, #8]
 8000e00:	1ad3      	subs	r3, r2, r3
 8000e02:	68fa      	ldr	r2, [r7, #12]
 8000e04:	429a      	cmp	r2, r3
 8000e06:	d8f7      	bhi.n	8000df8 <HAL_Delay+0x28>
  {
  }
}
 8000e08:	bf00      	nop
 8000e0a:	bf00      	nop
 8000e0c:	3710      	adds	r7, #16
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bd80      	pop	{r7, pc}
 8000e12:	bf00      	nop
 8000e14:	20000008 	.word	0x20000008

08000e18 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	b085      	sub	sp, #20
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	f003 0307 	and.w	r3, r3, #7
 8000e26:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e28:	4b0c      	ldr	r3, [pc, #48]	; (8000e5c <__NVIC_SetPriorityGrouping+0x44>)
 8000e2a:	68db      	ldr	r3, [r3, #12]
 8000e2c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e2e:	68ba      	ldr	r2, [r7, #8]
 8000e30:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e34:	4013      	ands	r3, r2
 8000e36:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e38:	68fb      	ldr	r3, [r7, #12]
 8000e3a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e3c:	68bb      	ldr	r3, [r7, #8]
 8000e3e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e40:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e48:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e4a:	4a04      	ldr	r2, [pc, #16]	; (8000e5c <__NVIC_SetPriorityGrouping+0x44>)
 8000e4c:	68bb      	ldr	r3, [r7, #8]
 8000e4e:	60d3      	str	r3, [r2, #12]
}
 8000e50:	bf00      	nop
 8000e52:	3714      	adds	r7, #20
 8000e54:	46bd      	mov	sp, r7
 8000e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5a:	4770      	bx	lr
 8000e5c:	e000ed00 	.word	0xe000ed00

08000e60 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e60:	b480      	push	{r7}
 8000e62:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e64:	4b04      	ldr	r3, [pc, #16]	; (8000e78 <__NVIC_GetPriorityGrouping+0x18>)
 8000e66:	68db      	ldr	r3, [r3, #12]
 8000e68:	0a1b      	lsrs	r3, r3, #8
 8000e6a:	f003 0307 	and.w	r3, r3, #7
}
 8000e6e:	4618      	mov	r0, r3
 8000e70:	46bd      	mov	sp, r7
 8000e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e76:	4770      	bx	lr
 8000e78:	e000ed00 	.word	0xe000ed00

08000e7c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	b083      	sub	sp, #12
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	4603      	mov	r3, r0
 8000e84:	6039      	str	r1, [r7, #0]
 8000e86:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	db0a      	blt.n	8000ea6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e90:	683b      	ldr	r3, [r7, #0]
 8000e92:	b2da      	uxtb	r2, r3
 8000e94:	490c      	ldr	r1, [pc, #48]	; (8000ec8 <__NVIC_SetPriority+0x4c>)
 8000e96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e9a:	0112      	lsls	r2, r2, #4
 8000e9c:	b2d2      	uxtb	r2, r2
 8000e9e:	440b      	add	r3, r1
 8000ea0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ea4:	e00a      	b.n	8000ebc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ea6:	683b      	ldr	r3, [r7, #0]
 8000ea8:	b2da      	uxtb	r2, r3
 8000eaa:	4908      	ldr	r1, [pc, #32]	; (8000ecc <__NVIC_SetPriority+0x50>)
 8000eac:	79fb      	ldrb	r3, [r7, #7]
 8000eae:	f003 030f 	and.w	r3, r3, #15
 8000eb2:	3b04      	subs	r3, #4
 8000eb4:	0112      	lsls	r2, r2, #4
 8000eb6:	b2d2      	uxtb	r2, r2
 8000eb8:	440b      	add	r3, r1
 8000eba:	761a      	strb	r2, [r3, #24]
}
 8000ebc:	bf00      	nop
 8000ebe:	370c      	adds	r7, #12
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec6:	4770      	bx	lr
 8000ec8:	e000e100 	.word	0xe000e100
 8000ecc:	e000ed00 	.word	0xe000ed00

08000ed0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	b089      	sub	sp, #36	; 0x24
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	60f8      	str	r0, [r7, #12]
 8000ed8:	60b9      	str	r1, [r7, #8]
 8000eda:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	f003 0307 	and.w	r3, r3, #7
 8000ee2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ee4:	69fb      	ldr	r3, [r7, #28]
 8000ee6:	f1c3 0307 	rsb	r3, r3, #7
 8000eea:	2b04      	cmp	r3, #4
 8000eec:	bf28      	it	cs
 8000eee:	2304      	movcs	r3, #4
 8000ef0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ef2:	69fb      	ldr	r3, [r7, #28]
 8000ef4:	3304      	adds	r3, #4
 8000ef6:	2b06      	cmp	r3, #6
 8000ef8:	d902      	bls.n	8000f00 <NVIC_EncodePriority+0x30>
 8000efa:	69fb      	ldr	r3, [r7, #28]
 8000efc:	3b03      	subs	r3, #3
 8000efe:	e000      	b.n	8000f02 <NVIC_EncodePriority+0x32>
 8000f00:	2300      	movs	r3, #0
 8000f02:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f04:	f04f 32ff 	mov.w	r2, #4294967295
 8000f08:	69bb      	ldr	r3, [r7, #24]
 8000f0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f0e:	43da      	mvns	r2, r3
 8000f10:	68bb      	ldr	r3, [r7, #8]
 8000f12:	401a      	ands	r2, r3
 8000f14:	697b      	ldr	r3, [r7, #20]
 8000f16:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f18:	f04f 31ff 	mov.w	r1, #4294967295
 8000f1c:	697b      	ldr	r3, [r7, #20]
 8000f1e:	fa01 f303 	lsl.w	r3, r1, r3
 8000f22:	43d9      	mvns	r1, r3
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f28:	4313      	orrs	r3, r2
         );
}
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	3724      	adds	r7, #36	; 0x24
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f34:	4770      	bx	lr
	...

08000f38 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b082      	sub	sp, #8
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	3b01      	subs	r3, #1
 8000f44:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f48:	d301      	bcc.n	8000f4e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f4a:	2301      	movs	r3, #1
 8000f4c:	e00f      	b.n	8000f6e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f4e:	4a0a      	ldr	r2, [pc, #40]	; (8000f78 <SysTick_Config+0x40>)
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	3b01      	subs	r3, #1
 8000f54:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f56:	210f      	movs	r1, #15
 8000f58:	f04f 30ff 	mov.w	r0, #4294967295
 8000f5c:	f7ff ff8e 	bl	8000e7c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f60:	4b05      	ldr	r3, [pc, #20]	; (8000f78 <SysTick_Config+0x40>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f66:	4b04      	ldr	r3, [pc, #16]	; (8000f78 <SysTick_Config+0x40>)
 8000f68:	2207      	movs	r2, #7
 8000f6a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f6c:	2300      	movs	r3, #0
}
 8000f6e:	4618      	mov	r0, r3
 8000f70:	3708      	adds	r7, #8
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd80      	pop	{r7, pc}
 8000f76:	bf00      	nop
 8000f78:	e000e010 	.word	0xe000e010

08000f7c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b082      	sub	sp, #8
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f84:	6878      	ldr	r0, [r7, #4]
 8000f86:	f7ff ff47 	bl	8000e18 <__NVIC_SetPriorityGrouping>
}
 8000f8a:	bf00      	nop
 8000f8c:	3708      	adds	r7, #8
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}

08000f92 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f92:	b580      	push	{r7, lr}
 8000f94:	b086      	sub	sp, #24
 8000f96:	af00      	add	r7, sp, #0
 8000f98:	4603      	mov	r3, r0
 8000f9a:	60b9      	str	r1, [r7, #8]
 8000f9c:	607a      	str	r2, [r7, #4]
 8000f9e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000fa4:	f7ff ff5c 	bl	8000e60 <__NVIC_GetPriorityGrouping>
 8000fa8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000faa:	687a      	ldr	r2, [r7, #4]
 8000fac:	68b9      	ldr	r1, [r7, #8]
 8000fae:	6978      	ldr	r0, [r7, #20]
 8000fb0:	f7ff ff8e 	bl	8000ed0 <NVIC_EncodePriority>
 8000fb4:	4602      	mov	r2, r0
 8000fb6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fba:	4611      	mov	r1, r2
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	f7ff ff5d 	bl	8000e7c <__NVIC_SetPriority>
}
 8000fc2:	bf00      	nop
 8000fc4:	3718      	adds	r7, #24
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}

08000fca <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000fca:	b580      	push	{r7, lr}
 8000fcc:	b082      	sub	sp, #8
 8000fce:	af00      	add	r7, sp, #0
 8000fd0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000fd2:	6878      	ldr	r0, [r7, #4]
 8000fd4:	f7ff ffb0 	bl	8000f38 <SysTick_Config>
 8000fd8:	4603      	mov	r3, r0
}
 8000fda:	4618      	mov	r0, r3
 8000fdc:	3708      	adds	r7, #8
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}
	...

08000fe4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	b087      	sub	sp, #28
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
 8000fec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ff2:	e14e      	b.n	8001292 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000ff4:	683b      	ldr	r3, [r7, #0]
 8000ff6:	681a      	ldr	r2, [r3, #0]
 8000ff8:	2101      	movs	r1, #1
 8000ffa:	697b      	ldr	r3, [r7, #20]
 8000ffc:	fa01 f303 	lsl.w	r3, r1, r3
 8001000:	4013      	ands	r3, r2
 8001002:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	2b00      	cmp	r3, #0
 8001008:	f000 8140 	beq.w	800128c <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800100c:	683b      	ldr	r3, [r7, #0]
 800100e:	685b      	ldr	r3, [r3, #4]
 8001010:	f003 0303 	and.w	r3, r3, #3
 8001014:	2b01      	cmp	r3, #1
 8001016:	d005      	beq.n	8001024 <HAL_GPIO_Init+0x40>
 8001018:	683b      	ldr	r3, [r7, #0]
 800101a:	685b      	ldr	r3, [r3, #4]
 800101c:	f003 0303 	and.w	r3, r3, #3
 8001020:	2b02      	cmp	r3, #2
 8001022:	d130      	bne.n	8001086 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	689b      	ldr	r3, [r3, #8]
 8001028:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800102a:	697b      	ldr	r3, [r7, #20]
 800102c:	005b      	lsls	r3, r3, #1
 800102e:	2203      	movs	r2, #3
 8001030:	fa02 f303 	lsl.w	r3, r2, r3
 8001034:	43db      	mvns	r3, r3
 8001036:	693a      	ldr	r2, [r7, #16]
 8001038:	4013      	ands	r3, r2
 800103a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	68da      	ldr	r2, [r3, #12]
 8001040:	697b      	ldr	r3, [r7, #20]
 8001042:	005b      	lsls	r3, r3, #1
 8001044:	fa02 f303 	lsl.w	r3, r2, r3
 8001048:	693a      	ldr	r2, [r7, #16]
 800104a:	4313      	orrs	r3, r2
 800104c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	693a      	ldr	r2, [r7, #16]
 8001052:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	685b      	ldr	r3, [r3, #4]
 8001058:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800105a:	2201      	movs	r2, #1
 800105c:	697b      	ldr	r3, [r7, #20]
 800105e:	fa02 f303 	lsl.w	r3, r2, r3
 8001062:	43db      	mvns	r3, r3
 8001064:	693a      	ldr	r2, [r7, #16]
 8001066:	4013      	ands	r3, r2
 8001068:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800106a:	683b      	ldr	r3, [r7, #0]
 800106c:	685b      	ldr	r3, [r3, #4]
 800106e:	091b      	lsrs	r3, r3, #4
 8001070:	f003 0201 	and.w	r2, r3, #1
 8001074:	697b      	ldr	r3, [r7, #20]
 8001076:	fa02 f303 	lsl.w	r3, r2, r3
 800107a:	693a      	ldr	r2, [r7, #16]
 800107c:	4313      	orrs	r3, r2
 800107e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	693a      	ldr	r2, [r7, #16]
 8001084:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001086:	683b      	ldr	r3, [r7, #0]
 8001088:	685b      	ldr	r3, [r3, #4]
 800108a:	f003 0303 	and.w	r3, r3, #3
 800108e:	2b03      	cmp	r3, #3
 8001090:	d017      	beq.n	80010c2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	68db      	ldr	r3, [r3, #12]
 8001096:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001098:	697b      	ldr	r3, [r7, #20]
 800109a:	005b      	lsls	r3, r3, #1
 800109c:	2203      	movs	r2, #3
 800109e:	fa02 f303 	lsl.w	r3, r2, r3
 80010a2:	43db      	mvns	r3, r3
 80010a4:	693a      	ldr	r2, [r7, #16]
 80010a6:	4013      	ands	r3, r2
 80010a8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80010aa:	683b      	ldr	r3, [r7, #0]
 80010ac:	689a      	ldr	r2, [r3, #8]
 80010ae:	697b      	ldr	r3, [r7, #20]
 80010b0:	005b      	lsls	r3, r3, #1
 80010b2:	fa02 f303 	lsl.w	r3, r2, r3
 80010b6:	693a      	ldr	r2, [r7, #16]
 80010b8:	4313      	orrs	r3, r2
 80010ba:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	693a      	ldr	r2, [r7, #16]
 80010c0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010c2:	683b      	ldr	r3, [r7, #0]
 80010c4:	685b      	ldr	r3, [r3, #4]
 80010c6:	f003 0303 	and.w	r3, r3, #3
 80010ca:	2b02      	cmp	r3, #2
 80010cc:	d123      	bne.n	8001116 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80010ce:	697b      	ldr	r3, [r7, #20]
 80010d0:	08da      	lsrs	r2, r3, #3
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	3208      	adds	r2, #8
 80010d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010da:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80010dc:	697b      	ldr	r3, [r7, #20]
 80010de:	f003 0307 	and.w	r3, r3, #7
 80010e2:	009b      	lsls	r3, r3, #2
 80010e4:	220f      	movs	r2, #15
 80010e6:	fa02 f303 	lsl.w	r3, r2, r3
 80010ea:	43db      	mvns	r3, r3
 80010ec:	693a      	ldr	r2, [r7, #16]
 80010ee:	4013      	ands	r3, r2
 80010f0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80010f2:	683b      	ldr	r3, [r7, #0]
 80010f4:	691a      	ldr	r2, [r3, #16]
 80010f6:	697b      	ldr	r3, [r7, #20]
 80010f8:	f003 0307 	and.w	r3, r3, #7
 80010fc:	009b      	lsls	r3, r3, #2
 80010fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001102:	693a      	ldr	r2, [r7, #16]
 8001104:	4313      	orrs	r3, r2
 8001106:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001108:	697b      	ldr	r3, [r7, #20]
 800110a:	08da      	lsrs	r2, r3, #3
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	3208      	adds	r2, #8
 8001110:	6939      	ldr	r1, [r7, #16]
 8001112:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800111c:	697b      	ldr	r3, [r7, #20]
 800111e:	005b      	lsls	r3, r3, #1
 8001120:	2203      	movs	r2, #3
 8001122:	fa02 f303 	lsl.w	r3, r2, r3
 8001126:	43db      	mvns	r3, r3
 8001128:	693a      	ldr	r2, [r7, #16]
 800112a:	4013      	ands	r3, r2
 800112c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800112e:	683b      	ldr	r3, [r7, #0]
 8001130:	685b      	ldr	r3, [r3, #4]
 8001132:	f003 0203 	and.w	r2, r3, #3
 8001136:	697b      	ldr	r3, [r7, #20]
 8001138:	005b      	lsls	r3, r3, #1
 800113a:	fa02 f303 	lsl.w	r3, r2, r3
 800113e:	693a      	ldr	r2, [r7, #16]
 8001140:	4313      	orrs	r3, r2
 8001142:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	693a      	ldr	r2, [r7, #16]
 8001148:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800114a:	683b      	ldr	r3, [r7, #0]
 800114c:	685b      	ldr	r3, [r3, #4]
 800114e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001152:	2b00      	cmp	r3, #0
 8001154:	f000 809a 	beq.w	800128c <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001158:	4b55      	ldr	r3, [pc, #340]	; (80012b0 <HAL_GPIO_Init+0x2cc>)
 800115a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800115c:	4a54      	ldr	r2, [pc, #336]	; (80012b0 <HAL_GPIO_Init+0x2cc>)
 800115e:	f043 0301 	orr.w	r3, r3, #1
 8001162:	6613      	str	r3, [r2, #96]	; 0x60
 8001164:	4b52      	ldr	r3, [pc, #328]	; (80012b0 <HAL_GPIO_Init+0x2cc>)
 8001166:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001168:	f003 0301 	and.w	r3, r3, #1
 800116c:	60bb      	str	r3, [r7, #8]
 800116e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001170:	4a50      	ldr	r2, [pc, #320]	; (80012b4 <HAL_GPIO_Init+0x2d0>)
 8001172:	697b      	ldr	r3, [r7, #20]
 8001174:	089b      	lsrs	r3, r3, #2
 8001176:	3302      	adds	r3, #2
 8001178:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800117c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800117e:	697b      	ldr	r3, [r7, #20]
 8001180:	f003 0303 	and.w	r3, r3, #3
 8001184:	009b      	lsls	r3, r3, #2
 8001186:	220f      	movs	r2, #15
 8001188:	fa02 f303 	lsl.w	r3, r2, r3
 800118c:	43db      	mvns	r3, r3
 800118e:	693a      	ldr	r2, [r7, #16]
 8001190:	4013      	ands	r3, r2
 8001192:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800119a:	d013      	beq.n	80011c4 <HAL_GPIO_Init+0x1e0>
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	4a46      	ldr	r2, [pc, #280]	; (80012b8 <HAL_GPIO_Init+0x2d4>)
 80011a0:	4293      	cmp	r3, r2
 80011a2:	d00d      	beq.n	80011c0 <HAL_GPIO_Init+0x1dc>
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	4a45      	ldr	r2, [pc, #276]	; (80012bc <HAL_GPIO_Init+0x2d8>)
 80011a8:	4293      	cmp	r3, r2
 80011aa:	d007      	beq.n	80011bc <HAL_GPIO_Init+0x1d8>
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	4a44      	ldr	r2, [pc, #272]	; (80012c0 <HAL_GPIO_Init+0x2dc>)
 80011b0:	4293      	cmp	r3, r2
 80011b2:	d101      	bne.n	80011b8 <HAL_GPIO_Init+0x1d4>
 80011b4:	2303      	movs	r3, #3
 80011b6:	e006      	b.n	80011c6 <HAL_GPIO_Init+0x1e2>
 80011b8:	2307      	movs	r3, #7
 80011ba:	e004      	b.n	80011c6 <HAL_GPIO_Init+0x1e2>
 80011bc:	2302      	movs	r3, #2
 80011be:	e002      	b.n	80011c6 <HAL_GPIO_Init+0x1e2>
 80011c0:	2301      	movs	r3, #1
 80011c2:	e000      	b.n	80011c6 <HAL_GPIO_Init+0x1e2>
 80011c4:	2300      	movs	r3, #0
 80011c6:	697a      	ldr	r2, [r7, #20]
 80011c8:	f002 0203 	and.w	r2, r2, #3
 80011cc:	0092      	lsls	r2, r2, #2
 80011ce:	4093      	lsls	r3, r2
 80011d0:	693a      	ldr	r2, [r7, #16]
 80011d2:	4313      	orrs	r3, r2
 80011d4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80011d6:	4937      	ldr	r1, [pc, #220]	; (80012b4 <HAL_GPIO_Init+0x2d0>)
 80011d8:	697b      	ldr	r3, [r7, #20]
 80011da:	089b      	lsrs	r3, r3, #2
 80011dc:	3302      	adds	r3, #2
 80011de:	693a      	ldr	r2, [r7, #16]
 80011e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80011e4:	4b37      	ldr	r3, [pc, #220]	; (80012c4 <HAL_GPIO_Init+0x2e0>)
 80011e6:	689b      	ldr	r3, [r3, #8]
 80011e8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	43db      	mvns	r3, r3
 80011ee:	693a      	ldr	r2, [r7, #16]
 80011f0:	4013      	ands	r3, r2
 80011f2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80011f4:	683b      	ldr	r3, [r7, #0]
 80011f6:	685b      	ldr	r3, [r3, #4]
 80011f8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d003      	beq.n	8001208 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8001200:	693a      	ldr	r2, [r7, #16]
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	4313      	orrs	r3, r2
 8001206:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001208:	4a2e      	ldr	r2, [pc, #184]	; (80012c4 <HAL_GPIO_Init+0x2e0>)
 800120a:	693b      	ldr	r3, [r7, #16]
 800120c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800120e:	4b2d      	ldr	r3, [pc, #180]	; (80012c4 <HAL_GPIO_Init+0x2e0>)
 8001210:	68db      	ldr	r3, [r3, #12]
 8001212:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	43db      	mvns	r3, r3
 8001218:	693a      	ldr	r2, [r7, #16]
 800121a:	4013      	ands	r3, r2
 800121c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	685b      	ldr	r3, [r3, #4]
 8001222:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001226:	2b00      	cmp	r3, #0
 8001228:	d003      	beq.n	8001232 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 800122a:	693a      	ldr	r2, [r7, #16]
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	4313      	orrs	r3, r2
 8001230:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001232:	4a24      	ldr	r2, [pc, #144]	; (80012c4 <HAL_GPIO_Init+0x2e0>)
 8001234:	693b      	ldr	r3, [r7, #16]
 8001236:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001238:	4b22      	ldr	r3, [pc, #136]	; (80012c4 <HAL_GPIO_Init+0x2e0>)
 800123a:	685b      	ldr	r3, [r3, #4]
 800123c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	43db      	mvns	r3, r3
 8001242:	693a      	ldr	r2, [r7, #16]
 8001244:	4013      	ands	r3, r2
 8001246:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001248:	683b      	ldr	r3, [r7, #0]
 800124a:	685b      	ldr	r3, [r3, #4]
 800124c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001250:	2b00      	cmp	r3, #0
 8001252:	d003      	beq.n	800125c <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8001254:	693a      	ldr	r2, [r7, #16]
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	4313      	orrs	r3, r2
 800125a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800125c:	4a19      	ldr	r2, [pc, #100]	; (80012c4 <HAL_GPIO_Init+0x2e0>)
 800125e:	693b      	ldr	r3, [r7, #16]
 8001260:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001262:	4b18      	ldr	r3, [pc, #96]	; (80012c4 <HAL_GPIO_Init+0x2e0>)
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	43db      	mvns	r3, r3
 800126c:	693a      	ldr	r2, [r7, #16]
 800126e:	4013      	ands	r3, r2
 8001270:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001272:	683b      	ldr	r3, [r7, #0]
 8001274:	685b      	ldr	r3, [r3, #4]
 8001276:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800127a:	2b00      	cmp	r3, #0
 800127c:	d003      	beq.n	8001286 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 800127e:	693a      	ldr	r2, [r7, #16]
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	4313      	orrs	r3, r2
 8001284:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001286:	4a0f      	ldr	r2, [pc, #60]	; (80012c4 <HAL_GPIO_Init+0x2e0>)
 8001288:	693b      	ldr	r3, [r7, #16]
 800128a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800128c:	697b      	ldr	r3, [r7, #20]
 800128e:	3301      	adds	r3, #1
 8001290:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001292:	683b      	ldr	r3, [r7, #0]
 8001294:	681a      	ldr	r2, [r3, #0]
 8001296:	697b      	ldr	r3, [r7, #20]
 8001298:	fa22 f303 	lsr.w	r3, r2, r3
 800129c:	2b00      	cmp	r3, #0
 800129e:	f47f aea9 	bne.w	8000ff4 <HAL_GPIO_Init+0x10>
  }
}
 80012a2:	bf00      	nop
 80012a4:	bf00      	nop
 80012a6:	371c      	adds	r7, #28
 80012a8:	46bd      	mov	sp, r7
 80012aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ae:	4770      	bx	lr
 80012b0:	40021000 	.word	0x40021000
 80012b4:	40010000 	.word	0x40010000
 80012b8:	48000400 	.word	0x48000400
 80012bc:	48000800 	.word	0x48000800
 80012c0:	48000c00 	.word	0x48000c00
 80012c4:	40010400 	.word	0x40010400

080012c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012c8:	b480      	push	{r7}
 80012ca:	b083      	sub	sp, #12
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
 80012d0:	460b      	mov	r3, r1
 80012d2:	807b      	strh	r3, [r7, #2]
 80012d4:	4613      	mov	r3, r2
 80012d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80012d8:	787b      	ldrb	r3, [r7, #1]
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d003      	beq.n	80012e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80012de:	887a      	ldrh	r2, [r7, #2]
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80012e4:	e002      	b.n	80012ec <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80012e6:	887a      	ldrh	r2, [r7, #2]
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	629a      	str	r2, [r3, #40]	; 0x28
}
 80012ec:	bf00      	nop
 80012ee:	370c      	adds	r7, #12
 80012f0:	46bd      	mov	sp, r7
 80012f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f6:	4770      	bx	lr

080012f8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80012f8:	b480      	push	{r7}
 80012fa:	b085      	sub	sp, #20
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
 8001300:	460b      	mov	r3, r1
 8001302:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	695b      	ldr	r3, [r3, #20]
 8001308:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800130a:	887a      	ldrh	r2, [r7, #2]
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	4013      	ands	r3, r2
 8001310:	041a      	lsls	r2, r3, #16
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	43d9      	mvns	r1, r3
 8001316:	887b      	ldrh	r3, [r7, #2]
 8001318:	400b      	ands	r3, r1
 800131a:	431a      	orrs	r2, r3
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	619a      	str	r2, [r3, #24]
}
 8001320:	bf00      	nop
 8001322:	3714      	adds	r7, #20
 8001324:	46bd      	mov	sp, r7
 8001326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132a:	4770      	bx	lr

0800132c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800132c:	b480      	push	{r7}
 800132e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001330:	4b04      	ldr	r3, [pc, #16]	; (8001344 <HAL_PWREx_GetVoltageRange+0x18>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001338:	4618      	mov	r0, r3
 800133a:	46bd      	mov	sp, r7
 800133c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001340:	4770      	bx	lr
 8001342:	bf00      	nop
 8001344:	40007000 	.word	0x40007000

08001348 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001348:	b480      	push	{r7}
 800134a:	b085      	sub	sp, #20
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001356:	d130      	bne.n	80013ba <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001358:	4b23      	ldr	r3, [pc, #140]	; (80013e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001360:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001364:	d038      	beq.n	80013d8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001366:	4b20      	ldr	r3, [pc, #128]	; (80013e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800136e:	4a1e      	ldr	r2, [pc, #120]	; (80013e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001370:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001374:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001376:	4b1d      	ldr	r3, [pc, #116]	; (80013ec <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	2232      	movs	r2, #50	; 0x32
 800137c:	fb02 f303 	mul.w	r3, r2, r3
 8001380:	4a1b      	ldr	r2, [pc, #108]	; (80013f0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001382:	fba2 2303 	umull	r2, r3, r2, r3
 8001386:	0c9b      	lsrs	r3, r3, #18
 8001388:	3301      	adds	r3, #1
 800138a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800138c:	e002      	b.n	8001394 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	3b01      	subs	r3, #1
 8001392:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001394:	4b14      	ldr	r3, [pc, #80]	; (80013e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001396:	695b      	ldr	r3, [r3, #20]
 8001398:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800139c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80013a0:	d102      	bne.n	80013a8 <HAL_PWREx_ControlVoltageScaling+0x60>
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d1f2      	bne.n	800138e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80013a8:	4b0f      	ldr	r3, [pc, #60]	; (80013e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80013aa:	695b      	ldr	r3, [r3, #20]
 80013ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80013b4:	d110      	bne.n	80013d8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80013b6:	2303      	movs	r3, #3
 80013b8:	e00f      	b.n	80013da <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80013ba:	4b0b      	ldr	r3, [pc, #44]	; (80013e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80013c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80013c6:	d007      	beq.n	80013d8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80013c8:	4b07      	ldr	r3, [pc, #28]	; (80013e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80013d0:	4a05      	ldr	r2, [pc, #20]	; (80013e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80013d2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80013d6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80013d8:	2300      	movs	r3, #0
}
 80013da:	4618      	mov	r0, r3
 80013dc:	3714      	adds	r7, #20
 80013de:	46bd      	mov	sp, r7
 80013e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e4:	4770      	bx	lr
 80013e6:	bf00      	nop
 80013e8:	40007000 	.word	0x40007000
 80013ec:	20000000 	.word	0x20000000
 80013f0:	431bde83 	.word	0x431bde83

080013f4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b08a      	sub	sp, #40	; 0x28
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d102      	bne.n	8001408 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001402:	2301      	movs	r3, #1
 8001404:	f000 bc4f 	b.w	8001ca6 <HAL_RCC_OscConfig+0x8b2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001408:	4b97      	ldr	r3, [pc, #604]	; (8001668 <HAL_RCC_OscConfig+0x274>)
 800140a:	689b      	ldr	r3, [r3, #8]
 800140c:	f003 030c 	and.w	r3, r3, #12
 8001410:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001412:	4b95      	ldr	r3, [pc, #596]	; (8001668 <HAL_RCC_OscConfig+0x274>)
 8001414:	68db      	ldr	r3, [r3, #12]
 8001416:	f003 0303 	and.w	r3, r3, #3
 800141a:	61fb      	str	r3, [r7, #28]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	f003 0310 	and.w	r3, r3, #16
 8001424:	2b00      	cmp	r3, #0
 8001426:	f000 80e6 	beq.w	80015f6 <HAL_RCC_OscConfig+0x202>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800142a:	6a3b      	ldr	r3, [r7, #32]
 800142c:	2b00      	cmp	r3, #0
 800142e:	d007      	beq.n	8001440 <HAL_RCC_OscConfig+0x4c>
 8001430:	6a3b      	ldr	r3, [r7, #32]
 8001432:	2b0c      	cmp	r3, #12
 8001434:	f040 808d 	bne.w	8001552 <HAL_RCC_OscConfig+0x15e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001438:	69fb      	ldr	r3, [r7, #28]
 800143a:	2b01      	cmp	r3, #1
 800143c:	f040 8089 	bne.w	8001552 <HAL_RCC_OscConfig+0x15e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001440:	4b89      	ldr	r3, [pc, #548]	; (8001668 <HAL_RCC_OscConfig+0x274>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	f003 0302 	and.w	r3, r3, #2
 8001448:	2b00      	cmp	r3, #0
 800144a:	d006      	beq.n	800145a <HAL_RCC_OscConfig+0x66>
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	69db      	ldr	r3, [r3, #28]
 8001450:	2b00      	cmp	r3, #0
 8001452:	d102      	bne.n	800145a <HAL_RCC_OscConfig+0x66>
      {
        return HAL_ERROR;
 8001454:	2301      	movs	r3, #1
 8001456:	f000 bc26 	b.w	8001ca6 <HAL_RCC_OscConfig+0x8b2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800145e:	4b82      	ldr	r3, [pc, #520]	; (8001668 <HAL_RCC_OscConfig+0x274>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	f003 0308 	and.w	r3, r3, #8
 8001466:	2b00      	cmp	r3, #0
 8001468:	d004      	beq.n	8001474 <HAL_RCC_OscConfig+0x80>
 800146a:	4b7f      	ldr	r3, [pc, #508]	; (8001668 <HAL_RCC_OscConfig+0x274>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001472:	e005      	b.n	8001480 <HAL_RCC_OscConfig+0x8c>
 8001474:	4b7c      	ldr	r3, [pc, #496]	; (8001668 <HAL_RCC_OscConfig+0x274>)
 8001476:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800147a:	091b      	lsrs	r3, r3, #4
 800147c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001480:	4293      	cmp	r3, r2
 8001482:	d224      	bcs.n	80014ce <HAL_RCC_OscConfig+0xda>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001488:	4618      	mov	r0, r3
 800148a:	f000 fdd9 	bl	8002040 <RCC_SetFlashLatencyFromMSIRange>
 800148e:	4603      	mov	r3, r0
 8001490:	2b00      	cmp	r3, #0
 8001492:	d002      	beq.n	800149a <HAL_RCC_OscConfig+0xa6>
          {
            return HAL_ERROR;
 8001494:	2301      	movs	r3, #1
 8001496:	f000 bc06 	b.w	8001ca6 <HAL_RCC_OscConfig+0x8b2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800149a:	4b73      	ldr	r3, [pc, #460]	; (8001668 <HAL_RCC_OscConfig+0x274>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	4a72      	ldr	r2, [pc, #456]	; (8001668 <HAL_RCC_OscConfig+0x274>)
 80014a0:	f043 0308 	orr.w	r3, r3, #8
 80014a4:	6013      	str	r3, [r2, #0]
 80014a6:	4b70      	ldr	r3, [pc, #448]	; (8001668 <HAL_RCC_OscConfig+0x274>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014b2:	496d      	ldr	r1, [pc, #436]	; (8001668 <HAL_RCC_OscConfig+0x274>)
 80014b4:	4313      	orrs	r3, r2
 80014b6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80014b8:	4b6b      	ldr	r3, [pc, #428]	; (8001668 <HAL_RCC_OscConfig+0x274>)
 80014ba:	685b      	ldr	r3, [r3, #4]
 80014bc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	6a1b      	ldr	r3, [r3, #32]
 80014c4:	021b      	lsls	r3, r3, #8
 80014c6:	4968      	ldr	r1, [pc, #416]	; (8001668 <HAL_RCC_OscConfig+0x274>)
 80014c8:	4313      	orrs	r3, r2
 80014ca:	604b      	str	r3, [r1, #4]
 80014cc:	e025      	b.n	800151a <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80014ce:	4b66      	ldr	r3, [pc, #408]	; (8001668 <HAL_RCC_OscConfig+0x274>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	4a65      	ldr	r2, [pc, #404]	; (8001668 <HAL_RCC_OscConfig+0x274>)
 80014d4:	f043 0308 	orr.w	r3, r3, #8
 80014d8:	6013      	str	r3, [r2, #0]
 80014da:	4b63      	ldr	r3, [pc, #396]	; (8001668 <HAL_RCC_OscConfig+0x274>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014e6:	4960      	ldr	r1, [pc, #384]	; (8001668 <HAL_RCC_OscConfig+0x274>)
 80014e8:	4313      	orrs	r3, r2
 80014ea:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80014ec:	4b5e      	ldr	r3, [pc, #376]	; (8001668 <HAL_RCC_OscConfig+0x274>)
 80014ee:	685b      	ldr	r3, [r3, #4]
 80014f0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	6a1b      	ldr	r3, [r3, #32]
 80014f8:	021b      	lsls	r3, r3, #8
 80014fa:	495b      	ldr	r1, [pc, #364]	; (8001668 <HAL_RCC_OscConfig+0x274>)
 80014fc:	4313      	orrs	r3, r2
 80014fe:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001500:	6a3b      	ldr	r3, [r7, #32]
 8001502:	2b00      	cmp	r3, #0
 8001504:	d109      	bne.n	800151a <HAL_RCC_OscConfig+0x126>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800150a:	4618      	mov	r0, r3
 800150c:	f000 fd98 	bl	8002040 <RCC_SetFlashLatencyFromMSIRange>
 8001510:	4603      	mov	r3, r0
 8001512:	2b00      	cmp	r3, #0
 8001514:	d001      	beq.n	800151a <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 8001516:	2301      	movs	r3, #1
 8001518:	e3c5      	b.n	8001ca6 <HAL_RCC_OscConfig+0x8b2>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800151a:	f000 fccd 	bl	8001eb8 <HAL_RCC_GetSysClockFreq>
 800151e:	4602      	mov	r2, r0
 8001520:	4b51      	ldr	r3, [pc, #324]	; (8001668 <HAL_RCC_OscConfig+0x274>)
 8001522:	689b      	ldr	r3, [r3, #8]
 8001524:	091b      	lsrs	r3, r3, #4
 8001526:	f003 030f 	and.w	r3, r3, #15
 800152a:	4950      	ldr	r1, [pc, #320]	; (800166c <HAL_RCC_OscConfig+0x278>)
 800152c:	5ccb      	ldrb	r3, [r1, r3]
 800152e:	f003 031f 	and.w	r3, r3, #31
 8001532:	fa22 f303 	lsr.w	r3, r2, r3
 8001536:	4a4e      	ldr	r2, [pc, #312]	; (8001670 <HAL_RCC_OscConfig+0x27c>)
 8001538:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800153a:	4b4e      	ldr	r3, [pc, #312]	; (8001674 <HAL_RCC_OscConfig+0x280>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	4618      	mov	r0, r3
 8001540:	f7ff fbea 	bl	8000d18 <HAL_InitTick>
 8001544:	4603      	mov	r3, r0
 8001546:	75fb      	strb	r3, [r7, #23]
        if(status != HAL_OK)
 8001548:	7dfb      	ldrb	r3, [r7, #23]
 800154a:	2b00      	cmp	r3, #0
 800154c:	d052      	beq.n	80015f4 <HAL_RCC_OscConfig+0x200>
        {
          return status;
 800154e:	7dfb      	ldrb	r3, [r7, #23]
 8001550:	e3a9      	b.n	8001ca6 <HAL_RCC_OscConfig+0x8b2>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	69db      	ldr	r3, [r3, #28]
 8001556:	2b00      	cmp	r3, #0
 8001558:	d032      	beq.n	80015c0 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800155a:	4b43      	ldr	r3, [pc, #268]	; (8001668 <HAL_RCC_OscConfig+0x274>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	4a42      	ldr	r2, [pc, #264]	; (8001668 <HAL_RCC_OscConfig+0x274>)
 8001560:	f043 0301 	orr.w	r3, r3, #1
 8001564:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001566:	f7ff fc27 	bl	8000db8 <HAL_GetTick>
 800156a:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800156c:	e008      	b.n	8001580 <HAL_RCC_OscConfig+0x18c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800156e:	f7ff fc23 	bl	8000db8 <HAL_GetTick>
 8001572:	4602      	mov	r2, r0
 8001574:	69bb      	ldr	r3, [r7, #24]
 8001576:	1ad3      	subs	r3, r2, r3
 8001578:	2b02      	cmp	r3, #2
 800157a:	d901      	bls.n	8001580 <HAL_RCC_OscConfig+0x18c>
          {
            return HAL_TIMEOUT;
 800157c:	2303      	movs	r3, #3
 800157e:	e392      	b.n	8001ca6 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001580:	4b39      	ldr	r3, [pc, #228]	; (8001668 <HAL_RCC_OscConfig+0x274>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	f003 0302 	and.w	r3, r3, #2
 8001588:	2b00      	cmp	r3, #0
 800158a:	d0f0      	beq.n	800156e <HAL_RCC_OscConfig+0x17a>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800158c:	4b36      	ldr	r3, [pc, #216]	; (8001668 <HAL_RCC_OscConfig+0x274>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	4a35      	ldr	r2, [pc, #212]	; (8001668 <HAL_RCC_OscConfig+0x274>)
 8001592:	f043 0308 	orr.w	r3, r3, #8
 8001596:	6013      	str	r3, [r2, #0]
 8001598:	4b33      	ldr	r3, [pc, #204]	; (8001668 <HAL_RCC_OscConfig+0x274>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015a4:	4930      	ldr	r1, [pc, #192]	; (8001668 <HAL_RCC_OscConfig+0x274>)
 80015a6:	4313      	orrs	r3, r2
 80015a8:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80015aa:	4b2f      	ldr	r3, [pc, #188]	; (8001668 <HAL_RCC_OscConfig+0x274>)
 80015ac:	685b      	ldr	r3, [r3, #4]
 80015ae:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	6a1b      	ldr	r3, [r3, #32]
 80015b6:	021b      	lsls	r3, r3, #8
 80015b8:	492b      	ldr	r1, [pc, #172]	; (8001668 <HAL_RCC_OscConfig+0x274>)
 80015ba:	4313      	orrs	r3, r2
 80015bc:	604b      	str	r3, [r1, #4]
 80015be:	e01a      	b.n	80015f6 <HAL_RCC_OscConfig+0x202>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80015c0:	4b29      	ldr	r3, [pc, #164]	; (8001668 <HAL_RCC_OscConfig+0x274>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	4a28      	ldr	r2, [pc, #160]	; (8001668 <HAL_RCC_OscConfig+0x274>)
 80015c6:	f023 0301 	bic.w	r3, r3, #1
 80015ca:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80015cc:	f7ff fbf4 	bl	8000db8 <HAL_GetTick>
 80015d0:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80015d2:	e008      	b.n	80015e6 <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80015d4:	f7ff fbf0 	bl	8000db8 <HAL_GetTick>
 80015d8:	4602      	mov	r2, r0
 80015da:	69bb      	ldr	r3, [r7, #24]
 80015dc:	1ad3      	subs	r3, r2, r3
 80015de:	2b02      	cmp	r3, #2
 80015e0:	d901      	bls.n	80015e6 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80015e2:	2303      	movs	r3, #3
 80015e4:	e35f      	b.n	8001ca6 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80015e6:	4b20      	ldr	r3, [pc, #128]	; (8001668 <HAL_RCC_OscConfig+0x274>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	f003 0302 	and.w	r3, r3, #2
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d1f0      	bne.n	80015d4 <HAL_RCC_OscConfig+0x1e0>
 80015f2:	e000      	b.n	80015f6 <HAL_RCC_OscConfig+0x202>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80015f4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f003 0301 	and.w	r3, r3, #1
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d073      	beq.n	80016ea <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001602:	6a3b      	ldr	r3, [r7, #32]
 8001604:	2b08      	cmp	r3, #8
 8001606:	d005      	beq.n	8001614 <HAL_RCC_OscConfig+0x220>
 8001608:	6a3b      	ldr	r3, [r7, #32]
 800160a:	2b0c      	cmp	r3, #12
 800160c:	d10e      	bne.n	800162c <HAL_RCC_OscConfig+0x238>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800160e:	69fb      	ldr	r3, [r7, #28]
 8001610:	2b03      	cmp	r3, #3
 8001612:	d10b      	bne.n	800162c <HAL_RCC_OscConfig+0x238>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001614:	4b14      	ldr	r3, [pc, #80]	; (8001668 <HAL_RCC_OscConfig+0x274>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800161c:	2b00      	cmp	r3, #0
 800161e:	d063      	beq.n	80016e8 <HAL_RCC_OscConfig+0x2f4>
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	685b      	ldr	r3, [r3, #4]
 8001624:	2b00      	cmp	r3, #0
 8001626:	d15f      	bne.n	80016e8 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 8001628:	2301      	movs	r3, #1
 800162a:	e33c      	b.n	8001ca6 <HAL_RCC_OscConfig+0x8b2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	685b      	ldr	r3, [r3, #4]
 8001630:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001634:	d106      	bne.n	8001644 <HAL_RCC_OscConfig+0x250>
 8001636:	4b0c      	ldr	r3, [pc, #48]	; (8001668 <HAL_RCC_OscConfig+0x274>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	4a0b      	ldr	r2, [pc, #44]	; (8001668 <HAL_RCC_OscConfig+0x274>)
 800163c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001640:	6013      	str	r3, [r2, #0]
 8001642:	e025      	b.n	8001690 <HAL_RCC_OscConfig+0x29c>
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	685b      	ldr	r3, [r3, #4]
 8001648:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800164c:	d114      	bne.n	8001678 <HAL_RCC_OscConfig+0x284>
 800164e:	4b06      	ldr	r3, [pc, #24]	; (8001668 <HAL_RCC_OscConfig+0x274>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	4a05      	ldr	r2, [pc, #20]	; (8001668 <HAL_RCC_OscConfig+0x274>)
 8001654:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001658:	6013      	str	r3, [r2, #0]
 800165a:	4b03      	ldr	r3, [pc, #12]	; (8001668 <HAL_RCC_OscConfig+0x274>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	4a02      	ldr	r2, [pc, #8]	; (8001668 <HAL_RCC_OscConfig+0x274>)
 8001660:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001664:	6013      	str	r3, [r2, #0]
 8001666:	e013      	b.n	8001690 <HAL_RCC_OscConfig+0x29c>
 8001668:	40021000 	.word	0x40021000
 800166c:	08003b34 	.word	0x08003b34
 8001670:	20000000 	.word	0x20000000
 8001674:	20000004 	.word	0x20000004
 8001678:	4b8f      	ldr	r3, [pc, #572]	; (80018b8 <HAL_RCC_OscConfig+0x4c4>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	4a8e      	ldr	r2, [pc, #568]	; (80018b8 <HAL_RCC_OscConfig+0x4c4>)
 800167e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001682:	6013      	str	r3, [r2, #0]
 8001684:	4b8c      	ldr	r3, [pc, #560]	; (80018b8 <HAL_RCC_OscConfig+0x4c4>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	4a8b      	ldr	r2, [pc, #556]	; (80018b8 <HAL_RCC_OscConfig+0x4c4>)
 800168a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800168e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	685b      	ldr	r3, [r3, #4]
 8001694:	2b00      	cmp	r3, #0
 8001696:	d013      	beq.n	80016c0 <HAL_RCC_OscConfig+0x2cc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001698:	f7ff fb8e 	bl	8000db8 <HAL_GetTick>
 800169c:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800169e:	e008      	b.n	80016b2 <HAL_RCC_OscConfig+0x2be>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016a0:	f7ff fb8a 	bl	8000db8 <HAL_GetTick>
 80016a4:	4602      	mov	r2, r0
 80016a6:	69bb      	ldr	r3, [r7, #24]
 80016a8:	1ad3      	subs	r3, r2, r3
 80016aa:	2b64      	cmp	r3, #100	; 0x64
 80016ac:	d901      	bls.n	80016b2 <HAL_RCC_OscConfig+0x2be>
          {
            return HAL_TIMEOUT;
 80016ae:	2303      	movs	r3, #3
 80016b0:	e2f9      	b.n	8001ca6 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80016b2:	4b81      	ldr	r3, [pc, #516]	; (80018b8 <HAL_RCC_OscConfig+0x4c4>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d0f0      	beq.n	80016a0 <HAL_RCC_OscConfig+0x2ac>
 80016be:	e014      	b.n	80016ea <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016c0:	f7ff fb7a 	bl	8000db8 <HAL_GetTick>
 80016c4:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80016c6:	e008      	b.n	80016da <HAL_RCC_OscConfig+0x2e6>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016c8:	f7ff fb76 	bl	8000db8 <HAL_GetTick>
 80016cc:	4602      	mov	r2, r0
 80016ce:	69bb      	ldr	r3, [r7, #24]
 80016d0:	1ad3      	subs	r3, r2, r3
 80016d2:	2b64      	cmp	r3, #100	; 0x64
 80016d4:	d901      	bls.n	80016da <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 80016d6:	2303      	movs	r3, #3
 80016d8:	e2e5      	b.n	8001ca6 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80016da:	4b77      	ldr	r3, [pc, #476]	; (80018b8 <HAL_RCC_OscConfig+0x4c4>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d1f0      	bne.n	80016c8 <HAL_RCC_OscConfig+0x2d4>
 80016e6:	e000      	b.n	80016ea <HAL_RCC_OscConfig+0x2f6>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f003 0302 	and.w	r3, r3, #2
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d060      	beq.n	80017b8 <HAL_RCC_OscConfig+0x3c4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80016f6:	6a3b      	ldr	r3, [r7, #32]
 80016f8:	2b04      	cmp	r3, #4
 80016fa:	d005      	beq.n	8001708 <HAL_RCC_OscConfig+0x314>
 80016fc:	6a3b      	ldr	r3, [r7, #32]
 80016fe:	2b0c      	cmp	r3, #12
 8001700:	d119      	bne.n	8001736 <HAL_RCC_OscConfig+0x342>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001702:	69fb      	ldr	r3, [r7, #28]
 8001704:	2b02      	cmp	r3, #2
 8001706:	d116      	bne.n	8001736 <HAL_RCC_OscConfig+0x342>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001708:	4b6b      	ldr	r3, [pc, #428]	; (80018b8 <HAL_RCC_OscConfig+0x4c4>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001710:	2b00      	cmp	r3, #0
 8001712:	d005      	beq.n	8001720 <HAL_RCC_OscConfig+0x32c>
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	68db      	ldr	r3, [r3, #12]
 8001718:	2b00      	cmp	r3, #0
 800171a:	d101      	bne.n	8001720 <HAL_RCC_OscConfig+0x32c>
      {
        return HAL_ERROR;
 800171c:	2301      	movs	r3, #1
 800171e:	e2c2      	b.n	8001ca6 <HAL_RCC_OscConfig+0x8b2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001720:	4b65      	ldr	r3, [pc, #404]	; (80018b8 <HAL_RCC_OscConfig+0x4c4>)
 8001722:	685b      	ldr	r3, [r3, #4]
 8001724:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	691b      	ldr	r3, [r3, #16]
 800172c:	061b      	lsls	r3, r3, #24
 800172e:	4962      	ldr	r1, [pc, #392]	; (80018b8 <HAL_RCC_OscConfig+0x4c4>)
 8001730:	4313      	orrs	r3, r2
 8001732:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001734:	e040      	b.n	80017b8 <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	68db      	ldr	r3, [r3, #12]
 800173a:	2b00      	cmp	r3, #0
 800173c:	d023      	beq.n	8001786 <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800173e:	4b5e      	ldr	r3, [pc, #376]	; (80018b8 <HAL_RCC_OscConfig+0x4c4>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	4a5d      	ldr	r2, [pc, #372]	; (80018b8 <HAL_RCC_OscConfig+0x4c4>)
 8001744:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001748:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800174a:	f7ff fb35 	bl	8000db8 <HAL_GetTick>
 800174e:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001750:	e008      	b.n	8001764 <HAL_RCC_OscConfig+0x370>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001752:	f7ff fb31 	bl	8000db8 <HAL_GetTick>
 8001756:	4602      	mov	r2, r0
 8001758:	69bb      	ldr	r3, [r7, #24]
 800175a:	1ad3      	subs	r3, r2, r3
 800175c:	2b02      	cmp	r3, #2
 800175e:	d901      	bls.n	8001764 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8001760:	2303      	movs	r3, #3
 8001762:	e2a0      	b.n	8001ca6 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001764:	4b54      	ldr	r3, [pc, #336]	; (80018b8 <HAL_RCC_OscConfig+0x4c4>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800176c:	2b00      	cmp	r3, #0
 800176e:	d0f0      	beq.n	8001752 <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001770:	4b51      	ldr	r3, [pc, #324]	; (80018b8 <HAL_RCC_OscConfig+0x4c4>)
 8001772:	685b      	ldr	r3, [r3, #4]
 8001774:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	691b      	ldr	r3, [r3, #16]
 800177c:	061b      	lsls	r3, r3, #24
 800177e:	494e      	ldr	r1, [pc, #312]	; (80018b8 <HAL_RCC_OscConfig+0x4c4>)
 8001780:	4313      	orrs	r3, r2
 8001782:	604b      	str	r3, [r1, #4]
 8001784:	e018      	b.n	80017b8 <HAL_RCC_OscConfig+0x3c4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001786:	4b4c      	ldr	r3, [pc, #304]	; (80018b8 <HAL_RCC_OscConfig+0x4c4>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	4a4b      	ldr	r2, [pc, #300]	; (80018b8 <HAL_RCC_OscConfig+0x4c4>)
 800178c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001790:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001792:	f7ff fb11 	bl	8000db8 <HAL_GetTick>
 8001796:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001798:	e008      	b.n	80017ac <HAL_RCC_OscConfig+0x3b8>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800179a:	f7ff fb0d 	bl	8000db8 <HAL_GetTick>
 800179e:	4602      	mov	r2, r0
 80017a0:	69bb      	ldr	r3, [r7, #24]
 80017a2:	1ad3      	subs	r3, r2, r3
 80017a4:	2b02      	cmp	r3, #2
 80017a6:	d901      	bls.n	80017ac <HAL_RCC_OscConfig+0x3b8>
          {
            return HAL_TIMEOUT;
 80017a8:	2303      	movs	r3, #3
 80017aa:	e27c      	b.n	8001ca6 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80017ac:	4b42      	ldr	r3, [pc, #264]	; (80018b8 <HAL_RCC_OscConfig+0x4c4>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d1f0      	bne.n	800179a <HAL_RCC_OscConfig+0x3a6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f003 0308 	and.w	r3, r3, #8
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	f000 8082 	beq.w	80018ca <HAL_RCC_OscConfig+0x4d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	695b      	ldr	r3, [r3, #20]
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d05f      	beq.n	800188e <HAL_RCC_OscConfig+0x49a>
    {
#if defined(RCC_CSR_LSIPREDIV)
      uint32_t csr_temp = RCC->CSR;
 80017ce:	4b3a      	ldr	r3, [pc, #232]	; (80018b8 <HAL_RCC_OscConfig+0x4c4>)
 80017d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80017d4:	613b      	str	r3, [r7, #16]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPREDIV))
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	699a      	ldr	r2, [r3, #24]
 80017da:	693b      	ldr	r3, [r7, #16]
 80017dc:	f003 0310 	and.w	r3, r3, #16
 80017e0:	429a      	cmp	r2, r3
 80017e2:	d037      	beq.n	8001854 <HAL_RCC_OscConfig+0x460>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80017e4:	693b      	ldr	r3, [r7, #16]
 80017e6:	f003 0302 	and.w	r3, r3, #2
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d006      	beq.n	80017fc <HAL_RCC_OscConfig+0x408>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 80017ee:	693b      	ldr	r3, [r7, #16]
 80017f0:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d101      	bne.n	80017fc <HAL_RCC_OscConfig+0x408>
        {
           /* If LSIRDY is set while LSION is not enabled,
              LSIPREDIV can't be updated  */
          return HAL_ERROR;
 80017f8:	2301      	movs	r3, #1
 80017fa:	e254      	b.n	8001ca6 <HAL_RCC_OscConfig+0x8b2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPREDIV */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 80017fc:	693b      	ldr	r3, [r7, #16]
 80017fe:	f003 0301 	and.w	r3, r3, #1
 8001802:	2b00      	cmp	r3, #0
 8001804:	d01b      	beq.n	800183e <HAL_RCC_OscConfig+0x44a>
        {
          __HAL_RCC_LSI_DISABLE();
 8001806:	4b2c      	ldr	r3, [pc, #176]	; (80018b8 <HAL_RCC_OscConfig+0x4c4>)
 8001808:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800180c:	4a2a      	ldr	r2, [pc, #168]	; (80018b8 <HAL_RCC_OscConfig+0x4c4>)
 800180e:	f023 0301 	bic.w	r3, r3, #1
 8001812:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001816:	f7ff facf 	bl	8000db8 <HAL_GetTick>
 800181a:	61b8      	str	r0, [r7, #24]

          /* Wait till LSI is disabled */
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800181c:	e008      	b.n	8001830 <HAL_RCC_OscConfig+0x43c>
          {
            if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800181e:	f7ff facb 	bl	8000db8 <HAL_GetTick>
 8001822:	4602      	mov	r2, r0
 8001824:	69bb      	ldr	r3, [r7, #24]
 8001826:	1ad3      	subs	r3, r2, r3
 8001828:	2b11      	cmp	r3, #17
 800182a:	d901      	bls.n	8001830 <HAL_RCC_OscConfig+0x43c>
            {
              return HAL_TIMEOUT;
 800182c:	2303      	movs	r3, #3
 800182e:	e23a      	b.n	8001ca6 <HAL_RCC_OscConfig+0x8b2>
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001830:	4b21      	ldr	r3, [pc, #132]	; (80018b8 <HAL_RCC_OscConfig+0x4c4>)
 8001832:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001836:	f003 0302 	and.w	r3, r3, #2
 800183a:	2b00      	cmp	r3, #0
 800183c:	d1ef      	bne.n	800181e <HAL_RCC_OscConfig+0x42a>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
 800183e:	4b1e      	ldr	r3, [pc, #120]	; (80018b8 <HAL_RCC_OscConfig+0x4c4>)
 8001840:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001844:	f023 0210 	bic.w	r2, r3, #16
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	699b      	ldr	r3, [r3, #24]
 800184c:	491a      	ldr	r1, [pc, #104]	; (80018b8 <HAL_RCC_OscConfig+0x4c4>)
 800184e:	4313      	orrs	r3, r2
 8001850:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001854:	4b18      	ldr	r3, [pc, #96]	; (80018b8 <HAL_RCC_OscConfig+0x4c4>)
 8001856:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800185a:	4a17      	ldr	r2, [pc, #92]	; (80018b8 <HAL_RCC_OscConfig+0x4c4>)
 800185c:	f043 0301 	orr.w	r3, r3, #1
 8001860:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001864:	f7ff faa8 	bl	8000db8 <HAL_GetTick>
 8001868:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800186a:	e008      	b.n	800187e <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800186c:	f7ff faa4 	bl	8000db8 <HAL_GetTick>
 8001870:	4602      	mov	r2, r0
 8001872:	69bb      	ldr	r3, [r7, #24]
 8001874:	1ad3      	subs	r3, r2, r3
 8001876:	2b11      	cmp	r3, #17
 8001878:	d901      	bls.n	800187e <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 800187a:	2303      	movs	r3, #3
 800187c:	e213      	b.n	8001ca6 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800187e:	4b0e      	ldr	r3, [pc, #56]	; (80018b8 <HAL_RCC_OscConfig+0x4c4>)
 8001880:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001884:	f003 0302 	and.w	r3, r3, #2
 8001888:	2b00      	cmp	r3, #0
 800188a:	d0ef      	beq.n	800186c <HAL_RCC_OscConfig+0x478>
 800188c:	e01d      	b.n	80018ca <HAL_RCC_OscConfig+0x4d6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800188e:	4b0a      	ldr	r3, [pc, #40]	; (80018b8 <HAL_RCC_OscConfig+0x4c4>)
 8001890:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001894:	4a08      	ldr	r2, [pc, #32]	; (80018b8 <HAL_RCC_OscConfig+0x4c4>)
 8001896:	f023 0301 	bic.w	r3, r3, #1
 800189a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800189e:	f7ff fa8b 	bl	8000db8 <HAL_GetTick>
 80018a2:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80018a4:	e00a      	b.n	80018bc <HAL_RCC_OscConfig+0x4c8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018a6:	f7ff fa87 	bl	8000db8 <HAL_GetTick>
 80018aa:	4602      	mov	r2, r0
 80018ac:	69bb      	ldr	r3, [r7, #24]
 80018ae:	1ad3      	subs	r3, r2, r3
 80018b0:	2b11      	cmp	r3, #17
 80018b2:	d903      	bls.n	80018bc <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_TIMEOUT;
 80018b4:	2303      	movs	r3, #3
 80018b6:	e1f6      	b.n	8001ca6 <HAL_RCC_OscConfig+0x8b2>
 80018b8:	40021000 	.word	0x40021000
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80018bc:	4ba9      	ldr	r3, [pc, #676]	; (8001b64 <HAL_RCC_OscConfig+0x770>)
 80018be:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80018c2:	f003 0302 	and.w	r3, r3, #2
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d1ed      	bne.n	80018a6 <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f003 0304 	and.w	r3, r3, #4
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	f000 80bd 	beq.w	8001a52 <HAL_RCC_OscConfig+0x65e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80018d8:	2300      	movs	r3, #0
 80018da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80018de:	4ba1      	ldr	r3, [pc, #644]	; (8001b64 <HAL_RCC_OscConfig+0x770>)
 80018e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d10e      	bne.n	8001908 <HAL_RCC_OscConfig+0x514>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80018ea:	4b9e      	ldr	r3, [pc, #632]	; (8001b64 <HAL_RCC_OscConfig+0x770>)
 80018ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018ee:	4a9d      	ldr	r2, [pc, #628]	; (8001b64 <HAL_RCC_OscConfig+0x770>)
 80018f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018f4:	6593      	str	r3, [r2, #88]	; 0x58
 80018f6:	4b9b      	ldr	r3, [pc, #620]	; (8001b64 <HAL_RCC_OscConfig+0x770>)
 80018f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018fe:	60fb      	str	r3, [r7, #12]
 8001900:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001902:	2301      	movs	r3, #1
 8001904:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001908:	4b97      	ldr	r3, [pc, #604]	; (8001b68 <HAL_RCC_OscConfig+0x774>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001910:	2b00      	cmp	r3, #0
 8001912:	d118      	bne.n	8001946 <HAL_RCC_OscConfig+0x552>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001914:	4b94      	ldr	r3, [pc, #592]	; (8001b68 <HAL_RCC_OscConfig+0x774>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	4a93      	ldr	r2, [pc, #588]	; (8001b68 <HAL_RCC_OscConfig+0x774>)
 800191a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800191e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001920:	f7ff fa4a 	bl	8000db8 <HAL_GetTick>
 8001924:	61b8      	str	r0, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001926:	e008      	b.n	800193a <HAL_RCC_OscConfig+0x546>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001928:	f7ff fa46 	bl	8000db8 <HAL_GetTick>
 800192c:	4602      	mov	r2, r0
 800192e:	69bb      	ldr	r3, [r7, #24]
 8001930:	1ad3      	subs	r3, r2, r3
 8001932:	2b02      	cmp	r3, #2
 8001934:	d901      	bls.n	800193a <HAL_RCC_OscConfig+0x546>
        {
          return HAL_TIMEOUT;
 8001936:	2303      	movs	r3, #3
 8001938:	e1b5      	b.n	8001ca6 <HAL_RCC_OscConfig+0x8b2>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800193a:	4b8b      	ldr	r3, [pc, #556]	; (8001b68 <HAL_RCC_OscConfig+0x774>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001942:	2b00      	cmp	r3, #0
 8001944:	d0f0      	beq.n	8001928 <HAL_RCC_OscConfig+0x534>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
#if defined(RCC_BDCR_LSESYSDIS)
    if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	689b      	ldr	r3, [r3, #8]
 800194a:	f003 0301 	and.w	r3, r3, #1
 800194e:	2b00      	cmp	r3, #0
 8001950:	d02c      	beq.n	80019ac <HAL_RCC_OscConfig+0x5b8>
    {
      /* Set LSESYSDIS bit according to LSE propagation option (enabled or disabled) */
      MODIFY_REG(RCC->BDCR, RCC_BDCR_LSESYSDIS, (RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSDIS));
 8001952:	4b84      	ldr	r3, [pc, #528]	; (8001b64 <HAL_RCC_OscConfig+0x770>)
 8001954:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001958:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	689b      	ldr	r3, [r3, #8]
 8001960:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001964:	497f      	ldr	r1, [pc, #508]	; (8001b64 <HAL_RCC_OscConfig+0x770>)
 8001966:	4313      	orrs	r3, r2
 8001968:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

      if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	689b      	ldr	r3, [r3, #8]
 8001970:	f003 0304 	and.w	r3, r3, #4
 8001974:	2b00      	cmp	r3, #0
 8001976:	d010      	beq.n	800199a <HAL_RCC_OscConfig+0x5a6>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001978:	4b7a      	ldr	r3, [pc, #488]	; (8001b64 <HAL_RCC_OscConfig+0x770>)
 800197a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800197e:	4a79      	ldr	r2, [pc, #484]	; (8001b64 <HAL_RCC_OscConfig+0x770>)
 8001980:	f043 0304 	orr.w	r3, r3, #4
 8001984:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001988:	4b76      	ldr	r3, [pc, #472]	; (8001b64 <HAL_RCC_OscConfig+0x770>)
 800198a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800198e:	4a75      	ldr	r2, [pc, #468]	; (8001b64 <HAL_RCC_OscConfig+0x770>)
 8001990:	f043 0301 	orr.w	r3, r3, #1
 8001994:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001998:	e018      	b.n	80019cc <HAL_RCC_OscConfig+0x5d8>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800199a:	4b72      	ldr	r3, [pc, #456]	; (8001b64 <HAL_RCC_OscConfig+0x770>)
 800199c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019a0:	4a70      	ldr	r2, [pc, #448]	; (8001b64 <HAL_RCC_OscConfig+0x770>)
 80019a2:	f043 0301 	orr.w	r3, r3, #1
 80019a6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80019aa:	e00f      	b.n	80019cc <HAL_RCC_OscConfig+0x5d8>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80019ac:	4b6d      	ldr	r3, [pc, #436]	; (8001b64 <HAL_RCC_OscConfig+0x770>)
 80019ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019b2:	4a6c      	ldr	r2, [pc, #432]	; (8001b64 <HAL_RCC_OscConfig+0x770>)
 80019b4:	f023 0301 	bic.w	r3, r3, #1
 80019b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80019bc:	4b69      	ldr	r3, [pc, #420]	; (8001b64 <HAL_RCC_OscConfig+0x770>)
 80019be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019c2:	4a68      	ldr	r2, [pc, #416]	; (8001b64 <HAL_RCC_OscConfig+0x770>)
 80019c4:	f023 0304 	bic.w	r3, r3, #4
 80019c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	689b      	ldr	r3, [r3, #8]
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d016      	beq.n	8001a02 <HAL_RCC_OscConfig+0x60e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019d4:	f7ff f9f0 	bl	8000db8 <HAL_GetTick>
 80019d8:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80019da:	e00a      	b.n	80019f2 <HAL_RCC_OscConfig+0x5fe>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019dc:	f7ff f9ec 	bl	8000db8 <HAL_GetTick>
 80019e0:	4602      	mov	r2, r0
 80019e2:	69bb      	ldr	r3, [r7, #24]
 80019e4:	1ad3      	subs	r3, r2, r3
 80019e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80019ea:	4293      	cmp	r3, r2
 80019ec:	d901      	bls.n	80019f2 <HAL_RCC_OscConfig+0x5fe>
        {
          return HAL_TIMEOUT;
 80019ee:	2303      	movs	r3, #3
 80019f0:	e159      	b.n	8001ca6 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80019f2:	4b5c      	ldr	r3, [pc, #368]	; (8001b64 <HAL_RCC_OscConfig+0x770>)
 80019f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019f8:	f003 0302 	and.w	r3, r3, #2
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d0ed      	beq.n	80019dc <HAL_RCC_OscConfig+0x5e8>
 8001a00:	e01d      	b.n	8001a3e <HAL_RCC_OscConfig+0x64a>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a02:	f7ff f9d9 	bl	8000db8 <HAL_GetTick>
 8001a06:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001a08:	e00a      	b.n	8001a20 <HAL_RCC_OscConfig+0x62c>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a0a:	f7ff f9d5 	bl	8000db8 <HAL_GetTick>
 8001a0e:	4602      	mov	r2, r0
 8001a10:	69bb      	ldr	r3, [r7, #24]
 8001a12:	1ad3      	subs	r3, r2, r3
 8001a14:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a18:	4293      	cmp	r3, r2
 8001a1a:	d901      	bls.n	8001a20 <HAL_RCC_OscConfig+0x62c>
        {
          return HAL_TIMEOUT;
 8001a1c:	2303      	movs	r3, #3
 8001a1e:	e142      	b.n	8001ca6 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001a20:	4b50      	ldr	r3, [pc, #320]	; (8001b64 <HAL_RCC_OscConfig+0x770>)
 8001a22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a26:	f003 0302 	and.w	r3, r3, #2
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d1ed      	bne.n	8001a0a <HAL_RCC_OscConfig+0x616>
        }
      }

#if defined(RCC_BDCR_LSESYSDIS)
      /* By default, stop disabling LSE propagation */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
 8001a2e:	4b4d      	ldr	r3, [pc, #308]	; (8001b64 <HAL_RCC_OscConfig+0x770>)
 8001a30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a34:	4a4b      	ldr	r2, [pc, #300]	; (8001b64 <HAL_RCC_OscConfig+0x770>)
 8001a36:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001a3a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001a3e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001a42:	2b01      	cmp	r3, #1
 8001a44:	d105      	bne.n	8001a52 <HAL_RCC_OscConfig+0x65e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a46:	4b47      	ldr	r3, [pc, #284]	; (8001b64 <HAL_RCC_OscConfig+0x770>)
 8001a48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a4a:	4a46      	ldr	r2, [pc, #280]	; (8001b64 <HAL_RCC_OscConfig+0x770>)
 8001a4c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a50:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f003 0320 	and.w	r3, r3, #32
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d03c      	beq.n	8001ad8 <HAL_RCC_OscConfig+0x6e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d01c      	beq.n	8001aa0 <HAL_RCC_OscConfig+0x6ac>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001a66:	4b3f      	ldr	r3, [pc, #252]	; (8001b64 <HAL_RCC_OscConfig+0x770>)
 8001a68:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001a6c:	4a3d      	ldr	r2, [pc, #244]	; (8001b64 <HAL_RCC_OscConfig+0x770>)
 8001a6e:	f043 0301 	orr.w	r3, r3, #1
 8001a72:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a76:	f7ff f99f 	bl	8000db8 <HAL_GetTick>
 8001a7a:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001a7c:	e008      	b.n	8001a90 <HAL_RCC_OscConfig+0x69c>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001a7e:	f7ff f99b 	bl	8000db8 <HAL_GetTick>
 8001a82:	4602      	mov	r2, r0
 8001a84:	69bb      	ldr	r3, [r7, #24]
 8001a86:	1ad3      	subs	r3, r2, r3
 8001a88:	2b02      	cmp	r3, #2
 8001a8a:	d901      	bls.n	8001a90 <HAL_RCC_OscConfig+0x69c>
        {
          return HAL_TIMEOUT;
 8001a8c:	2303      	movs	r3, #3
 8001a8e:	e10a      	b.n	8001ca6 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001a90:	4b34      	ldr	r3, [pc, #208]	; (8001b64 <HAL_RCC_OscConfig+0x770>)
 8001a92:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001a96:	f003 0302 	and.w	r3, r3, #2
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d0ef      	beq.n	8001a7e <HAL_RCC_OscConfig+0x68a>
 8001a9e:	e01b      	b.n	8001ad8 <HAL_RCC_OscConfig+0x6e4>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001aa0:	4b30      	ldr	r3, [pc, #192]	; (8001b64 <HAL_RCC_OscConfig+0x770>)
 8001aa2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001aa6:	4a2f      	ldr	r2, [pc, #188]	; (8001b64 <HAL_RCC_OscConfig+0x770>)
 8001aa8:	f023 0301 	bic.w	r3, r3, #1
 8001aac:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ab0:	f7ff f982 	bl	8000db8 <HAL_GetTick>
 8001ab4:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001ab6:	e008      	b.n	8001aca <HAL_RCC_OscConfig+0x6d6>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001ab8:	f7ff f97e 	bl	8000db8 <HAL_GetTick>
 8001abc:	4602      	mov	r2, r0
 8001abe:	69bb      	ldr	r3, [r7, #24]
 8001ac0:	1ad3      	subs	r3, r2, r3
 8001ac2:	2b02      	cmp	r3, #2
 8001ac4:	d901      	bls.n	8001aca <HAL_RCC_OscConfig+0x6d6>
        {
          return HAL_TIMEOUT;
 8001ac6:	2303      	movs	r3, #3
 8001ac8:	e0ed      	b.n	8001ca6 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001aca:	4b26      	ldr	r3, [pc, #152]	; (8001b64 <HAL_RCC_OscConfig+0x770>)
 8001acc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001ad0:	f003 0302 	and.w	r3, r3, #2
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d1ef      	bne.n	8001ab8 <HAL_RCC_OscConfig+0x6c4>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	f000 80e1 	beq.w	8001ca4 <HAL_RCC_OscConfig+0x8b0>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ae6:	2b02      	cmp	r3, #2
 8001ae8:	f040 80b5 	bne.w	8001c56 <HAL_RCC_OscConfig+0x862>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001aec:	4b1d      	ldr	r3, [pc, #116]	; (8001b64 <HAL_RCC_OscConfig+0x770>)
 8001aee:	68db      	ldr	r3, [r3, #12]
 8001af0:	61fb      	str	r3, [r7, #28]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001af2:	69fb      	ldr	r3, [r7, #28]
 8001af4:	f003 0203 	and.w	r2, r3, #3
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001afc:	429a      	cmp	r2, r3
 8001afe:	d124      	bne.n	8001b4a <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001b00:	69fb      	ldr	r3, [r7, #28]
 8001b02:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b0a:	3b01      	subs	r3, #1
 8001b0c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b0e:	429a      	cmp	r2, r3
 8001b10:	d11b      	bne.n	8001b4a <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001b12:	69fb      	ldr	r3, [r7, #28]
 8001b14:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b1c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001b1e:	429a      	cmp	r2, r3
 8001b20:	d113      	bne.n	8001b4a <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001b22:	69fb      	ldr	r3, [r7, #28]
 8001b24:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b2c:	085b      	lsrs	r3, r3, #1
 8001b2e:	3b01      	subs	r3, #1
 8001b30:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001b32:	429a      	cmp	r2, r3
 8001b34:	d109      	bne.n	8001b4a <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001b36:	69fb      	ldr	r3, [r7, #28]
 8001b38:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b40:	085b      	lsrs	r3, r3, #1
 8001b42:	3b01      	subs	r3, #1
 8001b44:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001b46:	429a      	cmp	r2, r3
 8001b48:	d05f      	beq.n	8001c0a <HAL_RCC_OscConfig+0x816>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001b4a:	6a3b      	ldr	r3, [r7, #32]
 8001b4c:	2b0c      	cmp	r3, #12
 8001b4e:	d05a      	beq.n	8001c06 <HAL_RCC_OscConfig+0x812>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001b50:	4b04      	ldr	r3, [pc, #16]	; (8001b64 <HAL_RCC_OscConfig+0x770>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	4a03      	ldr	r2, [pc, #12]	; (8001b64 <HAL_RCC_OscConfig+0x770>)
 8001b56:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001b5a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001b5c:	f7ff f92c 	bl	8000db8 <HAL_GetTick>
 8001b60:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b62:	e00c      	b.n	8001b7e <HAL_RCC_OscConfig+0x78a>
 8001b64:	40021000 	.word	0x40021000
 8001b68:	40007000 	.word	0x40007000
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b6c:	f7ff f924 	bl	8000db8 <HAL_GetTick>
 8001b70:	4602      	mov	r2, r0
 8001b72:	69bb      	ldr	r3, [r7, #24]
 8001b74:	1ad3      	subs	r3, r2, r3
 8001b76:	2b02      	cmp	r3, #2
 8001b78:	d901      	bls.n	8001b7e <HAL_RCC_OscConfig+0x78a>
              {
                return HAL_TIMEOUT;
 8001b7a:	2303      	movs	r3, #3
 8001b7c:	e093      	b.n	8001ca6 <HAL_RCC_OscConfig+0x8b2>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b7e:	4b4c      	ldr	r3, [pc, #304]	; (8001cb0 <HAL_RCC_OscConfig+0x8bc>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d1f0      	bne.n	8001b6c <HAL_RCC_OscConfig+0x778>
                                 RCC_OscInitStruct->PLL.PLLN,
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#else
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b8a:	4b49      	ldr	r3, [pc, #292]	; (8001cb0 <HAL_RCC_OscConfig+0x8bc>)
 8001b8c:	68da      	ldr	r2, [r3, #12]
 8001b8e:	4b49      	ldr	r3, [pc, #292]	; (8001cb4 <HAL_RCC_OscConfig+0x8c0>)
 8001b90:	4013      	ands	r3, r2
 8001b92:	687a      	ldr	r2, [r7, #4]
 8001b94:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8001b96:	687a      	ldr	r2, [r7, #4]
 8001b98:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001b9a:	3a01      	subs	r2, #1
 8001b9c:	0112      	lsls	r2, r2, #4
 8001b9e:	4311      	orrs	r1, r2
 8001ba0:	687a      	ldr	r2, [r7, #4]
 8001ba2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001ba4:	0212      	lsls	r2, r2, #8
 8001ba6:	4311      	orrs	r1, r2
 8001ba8:	687a      	ldr	r2, [r7, #4]
 8001baa:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001bac:	0852      	lsrs	r2, r2, #1
 8001bae:	3a01      	subs	r2, #1
 8001bb0:	0552      	lsls	r2, r2, #21
 8001bb2:	4311      	orrs	r1, r2
 8001bb4:	687a      	ldr	r2, [r7, #4]
 8001bb6:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001bb8:	0852      	lsrs	r2, r2, #1
 8001bba:	3a01      	subs	r2, #1
 8001bbc:	0652      	lsls	r2, r2, #25
 8001bbe:	430a      	orrs	r2, r1
 8001bc0:	493b      	ldr	r1, [pc, #236]	; (8001cb0 <HAL_RCC_OscConfig+0x8bc>)
 8001bc2:	4313      	orrs	r3, r2
 8001bc4:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001bc6:	4b3a      	ldr	r3, [pc, #232]	; (8001cb0 <HAL_RCC_OscConfig+0x8bc>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	4a39      	ldr	r2, [pc, #228]	; (8001cb0 <HAL_RCC_OscConfig+0x8bc>)
 8001bcc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001bd0:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001bd2:	4b37      	ldr	r3, [pc, #220]	; (8001cb0 <HAL_RCC_OscConfig+0x8bc>)
 8001bd4:	68db      	ldr	r3, [r3, #12]
 8001bd6:	4a36      	ldr	r2, [pc, #216]	; (8001cb0 <HAL_RCC_OscConfig+0x8bc>)
 8001bd8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001bdc:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001bde:	f7ff f8eb 	bl	8000db8 <HAL_GetTick>
 8001be2:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001be4:	e008      	b.n	8001bf8 <HAL_RCC_OscConfig+0x804>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001be6:	f7ff f8e7 	bl	8000db8 <HAL_GetTick>
 8001bea:	4602      	mov	r2, r0
 8001bec:	69bb      	ldr	r3, [r7, #24]
 8001bee:	1ad3      	subs	r3, r2, r3
 8001bf0:	2b02      	cmp	r3, #2
 8001bf2:	d901      	bls.n	8001bf8 <HAL_RCC_OscConfig+0x804>
              {
                return HAL_TIMEOUT;
 8001bf4:	2303      	movs	r3, #3
 8001bf6:	e056      	b.n	8001ca6 <HAL_RCC_OscConfig+0x8b2>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001bf8:	4b2d      	ldr	r3, [pc, #180]	; (8001cb0 <HAL_RCC_OscConfig+0x8bc>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d0f0      	beq.n	8001be6 <HAL_RCC_OscConfig+0x7f2>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001c04:	e04e      	b.n	8001ca4 <HAL_RCC_OscConfig+0x8b0>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001c06:	2301      	movs	r3, #1
 8001c08:	e04d      	b.n	8001ca6 <HAL_RCC_OscConfig+0x8b2>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c0a:	4b29      	ldr	r3, [pc, #164]	; (8001cb0 <HAL_RCC_OscConfig+0x8bc>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d146      	bne.n	8001ca4 <HAL_RCC_OscConfig+0x8b0>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001c16:	4b26      	ldr	r3, [pc, #152]	; (8001cb0 <HAL_RCC_OscConfig+0x8bc>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	4a25      	ldr	r2, [pc, #148]	; (8001cb0 <HAL_RCC_OscConfig+0x8bc>)
 8001c1c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c20:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001c22:	4b23      	ldr	r3, [pc, #140]	; (8001cb0 <HAL_RCC_OscConfig+0x8bc>)
 8001c24:	68db      	ldr	r3, [r3, #12]
 8001c26:	4a22      	ldr	r2, [pc, #136]	; (8001cb0 <HAL_RCC_OscConfig+0x8bc>)
 8001c28:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c2c:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001c2e:	f7ff f8c3 	bl	8000db8 <HAL_GetTick>
 8001c32:	61b8      	str	r0, [r7, #24]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c34:	e008      	b.n	8001c48 <HAL_RCC_OscConfig+0x854>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c36:	f7ff f8bf 	bl	8000db8 <HAL_GetTick>
 8001c3a:	4602      	mov	r2, r0
 8001c3c:	69bb      	ldr	r3, [r7, #24]
 8001c3e:	1ad3      	subs	r3, r2, r3
 8001c40:	2b02      	cmp	r3, #2
 8001c42:	d901      	bls.n	8001c48 <HAL_RCC_OscConfig+0x854>
            {
              return HAL_TIMEOUT;
 8001c44:	2303      	movs	r3, #3
 8001c46:	e02e      	b.n	8001ca6 <HAL_RCC_OscConfig+0x8b2>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c48:	4b19      	ldr	r3, [pc, #100]	; (8001cb0 <HAL_RCC_OscConfig+0x8bc>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d0f0      	beq.n	8001c36 <HAL_RCC_OscConfig+0x842>
 8001c54:	e026      	b.n	8001ca4 <HAL_RCC_OscConfig+0x8b0>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001c56:	6a3b      	ldr	r3, [r7, #32]
 8001c58:	2b0c      	cmp	r3, #12
 8001c5a:	d021      	beq.n	8001ca0 <HAL_RCC_OscConfig+0x8ac>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c5c:	4b14      	ldr	r3, [pc, #80]	; (8001cb0 <HAL_RCC_OscConfig+0x8bc>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	4a13      	ldr	r2, [pc, #76]	; (8001cb0 <HAL_RCC_OscConfig+0x8bc>)
 8001c62:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001c66:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c68:	f7ff f8a6 	bl	8000db8 <HAL_GetTick>
 8001c6c:	61b8      	str	r0, [r7, #24]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c6e:	e008      	b.n	8001c82 <HAL_RCC_OscConfig+0x88e>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c70:	f7ff f8a2 	bl	8000db8 <HAL_GetTick>
 8001c74:	4602      	mov	r2, r0
 8001c76:	69bb      	ldr	r3, [r7, #24]
 8001c78:	1ad3      	subs	r3, r2, r3
 8001c7a:	2b02      	cmp	r3, #2
 8001c7c:	d901      	bls.n	8001c82 <HAL_RCC_OscConfig+0x88e>
          {
            return HAL_TIMEOUT;
 8001c7e:	2303      	movs	r3, #3
 8001c80:	e011      	b.n	8001ca6 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c82:	4b0b      	ldr	r3, [pc, #44]	; (8001cb0 <HAL_RCC_OscConfig+0x8bc>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d1f0      	bne.n	8001c70 <HAL_RCC_OscConfig+0x87c>
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
 8001c8e:	4b08      	ldr	r3, [pc, #32]	; (8001cb0 <HAL_RCC_OscConfig+0x8bc>)
 8001c90:	68db      	ldr	r3, [r3, #12]
 8001c92:	4a07      	ldr	r2, [pc, #28]	; (8001cb0 <HAL_RCC_OscConfig+0x8bc>)
 8001c94:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001c98:	f023 0303 	bic.w	r3, r3, #3
 8001c9c:	60d3      	str	r3, [r2, #12]
 8001c9e:	e001      	b.n	8001ca4 <HAL_RCC_OscConfig+0x8b0>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001ca0:	2301      	movs	r3, #1
 8001ca2:	e000      	b.n	8001ca6 <HAL_RCC_OscConfig+0x8b2>
      }
    }
  }
  return HAL_OK;
 8001ca4:	2300      	movs	r3, #0
}
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	3728      	adds	r7, #40	; 0x28
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bd80      	pop	{r7, pc}
 8001cae:	bf00      	nop
 8001cb0:	40021000 	.word	0x40021000
 8001cb4:	f99f808c 	.word	0xf99f808c

08001cb8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b084      	sub	sp, #16
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
 8001cc0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d101      	bne.n	8001ccc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001cc8:	2301      	movs	r3, #1
 8001cca:	e0e7      	b.n	8001e9c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001ccc:	4b75      	ldr	r3, [pc, #468]	; (8001ea4 <HAL_RCC_ClockConfig+0x1ec>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f003 0307 	and.w	r3, r3, #7
 8001cd4:	683a      	ldr	r2, [r7, #0]
 8001cd6:	429a      	cmp	r2, r3
 8001cd8:	d910      	bls.n	8001cfc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cda:	4b72      	ldr	r3, [pc, #456]	; (8001ea4 <HAL_RCC_ClockConfig+0x1ec>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f023 0207 	bic.w	r2, r3, #7
 8001ce2:	4970      	ldr	r1, [pc, #448]	; (8001ea4 <HAL_RCC_ClockConfig+0x1ec>)
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	4313      	orrs	r3, r2
 8001ce8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cea:	4b6e      	ldr	r3, [pc, #440]	; (8001ea4 <HAL_RCC_ClockConfig+0x1ec>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f003 0307 	and.w	r3, r3, #7
 8001cf2:	683a      	ldr	r2, [r7, #0]
 8001cf4:	429a      	cmp	r2, r3
 8001cf6:	d001      	beq.n	8001cfc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001cf8:	2301      	movs	r3, #1
 8001cfa:	e0cf      	b.n	8001e9c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f003 0302 	and.w	r3, r3, #2
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d010      	beq.n	8001d2a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	689a      	ldr	r2, [r3, #8]
 8001d0c:	4b66      	ldr	r3, [pc, #408]	; (8001ea8 <HAL_RCC_ClockConfig+0x1f0>)
 8001d0e:	689b      	ldr	r3, [r3, #8]
 8001d10:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001d14:	429a      	cmp	r2, r3
 8001d16:	d908      	bls.n	8001d2a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d18:	4b63      	ldr	r3, [pc, #396]	; (8001ea8 <HAL_RCC_ClockConfig+0x1f0>)
 8001d1a:	689b      	ldr	r3, [r3, #8]
 8001d1c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	689b      	ldr	r3, [r3, #8]
 8001d24:	4960      	ldr	r1, [pc, #384]	; (8001ea8 <HAL_RCC_ClockConfig+0x1f0>)
 8001d26:	4313      	orrs	r3, r2
 8001d28:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f003 0301 	and.w	r3, r3, #1
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d04c      	beq.n	8001dd0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	685b      	ldr	r3, [r3, #4]
 8001d3a:	2b03      	cmp	r3, #3
 8001d3c:	d107      	bne.n	8001d4e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d3e:	4b5a      	ldr	r3, [pc, #360]	; (8001ea8 <HAL_RCC_ClockConfig+0x1f0>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d121      	bne.n	8001d8e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	e0a6      	b.n	8001e9c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	685b      	ldr	r3, [r3, #4]
 8001d52:	2b02      	cmp	r3, #2
 8001d54:	d107      	bne.n	8001d66 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d56:	4b54      	ldr	r3, [pc, #336]	; (8001ea8 <HAL_RCC_ClockConfig+0x1f0>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d115      	bne.n	8001d8e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001d62:	2301      	movs	r3, #1
 8001d64:	e09a      	b.n	8001e9c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	685b      	ldr	r3, [r3, #4]
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d107      	bne.n	8001d7e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001d6e:	4b4e      	ldr	r3, [pc, #312]	; (8001ea8 <HAL_RCC_ClockConfig+0x1f0>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f003 0302 	and.w	r3, r3, #2
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d109      	bne.n	8001d8e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001d7a:	2301      	movs	r3, #1
 8001d7c:	e08e      	b.n	8001e9c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d7e:	4b4a      	ldr	r3, [pc, #296]	; (8001ea8 <HAL_RCC_ClockConfig+0x1f0>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d101      	bne.n	8001d8e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001d8a:	2301      	movs	r3, #1
 8001d8c:	e086      	b.n	8001e9c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001d8e:	4b46      	ldr	r3, [pc, #280]	; (8001ea8 <HAL_RCC_ClockConfig+0x1f0>)
 8001d90:	689b      	ldr	r3, [r3, #8]
 8001d92:	f023 0203 	bic.w	r2, r3, #3
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	685b      	ldr	r3, [r3, #4]
 8001d9a:	4943      	ldr	r1, [pc, #268]	; (8001ea8 <HAL_RCC_ClockConfig+0x1f0>)
 8001d9c:	4313      	orrs	r3, r2
 8001d9e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001da0:	f7ff f80a 	bl	8000db8 <HAL_GetTick>
 8001da4:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001da6:	e00a      	b.n	8001dbe <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001da8:	f7ff f806 	bl	8000db8 <HAL_GetTick>
 8001dac:	4602      	mov	r2, r0
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	1ad3      	subs	r3, r2, r3
 8001db2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001db6:	4293      	cmp	r3, r2
 8001db8:	d901      	bls.n	8001dbe <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001dba:	2303      	movs	r3, #3
 8001dbc:	e06e      	b.n	8001e9c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001dbe:	4b3a      	ldr	r3, [pc, #232]	; (8001ea8 <HAL_RCC_ClockConfig+0x1f0>)
 8001dc0:	689b      	ldr	r3, [r3, #8]
 8001dc2:	f003 020c 	and.w	r2, r3, #12
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	685b      	ldr	r3, [r3, #4]
 8001dca:	009b      	lsls	r3, r3, #2
 8001dcc:	429a      	cmp	r2, r3
 8001dce:	d1eb      	bne.n	8001da8 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f003 0302 	and.w	r3, r3, #2
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d010      	beq.n	8001dfe <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	689a      	ldr	r2, [r3, #8]
 8001de0:	4b31      	ldr	r3, [pc, #196]	; (8001ea8 <HAL_RCC_ClockConfig+0x1f0>)
 8001de2:	689b      	ldr	r3, [r3, #8]
 8001de4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001de8:	429a      	cmp	r2, r3
 8001dea:	d208      	bcs.n	8001dfe <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001dec:	4b2e      	ldr	r3, [pc, #184]	; (8001ea8 <HAL_RCC_ClockConfig+0x1f0>)
 8001dee:	689b      	ldr	r3, [r3, #8]
 8001df0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	689b      	ldr	r3, [r3, #8]
 8001df8:	492b      	ldr	r1, [pc, #172]	; (8001ea8 <HAL_RCC_ClockConfig+0x1f0>)
 8001dfa:	4313      	orrs	r3, r2
 8001dfc:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001dfe:	4b29      	ldr	r3, [pc, #164]	; (8001ea4 <HAL_RCC_ClockConfig+0x1ec>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f003 0307 	and.w	r3, r3, #7
 8001e06:	683a      	ldr	r2, [r7, #0]
 8001e08:	429a      	cmp	r2, r3
 8001e0a:	d210      	bcs.n	8001e2e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e0c:	4b25      	ldr	r3, [pc, #148]	; (8001ea4 <HAL_RCC_ClockConfig+0x1ec>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f023 0207 	bic.w	r2, r3, #7
 8001e14:	4923      	ldr	r1, [pc, #140]	; (8001ea4 <HAL_RCC_ClockConfig+0x1ec>)
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	4313      	orrs	r3, r2
 8001e1a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e1c:	4b21      	ldr	r3, [pc, #132]	; (8001ea4 <HAL_RCC_ClockConfig+0x1ec>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f003 0307 	and.w	r3, r3, #7
 8001e24:	683a      	ldr	r2, [r7, #0]
 8001e26:	429a      	cmp	r2, r3
 8001e28:	d001      	beq.n	8001e2e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001e2a:	2301      	movs	r3, #1
 8001e2c:	e036      	b.n	8001e9c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f003 0304 	and.w	r3, r3, #4
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d008      	beq.n	8001e4c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e3a:	4b1b      	ldr	r3, [pc, #108]	; (8001ea8 <HAL_RCC_ClockConfig+0x1f0>)
 8001e3c:	689b      	ldr	r3, [r3, #8]
 8001e3e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	68db      	ldr	r3, [r3, #12]
 8001e46:	4918      	ldr	r1, [pc, #96]	; (8001ea8 <HAL_RCC_ClockConfig+0x1f0>)
 8001e48:	4313      	orrs	r3, r2
 8001e4a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f003 0308 	and.w	r3, r3, #8
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d009      	beq.n	8001e6c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001e58:	4b13      	ldr	r3, [pc, #76]	; (8001ea8 <HAL_RCC_ClockConfig+0x1f0>)
 8001e5a:	689b      	ldr	r3, [r3, #8]
 8001e5c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	691b      	ldr	r3, [r3, #16]
 8001e64:	00db      	lsls	r3, r3, #3
 8001e66:	4910      	ldr	r1, [pc, #64]	; (8001ea8 <HAL_RCC_ClockConfig+0x1f0>)
 8001e68:	4313      	orrs	r3, r2
 8001e6a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001e6c:	f000 f824 	bl	8001eb8 <HAL_RCC_GetSysClockFreq>
 8001e70:	4602      	mov	r2, r0
 8001e72:	4b0d      	ldr	r3, [pc, #52]	; (8001ea8 <HAL_RCC_ClockConfig+0x1f0>)
 8001e74:	689b      	ldr	r3, [r3, #8]
 8001e76:	091b      	lsrs	r3, r3, #4
 8001e78:	f003 030f 	and.w	r3, r3, #15
 8001e7c:	490b      	ldr	r1, [pc, #44]	; (8001eac <HAL_RCC_ClockConfig+0x1f4>)
 8001e7e:	5ccb      	ldrb	r3, [r1, r3]
 8001e80:	f003 031f 	and.w	r3, r3, #31
 8001e84:	fa22 f303 	lsr.w	r3, r2, r3
 8001e88:	4a09      	ldr	r2, [pc, #36]	; (8001eb0 <HAL_RCC_ClockConfig+0x1f8>)
 8001e8a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001e8c:	4b09      	ldr	r3, [pc, #36]	; (8001eb4 <HAL_RCC_ClockConfig+0x1fc>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	4618      	mov	r0, r3
 8001e92:	f7fe ff41 	bl	8000d18 <HAL_InitTick>
 8001e96:	4603      	mov	r3, r0
 8001e98:	72fb      	strb	r3, [r7, #11]

  return status;
 8001e9a:	7afb      	ldrb	r3, [r7, #11]
}
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	3710      	adds	r7, #16
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	bd80      	pop	{r7, pc}
 8001ea4:	40022000 	.word	0x40022000
 8001ea8:	40021000 	.word	0x40021000
 8001eac:	08003b34 	.word	0x08003b34
 8001eb0:	20000000 	.word	0x20000000
 8001eb4:	20000004 	.word	0x20000004

08001eb8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	b089      	sub	sp, #36	; 0x24
 8001ebc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	61fb      	str	r3, [r7, #28]
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001ec6:	4b3e      	ldr	r3, [pc, #248]	; (8001fc0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ec8:	689b      	ldr	r3, [r3, #8]
 8001eca:	f003 030c 	and.w	r3, r3, #12
 8001ece:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001ed0:	4b3b      	ldr	r3, [pc, #236]	; (8001fc0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ed2:	68db      	ldr	r3, [r3, #12]
 8001ed4:	f003 0303 	and.w	r3, r3, #3
 8001ed8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001eda:	693b      	ldr	r3, [r7, #16]
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d005      	beq.n	8001eec <HAL_RCC_GetSysClockFreq+0x34>
 8001ee0:	693b      	ldr	r3, [r7, #16]
 8001ee2:	2b0c      	cmp	r3, #12
 8001ee4:	d121      	bne.n	8001f2a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	2b01      	cmp	r3, #1
 8001eea:	d11e      	bne.n	8001f2a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001eec:	4b34      	ldr	r3, [pc, #208]	; (8001fc0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f003 0308 	and.w	r3, r3, #8
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d107      	bne.n	8001f08 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001ef8:	4b31      	ldr	r3, [pc, #196]	; (8001fc0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001efa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001efe:	0a1b      	lsrs	r3, r3, #8
 8001f00:	f003 030f 	and.w	r3, r3, #15
 8001f04:	61fb      	str	r3, [r7, #28]
 8001f06:	e005      	b.n	8001f14 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001f08:	4b2d      	ldr	r3, [pc, #180]	; (8001fc0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	091b      	lsrs	r3, r3, #4
 8001f0e:	f003 030f 	and.w	r3, r3, #15
 8001f12:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001f14:	4a2b      	ldr	r2, [pc, #172]	; (8001fc4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001f16:	69fb      	ldr	r3, [r7, #28]
 8001f18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f1c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001f1e:	693b      	ldr	r3, [r7, #16]
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d10d      	bne.n	8001f40 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001f24:	69fb      	ldr	r3, [r7, #28]
 8001f26:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001f28:	e00a      	b.n	8001f40 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001f2a:	693b      	ldr	r3, [r7, #16]
 8001f2c:	2b04      	cmp	r3, #4
 8001f2e:	d102      	bne.n	8001f36 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001f30:	4b25      	ldr	r3, [pc, #148]	; (8001fc8 <HAL_RCC_GetSysClockFreq+0x110>)
 8001f32:	61bb      	str	r3, [r7, #24]
 8001f34:	e004      	b.n	8001f40 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001f36:	693b      	ldr	r3, [r7, #16]
 8001f38:	2b08      	cmp	r3, #8
 8001f3a:	d101      	bne.n	8001f40 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001f3c:	4b23      	ldr	r3, [pc, #140]	; (8001fcc <HAL_RCC_GetSysClockFreq+0x114>)
 8001f3e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001f40:	693b      	ldr	r3, [r7, #16]
 8001f42:	2b0c      	cmp	r3, #12
 8001f44:	d134      	bne.n	8001fb0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001f46:	4b1e      	ldr	r3, [pc, #120]	; (8001fc0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f48:	68db      	ldr	r3, [r3, #12]
 8001f4a:	f003 0303 	and.w	r3, r3, #3
 8001f4e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001f50:	68bb      	ldr	r3, [r7, #8]
 8001f52:	2b02      	cmp	r3, #2
 8001f54:	d003      	beq.n	8001f5e <HAL_RCC_GetSysClockFreq+0xa6>
 8001f56:	68bb      	ldr	r3, [r7, #8]
 8001f58:	2b03      	cmp	r3, #3
 8001f5a:	d003      	beq.n	8001f64 <HAL_RCC_GetSysClockFreq+0xac>
 8001f5c:	e005      	b.n	8001f6a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001f5e:	4b1a      	ldr	r3, [pc, #104]	; (8001fc8 <HAL_RCC_GetSysClockFreq+0x110>)
 8001f60:	617b      	str	r3, [r7, #20]
      break;
 8001f62:	e005      	b.n	8001f70 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001f64:	4b19      	ldr	r3, [pc, #100]	; (8001fcc <HAL_RCC_GetSysClockFreq+0x114>)
 8001f66:	617b      	str	r3, [r7, #20]
      break;
 8001f68:	e002      	b.n	8001f70 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001f6a:	69fb      	ldr	r3, [r7, #28]
 8001f6c:	617b      	str	r3, [r7, #20]
      break;
 8001f6e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001f70:	4b13      	ldr	r3, [pc, #76]	; (8001fc0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f72:	68db      	ldr	r3, [r3, #12]
 8001f74:	091b      	lsrs	r3, r3, #4
 8001f76:	f003 0307 	and.w	r3, r3, #7
 8001f7a:	3301      	adds	r3, #1
 8001f7c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001f7e:	4b10      	ldr	r3, [pc, #64]	; (8001fc0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f80:	68db      	ldr	r3, [r3, #12]
 8001f82:	0a1b      	lsrs	r3, r3, #8
 8001f84:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001f88:	697a      	ldr	r2, [r7, #20]
 8001f8a:	fb03 f202 	mul.w	r2, r3, r2
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f94:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001f96:	4b0a      	ldr	r3, [pc, #40]	; (8001fc0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f98:	68db      	ldr	r3, [r3, #12]
 8001f9a:	0e5b      	lsrs	r3, r3, #25
 8001f9c:	f003 0303 	and.w	r3, r3, #3
 8001fa0:	3301      	adds	r3, #1
 8001fa2:	005b      	lsls	r3, r3, #1
 8001fa4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001fa6:	697a      	ldr	r2, [r7, #20]
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fae:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001fb0:	69bb      	ldr	r3, [r7, #24]
}
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	3724      	adds	r7, #36	; 0x24
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbc:	4770      	bx	lr
 8001fbe:	bf00      	nop
 8001fc0:	40021000 	.word	0x40021000
 8001fc4:	08003b4c 	.word	0x08003b4c
 8001fc8:	00f42400 	.word	0x00f42400
 8001fcc:	007a1200 	.word	0x007a1200

08001fd0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001fd4:	4b03      	ldr	r3, [pc, #12]	; (8001fe4 <HAL_RCC_GetHCLKFreq+0x14>)
 8001fd6:	681b      	ldr	r3, [r3, #0]
}
 8001fd8:	4618      	mov	r0, r3
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe0:	4770      	bx	lr
 8001fe2:	bf00      	nop
 8001fe4:	20000000 	.word	0x20000000

08001fe8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001fec:	f7ff fff0 	bl	8001fd0 <HAL_RCC_GetHCLKFreq>
 8001ff0:	4602      	mov	r2, r0
 8001ff2:	4b06      	ldr	r3, [pc, #24]	; (800200c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001ff4:	689b      	ldr	r3, [r3, #8]
 8001ff6:	0a1b      	lsrs	r3, r3, #8
 8001ff8:	f003 0307 	and.w	r3, r3, #7
 8001ffc:	4904      	ldr	r1, [pc, #16]	; (8002010 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001ffe:	5ccb      	ldrb	r3, [r1, r3]
 8002000:	f003 031f 	and.w	r3, r3, #31
 8002004:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002008:	4618      	mov	r0, r3
 800200a:	bd80      	pop	{r7, pc}
 800200c:	40021000 	.word	0x40021000
 8002010:	08003b44 	.word	0x08003b44

08002014 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002018:	f7ff ffda 	bl	8001fd0 <HAL_RCC_GetHCLKFreq>
 800201c:	4602      	mov	r2, r0
 800201e:	4b06      	ldr	r3, [pc, #24]	; (8002038 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002020:	689b      	ldr	r3, [r3, #8]
 8002022:	0adb      	lsrs	r3, r3, #11
 8002024:	f003 0307 	and.w	r3, r3, #7
 8002028:	4904      	ldr	r1, [pc, #16]	; (800203c <HAL_RCC_GetPCLK2Freq+0x28>)
 800202a:	5ccb      	ldrb	r3, [r1, r3]
 800202c:	f003 031f 	and.w	r3, r3, #31
 8002030:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002034:	4618      	mov	r0, r3
 8002036:	bd80      	pop	{r7, pc}
 8002038:	40021000 	.word	0x40021000
 800203c:	08003b44 	.word	0x08003b44

08002040 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b086      	sub	sp, #24
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002048:	2300      	movs	r3, #0
 800204a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800204c:	4b2a      	ldr	r3, [pc, #168]	; (80020f8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800204e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002050:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002054:	2b00      	cmp	r3, #0
 8002056:	d003      	beq.n	8002060 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002058:	f7ff f968 	bl	800132c <HAL_PWREx_GetVoltageRange>
 800205c:	6178      	str	r0, [r7, #20]
 800205e:	e014      	b.n	800208a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002060:	4b25      	ldr	r3, [pc, #148]	; (80020f8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002062:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002064:	4a24      	ldr	r2, [pc, #144]	; (80020f8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002066:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800206a:	6593      	str	r3, [r2, #88]	; 0x58
 800206c:	4b22      	ldr	r3, [pc, #136]	; (80020f8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800206e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002070:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002074:	60fb      	str	r3, [r7, #12]
 8002076:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002078:	f7ff f958 	bl	800132c <HAL_PWREx_GetVoltageRange>
 800207c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800207e:	4b1e      	ldr	r3, [pc, #120]	; (80020f8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002080:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002082:	4a1d      	ldr	r2, [pc, #116]	; (80020f8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002084:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002088:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800208a:	697b      	ldr	r3, [r7, #20]
 800208c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002090:	d10b      	bne.n	80020aa <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	2b80      	cmp	r3, #128	; 0x80
 8002096:	d919      	bls.n	80020cc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	2ba0      	cmp	r3, #160	; 0xa0
 800209c:	d902      	bls.n	80020a4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800209e:	2302      	movs	r3, #2
 80020a0:	613b      	str	r3, [r7, #16]
 80020a2:	e013      	b.n	80020cc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80020a4:	2301      	movs	r3, #1
 80020a6:	613b      	str	r3, [r7, #16]
 80020a8:	e010      	b.n	80020cc <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	2b80      	cmp	r3, #128	; 0x80
 80020ae:	d902      	bls.n	80020b6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80020b0:	2303      	movs	r3, #3
 80020b2:	613b      	str	r3, [r7, #16]
 80020b4:	e00a      	b.n	80020cc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	2b80      	cmp	r3, #128	; 0x80
 80020ba:	d102      	bne.n	80020c2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80020bc:	2302      	movs	r3, #2
 80020be:	613b      	str	r3, [r7, #16]
 80020c0:	e004      	b.n	80020cc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	2b70      	cmp	r3, #112	; 0x70
 80020c6:	d101      	bne.n	80020cc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80020c8:	2301      	movs	r3, #1
 80020ca:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80020cc:	4b0b      	ldr	r3, [pc, #44]	; (80020fc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f023 0207 	bic.w	r2, r3, #7
 80020d4:	4909      	ldr	r1, [pc, #36]	; (80020fc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80020d6:	693b      	ldr	r3, [r7, #16]
 80020d8:	4313      	orrs	r3, r2
 80020da:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80020dc:	4b07      	ldr	r3, [pc, #28]	; (80020fc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f003 0307 	and.w	r3, r3, #7
 80020e4:	693a      	ldr	r2, [r7, #16]
 80020e6:	429a      	cmp	r2, r3
 80020e8:	d001      	beq.n	80020ee <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80020ea:	2301      	movs	r3, #1
 80020ec:	e000      	b.n	80020f0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80020ee:	2300      	movs	r3, #0
}
 80020f0:	4618      	mov	r0, r3
 80020f2:	3718      	adds	r7, #24
 80020f4:	46bd      	mov	sp, r7
 80020f6:	bd80      	pop	{r7, pc}
 80020f8:	40021000 	.word	0x40021000
 80020fc:	40022000 	.word	0x40022000

08002100 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b086      	sub	sp, #24
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002108:	2300      	movs	r3, #0
 800210a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800210c:	2300      	movs	r3, #0
 800210e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002118:	2b00      	cmp	r3, #0
 800211a:	f000 809e 	beq.w	800225a <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800211e:	2300      	movs	r3, #0
 8002120:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002122:	4b46      	ldr	r3, [pc, #280]	; (800223c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002124:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002126:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800212a:	2b00      	cmp	r3, #0
 800212c:	d101      	bne.n	8002132 <HAL_RCCEx_PeriphCLKConfig+0x32>
 800212e:	2301      	movs	r3, #1
 8002130:	e000      	b.n	8002134 <HAL_RCCEx_PeriphCLKConfig+0x34>
 8002132:	2300      	movs	r3, #0
 8002134:	2b00      	cmp	r3, #0
 8002136:	d00d      	beq.n	8002154 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002138:	4b40      	ldr	r3, [pc, #256]	; (800223c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800213a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800213c:	4a3f      	ldr	r2, [pc, #252]	; (800223c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800213e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002142:	6593      	str	r3, [r2, #88]	; 0x58
 8002144:	4b3d      	ldr	r3, [pc, #244]	; (800223c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002146:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002148:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800214c:	60bb      	str	r3, [r7, #8]
 800214e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002150:	2301      	movs	r3, #1
 8002152:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002154:	4b3a      	ldr	r3, [pc, #232]	; (8002240 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	4a39      	ldr	r2, [pc, #228]	; (8002240 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 800215a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800215e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002160:	f7fe fe2a 	bl	8000db8 <HAL_GetTick>
 8002164:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002166:	e009      	b.n	800217c <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002168:	f7fe fe26 	bl	8000db8 <HAL_GetTick>
 800216c:	4602      	mov	r2, r0
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	1ad3      	subs	r3, r2, r3
 8002172:	2b02      	cmp	r3, #2
 8002174:	d902      	bls.n	800217c <HAL_RCCEx_PeriphCLKConfig+0x7c>
      {
        ret = HAL_TIMEOUT;
 8002176:	2303      	movs	r3, #3
 8002178:	74fb      	strb	r3, [r7, #19]
        break;
 800217a:	e005      	b.n	8002188 <HAL_RCCEx_PeriphCLKConfig+0x88>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800217c:	4b30      	ldr	r3, [pc, #192]	; (8002240 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002184:	2b00      	cmp	r3, #0
 8002186:	d0ef      	beq.n	8002168 <HAL_RCCEx_PeriphCLKConfig+0x68>
      }
    }

    if(ret == HAL_OK)
 8002188:	7cfb      	ldrb	r3, [r7, #19]
 800218a:	2b00      	cmp	r3, #0
 800218c:	d15a      	bne.n	8002244 <HAL_RCCEx_PeriphCLKConfig+0x144>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800218e:	4b2b      	ldr	r3, [pc, #172]	; (800223c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002190:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002194:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002198:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800219a:	697b      	ldr	r3, [r7, #20]
 800219c:	2b00      	cmp	r3, #0
 800219e:	d01e      	beq.n	80021de <HAL_RCCEx_PeriphCLKConfig+0xde>
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021a4:	697a      	ldr	r2, [r7, #20]
 80021a6:	429a      	cmp	r2, r3
 80021a8:	d019      	beq.n	80021de <HAL_RCCEx_PeriphCLKConfig+0xde>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80021aa:	4b24      	ldr	r3, [pc, #144]	; (800223c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80021ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80021b4:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80021b6:	4b21      	ldr	r3, [pc, #132]	; (800223c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80021b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021bc:	4a1f      	ldr	r2, [pc, #124]	; (800223c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80021be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021c2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80021c6:	4b1d      	ldr	r3, [pc, #116]	; (800223c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80021c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021cc:	4a1b      	ldr	r2, [pc, #108]	; (800223c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80021ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021d2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80021d6:	4a19      	ldr	r2, [pc, #100]	; (800223c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80021d8:	697b      	ldr	r3, [r7, #20]
 80021da:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80021de:	697b      	ldr	r3, [r7, #20]
 80021e0:	f003 0301 	and.w	r3, r3, #1
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d016      	beq.n	8002216 <HAL_RCCEx_PeriphCLKConfig+0x116>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021e8:	f7fe fde6 	bl	8000db8 <HAL_GetTick>
 80021ec:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80021ee:	e00b      	b.n	8002208 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021f0:	f7fe fde2 	bl	8000db8 <HAL_GetTick>
 80021f4:	4602      	mov	r2, r0
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	1ad3      	subs	r3, r2, r3
 80021fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80021fe:	4293      	cmp	r3, r2
 8002200:	d902      	bls.n	8002208 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            ret = HAL_TIMEOUT;
 8002202:	2303      	movs	r3, #3
 8002204:	74fb      	strb	r3, [r7, #19]
            break;
 8002206:	e006      	b.n	8002216 <HAL_RCCEx_PeriphCLKConfig+0x116>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002208:	4b0c      	ldr	r3, [pc, #48]	; (800223c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800220a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800220e:	f003 0302 	and.w	r3, r3, #2
 8002212:	2b00      	cmp	r3, #0
 8002214:	d0ec      	beq.n	80021f0 <HAL_RCCEx_PeriphCLKConfig+0xf0>
          }
        }
      }

      if(ret == HAL_OK)
 8002216:	7cfb      	ldrb	r3, [r7, #19]
 8002218:	2b00      	cmp	r3, #0
 800221a:	d10b      	bne.n	8002234 <HAL_RCCEx_PeriphCLKConfig+0x134>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800221c:	4b07      	ldr	r3, [pc, #28]	; (800223c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800221e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002222:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800222a:	4904      	ldr	r1, [pc, #16]	; (800223c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800222c:	4313      	orrs	r3, r2
 800222e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002232:	e009      	b.n	8002248 <HAL_RCCEx_PeriphCLKConfig+0x148>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002234:	7cfb      	ldrb	r3, [r7, #19]
 8002236:	74bb      	strb	r3, [r7, #18]
 8002238:	e006      	b.n	8002248 <HAL_RCCEx_PeriphCLKConfig+0x148>
 800223a:	bf00      	nop
 800223c:	40021000 	.word	0x40021000
 8002240:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002244:	7cfb      	ldrb	r3, [r7, #19]
 8002246:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002248:	7c7b      	ldrb	r3, [r7, #17]
 800224a:	2b01      	cmp	r3, #1
 800224c:	d105      	bne.n	800225a <HAL_RCCEx_PeriphCLKConfig+0x15a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800224e:	4b6e      	ldr	r3, [pc, #440]	; (8002408 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002250:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002252:	4a6d      	ldr	r2, [pc, #436]	; (8002408 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002254:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002258:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f003 0301 	and.w	r3, r3, #1
 8002262:	2b00      	cmp	r3, #0
 8002264:	d00a      	beq.n	800227c <HAL_RCCEx_PeriphCLKConfig+0x17c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002266:	4b68      	ldr	r3, [pc, #416]	; (8002408 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002268:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800226c:	f023 0203 	bic.w	r2, r3, #3
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	685b      	ldr	r3, [r3, #4]
 8002274:	4964      	ldr	r1, [pc, #400]	; (8002408 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002276:	4313      	orrs	r3, r2
 8002278:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f003 0302 	and.w	r3, r3, #2
 8002284:	2b00      	cmp	r3, #0
 8002286:	d00a      	beq.n	800229e <HAL_RCCEx_PeriphCLKConfig+0x19e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002288:	4b5f      	ldr	r3, [pc, #380]	; (8002408 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800228a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800228e:	f023 020c 	bic.w	r2, r3, #12
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	689b      	ldr	r3, [r3, #8]
 8002296:	495c      	ldr	r1, [pc, #368]	; (8002408 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002298:	4313      	orrs	r3, r2
 800229a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f003 0304 	and.w	r3, r3, #4
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d00a      	beq.n	80022c0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80022aa:	4b57      	ldr	r3, [pc, #348]	; (8002408 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80022ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022b0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	68db      	ldr	r3, [r3, #12]
 80022b8:	4953      	ldr	r1, [pc, #332]	; (8002408 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80022ba:	4313      	orrs	r3, r2
 80022bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f003 0320 	and.w	r3, r3, #32
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d00a      	beq.n	80022e2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80022cc:	4b4e      	ldr	r3, [pc, #312]	; (8002408 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80022ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022d2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	691b      	ldr	r3, [r3, #16]
 80022da:	494b      	ldr	r1, [pc, #300]	; (8002408 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80022dc:	4313      	orrs	r3, r2
 80022de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d00a      	beq.n	8002304 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80022ee:	4b46      	ldr	r3, [pc, #280]	; (8002408 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80022f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022f4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	6a1b      	ldr	r3, [r3, #32]
 80022fc:	4942      	ldr	r1, [pc, #264]	; (8002408 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80022fe:	4313      	orrs	r3, r2
 8002300:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800230c:	2b00      	cmp	r3, #0
 800230e:	d00a      	beq.n	8002326 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002310:	4b3d      	ldr	r3, [pc, #244]	; (8002408 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002312:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002316:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800231e:	493a      	ldr	r1, [pc, #232]	; (8002408 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002320:	4313      	orrs	r3, r2
 8002322:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800232e:	2b00      	cmp	r3, #0
 8002330:	d00a      	beq.n	8002348 <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002332:	4b35      	ldr	r3, [pc, #212]	; (8002408 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002334:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002338:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	695b      	ldr	r3, [r3, #20]
 8002340:	4931      	ldr	r1, [pc, #196]	; (8002408 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002342:	4313      	orrs	r3, r2
 8002344:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002350:	2b00      	cmp	r3, #0
 8002352:	d00a      	beq.n	800236a <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002354:	4b2c      	ldr	r3, [pc, #176]	; (8002408 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002356:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800235a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	699b      	ldr	r3, [r3, #24]
 8002362:	4929      	ldr	r1, [pc, #164]	; (8002408 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002364:	4313      	orrs	r3, r2
 8002366:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002372:	2b00      	cmp	r3, #0
 8002374:	d00a      	beq.n	800238c <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002376:	4b24      	ldr	r3, [pc, #144]	; (8002408 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002378:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800237c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	69db      	ldr	r3, [r3, #28]
 8002384:	4920      	ldr	r1, [pc, #128]	; (8002408 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002386:	4313      	orrs	r3, r2
 8002388:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002394:	2b00      	cmp	r3, #0
 8002396:	d015      	beq.n	80023c4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002398:	4b1b      	ldr	r3, [pc, #108]	; (8002408 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800239a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800239e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023a6:	4918      	ldr	r1, [pc, #96]	; (8002408 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80023a8:	4313      	orrs	r3, r2
 80023aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023b2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80023b6:	d105      	bne.n	80023c4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80023b8:	4b13      	ldr	r3, [pc, #76]	; (8002408 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80023ba:	68db      	ldr	r3, [r3, #12]
 80023bc:	4a12      	ldr	r2, [pc, #72]	; (8002408 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80023be:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80023c2:	60d3      	str	r3, [r2, #12]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d015      	beq.n	80023fc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80023d0:	4b0d      	ldr	r3, [pc, #52]	; (8002408 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80023d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023d6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023de:	490a      	ldr	r1, [pc, #40]	; (8002408 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80023e0:	4313      	orrs	r3, r2
 80023e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023ea:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80023ee:	d105      	bne.n	80023fc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80023f0:	4b05      	ldr	r3, [pc, #20]	; (8002408 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80023f2:	68db      	ldr	r3, [r3, #12]
 80023f4:	4a04      	ldr	r2, [pc, #16]	; (8002408 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80023f6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80023fa:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80023fc:	7cbb      	ldrb	r3, [r7, #18]
}
 80023fe:	4618      	mov	r0, r3
 8002400:	3718      	adds	r7, #24
 8002402:	46bd      	mov	sp, r7
 8002404:	bd80      	pop	{r7, pc}
 8002406:	bf00      	nop
 8002408:	40021000 	.word	0x40021000

0800240c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b082      	sub	sp, #8
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2b00      	cmp	r3, #0
 8002418:	d101      	bne.n	800241e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800241a:	2301      	movs	r3, #1
 800241c:	e040      	b.n	80024a0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002422:	2b00      	cmp	r3, #0
 8002424:	d106      	bne.n	8002434 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	2200      	movs	r2, #0
 800242a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800242e:	6878      	ldr	r0, [r7, #4]
 8002430:	f7fe fa28 	bl	8000884 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	2224      	movs	r2, #36	; 0x24
 8002438:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	681a      	ldr	r2, [r3, #0]
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f022 0201 	bic.w	r2, r2, #1
 8002448:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800244a:	6878      	ldr	r0, [r7, #4]
 800244c:	f000 f992 	bl	8002774 <UART_SetConfig>
 8002450:	4603      	mov	r3, r0
 8002452:	2b01      	cmp	r3, #1
 8002454:	d101      	bne.n	800245a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002456:	2301      	movs	r3, #1
 8002458:	e022      	b.n	80024a0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800245e:	2b00      	cmp	r3, #0
 8002460:	d002      	beq.n	8002468 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002462:	6878      	ldr	r0, [r7, #4]
 8002464:	f000 fbe0 	bl	8002c28 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	685a      	ldr	r2, [r3, #4]
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002476:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	689a      	ldr	r2, [r3, #8]
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002486:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	681a      	ldr	r2, [r3, #0]
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f042 0201 	orr.w	r2, r2, #1
 8002496:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002498:	6878      	ldr	r0, [r7, #4]
 800249a:	f000 fc67 	bl	8002d6c <UART_CheckIdleState>
 800249e:	4603      	mov	r3, r0
}
 80024a0:	4618      	mov	r0, r3
 80024a2:	3708      	adds	r7, #8
 80024a4:	46bd      	mov	sp, r7
 80024a6:	bd80      	pop	{r7, pc}

080024a8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b08a      	sub	sp, #40	; 0x28
 80024ac:	af02      	add	r7, sp, #8
 80024ae:	60f8      	str	r0, [r7, #12]
 80024b0:	60b9      	str	r1, [r7, #8]
 80024b2:	603b      	str	r3, [r7, #0]
 80024b4:	4613      	mov	r3, r2
 80024b6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80024bc:	2b20      	cmp	r3, #32
 80024be:	f040 8082 	bne.w	80025c6 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 80024c2:	68bb      	ldr	r3, [r7, #8]
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d002      	beq.n	80024ce <HAL_UART_Transmit+0x26>
 80024c8:	88fb      	ldrh	r3, [r7, #6]
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d101      	bne.n	80024d2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80024ce:	2301      	movs	r3, #1
 80024d0:	e07a      	b.n	80025c8 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80024d8:	2b01      	cmp	r3, #1
 80024da:	d101      	bne.n	80024e0 <HAL_UART_Transmit+0x38>
 80024dc:	2302      	movs	r3, #2
 80024de:	e073      	b.n	80025c8 <HAL_UART_Transmit+0x120>
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	2201      	movs	r2, #1
 80024e4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	2200      	movs	r2, #0
 80024ec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	2221      	movs	r2, #33	; 0x21
 80024f4:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80024f6:	f7fe fc5f 	bl	8000db8 <HAL_GetTick>
 80024fa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	88fa      	ldrh	r2, [r7, #6]
 8002500:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	88fa      	ldrh	r2, [r7, #6]
 8002508:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	689b      	ldr	r3, [r3, #8]
 8002510:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002514:	d108      	bne.n	8002528 <HAL_UART_Transmit+0x80>
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	691b      	ldr	r3, [r3, #16]
 800251a:	2b00      	cmp	r3, #0
 800251c:	d104      	bne.n	8002528 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800251e:	2300      	movs	r3, #0
 8002520:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002522:	68bb      	ldr	r3, [r7, #8]
 8002524:	61bb      	str	r3, [r7, #24]
 8002526:	e003      	b.n	8002530 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8002528:	68bb      	ldr	r3, [r7, #8]
 800252a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800252c:	2300      	movs	r3, #0
 800252e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	2200      	movs	r2, #0
 8002534:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8002538:	e02d      	b.n	8002596 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	9300      	str	r3, [sp, #0]
 800253e:	697b      	ldr	r3, [r7, #20]
 8002540:	2200      	movs	r2, #0
 8002542:	2180      	movs	r1, #128	; 0x80
 8002544:	68f8      	ldr	r0, [r7, #12]
 8002546:	f000 fc5a 	bl	8002dfe <UART_WaitOnFlagUntilTimeout>
 800254a:	4603      	mov	r3, r0
 800254c:	2b00      	cmp	r3, #0
 800254e:	d001      	beq.n	8002554 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8002550:	2303      	movs	r3, #3
 8002552:	e039      	b.n	80025c8 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8002554:	69fb      	ldr	r3, [r7, #28]
 8002556:	2b00      	cmp	r3, #0
 8002558:	d10b      	bne.n	8002572 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800255a:	69bb      	ldr	r3, [r7, #24]
 800255c:	881a      	ldrh	r2, [r3, #0]
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002566:	b292      	uxth	r2, r2
 8002568:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800256a:	69bb      	ldr	r3, [r7, #24]
 800256c:	3302      	adds	r3, #2
 800256e:	61bb      	str	r3, [r7, #24]
 8002570:	e008      	b.n	8002584 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002572:	69fb      	ldr	r3, [r7, #28]
 8002574:	781a      	ldrb	r2, [r3, #0]
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	b292      	uxth	r2, r2
 800257c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800257e:	69fb      	ldr	r3, [r7, #28]
 8002580:	3301      	adds	r3, #1
 8002582:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800258a:	b29b      	uxth	r3, r3
 800258c:	3b01      	subs	r3, #1
 800258e:	b29a      	uxth	r2, r3
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800259c:	b29b      	uxth	r3, r3
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d1cb      	bne.n	800253a <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80025a2:	683b      	ldr	r3, [r7, #0]
 80025a4:	9300      	str	r3, [sp, #0]
 80025a6:	697b      	ldr	r3, [r7, #20]
 80025a8:	2200      	movs	r2, #0
 80025aa:	2140      	movs	r1, #64	; 0x40
 80025ac:	68f8      	ldr	r0, [r7, #12]
 80025ae:	f000 fc26 	bl	8002dfe <UART_WaitOnFlagUntilTimeout>
 80025b2:	4603      	mov	r3, r0
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d001      	beq.n	80025bc <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80025b8:	2303      	movs	r3, #3
 80025ba:	e005      	b.n	80025c8 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	2220      	movs	r2, #32
 80025c0:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80025c2:	2300      	movs	r3, #0
 80025c4:	e000      	b.n	80025c8 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 80025c6:	2302      	movs	r3, #2
  }
}
 80025c8:	4618      	mov	r0, r3
 80025ca:	3720      	adds	r7, #32
 80025cc:	46bd      	mov	sp, r7
 80025ce:	bd80      	pop	{r7, pc}

080025d0 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b08a      	sub	sp, #40	; 0x28
 80025d4:	af02      	add	r7, sp, #8
 80025d6:	60f8      	str	r0, [r7, #12]
 80025d8:	60b9      	str	r1, [r7, #8]
 80025da:	603b      	str	r3, [r7, #0]
 80025dc:	4613      	mov	r3, r2
 80025de:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80025e4:	2b20      	cmp	r3, #32
 80025e6:	f040 80bf 	bne.w	8002768 <HAL_UART_Receive+0x198>
  {
    if ((pData == NULL) || (Size == 0U))
 80025ea:	68bb      	ldr	r3, [r7, #8]
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d002      	beq.n	80025f6 <HAL_UART_Receive+0x26>
 80025f0:	88fb      	ldrh	r3, [r7, #6]
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d101      	bne.n	80025fa <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 80025f6:	2301      	movs	r3, #1
 80025f8:	e0b7      	b.n	800276a <HAL_UART_Receive+0x19a>
    }

    __HAL_LOCK(huart);
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8002600:	2b01      	cmp	r3, #1
 8002602:	d101      	bne.n	8002608 <HAL_UART_Receive+0x38>
 8002604:	2302      	movs	r3, #2
 8002606:	e0b0      	b.n	800276a <HAL_UART_Receive+0x19a>
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	2201      	movs	r2, #1
 800260c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	2200      	movs	r2, #0
 8002614:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	2222      	movs	r2, #34	; 0x22
 800261c:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	2200      	movs	r2, #0
 8002622:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002624:	f7fe fbc8 	bl	8000db8 <HAL_GetTick>
 8002628:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	88fa      	ldrh	r2, [r7, #6]
 800262e:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	88fa      	ldrh	r2, [r7, #6]
 8002636:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	689b      	ldr	r3, [r3, #8]
 800263e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002642:	d10e      	bne.n	8002662 <HAL_UART_Receive+0x92>
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	691b      	ldr	r3, [r3, #16]
 8002648:	2b00      	cmp	r3, #0
 800264a:	d105      	bne.n	8002658 <HAL_UART_Receive+0x88>
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8002652:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002656:	e02d      	b.n	80026b4 <HAL_UART_Receive+0xe4>
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	22ff      	movs	r2, #255	; 0xff
 800265c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002660:	e028      	b.n	80026b4 <HAL_UART_Receive+0xe4>
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	689b      	ldr	r3, [r3, #8]
 8002666:	2b00      	cmp	r3, #0
 8002668:	d10d      	bne.n	8002686 <HAL_UART_Receive+0xb6>
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	691b      	ldr	r3, [r3, #16]
 800266e:	2b00      	cmp	r3, #0
 8002670:	d104      	bne.n	800267c <HAL_UART_Receive+0xac>
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	22ff      	movs	r2, #255	; 0xff
 8002676:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800267a:	e01b      	b.n	80026b4 <HAL_UART_Receive+0xe4>
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	227f      	movs	r2, #127	; 0x7f
 8002680:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002684:	e016      	b.n	80026b4 <HAL_UART_Receive+0xe4>
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	689b      	ldr	r3, [r3, #8]
 800268a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800268e:	d10d      	bne.n	80026ac <HAL_UART_Receive+0xdc>
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	691b      	ldr	r3, [r3, #16]
 8002694:	2b00      	cmp	r3, #0
 8002696:	d104      	bne.n	80026a2 <HAL_UART_Receive+0xd2>
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	227f      	movs	r2, #127	; 0x7f
 800269c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80026a0:	e008      	b.n	80026b4 <HAL_UART_Receive+0xe4>
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	223f      	movs	r2, #63	; 0x3f
 80026a6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80026aa:	e003      	b.n	80026b4 <HAL_UART_Receive+0xe4>
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	2200      	movs	r2, #0
 80026b0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80026ba:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	689b      	ldr	r3, [r3, #8]
 80026c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80026c4:	d108      	bne.n	80026d8 <HAL_UART_Receive+0x108>
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	691b      	ldr	r3, [r3, #16]
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d104      	bne.n	80026d8 <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 80026ce:	2300      	movs	r3, #0
 80026d0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80026d2:	68bb      	ldr	r3, [r7, #8]
 80026d4:	61bb      	str	r3, [r7, #24]
 80026d6:	e003      	b.n	80026e0 <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 80026d8:	68bb      	ldr	r3, [r7, #8]
 80026da:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80026dc:	2300      	movs	r3, #0
 80026de:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	2200      	movs	r2, #0
 80026e4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80026e8:	e033      	b.n	8002752 <HAL_UART_Receive+0x182>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	9300      	str	r3, [sp, #0]
 80026ee:	697b      	ldr	r3, [r7, #20]
 80026f0:	2200      	movs	r2, #0
 80026f2:	2120      	movs	r1, #32
 80026f4:	68f8      	ldr	r0, [r7, #12]
 80026f6:	f000 fb82 	bl	8002dfe <UART_WaitOnFlagUntilTimeout>
 80026fa:	4603      	mov	r3, r0
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d001      	beq.n	8002704 <HAL_UART_Receive+0x134>
      {
        return HAL_TIMEOUT;
 8002700:	2303      	movs	r3, #3
 8002702:	e032      	b.n	800276a <HAL_UART_Receive+0x19a>
      }
      if (pdata8bits == NULL)
 8002704:	69fb      	ldr	r3, [r7, #28]
 8002706:	2b00      	cmp	r3, #0
 8002708:	d10c      	bne.n	8002724 <HAL_UART_Receive+0x154>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8002710:	b29a      	uxth	r2, r3
 8002712:	8a7b      	ldrh	r3, [r7, #18]
 8002714:	4013      	ands	r3, r2
 8002716:	b29a      	uxth	r2, r3
 8002718:	69bb      	ldr	r3, [r7, #24]
 800271a:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800271c:	69bb      	ldr	r3, [r7, #24]
 800271e:	3302      	adds	r3, #2
 8002720:	61bb      	str	r3, [r7, #24]
 8002722:	e00d      	b.n	8002740 <HAL_UART_Receive+0x170>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800272a:	b29b      	uxth	r3, r3
 800272c:	b2da      	uxtb	r2, r3
 800272e:	8a7b      	ldrh	r3, [r7, #18]
 8002730:	b2db      	uxtb	r3, r3
 8002732:	4013      	ands	r3, r2
 8002734:	b2da      	uxtb	r2, r3
 8002736:	69fb      	ldr	r3, [r7, #28]
 8002738:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800273a:	69fb      	ldr	r3, [r7, #28]
 800273c:	3301      	adds	r3, #1
 800273e:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002746:	b29b      	uxth	r3, r3
 8002748:	3b01      	subs	r3, #1
 800274a:	b29a      	uxth	r2, r3
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002758:	b29b      	uxth	r3, r3
 800275a:	2b00      	cmp	r3, #0
 800275c:	d1c5      	bne.n	80026ea <HAL_UART_Receive+0x11a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	2220      	movs	r2, #32
 8002762:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8002764:	2300      	movs	r3, #0
 8002766:	e000      	b.n	800276a <HAL_UART_Receive+0x19a>
  }
  else
  {
    return HAL_BUSY;
 8002768:	2302      	movs	r3, #2
  }
}
 800276a:	4618      	mov	r0, r3
 800276c:	3720      	adds	r7, #32
 800276e:	46bd      	mov	sp, r7
 8002770:	bd80      	pop	{r7, pc}
	...

08002774 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002774:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002778:	b08a      	sub	sp, #40	; 0x28
 800277a:	af00      	add	r7, sp, #0
 800277c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800277e:	2300      	movs	r3, #0
 8002780:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	689a      	ldr	r2, [r3, #8]
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	691b      	ldr	r3, [r3, #16]
 800278c:	431a      	orrs	r2, r3
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	695b      	ldr	r3, [r3, #20]
 8002792:	431a      	orrs	r2, r3
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	69db      	ldr	r3, [r3, #28]
 8002798:	4313      	orrs	r3, r2
 800279a:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	681a      	ldr	r2, [r3, #0]
 80027a2:	4b9e      	ldr	r3, [pc, #632]	; (8002a1c <UART_SetConfig+0x2a8>)
 80027a4:	4013      	ands	r3, r2
 80027a6:	68fa      	ldr	r2, [r7, #12]
 80027a8:	6812      	ldr	r2, [r2, #0]
 80027aa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80027ac:	430b      	orrs	r3, r1
 80027ae:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	685b      	ldr	r3, [r3, #4]
 80027b6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	68da      	ldr	r2, [r3, #12]
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	430a      	orrs	r2, r1
 80027c4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	699b      	ldr	r3, [r3, #24]
 80027ca:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	4a93      	ldr	r2, [pc, #588]	; (8002a20 <UART_SetConfig+0x2ac>)
 80027d2:	4293      	cmp	r3, r2
 80027d4:	d004      	beq.n	80027e0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	6a1b      	ldr	r3, [r3, #32]
 80027da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027dc:	4313      	orrs	r3, r2
 80027de:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	689b      	ldr	r3, [r3, #8]
 80027e6:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027f0:	430a      	orrs	r2, r1
 80027f2:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	4a8a      	ldr	r2, [pc, #552]	; (8002a24 <UART_SetConfig+0x2b0>)
 80027fa:	4293      	cmp	r3, r2
 80027fc:	d126      	bne.n	800284c <UART_SetConfig+0xd8>
 80027fe:	4b8a      	ldr	r3, [pc, #552]	; (8002a28 <UART_SetConfig+0x2b4>)
 8002800:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002804:	f003 0303 	and.w	r3, r3, #3
 8002808:	2b03      	cmp	r3, #3
 800280a:	d81b      	bhi.n	8002844 <UART_SetConfig+0xd0>
 800280c:	a201      	add	r2, pc, #4	; (adr r2, 8002814 <UART_SetConfig+0xa0>)
 800280e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002812:	bf00      	nop
 8002814:	08002825 	.word	0x08002825
 8002818:	08002835 	.word	0x08002835
 800281c:	0800282d 	.word	0x0800282d
 8002820:	0800283d 	.word	0x0800283d
 8002824:	2301      	movs	r3, #1
 8002826:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800282a:	e0ab      	b.n	8002984 <UART_SetConfig+0x210>
 800282c:	2302      	movs	r3, #2
 800282e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002832:	e0a7      	b.n	8002984 <UART_SetConfig+0x210>
 8002834:	2304      	movs	r3, #4
 8002836:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800283a:	e0a3      	b.n	8002984 <UART_SetConfig+0x210>
 800283c:	2308      	movs	r3, #8
 800283e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002842:	e09f      	b.n	8002984 <UART_SetConfig+0x210>
 8002844:	2310      	movs	r3, #16
 8002846:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800284a:	e09b      	b.n	8002984 <UART_SetConfig+0x210>
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	4a76      	ldr	r2, [pc, #472]	; (8002a2c <UART_SetConfig+0x2b8>)
 8002852:	4293      	cmp	r3, r2
 8002854:	d138      	bne.n	80028c8 <UART_SetConfig+0x154>
 8002856:	4b74      	ldr	r3, [pc, #464]	; (8002a28 <UART_SetConfig+0x2b4>)
 8002858:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800285c:	f003 030c 	and.w	r3, r3, #12
 8002860:	2b0c      	cmp	r3, #12
 8002862:	d82d      	bhi.n	80028c0 <UART_SetConfig+0x14c>
 8002864:	a201      	add	r2, pc, #4	; (adr r2, 800286c <UART_SetConfig+0xf8>)
 8002866:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800286a:	bf00      	nop
 800286c:	080028a1 	.word	0x080028a1
 8002870:	080028c1 	.word	0x080028c1
 8002874:	080028c1 	.word	0x080028c1
 8002878:	080028c1 	.word	0x080028c1
 800287c:	080028b1 	.word	0x080028b1
 8002880:	080028c1 	.word	0x080028c1
 8002884:	080028c1 	.word	0x080028c1
 8002888:	080028c1 	.word	0x080028c1
 800288c:	080028a9 	.word	0x080028a9
 8002890:	080028c1 	.word	0x080028c1
 8002894:	080028c1 	.word	0x080028c1
 8002898:	080028c1 	.word	0x080028c1
 800289c:	080028b9 	.word	0x080028b9
 80028a0:	2300      	movs	r3, #0
 80028a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80028a6:	e06d      	b.n	8002984 <UART_SetConfig+0x210>
 80028a8:	2302      	movs	r3, #2
 80028aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80028ae:	e069      	b.n	8002984 <UART_SetConfig+0x210>
 80028b0:	2304      	movs	r3, #4
 80028b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80028b6:	e065      	b.n	8002984 <UART_SetConfig+0x210>
 80028b8:	2308      	movs	r3, #8
 80028ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80028be:	e061      	b.n	8002984 <UART_SetConfig+0x210>
 80028c0:	2310      	movs	r3, #16
 80028c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80028c6:	e05d      	b.n	8002984 <UART_SetConfig+0x210>
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	4a58      	ldr	r2, [pc, #352]	; (8002a30 <UART_SetConfig+0x2bc>)
 80028ce:	4293      	cmp	r3, r2
 80028d0:	d125      	bne.n	800291e <UART_SetConfig+0x1aa>
 80028d2:	4b55      	ldr	r3, [pc, #340]	; (8002a28 <UART_SetConfig+0x2b4>)
 80028d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028d8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80028dc:	2b30      	cmp	r3, #48	; 0x30
 80028de:	d016      	beq.n	800290e <UART_SetConfig+0x19a>
 80028e0:	2b30      	cmp	r3, #48	; 0x30
 80028e2:	d818      	bhi.n	8002916 <UART_SetConfig+0x1a2>
 80028e4:	2b20      	cmp	r3, #32
 80028e6:	d00a      	beq.n	80028fe <UART_SetConfig+0x18a>
 80028e8:	2b20      	cmp	r3, #32
 80028ea:	d814      	bhi.n	8002916 <UART_SetConfig+0x1a2>
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d002      	beq.n	80028f6 <UART_SetConfig+0x182>
 80028f0:	2b10      	cmp	r3, #16
 80028f2:	d008      	beq.n	8002906 <UART_SetConfig+0x192>
 80028f4:	e00f      	b.n	8002916 <UART_SetConfig+0x1a2>
 80028f6:	2300      	movs	r3, #0
 80028f8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80028fc:	e042      	b.n	8002984 <UART_SetConfig+0x210>
 80028fe:	2302      	movs	r3, #2
 8002900:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002904:	e03e      	b.n	8002984 <UART_SetConfig+0x210>
 8002906:	2304      	movs	r3, #4
 8002908:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800290c:	e03a      	b.n	8002984 <UART_SetConfig+0x210>
 800290e:	2308      	movs	r3, #8
 8002910:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002914:	e036      	b.n	8002984 <UART_SetConfig+0x210>
 8002916:	2310      	movs	r3, #16
 8002918:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800291c:	e032      	b.n	8002984 <UART_SetConfig+0x210>
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	4a3f      	ldr	r2, [pc, #252]	; (8002a20 <UART_SetConfig+0x2ac>)
 8002924:	4293      	cmp	r3, r2
 8002926:	d12a      	bne.n	800297e <UART_SetConfig+0x20a>
 8002928:	4b3f      	ldr	r3, [pc, #252]	; (8002a28 <UART_SetConfig+0x2b4>)
 800292a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800292e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002932:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002936:	d01a      	beq.n	800296e <UART_SetConfig+0x1fa>
 8002938:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800293c:	d81b      	bhi.n	8002976 <UART_SetConfig+0x202>
 800293e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002942:	d00c      	beq.n	800295e <UART_SetConfig+0x1ea>
 8002944:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002948:	d815      	bhi.n	8002976 <UART_SetConfig+0x202>
 800294a:	2b00      	cmp	r3, #0
 800294c:	d003      	beq.n	8002956 <UART_SetConfig+0x1e2>
 800294e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002952:	d008      	beq.n	8002966 <UART_SetConfig+0x1f2>
 8002954:	e00f      	b.n	8002976 <UART_SetConfig+0x202>
 8002956:	2300      	movs	r3, #0
 8002958:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800295c:	e012      	b.n	8002984 <UART_SetConfig+0x210>
 800295e:	2302      	movs	r3, #2
 8002960:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002964:	e00e      	b.n	8002984 <UART_SetConfig+0x210>
 8002966:	2304      	movs	r3, #4
 8002968:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800296c:	e00a      	b.n	8002984 <UART_SetConfig+0x210>
 800296e:	2308      	movs	r3, #8
 8002970:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002974:	e006      	b.n	8002984 <UART_SetConfig+0x210>
 8002976:	2310      	movs	r3, #16
 8002978:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800297c:	e002      	b.n	8002984 <UART_SetConfig+0x210>
 800297e:	2310      	movs	r3, #16
 8002980:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	4a25      	ldr	r2, [pc, #148]	; (8002a20 <UART_SetConfig+0x2ac>)
 800298a:	4293      	cmp	r3, r2
 800298c:	f040 808a 	bne.w	8002aa4 <UART_SetConfig+0x330>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002990:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002994:	2b08      	cmp	r3, #8
 8002996:	d824      	bhi.n	80029e2 <UART_SetConfig+0x26e>
 8002998:	a201      	add	r2, pc, #4	; (adr r2, 80029a0 <UART_SetConfig+0x22c>)
 800299a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800299e:	bf00      	nop
 80029a0:	080029c5 	.word	0x080029c5
 80029a4:	080029e3 	.word	0x080029e3
 80029a8:	080029cd 	.word	0x080029cd
 80029ac:	080029e3 	.word	0x080029e3
 80029b0:	080029d3 	.word	0x080029d3
 80029b4:	080029e3 	.word	0x080029e3
 80029b8:	080029e3 	.word	0x080029e3
 80029bc:	080029e3 	.word	0x080029e3
 80029c0:	080029db 	.word	0x080029db
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80029c4:	f7ff fb10 	bl	8001fe8 <HAL_RCC_GetPCLK1Freq>
 80029c8:	61f8      	str	r0, [r7, #28]
        break;
 80029ca:	e010      	b.n	80029ee <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80029cc:	4b19      	ldr	r3, [pc, #100]	; (8002a34 <UART_SetConfig+0x2c0>)
 80029ce:	61fb      	str	r3, [r7, #28]
        break;
 80029d0:	e00d      	b.n	80029ee <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80029d2:	f7ff fa71 	bl	8001eb8 <HAL_RCC_GetSysClockFreq>
 80029d6:	61f8      	str	r0, [r7, #28]
        break;
 80029d8:	e009      	b.n	80029ee <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80029da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80029de:	61fb      	str	r3, [r7, #28]
        break;
 80029e0:	e005      	b.n	80029ee <UART_SetConfig+0x27a>
      default:
        pclk = 0U;
 80029e2:	2300      	movs	r3, #0
 80029e4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80029e6:	2301      	movs	r3, #1
 80029e8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80029ec:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80029ee:	69fb      	ldr	r3, [r7, #28]
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	f000 8109 	beq.w	8002c08 <UART_SetConfig+0x494>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	685a      	ldr	r2, [r3, #4]
 80029fa:	4613      	mov	r3, r2
 80029fc:	005b      	lsls	r3, r3, #1
 80029fe:	4413      	add	r3, r2
 8002a00:	69fa      	ldr	r2, [r7, #28]
 8002a02:	429a      	cmp	r2, r3
 8002a04:	d305      	bcc.n	8002a12 <UART_SetConfig+0x29e>
          (pclk > (4096U * huart->Init.BaudRate)))
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	685b      	ldr	r3, [r3, #4]
 8002a0a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002a0c:	69fa      	ldr	r2, [r7, #28]
 8002a0e:	429a      	cmp	r2, r3
 8002a10:	d912      	bls.n	8002a38 <UART_SetConfig+0x2c4>
      {
        ret = HAL_ERROR;
 8002a12:	2301      	movs	r3, #1
 8002a14:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8002a18:	e0f6      	b.n	8002c08 <UART_SetConfig+0x494>
 8002a1a:	bf00      	nop
 8002a1c:	efff69f3 	.word	0xefff69f3
 8002a20:	40008000 	.word	0x40008000
 8002a24:	40013800 	.word	0x40013800
 8002a28:	40021000 	.word	0x40021000
 8002a2c:	40004400 	.word	0x40004400
 8002a30:	40004800 	.word	0x40004800
 8002a34:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8002a38:	69fb      	ldr	r3, [r7, #28]
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	461c      	mov	r4, r3
 8002a3e:	4615      	mov	r5, r2
 8002a40:	f04f 0200 	mov.w	r2, #0
 8002a44:	f04f 0300 	mov.w	r3, #0
 8002a48:	022b      	lsls	r3, r5, #8
 8002a4a:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8002a4e:	0222      	lsls	r2, r4, #8
 8002a50:	68f9      	ldr	r1, [r7, #12]
 8002a52:	6849      	ldr	r1, [r1, #4]
 8002a54:	0849      	lsrs	r1, r1, #1
 8002a56:	2000      	movs	r0, #0
 8002a58:	4688      	mov	r8, r1
 8002a5a:	4681      	mov	r9, r0
 8002a5c:	eb12 0a08 	adds.w	sl, r2, r8
 8002a60:	eb43 0b09 	adc.w	fp, r3, r9
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	685b      	ldr	r3, [r3, #4]
 8002a68:	2200      	movs	r2, #0
 8002a6a:	603b      	str	r3, [r7, #0]
 8002a6c:	607a      	str	r2, [r7, #4]
 8002a6e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002a72:	4650      	mov	r0, sl
 8002a74:	4659      	mov	r1, fp
 8002a76:	f7fd fba9 	bl	80001cc <__aeabi_uldivmod>
 8002a7a:	4602      	mov	r2, r0
 8002a7c:	460b      	mov	r3, r1
 8002a7e:	4613      	mov	r3, r2
 8002a80:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002a82:	69bb      	ldr	r3, [r7, #24]
 8002a84:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002a88:	d308      	bcc.n	8002a9c <UART_SetConfig+0x328>
 8002a8a:	69bb      	ldr	r3, [r7, #24]
 8002a8c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002a90:	d204      	bcs.n	8002a9c <UART_SetConfig+0x328>
        {
          huart->Instance->BRR = usartdiv;
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	69ba      	ldr	r2, [r7, #24]
 8002a98:	60da      	str	r2, [r3, #12]
 8002a9a:	e0b5      	b.n	8002c08 <UART_SetConfig+0x494>
        }
        else
        {
          ret = HAL_ERROR;
 8002a9c:	2301      	movs	r3, #1
 8002a9e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8002aa2:	e0b1      	b.n	8002c08 <UART_SetConfig+0x494>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	69db      	ldr	r3, [r3, #28]
 8002aa8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002aac:	d15d      	bne.n	8002b6a <UART_SetConfig+0x3f6>
  {
    switch (clocksource)
 8002aae:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002ab2:	2b08      	cmp	r3, #8
 8002ab4:	d827      	bhi.n	8002b06 <UART_SetConfig+0x392>
 8002ab6:	a201      	add	r2, pc, #4	; (adr r2, 8002abc <UART_SetConfig+0x348>)
 8002ab8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002abc:	08002ae1 	.word	0x08002ae1
 8002ac0:	08002ae9 	.word	0x08002ae9
 8002ac4:	08002af1 	.word	0x08002af1
 8002ac8:	08002b07 	.word	0x08002b07
 8002acc:	08002af7 	.word	0x08002af7
 8002ad0:	08002b07 	.word	0x08002b07
 8002ad4:	08002b07 	.word	0x08002b07
 8002ad8:	08002b07 	.word	0x08002b07
 8002adc:	08002aff 	.word	0x08002aff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002ae0:	f7ff fa82 	bl	8001fe8 <HAL_RCC_GetPCLK1Freq>
 8002ae4:	61f8      	str	r0, [r7, #28]
        break;
 8002ae6:	e014      	b.n	8002b12 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002ae8:	f7ff fa94 	bl	8002014 <HAL_RCC_GetPCLK2Freq>
 8002aec:	61f8      	str	r0, [r7, #28]
        break;
 8002aee:	e010      	b.n	8002b12 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002af0:	4b4c      	ldr	r3, [pc, #304]	; (8002c24 <UART_SetConfig+0x4b0>)
 8002af2:	61fb      	str	r3, [r7, #28]
        break;
 8002af4:	e00d      	b.n	8002b12 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002af6:	f7ff f9df 	bl	8001eb8 <HAL_RCC_GetSysClockFreq>
 8002afa:	61f8      	str	r0, [r7, #28]
        break;
 8002afc:	e009      	b.n	8002b12 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002afe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002b02:	61fb      	str	r3, [r7, #28]
        break;
 8002b04:	e005      	b.n	8002b12 <UART_SetConfig+0x39e>
      default:
        pclk = 0U;
 8002b06:	2300      	movs	r3, #0
 8002b08:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8002b0a:	2301      	movs	r3, #1
 8002b0c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8002b10:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002b12:	69fb      	ldr	r3, [r7, #28]
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d077      	beq.n	8002c08 <UART_SetConfig+0x494>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002b18:	69fb      	ldr	r3, [r7, #28]
 8002b1a:	005a      	lsls	r2, r3, #1
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	685b      	ldr	r3, [r3, #4]
 8002b20:	085b      	lsrs	r3, r3, #1
 8002b22:	441a      	add	r2, r3
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	685b      	ldr	r3, [r3, #4]
 8002b28:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b2c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002b2e:	69bb      	ldr	r3, [r7, #24]
 8002b30:	2b0f      	cmp	r3, #15
 8002b32:	d916      	bls.n	8002b62 <UART_SetConfig+0x3ee>
 8002b34:	69bb      	ldr	r3, [r7, #24]
 8002b36:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b3a:	d212      	bcs.n	8002b62 <UART_SetConfig+0x3ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002b3c:	69bb      	ldr	r3, [r7, #24]
 8002b3e:	b29b      	uxth	r3, r3
 8002b40:	f023 030f 	bic.w	r3, r3, #15
 8002b44:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002b46:	69bb      	ldr	r3, [r7, #24]
 8002b48:	085b      	lsrs	r3, r3, #1
 8002b4a:	b29b      	uxth	r3, r3
 8002b4c:	f003 0307 	and.w	r3, r3, #7
 8002b50:	b29a      	uxth	r2, r3
 8002b52:	8afb      	ldrh	r3, [r7, #22]
 8002b54:	4313      	orrs	r3, r2
 8002b56:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	8afa      	ldrh	r2, [r7, #22]
 8002b5e:	60da      	str	r2, [r3, #12]
 8002b60:	e052      	b.n	8002c08 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8002b62:	2301      	movs	r3, #1
 8002b64:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8002b68:	e04e      	b.n	8002c08 <UART_SetConfig+0x494>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002b6a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002b6e:	2b08      	cmp	r3, #8
 8002b70:	d827      	bhi.n	8002bc2 <UART_SetConfig+0x44e>
 8002b72:	a201      	add	r2, pc, #4	; (adr r2, 8002b78 <UART_SetConfig+0x404>)
 8002b74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b78:	08002b9d 	.word	0x08002b9d
 8002b7c:	08002ba5 	.word	0x08002ba5
 8002b80:	08002bad 	.word	0x08002bad
 8002b84:	08002bc3 	.word	0x08002bc3
 8002b88:	08002bb3 	.word	0x08002bb3
 8002b8c:	08002bc3 	.word	0x08002bc3
 8002b90:	08002bc3 	.word	0x08002bc3
 8002b94:	08002bc3 	.word	0x08002bc3
 8002b98:	08002bbb 	.word	0x08002bbb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002b9c:	f7ff fa24 	bl	8001fe8 <HAL_RCC_GetPCLK1Freq>
 8002ba0:	61f8      	str	r0, [r7, #28]
        break;
 8002ba2:	e014      	b.n	8002bce <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002ba4:	f7ff fa36 	bl	8002014 <HAL_RCC_GetPCLK2Freq>
 8002ba8:	61f8      	str	r0, [r7, #28]
        break;
 8002baa:	e010      	b.n	8002bce <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002bac:	4b1d      	ldr	r3, [pc, #116]	; (8002c24 <UART_SetConfig+0x4b0>)
 8002bae:	61fb      	str	r3, [r7, #28]
        break;
 8002bb0:	e00d      	b.n	8002bce <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002bb2:	f7ff f981 	bl	8001eb8 <HAL_RCC_GetSysClockFreq>
 8002bb6:	61f8      	str	r0, [r7, #28]
        break;
 8002bb8:	e009      	b.n	8002bce <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002bba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002bbe:	61fb      	str	r3, [r7, #28]
        break;
 8002bc0:	e005      	b.n	8002bce <UART_SetConfig+0x45a>
      default:
        pclk = 0U;
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8002bcc:	bf00      	nop
    }

    if (pclk != 0U)
 8002bce:	69fb      	ldr	r3, [r7, #28]
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d019      	beq.n	8002c08 <UART_SetConfig+0x494>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	685b      	ldr	r3, [r3, #4]
 8002bd8:	085a      	lsrs	r2, r3, #1
 8002bda:	69fb      	ldr	r3, [r7, #28]
 8002bdc:	441a      	add	r2, r3
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	685b      	ldr	r3, [r3, #4]
 8002be2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002be6:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002be8:	69bb      	ldr	r3, [r7, #24]
 8002bea:	2b0f      	cmp	r3, #15
 8002bec:	d909      	bls.n	8002c02 <UART_SetConfig+0x48e>
 8002bee:	69bb      	ldr	r3, [r7, #24]
 8002bf0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002bf4:	d205      	bcs.n	8002c02 <UART_SetConfig+0x48e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002bf6:	69bb      	ldr	r3, [r7, #24]
 8002bf8:	b29a      	uxth	r2, r3
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	60da      	str	r2, [r3, #12]
 8002c00:	e002      	b.n	8002c08 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8002c02:	2301      	movs	r3, #1
 8002c04:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	2200      	movs	r2, #0
 8002c12:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8002c14:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8002c18:	4618      	mov	r0, r3
 8002c1a:	3728      	adds	r7, #40	; 0x28
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002c22:	bf00      	nop
 8002c24:	00f42400 	.word	0x00f42400

08002c28 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002c28:	b480      	push	{r7}
 8002c2a:	b083      	sub	sp, #12
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c34:	f003 0301 	and.w	r3, r3, #1
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d00a      	beq.n	8002c52 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	685b      	ldr	r3, [r3, #4]
 8002c42:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	430a      	orrs	r2, r1
 8002c50:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c56:	f003 0302 	and.w	r3, r3, #2
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d00a      	beq.n	8002c74 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	685b      	ldr	r3, [r3, #4]
 8002c64:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	430a      	orrs	r2, r1
 8002c72:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c78:	f003 0304 	and.w	r3, r3, #4
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d00a      	beq.n	8002c96 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	685b      	ldr	r3, [r3, #4]
 8002c86:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	430a      	orrs	r2, r1
 8002c94:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c9a:	f003 0308 	and.w	r3, r3, #8
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d00a      	beq.n	8002cb8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	685b      	ldr	r3, [r3, #4]
 8002ca8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	430a      	orrs	r2, r1
 8002cb6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cbc:	f003 0310 	and.w	r3, r3, #16
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d00a      	beq.n	8002cda <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	689b      	ldr	r3, [r3, #8]
 8002cca:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	430a      	orrs	r2, r1
 8002cd8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cde:	f003 0320 	and.w	r3, r3, #32
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d00a      	beq.n	8002cfc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	689b      	ldr	r3, [r3, #8]
 8002cec:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	430a      	orrs	r2, r1
 8002cfa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d01a      	beq.n	8002d3e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	685b      	ldr	r3, [r3, #4]
 8002d0e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	430a      	orrs	r2, r1
 8002d1c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d22:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002d26:	d10a      	bne.n	8002d3e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	685b      	ldr	r3, [r3, #4]
 8002d2e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	430a      	orrs	r2, r1
 8002d3c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d00a      	beq.n	8002d60 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	685b      	ldr	r3, [r3, #4]
 8002d50:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	430a      	orrs	r2, r1
 8002d5e:	605a      	str	r2, [r3, #4]
  }
}
 8002d60:	bf00      	nop
 8002d62:	370c      	adds	r7, #12
 8002d64:	46bd      	mov	sp, r7
 8002d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6a:	4770      	bx	lr

08002d6c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b086      	sub	sp, #24
 8002d70:	af02      	add	r7, sp, #8
 8002d72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2200      	movs	r2, #0
 8002d78:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002d7c:	f7fe f81c 	bl	8000db8 <HAL_GetTick>
 8002d80:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f003 0308 	and.w	r3, r3, #8
 8002d8c:	2b08      	cmp	r3, #8
 8002d8e:	d10e      	bne.n	8002dae <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002d90:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002d94:	9300      	str	r3, [sp, #0]
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	2200      	movs	r2, #0
 8002d9a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002d9e:	6878      	ldr	r0, [r7, #4]
 8002da0:	f000 f82d 	bl	8002dfe <UART_WaitOnFlagUntilTimeout>
 8002da4:	4603      	mov	r3, r0
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d001      	beq.n	8002dae <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002daa:	2303      	movs	r3, #3
 8002dac:	e023      	b.n	8002df6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f003 0304 	and.w	r3, r3, #4
 8002db8:	2b04      	cmp	r3, #4
 8002dba:	d10e      	bne.n	8002dda <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002dbc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002dc0:	9300      	str	r3, [sp, #0]
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8002dca:	6878      	ldr	r0, [r7, #4]
 8002dcc:	f000 f817 	bl	8002dfe <UART_WaitOnFlagUntilTimeout>
 8002dd0:	4603      	mov	r3, r0
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d001      	beq.n	8002dda <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002dd6:	2303      	movs	r3, #3
 8002dd8:	e00d      	b.n	8002df6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	2220      	movs	r2, #32
 8002dde:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2220      	movs	r2, #32
 8002de4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	2200      	movs	r2, #0
 8002dea:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2200      	movs	r2, #0
 8002df0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8002df4:	2300      	movs	r3, #0
}
 8002df6:	4618      	mov	r0, r3
 8002df8:	3710      	adds	r7, #16
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	bd80      	pop	{r7, pc}

08002dfe <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002dfe:	b580      	push	{r7, lr}
 8002e00:	b09c      	sub	sp, #112	; 0x70
 8002e02:	af00      	add	r7, sp, #0
 8002e04:	60f8      	str	r0, [r7, #12]
 8002e06:	60b9      	str	r1, [r7, #8]
 8002e08:	603b      	str	r3, [r7, #0]
 8002e0a:	4613      	mov	r3, r2
 8002e0c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002e0e:	e0a5      	b.n	8002f5c <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e10:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002e12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e16:	f000 80a1 	beq.w	8002f5c <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e1a:	f7fd ffcd 	bl	8000db8 <HAL_GetTick>
 8002e1e:	4602      	mov	r2, r0
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	1ad3      	subs	r3, r2, r3
 8002e24:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8002e26:	429a      	cmp	r2, r3
 8002e28:	d302      	bcc.n	8002e30 <UART_WaitOnFlagUntilTimeout+0x32>
 8002e2a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d13e      	bne.n	8002eae <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e36:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002e38:	e853 3f00 	ldrex	r3, [r3]
 8002e3c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8002e3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e40:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002e44:	667b      	str	r3, [r7, #100]	; 0x64
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	461a      	mov	r2, r3
 8002e4c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002e4e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002e50:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e52:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8002e54:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002e56:	e841 2300 	strex	r3, r2, [r1]
 8002e5a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8002e5c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d1e6      	bne.n	8002e30 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	3308      	adds	r3, #8
 8002e68:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e6c:	e853 3f00 	ldrex	r3, [r3]
 8002e70:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002e72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e74:	f023 0301 	bic.w	r3, r3, #1
 8002e78:	663b      	str	r3, [r7, #96]	; 0x60
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	3308      	adds	r3, #8
 8002e80:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002e82:	64ba      	str	r2, [r7, #72]	; 0x48
 8002e84:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e86:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8002e88:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002e8a:	e841 2300 	strex	r3, r2, [r1]
 8002e8e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8002e90:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d1e5      	bne.n	8002e62 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	2220      	movs	r2, #32
 8002e9a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	2220      	movs	r2, #32
 8002ea0:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8002eaa:	2303      	movs	r3, #3
 8002eac:	e067      	b.n	8002f7e <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f003 0304 	and.w	r3, r3, #4
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d04f      	beq.n	8002f5c <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	69db      	ldr	r3, [r3, #28]
 8002ec2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002ec6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002eca:	d147      	bne.n	8002f5c <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002ed4:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002edc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ede:	e853 3f00 	ldrex	r3, [r3]
 8002ee2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ee6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002eea:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	461a      	mov	r2, r3
 8002ef2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ef4:	637b      	str	r3, [r7, #52]	; 0x34
 8002ef6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ef8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002efa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002efc:	e841 2300 	strex	r3, r2, [r1]
 8002f00:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002f02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d1e6      	bne.n	8002ed6 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	3308      	adds	r3, #8
 8002f0e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f10:	697b      	ldr	r3, [r7, #20]
 8002f12:	e853 3f00 	ldrex	r3, [r3]
 8002f16:	613b      	str	r3, [r7, #16]
   return(result);
 8002f18:	693b      	ldr	r3, [r7, #16]
 8002f1a:	f023 0301 	bic.w	r3, r3, #1
 8002f1e:	66bb      	str	r3, [r7, #104]	; 0x68
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	3308      	adds	r3, #8
 8002f26:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8002f28:	623a      	str	r2, [r7, #32]
 8002f2a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f2c:	69f9      	ldr	r1, [r7, #28]
 8002f2e:	6a3a      	ldr	r2, [r7, #32]
 8002f30:	e841 2300 	strex	r3, r2, [r1]
 8002f34:	61bb      	str	r3, [r7, #24]
   return(result);
 8002f36:	69bb      	ldr	r3, [r7, #24]
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d1e5      	bne.n	8002f08 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	2220      	movs	r2, #32
 8002f40:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	2220      	movs	r2, #32
 8002f46:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	2220      	movs	r2, #32
 8002f4c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	2200      	movs	r2, #0
 8002f54:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8002f58:	2303      	movs	r3, #3
 8002f5a:	e010      	b.n	8002f7e <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	69da      	ldr	r2, [r3, #28]
 8002f62:	68bb      	ldr	r3, [r7, #8]
 8002f64:	4013      	ands	r3, r2
 8002f66:	68ba      	ldr	r2, [r7, #8]
 8002f68:	429a      	cmp	r2, r3
 8002f6a:	bf0c      	ite	eq
 8002f6c:	2301      	moveq	r3, #1
 8002f6e:	2300      	movne	r3, #0
 8002f70:	b2db      	uxtb	r3, r3
 8002f72:	461a      	mov	r2, r3
 8002f74:	79fb      	ldrb	r3, [r7, #7]
 8002f76:	429a      	cmp	r2, r3
 8002f78:	f43f af4a 	beq.w	8002e10 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002f7c:	2300      	movs	r3, #0
}
 8002f7e:	4618      	mov	r0, r3
 8002f80:	3770      	adds	r7, #112	; 0x70
 8002f82:	46bd      	mov	sp, r7
 8002f84:	bd80      	pop	{r7, pc}
	...

08002f88 <__errno>:
 8002f88:	4b01      	ldr	r3, [pc, #4]	; (8002f90 <__errno+0x8>)
 8002f8a:	6818      	ldr	r0, [r3, #0]
 8002f8c:	4770      	bx	lr
 8002f8e:	bf00      	nop
 8002f90:	2000000c 	.word	0x2000000c

08002f94 <__libc_init_array>:
 8002f94:	b570      	push	{r4, r5, r6, lr}
 8002f96:	4d0d      	ldr	r5, [pc, #52]	; (8002fcc <__libc_init_array+0x38>)
 8002f98:	4c0d      	ldr	r4, [pc, #52]	; (8002fd0 <__libc_init_array+0x3c>)
 8002f9a:	1b64      	subs	r4, r4, r5
 8002f9c:	10a4      	asrs	r4, r4, #2
 8002f9e:	2600      	movs	r6, #0
 8002fa0:	42a6      	cmp	r6, r4
 8002fa2:	d109      	bne.n	8002fb8 <__libc_init_array+0x24>
 8002fa4:	4d0b      	ldr	r5, [pc, #44]	; (8002fd4 <__libc_init_array+0x40>)
 8002fa6:	4c0c      	ldr	r4, [pc, #48]	; (8002fd8 <__libc_init_array+0x44>)
 8002fa8:	f000 fd46 	bl	8003a38 <_init>
 8002fac:	1b64      	subs	r4, r4, r5
 8002fae:	10a4      	asrs	r4, r4, #2
 8002fb0:	2600      	movs	r6, #0
 8002fb2:	42a6      	cmp	r6, r4
 8002fb4:	d105      	bne.n	8002fc2 <__libc_init_array+0x2e>
 8002fb6:	bd70      	pop	{r4, r5, r6, pc}
 8002fb8:	f855 3b04 	ldr.w	r3, [r5], #4
 8002fbc:	4798      	blx	r3
 8002fbe:	3601      	adds	r6, #1
 8002fc0:	e7ee      	b.n	8002fa0 <__libc_init_array+0xc>
 8002fc2:	f855 3b04 	ldr.w	r3, [r5], #4
 8002fc6:	4798      	blx	r3
 8002fc8:	3601      	adds	r6, #1
 8002fca:	e7f2      	b.n	8002fb2 <__libc_init_array+0x1e>
 8002fcc:	08003be8 	.word	0x08003be8
 8002fd0:	08003be8 	.word	0x08003be8
 8002fd4:	08003be8 	.word	0x08003be8
 8002fd8:	08003bec 	.word	0x08003bec

08002fdc <memset>:
 8002fdc:	4402      	add	r2, r0
 8002fde:	4603      	mov	r3, r0
 8002fe0:	4293      	cmp	r3, r2
 8002fe2:	d100      	bne.n	8002fe6 <memset+0xa>
 8002fe4:	4770      	bx	lr
 8002fe6:	f803 1b01 	strb.w	r1, [r3], #1
 8002fea:	e7f9      	b.n	8002fe0 <memset+0x4>

08002fec <_puts_r>:
 8002fec:	b570      	push	{r4, r5, r6, lr}
 8002fee:	460e      	mov	r6, r1
 8002ff0:	4605      	mov	r5, r0
 8002ff2:	b118      	cbz	r0, 8002ffc <_puts_r+0x10>
 8002ff4:	6983      	ldr	r3, [r0, #24]
 8002ff6:	b90b      	cbnz	r3, 8002ffc <_puts_r+0x10>
 8002ff8:	f000 fa70 	bl	80034dc <__sinit>
 8002ffc:	69ab      	ldr	r3, [r5, #24]
 8002ffe:	68ac      	ldr	r4, [r5, #8]
 8003000:	b913      	cbnz	r3, 8003008 <_puts_r+0x1c>
 8003002:	4628      	mov	r0, r5
 8003004:	f000 fa6a 	bl	80034dc <__sinit>
 8003008:	4b2c      	ldr	r3, [pc, #176]	; (80030bc <_puts_r+0xd0>)
 800300a:	429c      	cmp	r4, r3
 800300c:	d120      	bne.n	8003050 <_puts_r+0x64>
 800300e:	686c      	ldr	r4, [r5, #4]
 8003010:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003012:	07db      	lsls	r3, r3, #31
 8003014:	d405      	bmi.n	8003022 <_puts_r+0x36>
 8003016:	89a3      	ldrh	r3, [r4, #12]
 8003018:	0598      	lsls	r0, r3, #22
 800301a:	d402      	bmi.n	8003022 <_puts_r+0x36>
 800301c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800301e:	f000 fafb 	bl	8003618 <__retarget_lock_acquire_recursive>
 8003022:	89a3      	ldrh	r3, [r4, #12]
 8003024:	0719      	lsls	r1, r3, #28
 8003026:	d51d      	bpl.n	8003064 <_puts_r+0x78>
 8003028:	6923      	ldr	r3, [r4, #16]
 800302a:	b1db      	cbz	r3, 8003064 <_puts_r+0x78>
 800302c:	3e01      	subs	r6, #1
 800302e:	68a3      	ldr	r3, [r4, #8]
 8003030:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003034:	3b01      	subs	r3, #1
 8003036:	60a3      	str	r3, [r4, #8]
 8003038:	bb39      	cbnz	r1, 800308a <_puts_r+0x9e>
 800303a:	2b00      	cmp	r3, #0
 800303c:	da38      	bge.n	80030b0 <_puts_r+0xc4>
 800303e:	4622      	mov	r2, r4
 8003040:	210a      	movs	r1, #10
 8003042:	4628      	mov	r0, r5
 8003044:	f000 f870 	bl	8003128 <__swbuf_r>
 8003048:	3001      	adds	r0, #1
 800304a:	d011      	beq.n	8003070 <_puts_r+0x84>
 800304c:	250a      	movs	r5, #10
 800304e:	e011      	b.n	8003074 <_puts_r+0x88>
 8003050:	4b1b      	ldr	r3, [pc, #108]	; (80030c0 <_puts_r+0xd4>)
 8003052:	429c      	cmp	r4, r3
 8003054:	d101      	bne.n	800305a <_puts_r+0x6e>
 8003056:	68ac      	ldr	r4, [r5, #8]
 8003058:	e7da      	b.n	8003010 <_puts_r+0x24>
 800305a:	4b1a      	ldr	r3, [pc, #104]	; (80030c4 <_puts_r+0xd8>)
 800305c:	429c      	cmp	r4, r3
 800305e:	bf08      	it	eq
 8003060:	68ec      	ldreq	r4, [r5, #12]
 8003062:	e7d5      	b.n	8003010 <_puts_r+0x24>
 8003064:	4621      	mov	r1, r4
 8003066:	4628      	mov	r0, r5
 8003068:	f000 f8b0 	bl	80031cc <__swsetup_r>
 800306c:	2800      	cmp	r0, #0
 800306e:	d0dd      	beq.n	800302c <_puts_r+0x40>
 8003070:	f04f 35ff 	mov.w	r5, #4294967295
 8003074:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003076:	07da      	lsls	r2, r3, #31
 8003078:	d405      	bmi.n	8003086 <_puts_r+0x9a>
 800307a:	89a3      	ldrh	r3, [r4, #12]
 800307c:	059b      	lsls	r3, r3, #22
 800307e:	d402      	bmi.n	8003086 <_puts_r+0x9a>
 8003080:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003082:	f000 faca 	bl	800361a <__retarget_lock_release_recursive>
 8003086:	4628      	mov	r0, r5
 8003088:	bd70      	pop	{r4, r5, r6, pc}
 800308a:	2b00      	cmp	r3, #0
 800308c:	da04      	bge.n	8003098 <_puts_r+0xac>
 800308e:	69a2      	ldr	r2, [r4, #24]
 8003090:	429a      	cmp	r2, r3
 8003092:	dc06      	bgt.n	80030a2 <_puts_r+0xb6>
 8003094:	290a      	cmp	r1, #10
 8003096:	d004      	beq.n	80030a2 <_puts_r+0xb6>
 8003098:	6823      	ldr	r3, [r4, #0]
 800309a:	1c5a      	adds	r2, r3, #1
 800309c:	6022      	str	r2, [r4, #0]
 800309e:	7019      	strb	r1, [r3, #0]
 80030a0:	e7c5      	b.n	800302e <_puts_r+0x42>
 80030a2:	4622      	mov	r2, r4
 80030a4:	4628      	mov	r0, r5
 80030a6:	f000 f83f 	bl	8003128 <__swbuf_r>
 80030aa:	3001      	adds	r0, #1
 80030ac:	d1bf      	bne.n	800302e <_puts_r+0x42>
 80030ae:	e7df      	b.n	8003070 <_puts_r+0x84>
 80030b0:	6823      	ldr	r3, [r4, #0]
 80030b2:	250a      	movs	r5, #10
 80030b4:	1c5a      	adds	r2, r3, #1
 80030b6:	6022      	str	r2, [r4, #0]
 80030b8:	701d      	strb	r5, [r3, #0]
 80030ba:	e7db      	b.n	8003074 <_puts_r+0x88>
 80030bc:	08003ba0 	.word	0x08003ba0
 80030c0:	08003bc0 	.word	0x08003bc0
 80030c4:	08003b80 	.word	0x08003b80

080030c8 <puts>:
 80030c8:	4b02      	ldr	r3, [pc, #8]	; (80030d4 <puts+0xc>)
 80030ca:	4601      	mov	r1, r0
 80030cc:	6818      	ldr	r0, [r3, #0]
 80030ce:	f7ff bf8d 	b.w	8002fec <_puts_r>
 80030d2:	bf00      	nop
 80030d4:	2000000c 	.word	0x2000000c

080030d8 <strncmp>:
 80030d8:	b510      	push	{r4, lr}
 80030da:	b17a      	cbz	r2, 80030fc <strncmp+0x24>
 80030dc:	4603      	mov	r3, r0
 80030de:	3901      	subs	r1, #1
 80030e0:	1884      	adds	r4, r0, r2
 80030e2:	f813 0b01 	ldrb.w	r0, [r3], #1
 80030e6:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80030ea:	4290      	cmp	r0, r2
 80030ec:	d101      	bne.n	80030f2 <strncmp+0x1a>
 80030ee:	42a3      	cmp	r3, r4
 80030f0:	d101      	bne.n	80030f6 <strncmp+0x1e>
 80030f2:	1a80      	subs	r0, r0, r2
 80030f4:	bd10      	pop	{r4, pc}
 80030f6:	2800      	cmp	r0, #0
 80030f8:	d1f3      	bne.n	80030e2 <strncmp+0xa>
 80030fa:	e7fa      	b.n	80030f2 <strncmp+0x1a>
 80030fc:	4610      	mov	r0, r2
 80030fe:	e7f9      	b.n	80030f4 <strncmp+0x1c>

08003100 <strncpy>:
 8003100:	b510      	push	{r4, lr}
 8003102:	3901      	subs	r1, #1
 8003104:	4603      	mov	r3, r0
 8003106:	b132      	cbz	r2, 8003116 <strncpy+0x16>
 8003108:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800310c:	f803 4b01 	strb.w	r4, [r3], #1
 8003110:	3a01      	subs	r2, #1
 8003112:	2c00      	cmp	r4, #0
 8003114:	d1f7      	bne.n	8003106 <strncpy+0x6>
 8003116:	441a      	add	r2, r3
 8003118:	2100      	movs	r1, #0
 800311a:	4293      	cmp	r3, r2
 800311c:	d100      	bne.n	8003120 <strncpy+0x20>
 800311e:	bd10      	pop	{r4, pc}
 8003120:	f803 1b01 	strb.w	r1, [r3], #1
 8003124:	e7f9      	b.n	800311a <strncpy+0x1a>
	...

08003128 <__swbuf_r>:
 8003128:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800312a:	460e      	mov	r6, r1
 800312c:	4614      	mov	r4, r2
 800312e:	4605      	mov	r5, r0
 8003130:	b118      	cbz	r0, 800313a <__swbuf_r+0x12>
 8003132:	6983      	ldr	r3, [r0, #24]
 8003134:	b90b      	cbnz	r3, 800313a <__swbuf_r+0x12>
 8003136:	f000 f9d1 	bl	80034dc <__sinit>
 800313a:	4b21      	ldr	r3, [pc, #132]	; (80031c0 <__swbuf_r+0x98>)
 800313c:	429c      	cmp	r4, r3
 800313e:	d12b      	bne.n	8003198 <__swbuf_r+0x70>
 8003140:	686c      	ldr	r4, [r5, #4]
 8003142:	69a3      	ldr	r3, [r4, #24]
 8003144:	60a3      	str	r3, [r4, #8]
 8003146:	89a3      	ldrh	r3, [r4, #12]
 8003148:	071a      	lsls	r2, r3, #28
 800314a:	d52f      	bpl.n	80031ac <__swbuf_r+0x84>
 800314c:	6923      	ldr	r3, [r4, #16]
 800314e:	b36b      	cbz	r3, 80031ac <__swbuf_r+0x84>
 8003150:	6923      	ldr	r3, [r4, #16]
 8003152:	6820      	ldr	r0, [r4, #0]
 8003154:	1ac0      	subs	r0, r0, r3
 8003156:	6963      	ldr	r3, [r4, #20]
 8003158:	b2f6      	uxtb	r6, r6
 800315a:	4283      	cmp	r3, r0
 800315c:	4637      	mov	r7, r6
 800315e:	dc04      	bgt.n	800316a <__swbuf_r+0x42>
 8003160:	4621      	mov	r1, r4
 8003162:	4628      	mov	r0, r5
 8003164:	f000 f926 	bl	80033b4 <_fflush_r>
 8003168:	bb30      	cbnz	r0, 80031b8 <__swbuf_r+0x90>
 800316a:	68a3      	ldr	r3, [r4, #8]
 800316c:	3b01      	subs	r3, #1
 800316e:	60a3      	str	r3, [r4, #8]
 8003170:	6823      	ldr	r3, [r4, #0]
 8003172:	1c5a      	adds	r2, r3, #1
 8003174:	6022      	str	r2, [r4, #0]
 8003176:	701e      	strb	r6, [r3, #0]
 8003178:	6963      	ldr	r3, [r4, #20]
 800317a:	3001      	adds	r0, #1
 800317c:	4283      	cmp	r3, r0
 800317e:	d004      	beq.n	800318a <__swbuf_r+0x62>
 8003180:	89a3      	ldrh	r3, [r4, #12]
 8003182:	07db      	lsls	r3, r3, #31
 8003184:	d506      	bpl.n	8003194 <__swbuf_r+0x6c>
 8003186:	2e0a      	cmp	r6, #10
 8003188:	d104      	bne.n	8003194 <__swbuf_r+0x6c>
 800318a:	4621      	mov	r1, r4
 800318c:	4628      	mov	r0, r5
 800318e:	f000 f911 	bl	80033b4 <_fflush_r>
 8003192:	b988      	cbnz	r0, 80031b8 <__swbuf_r+0x90>
 8003194:	4638      	mov	r0, r7
 8003196:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003198:	4b0a      	ldr	r3, [pc, #40]	; (80031c4 <__swbuf_r+0x9c>)
 800319a:	429c      	cmp	r4, r3
 800319c:	d101      	bne.n	80031a2 <__swbuf_r+0x7a>
 800319e:	68ac      	ldr	r4, [r5, #8]
 80031a0:	e7cf      	b.n	8003142 <__swbuf_r+0x1a>
 80031a2:	4b09      	ldr	r3, [pc, #36]	; (80031c8 <__swbuf_r+0xa0>)
 80031a4:	429c      	cmp	r4, r3
 80031a6:	bf08      	it	eq
 80031a8:	68ec      	ldreq	r4, [r5, #12]
 80031aa:	e7ca      	b.n	8003142 <__swbuf_r+0x1a>
 80031ac:	4621      	mov	r1, r4
 80031ae:	4628      	mov	r0, r5
 80031b0:	f000 f80c 	bl	80031cc <__swsetup_r>
 80031b4:	2800      	cmp	r0, #0
 80031b6:	d0cb      	beq.n	8003150 <__swbuf_r+0x28>
 80031b8:	f04f 37ff 	mov.w	r7, #4294967295
 80031bc:	e7ea      	b.n	8003194 <__swbuf_r+0x6c>
 80031be:	bf00      	nop
 80031c0:	08003ba0 	.word	0x08003ba0
 80031c4:	08003bc0 	.word	0x08003bc0
 80031c8:	08003b80 	.word	0x08003b80

080031cc <__swsetup_r>:
 80031cc:	4b32      	ldr	r3, [pc, #200]	; (8003298 <__swsetup_r+0xcc>)
 80031ce:	b570      	push	{r4, r5, r6, lr}
 80031d0:	681d      	ldr	r5, [r3, #0]
 80031d2:	4606      	mov	r6, r0
 80031d4:	460c      	mov	r4, r1
 80031d6:	b125      	cbz	r5, 80031e2 <__swsetup_r+0x16>
 80031d8:	69ab      	ldr	r3, [r5, #24]
 80031da:	b913      	cbnz	r3, 80031e2 <__swsetup_r+0x16>
 80031dc:	4628      	mov	r0, r5
 80031de:	f000 f97d 	bl	80034dc <__sinit>
 80031e2:	4b2e      	ldr	r3, [pc, #184]	; (800329c <__swsetup_r+0xd0>)
 80031e4:	429c      	cmp	r4, r3
 80031e6:	d10f      	bne.n	8003208 <__swsetup_r+0x3c>
 80031e8:	686c      	ldr	r4, [r5, #4]
 80031ea:	89a3      	ldrh	r3, [r4, #12]
 80031ec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80031f0:	0719      	lsls	r1, r3, #28
 80031f2:	d42c      	bmi.n	800324e <__swsetup_r+0x82>
 80031f4:	06dd      	lsls	r5, r3, #27
 80031f6:	d411      	bmi.n	800321c <__swsetup_r+0x50>
 80031f8:	2309      	movs	r3, #9
 80031fa:	6033      	str	r3, [r6, #0]
 80031fc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003200:	81a3      	strh	r3, [r4, #12]
 8003202:	f04f 30ff 	mov.w	r0, #4294967295
 8003206:	e03e      	b.n	8003286 <__swsetup_r+0xba>
 8003208:	4b25      	ldr	r3, [pc, #148]	; (80032a0 <__swsetup_r+0xd4>)
 800320a:	429c      	cmp	r4, r3
 800320c:	d101      	bne.n	8003212 <__swsetup_r+0x46>
 800320e:	68ac      	ldr	r4, [r5, #8]
 8003210:	e7eb      	b.n	80031ea <__swsetup_r+0x1e>
 8003212:	4b24      	ldr	r3, [pc, #144]	; (80032a4 <__swsetup_r+0xd8>)
 8003214:	429c      	cmp	r4, r3
 8003216:	bf08      	it	eq
 8003218:	68ec      	ldreq	r4, [r5, #12]
 800321a:	e7e6      	b.n	80031ea <__swsetup_r+0x1e>
 800321c:	0758      	lsls	r0, r3, #29
 800321e:	d512      	bpl.n	8003246 <__swsetup_r+0x7a>
 8003220:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003222:	b141      	cbz	r1, 8003236 <__swsetup_r+0x6a>
 8003224:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003228:	4299      	cmp	r1, r3
 800322a:	d002      	beq.n	8003232 <__swsetup_r+0x66>
 800322c:	4630      	mov	r0, r6
 800322e:	f000 fa5b 	bl	80036e8 <_free_r>
 8003232:	2300      	movs	r3, #0
 8003234:	6363      	str	r3, [r4, #52]	; 0x34
 8003236:	89a3      	ldrh	r3, [r4, #12]
 8003238:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800323c:	81a3      	strh	r3, [r4, #12]
 800323e:	2300      	movs	r3, #0
 8003240:	6063      	str	r3, [r4, #4]
 8003242:	6923      	ldr	r3, [r4, #16]
 8003244:	6023      	str	r3, [r4, #0]
 8003246:	89a3      	ldrh	r3, [r4, #12]
 8003248:	f043 0308 	orr.w	r3, r3, #8
 800324c:	81a3      	strh	r3, [r4, #12]
 800324e:	6923      	ldr	r3, [r4, #16]
 8003250:	b94b      	cbnz	r3, 8003266 <__swsetup_r+0x9a>
 8003252:	89a3      	ldrh	r3, [r4, #12]
 8003254:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003258:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800325c:	d003      	beq.n	8003266 <__swsetup_r+0x9a>
 800325e:	4621      	mov	r1, r4
 8003260:	4630      	mov	r0, r6
 8003262:	f000 fa01 	bl	8003668 <__smakebuf_r>
 8003266:	89a0      	ldrh	r0, [r4, #12]
 8003268:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800326c:	f010 0301 	ands.w	r3, r0, #1
 8003270:	d00a      	beq.n	8003288 <__swsetup_r+0xbc>
 8003272:	2300      	movs	r3, #0
 8003274:	60a3      	str	r3, [r4, #8]
 8003276:	6963      	ldr	r3, [r4, #20]
 8003278:	425b      	negs	r3, r3
 800327a:	61a3      	str	r3, [r4, #24]
 800327c:	6923      	ldr	r3, [r4, #16]
 800327e:	b943      	cbnz	r3, 8003292 <__swsetup_r+0xc6>
 8003280:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003284:	d1ba      	bne.n	80031fc <__swsetup_r+0x30>
 8003286:	bd70      	pop	{r4, r5, r6, pc}
 8003288:	0781      	lsls	r1, r0, #30
 800328a:	bf58      	it	pl
 800328c:	6963      	ldrpl	r3, [r4, #20]
 800328e:	60a3      	str	r3, [r4, #8]
 8003290:	e7f4      	b.n	800327c <__swsetup_r+0xb0>
 8003292:	2000      	movs	r0, #0
 8003294:	e7f7      	b.n	8003286 <__swsetup_r+0xba>
 8003296:	bf00      	nop
 8003298:	2000000c 	.word	0x2000000c
 800329c:	08003ba0 	.word	0x08003ba0
 80032a0:	08003bc0 	.word	0x08003bc0
 80032a4:	08003b80 	.word	0x08003b80

080032a8 <__sflush_r>:
 80032a8:	898a      	ldrh	r2, [r1, #12]
 80032aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80032ae:	4605      	mov	r5, r0
 80032b0:	0710      	lsls	r0, r2, #28
 80032b2:	460c      	mov	r4, r1
 80032b4:	d458      	bmi.n	8003368 <__sflush_r+0xc0>
 80032b6:	684b      	ldr	r3, [r1, #4]
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	dc05      	bgt.n	80032c8 <__sflush_r+0x20>
 80032bc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80032be:	2b00      	cmp	r3, #0
 80032c0:	dc02      	bgt.n	80032c8 <__sflush_r+0x20>
 80032c2:	2000      	movs	r0, #0
 80032c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80032c8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80032ca:	2e00      	cmp	r6, #0
 80032cc:	d0f9      	beq.n	80032c2 <__sflush_r+0x1a>
 80032ce:	2300      	movs	r3, #0
 80032d0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80032d4:	682f      	ldr	r7, [r5, #0]
 80032d6:	602b      	str	r3, [r5, #0]
 80032d8:	d032      	beq.n	8003340 <__sflush_r+0x98>
 80032da:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80032dc:	89a3      	ldrh	r3, [r4, #12]
 80032de:	075a      	lsls	r2, r3, #29
 80032e0:	d505      	bpl.n	80032ee <__sflush_r+0x46>
 80032e2:	6863      	ldr	r3, [r4, #4]
 80032e4:	1ac0      	subs	r0, r0, r3
 80032e6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80032e8:	b10b      	cbz	r3, 80032ee <__sflush_r+0x46>
 80032ea:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80032ec:	1ac0      	subs	r0, r0, r3
 80032ee:	2300      	movs	r3, #0
 80032f0:	4602      	mov	r2, r0
 80032f2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80032f4:	6a21      	ldr	r1, [r4, #32]
 80032f6:	4628      	mov	r0, r5
 80032f8:	47b0      	blx	r6
 80032fa:	1c43      	adds	r3, r0, #1
 80032fc:	89a3      	ldrh	r3, [r4, #12]
 80032fe:	d106      	bne.n	800330e <__sflush_r+0x66>
 8003300:	6829      	ldr	r1, [r5, #0]
 8003302:	291d      	cmp	r1, #29
 8003304:	d82c      	bhi.n	8003360 <__sflush_r+0xb8>
 8003306:	4a2a      	ldr	r2, [pc, #168]	; (80033b0 <__sflush_r+0x108>)
 8003308:	40ca      	lsrs	r2, r1
 800330a:	07d6      	lsls	r6, r2, #31
 800330c:	d528      	bpl.n	8003360 <__sflush_r+0xb8>
 800330e:	2200      	movs	r2, #0
 8003310:	6062      	str	r2, [r4, #4]
 8003312:	04d9      	lsls	r1, r3, #19
 8003314:	6922      	ldr	r2, [r4, #16]
 8003316:	6022      	str	r2, [r4, #0]
 8003318:	d504      	bpl.n	8003324 <__sflush_r+0x7c>
 800331a:	1c42      	adds	r2, r0, #1
 800331c:	d101      	bne.n	8003322 <__sflush_r+0x7a>
 800331e:	682b      	ldr	r3, [r5, #0]
 8003320:	b903      	cbnz	r3, 8003324 <__sflush_r+0x7c>
 8003322:	6560      	str	r0, [r4, #84]	; 0x54
 8003324:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003326:	602f      	str	r7, [r5, #0]
 8003328:	2900      	cmp	r1, #0
 800332a:	d0ca      	beq.n	80032c2 <__sflush_r+0x1a>
 800332c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003330:	4299      	cmp	r1, r3
 8003332:	d002      	beq.n	800333a <__sflush_r+0x92>
 8003334:	4628      	mov	r0, r5
 8003336:	f000 f9d7 	bl	80036e8 <_free_r>
 800333a:	2000      	movs	r0, #0
 800333c:	6360      	str	r0, [r4, #52]	; 0x34
 800333e:	e7c1      	b.n	80032c4 <__sflush_r+0x1c>
 8003340:	6a21      	ldr	r1, [r4, #32]
 8003342:	2301      	movs	r3, #1
 8003344:	4628      	mov	r0, r5
 8003346:	47b0      	blx	r6
 8003348:	1c41      	adds	r1, r0, #1
 800334a:	d1c7      	bne.n	80032dc <__sflush_r+0x34>
 800334c:	682b      	ldr	r3, [r5, #0]
 800334e:	2b00      	cmp	r3, #0
 8003350:	d0c4      	beq.n	80032dc <__sflush_r+0x34>
 8003352:	2b1d      	cmp	r3, #29
 8003354:	d001      	beq.n	800335a <__sflush_r+0xb2>
 8003356:	2b16      	cmp	r3, #22
 8003358:	d101      	bne.n	800335e <__sflush_r+0xb6>
 800335a:	602f      	str	r7, [r5, #0]
 800335c:	e7b1      	b.n	80032c2 <__sflush_r+0x1a>
 800335e:	89a3      	ldrh	r3, [r4, #12]
 8003360:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003364:	81a3      	strh	r3, [r4, #12]
 8003366:	e7ad      	b.n	80032c4 <__sflush_r+0x1c>
 8003368:	690f      	ldr	r7, [r1, #16]
 800336a:	2f00      	cmp	r7, #0
 800336c:	d0a9      	beq.n	80032c2 <__sflush_r+0x1a>
 800336e:	0793      	lsls	r3, r2, #30
 8003370:	680e      	ldr	r6, [r1, #0]
 8003372:	bf08      	it	eq
 8003374:	694b      	ldreq	r3, [r1, #20]
 8003376:	600f      	str	r7, [r1, #0]
 8003378:	bf18      	it	ne
 800337a:	2300      	movne	r3, #0
 800337c:	eba6 0807 	sub.w	r8, r6, r7
 8003380:	608b      	str	r3, [r1, #8]
 8003382:	f1b8 0f00 	cmp.w	r8, #0
 8003386:	dd9c      	ble.n	80032c2 <__sflush_r+0x1a>
 8003388:	6a21      	ldr	r1, [r4, #32]
 800338a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800338c:	4643      	mov	r3, r8
 800338e:	463a      	mov	r2, r7
 8003390:	4628      	mov	r0, r5
 8003392:	47b0      	blx	r6
 8003394:	2800      	cmp	r0, #0
 8003396:	dc06      	bgt.n	80033a6 <__sflush_r+0xfe>
 8003398:	89a3      	ldrh	r3, [r4, #12]
 800339a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800339e:	81a3      	strh	r3, [r4, #12]
 80033a0:	f04f 30ff 	mov.w	r0, #4294967295
 80033a4:	e78e      	b.n	80032c4 <__sflush_r+0x1c>
 80033a6:	4407      	add	r7, r0
 80033a8:	eba8 0800 	sub.w	r8, r8, r0
 80033ac:	e7e9      	b.n	8003382 <__sflush_r+0xda>
 80033ae:	bf00      	nop
 80033b0:	20400001 	.word	0x20400001

080033b4 <_fflush_r>:
 80033b4:	b538      	push	{r3, r4, r5, lr}
 80033b6:	690b      	ldr	r3, [r1, #16]
 80033b8:	4605      	mov	r5, r0
 80033ba:	460c      	mov	r4, r1
 80033bc:	b913      	cbnz	r3, 80033c4 <_fflush_r+0x10>
 80033be:	2500      	movs	r5, #0
 80033c0:	4628      	mov	r0, r5
 80033c2:	bd38      	pop	{r3, r4, r5, pc}
 80033c4:	b118      	cbz	r0, 80033ce <_fflush_r+0x1a>
 80033c6:	6983      	ldr	r3, [r0, #24]
 80033c8:	b90b      	cbnz	r3, 80033ce <_fflush_r+0x1a>
 80033ca:	f000 f887 	bl	80034dc <__sinit>
 80033ce:	4b14      	ldr	r3, [pc, #80]	; (8003420 <_fflush_r+0x6c>)
 80033d0:	429c      	cmp	r4, r3
 80033d2:	d11b      	bne.n	800340c <_fflush_r+0x58>
 80033d4:	686c      	ldr	r4, [r5, #4]
 80033d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d0ef      	beq.n	80033be <_fflush_r+0xa>
 80033de:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80033e0:	07d0      	lsls	r0, r2, #31
 80033e2:	d404      	bmi.n	80033ee <_fflush_r+0x3a>
 80033e4:	0599      	lsls	r1, r3, #22
 80033e6:	d402      	bmi.n	80033ee <_fflush_r+0x3a>
 80033e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80033ea:	f000 f915 	bl	8003618 <__retarget_lock_acquire_recursive>
 80033ee:	4628      	mov	r0, r5
 80033f0:	4621      	mov	r1, r4
 80033f2:	f7ff ff59 	bl	80032a8 <__sflush_r>
 80033f6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80033f8:	07da      	lsls	r2, r3, #31
 80033fa:	4605      	mov	r5, r0
 80033fc:	d4e0      	bmi.n	80033c0 <_fflush_r+0xc>
 80033fe:	89a3      	ldrh	r3, [r4, #12]
 8003400:	059b      	lsls	r3, r3, #22
 8003402:	d4dd      	bmi.n	80033c0 <_fflush_r+0xc>
 8003404:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003406:	f000 f908 	bl	800361a <__retarget_lock_release_recursive>
 800340a:	e7d9      	b.n	80033c0 <_fflush_r+0xc>
 800340c:	4b05      	ldr	r3, [pc, #20]	; (8003424 <_fflush_r+0x70>)
 800340e:	429c      	cmp	r4, r3
 8003410:	d101      	bne.n	8003416 <_fflush_r+0x62>
 8003412:	68ac      	ldr	r4, [r5, #8]
 8003414:	e7df      	b.n	80033d6 <_fflush_r+0x22>
 8003416:	4b04      	ldr	r3, [pc, #16]	; (8003428 <_fflush_r+0x74>)
 8003418:	429c      	cmp	r4, r3
 800341a:	bf08      	it	eq
 800341c:	68ec      	ldreq	r4, [r5, #12]
 800341e:	e7da      	b.n	80033d6 <_fflush_r+0x22>
 8003420:	08003ba0 	.word	0x08003ba0
 8003424:	08003bc0 	.word	0x08003bc0
 8003428:	08003b80 	.word	0x08003b80

0800342c <std>:
 800342c:	2300      	movs	r3, #0
 800342e:	b510      	push	{r4, lr}
 8003430:	4604      	mov	r4, r0
 8003432:	e9c0 3300 	strd	r3, r3, [r0]
 8003436:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800343a:	6083      	str	r3, [r0, #8]
 800343c:	8181      	strh	r1, [r0, #12]
 800343e:	6643      	str	r3, [r0, #100]	; 0x64
 8003440:	81c2      	strh	r2, [r0, #14]
 8003442:	6183      	str	r3, [r0, #24]
 8003444:	4619      	mov	r1, r3
 8003446:	2208      	movs	r2, #8
 8003448:	305c      	adds	r0, #92	; 0x5c
 800344a:	f7ff fdc7 	bl	8002fdc <memset>
 800344e:	4b05      	ldr	r3, [pc, #20]	; (8003464 <std+0x38>)
 8003450:	6263      	str	r3, [r4, #36]	; 0x24
 8003452:	4b05      	ldr	r3, [pc, #20]	; (8003468 <std+0x3c>)
 8003454:	62a3      	str	r3, [r4, #40]	; 0x28
 8003456:	4b05      	ldr	r3, [pc, #20]	; (800346c <std+0x40>)
 8003458:	62e3      	str	r3, [r4, #44]	; 0x2c
 800345a:	4b05      	ldr	r3, [pc, #20]	; (8003470 <std+0x44>)
 800345c:	6224      	str	r4, [r4, #32]
 800345e:	6323      	str	r3, [r4, #48]	; 0x30
 8003460:	bd10      	pop	{r4, pc}
 8003462:	bf00      	nop
 8003464:	080038c9 	.word	0x080038c9
 8003468:	080038eb 	.word	0x080038eb
 800346c:	08003923 	.word	0x08003923
 8003470:	08003947 	.word	0x08003947

08003474 <_cleanup_r>:
 8003474:	4901      	ldr	r1, [pc, #4]	; (800347c <_cleanup_r+0x8>)
 8003476:	f000 b8af 	b.w	80035d8 <_fwalk_reent>
 800347a:	bf00      	nop
 800347c:	080033b5 	.word	0x080033b5

08003480 <__sfmoreglue>:
 8003480:	b570      	push	{r4, r5, r6, lr}
 8003482:	2268      	movs	r2, #104	; 0x68
 8003484:	1e4d      	subs	r5, r1, #1
 8003486:	4355      	muls	r5, r2
 8003488:	460e      	mov	r6, r1
 800348a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800348e:	f000 f997 	bl	80037c0 <_malloc_r>
 8003492:	4604      	mov	r4, r0
 8003494:	b140      	cbz	r0, 80034a8 <__sfmoreglue+0x28>
 8003496:	2100      	movs	r1, #0
 8003498:	e9c0 1600 	strd	r1, r6, [r0]
 800349c:	300c      	adds	r0, #12
 800349e:	60a0      	str	r0, [r4, #8]
 80034a0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80034a4:	f7ff fd9a 	bl	8002fdc <memset>
 80034a8:	4620      	mov	r0, r4
 80034aa:	bd70      	pop	{r4, r5, r6, pc}

080034ac <__sfp_lock_acquire>:
 80034ac:	4801      	ldr	r0, [pc, #4]	; (80034b4 <__sfp_lock_acquire+0x8>)
 80034ae:	f000 b8b3 	b.w	8003618 <__retarget_lock_acquire_recursive>
 80034b2:	bf00      	nop
 80034b4:	2000019d 	.word	0x2000019d

080034b8 <__sfp_lock_release>:
 80034b8:	4801      	ldr	r0, [pc, #4]	; (80034c0 <__sfp_lock_release+0x8>)
 80034ba:	f000 b8ae 	b.w	800361a <__retarget_lock_release_recursive>
 80034be:	bf00      	nop
 80034c0:	2000019d 	.word	0x2000019d

080034c4 <__sinit_lock_acquire>:
 80034c4:	4801      	ldr	r0, [pc, #4]	; (80034cc <__sinit_lock_acquire+0x8>)
 80034c6:	f000 b8a7 	b.w	8003618 <__retarget_lock_acquire_recursive>
 80034ca:	bf00      	nop
 80034cc:	2000019e 	.word	0x2000019e

080034d0 <__sinit_lock_release>:
 80034d0:	4801      	ldr	r0, [pc, #4]	; (80034d8 <__sinit_lock_release+0x8>)
 80034d2:	f000 b8a2 	b.w	800361a <__retarget_lock_release_recursive>
 80034d6:	bf00      	nop
 80034d8:	2000019e 	.word	0x2000019e

080034dc <__sinit>:
 80034dc:	b510      	push	{r4, lr}
 80034de:	4604      	mov	r4, r0
 80034e0:	f7ff fff0 	bl	80034c4 <__sinit_lock_acquire>
 80034e4:	69a3      	ldr	r3, [r4, #24]
 80034e6:	b11b      	cbz	r3, 80034f0 <__sinit+0x14>
 80034e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80034ec:	f7ff bff0 	b.w	80034d0 <__sinit_lock_release>
 80034f0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80034f4:	6523      	str	r3, [r4, #80]	; 0x50
 80034f6:	4b13      	ldr	r3, [pc, #76]	; (8003544 <__sinit+0x68>)
 80034f8:	4a13      	ldr	r2, [pc, #76]	; (8003548 <__sinit+0x6c>)
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	62a2      	str	r2, [r4, #40]	; 0x28
 80034fe:	42a3      	cmp	r3, r4
 8003500:	bf04      	itt	eq
 8003502:	2301      	moveq	r3, #1
 8003504:	61a3      	streq	r3, [r4, #24]
 8003506:	4620      	mov	r0, r4
 8003508:	f000 f820 	bl	800354c <__sfp>
 800350c:	6060      	str	r0, [r4, #4]
 800350e:	4620      	mov	r0, r4
 8003510:	f000 f81c 	bl	800354c <__sfp>
 8003514:	60a0      	str	r0, [r4, #8]
 8003516:	4620      	mov	r0, r4
 8003518:	f000 f818 	bl	800354c <__sfp>
 800351c:	2200      	movs	r2, #0
 800351e:	60e0      	str	r0, [r4, #12]
 8003520:	2104      	movs	r1, #4
 8003522:	6860      	ldr	r0, [r4, #4]
 8003524:	f7ff ff82 	bl	800342c <std>
 8003528:	68a0      	ldr	r0, [r4, #8]
 800352a:	2201      	movs	r2, #1
 800352c:	2109      	movs	r1, #9
 800352e:	f7ff ff7d 	bl	800342c <std>
 8003532:	68e0      	ldr	r0, [r4, #12]
 8003534:	2202      	movs	r2, #2
 8003536:	2112      	movs	r1, #18
 8003538:	f7ff ff78 	bl	800342c <std>
 800353c:	2301      	movs	r3, #1
 800353e:	61a3      	str	r3, [r4, #24]
 8003540:	e7d2      	b.n	80034e8 <__sinit+0xc>
 8003542:	bf00      	nop
 8003544:	08003b7c 	.word	0x08003b7c
 8003548:	08003475 	.word	0x08003475

0800354c <__sfp>:
 800354c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800354e:	4607      	mov	r7, r0
 8003550:	f7ff ffac 	bl	80034ac <__sfp_lock_acquire>
 8003554:	4b1e      	ldr	r3, [pc, #120]	; (80035d0 <__sfp+0x84>)
 8003556:	681e      	ldr	r6, [r3, #0]
 8003558:	69b3      	ldr	r3, [r6, #24]
 800355a:	b913      	cbnz	r3, 8003562 <__sfp+0x16>
 800355c:	4630      	mov	r0, r6
 800355e:	f7ff ffbd 	bl	80034dc <__sinit>
 8003562:	3648      	adds	r6, #72	; 0x48
 8003564:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003568:	3b01      	subs	r3, #1
 800356a:	d503      	bpl.n	8003574 <__sfp+0x28>
 800356c:	6833      	ldr	r3, [r6, #0]
 800356e:	b30b      	cbz	r3, 80035b4 <__sfp+0x68>
 8003570:	6836      	ldr	r6, [r6, #0]
 8003572:	e7f7      	b.n	8003564 <__sfp+0x18>
 8003574:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003578:	b9d5      	cbnz	r5, 80035b0 <__sfp+0x64>
 800357a:	4b16      	ldr	r3, [pc, #88]	; (80035d4 <__sfp+0x88>)
 800357c:	60e3      	str	r3, [r4, #12]
 800357e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003582:	6665      	str	r5, [r4, #100]	; 0x64
 8003584:	f000 f847 	bl	8003616 <__retarget_lock_init_recursive>
 8003588:	f7ff ff96 	bl	80034b8 <__sfp_lock_release>
 800358c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8003590:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8003594:	6025      	str	r5, [r4, #0]
 8003596:	61a5      	str	r5, [r4, #24]
 8003598:	2208      	movs	r2, #8
 800359a:	4629      	mov	r1, r5
 800359c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80035a0:	f7ff fd1c 	bl	8002fdc <memset>
 80035a4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80035a8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80035ac:	4620      	mov	r0, r4
 80035ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80035b0:	3468      	adds	r4, #104	; 0x68
 80035b2:	e7d9      	b.n	8003568 <__sfp+0x1c>
 80035b4:	2104      	movs	r1, #4
 80035b6:	4638      	mov	r0, r7
 80035b8:	f7ff ff62 	bl	8003480 <__sfmoreglue>
 80035bc:	4604      	mov	r4, r0
 80035be:	6030      	str	r0, [r6, #0]
 80035c0:	2800      	cmp	r0, #0
 80035c2:	d1d5      	bne.n	8003570 <__sfp+0x24>
 80035c4:	f7ff ff78 	bl	80034b8 <__sfp_lock_release>
 80035c8:	230c      	movs	r3, #12
 80035ca:	603b      	str	r3, [r7, #0]
 80035cc:	e7ee      	b.n	80035ac <__sfp+0x60>
 80035ce:	bf00      	nop
 80035d0:	08003b7c 	.word	0x08003b7c
 80035d4:	ffff0001 	.word	0xffff0001

080035d8 <_fwalk_reent>:
 80035d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80035dc:	4606      	mov	r6, r0
 80035de:	4688      	mov	r8, r1
 80035e0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80035e4:	2700      	movs	r7, #0
 80035e6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80035ea:	f1b9 0901 	subs.w	r9, r9, #1
 80035ee:	d505      	bpl.n	80035fc <_fwalk_reent+0x24>
 80035f0:	6824      	ldr	r4, [r4, #0]
 80035f2:	2c00      	cmp	r4, #0
 80035f4:	d1f7      	bne.n	80035e6 <_fwalk_reent+0xe>
 80035f6:	4638      	mov	r0, r7
 80035f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80035fc:	89ab      	ldrh	r3, [r5, #12]
 80035fe:	2b01      	cmp	r3, #1
 8003600:	d907      	bls.n	8003612 <_fwalk_reent+0x3a>
 8003602:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003606:	3301      	adds	r3, #1
 8003608:	d003      	beq.n	8003612 <_fwalk_reent+0x3a>
 800360a:	4629      	mov	r1, r5
 800360c:	4630      	mov	r0, r6
 800360e:	47c0      	blx	r8
 8003610:	4307      	orrs	r7, r0
 8003612:	3568      	adds	r5, #104	; 0x68
 8003614:	e7e9      	b.n	80035ea <_fwalk_reent+0x12>

08003616 <__retarget_lock_init_recursive>:
 8003616:	4770      	bx	lr

08003618 <__retarget_lock_acquire_recursive>:
 8003618:	4770      	bx	lr

0800361a <__retarget_lock_release_recursive>:
 800361a:	4770      	bx	lr

0800361c <__swhatbuf_r>:
 800361c:	b570      	push	{r4, r5, r6, lr}
 800361e:	460e      	mov	r6, r1
 8003620:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003624:	2900      	cmp	r1, #0
 8003626:	b096      	sub	sp, #88	; 0x58
 8003628:	4614      	mov	r4, r2
 800362a:	461d      	mov	r5, r3
 800362c:	da08      	bge.n	8003640 <__swhatbuf_r+0x24>
 800362e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8003632:	2200      	movs	r2, #0
 8003634:	602a      	str	r2, [r5, #0]
 8003636:	061a      	lsls	r2, r3, #24
 8003638:	d410      	bmi.n	800365c <__swhatbuf_r+0x40>
 800363a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800363e:	e00e      	b.n	800365e <__swhatbuf_r+0x42>
 8003640:	466a      	mov	r2, sp
 8003642:	f000 f9a7 	bl	8003994 <_fstat_r>
 8003646:	2800      	cmp	r0, #0
 8003648:	dbf1      	blt.n	800362e <__swhatbuf_r+0x12>
 800364a:	9a01      	ldr	r2, [sp, #4]
 800364c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8003650:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003654:	425a      	negs	r2, r3
 8003656:	415a      	adcs	r2, r3
 8003658:	602a      	str	r2, [r5, #0]
 800365a:	e7ee      	b.n	800363a <__swhatbuf_r+0x1e>
 800365c:	2340      	movs	r3, #64	; 0x40
 800365e:	2000      	movs	r0, #0
 8003660:	6023      	str	r3, [r4, #0]
 8003662:	b016      	add	sp, #88	; 0x58
 8003664:	bd70      	pop	{r4, r5, r6, pc}
	...

08003668 <__smakebuf_r>:
 8003668:	898b      	ldrh	r3, [r1, #12]
 800366a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800366c:	079d      	lsls	r5, r3, #30
 800366e:	4606      	mov	r6, r0
 8003670:	460c      	mov	r4, r1
 8003672:	d507      	bpl.n	8003684 <__smakebuf_r+0x1c>
 8003674:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003678:	6023      	str	r3, [r4, #0]
 800367a:	6123      	str	r3, [r4, #16]
 800367c:	2301      	movs	r3, #1
 800367e:	6163      	str	r3, [r4, #20]
 8003680:	b002      	add	sp, #8
 8003682:	bd70      	pop	{r4, r5, r6, pc}
 8003684:	ab01      	add	r3, sp, #4
 8003686:	466a      	mov	r2, sp
 8003688:	f7ff ffc8 	bl	800361c <__swhatbuf_r>
 800368c:	9900      	ldr	r1, [sp, #0]
 800368e:	4605      	mov	r5, r0
 8003690:	4630      	mov	r0, r6
 8003692:	f000 f895 	bl	80037c0 <_malloc_r>
 8003696:	b948      	cbnz	r0, 80036ac <__smakebuf_r+0x44>
 8003698:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800369c:	059a      	lsls	r2, r3, #22
 800369e:	d4ef      	bmi.n	8003680 <__smakebuf_r+0x18>
 80036a0:	f023 0303 	bic.w	r3, r3, #3
 80036a4:	f043 0302 	orr.w	r3, r3, #2
 80036a8:	81a3      	strh	r3, [r4, #12]
 80036aa:	e7e3      	b.n	8003674 <__smakebuf_r+0xc>
 80036ac:	4b0d      	ldr	r3, [pc, #52]	; (80036e4 <__smakebuf_r+0x7c>)
 80036ae:	62b3      	str	r3, [r6, #40]	; 0x28
 80036b0:	89a3      	ldrh	r3, [r4, #12]
 80036b2:	6020      	str	r0, [r4, #0]
 80036b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80036b8:	81a3      	strh	r3, [r4, #12]
 80036ba:	9b00      	ldr	r3, [sp, #0]
 80036bc:	6163      	str	r3, [r4, #20]
 80036be:	9b01      	ldr	r3, [sp, #4]
 80036c0:	6120      	str	r0, [r4, #16]
 80036c2:	b15b      	cbz	r3, 80036dc <__smakebuf_r+0x74>
 80036c4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80036c8:	4630      	mov	r0, r6
 80036ca:	f000 f975 	bl	80039b8 <_isatty_r>
 80036ce:	b128      	cbz	r0, 80036dc <__smakebuf_r+0x74>
 80036d0:	89a3      	ldrh	r3, [r4, #12]
 80036d2:	f023 0303 	bic.w	r3, r3, #3
 80036d6:	f043 0301 	orr.w	r3, r3, #1
 80036da:	81a3      	strh	r3, [r4, #12]
 80036dc:	89a0      	ldrh	r0, [r4, #12]
 80036de:	4305      	orrs	r5, r0
 80036e0:	81a5      	strh	r5, [r4, #12]
 80036e2:	e7cd      	b.n	8003680 <__smakebuf_r+0x18>
 80036e4:	08003475 	.word	0x08003475

080036e8 <_free_r>:
 80036e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80036ea:	2900      	cmp	r1, #0
 80036ec:	d044      	beq.n	8003778 <_free_r+0x90>
 80036ee:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80036f2:	9001      	str	r0, [sp, #4]
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	f1a1 0404 	sub.w	r4, r1, #4
 80036fa:	bfb8      	it	lt
 80036fc:	18e4      	addlt	r4, r4, r3
 80036fe:	f000 f97d 	bl	80039fc <__malloc_lock>
 8003702:	4a1e      	ldr	r2, [pc, #120]	; (800377c <_free_r+0x94>)
 8003704:	9801      	ldr	r0, [sp, #4]
 8003706:	6813      	ldr	r3, [r2, #0]
 8003708:	b933      	cbnz	r3, 8003718 <_free_r+0x30>
 800370a:	6063      	str	r3, [r4, #4]
 800370c:	6014      	str	r4, [r2, #0]
 800370e:	b003      	add	sp, #12
 8003710:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003714:	f000 b978 	b.w	8003a08 <__malloc_unlock>
 8003718:	42a3      	cmp	r3, r4
 800371a:	d908      	bls.n	800372e <_free_r+0x46>
 800371c:	6825      	ldr	r5, [r4, #0]
 800371e:	1961      	adds	r1, r4, r5
 8003720:	428b      	cmp	r3, r1
 8003722:	bf01      	itttt	eq
 8003724:	6819      	ldreq	r1, [r3, #0]
 8003726:	685b      	ldreq	r3, [r3, #4]
 8003728:	1949      	addeq	r1, r1, r5
 800372a:	6021      	streq	r1, [r4, #0]
 800372c:	e7ed      	b.n	800370a <_free_r+0x22>
 800372e:	461a      	mov	r2, r3
 8003730:	685b      	ldr	r3, [r3, #4]
 8003732:	b10b      	cbz	r3, 8003738 <_free_r+0x50>
 8003734:	42a3      	cmp	r3, r4
 8003736:	d9fa      	bls.n	800372e <_free_r+0x46>
 8003738:	6811      	ldr	r1, [r2, #0]
 800373a:	1855      	adds	r5, r2, r1
 800373c:	42a5      	cmp	r5, r4
 800373e:	d10b      	bne.n	8003758 <_free_r+0x70>
 8003740:	6824      	ldr	r4, [r4, #0]
 8003742:	4421      	add	r1, r4
 8003744:	1854      	adds	r4, r2, r1
 8003746:	42a3      	cmp	r3, r4
 8003748:	6011      	str	r1, [r2, #0]
 800374a:	d1e0      	bne.n	800370e <_free_r+0x26>
 800374c:	681c      	ldr	r4, [r3, #0]
 800374e:	685b      	ldr	r3, [r3, #4]
 8003750:	6053      	str	r3, [r2, #4]
 8003752:	4421      	add	r1, r4
 8003754:	6011      	str	r1, [r2, #0]
 8003756:	e7da      	b.n	800370e <_free_r+0x26>
 8003758:	d902      	bls.n	8003760 <_free_r+0x78>
 800375a:	230c      	movs	r3, #12
 800375c:	6003      	str	r3, [r0, #0]
 800375e:	e7d6      	b.n	800370e <_free_r+0x26>
 8003760:	6825      	ldr	r5, [r4, #0]
 8003762:	1961      	adds	r1, r4, r5
 8003764:	428b      	cmp	r3, r1
 8003766:	bf04      	itt	eq
 8003768:	6819      	ldreq	r1, [r3, #0]
 800376a:	685b      	ldreq	r3, [r3, #4]
 800376c:	6063      	str	r3, [r4, #4]
 800376e:	bf04      	itt	eq
 8003770:	1949      	addeq	r1, r1, r5
 8003772:	6021      	streq	r1, [r4, #0]
 8003774:	6054      	str	r4, [r2, #4]
 8003776:	e7ca      	b.n	800370e <_free_r+0x26>
 8003778:	b003      	add	sp, #12
 800377a:	bd30      	pop	{r4, r5, pc}
 800377c:	200001a0 	.word	0x200001a0

08003780 <sbrk_aligned>:
 8003780:	b570      	push	{r4, r5, r6, lr}
 8003782:	4e0e      	ldr	r6, [pc, #56]	; (80037bc <sbrk_aligned+0x3c>)
 8003784:	460c      	mov	r4, r1
 8003786:	6831      	ldr	r1, [r6, #0]
 8003788:	4605      	mov	r5, r0
 800378a:	b911      	cbnz	r1, 8003792 <sbrk_aligned+0x12>
 800378c:	f000 f88c 	bl	80038a8 <_sbrk_r>
 8003790:	6030      	str	r0, [r6, #0]
 8003792:	4621      	mov	r1, r4
 8003794:	4628      	mov	r0, r5
 8003796:	f000 f887 	bl	80038a8 <_sbrk_r>
 800379a:	1c43      	adds	r3, r0, #1
 800379c:	d00a      	beq.n	80037b4 <sbrk_aligned+0x34>
 800379e:	1cc4      	adds	r4, r0, #3
 80037a0:	f024 0403 	bic.w	r4, r4, #3
 80037a4:	42a0      	cmp	r0, r4
 80037a6:	d007      	beq.n	80037b8 <sbrk_aligned+0x38>
 80037a8:	1a21      	subs	r1, r4, r0
 80037aa:	4628      	mov	r0, r5
 80037ac:	f000 f87c 	bl	80038a8 <_sbrk_r>
 80037b0:	3001      	adds	r0, #1
 80037b2:	d101      	bne.n	80037b8 <sbrk_aligned+0x38>
 80037b4:	f04f 34ff 	mov.w	r4, #4294967295
 80037b8:	4620      	mov	r0, r4
 80037ba:	bd70      	pop	{r4, r5, r6, pc}
 80037bc:	200001a4 	.word	0x200001a4

080037c0 <_malloc_r>:
 80037c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80037c4:	1ccd      	adds	r5, r1, #3
 80037c6:	f025 0503 	bic.w	r5, r5, #3
 80037ca:	3508      	adds	r5, #8
 80037cc:	2d0c      	cmp	r5, #12
 80037ce:	bf38      	it	cc
 80037d0:	250c      	movcc	r5, #12
 80037d2:	2d00      	cmp	r5, #0
 80037d4:	4607      	mov	r7, r0
 80037d6:	db01      	blt.n	80037dc <_malloc_r+0x1c>
 80037d8:	42a9      	cmp	r1, r5
 80037da:	d905      	bls.n	80037e8 <_malloc_r+0x28>
 80037dc:	230c      	movs	r3, #12
 80037de:	603b      	str	r3, [r7, #0]
 80037e0:	2600      	movs	r6, #0
 80037e2:	4630      	mov	r0, r6
 80037e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80037e8:	4e2e      	ldr	r6, [pc, #184]	; (80038a4 <_malloc_r+0xe4>)
 80037ea:	f000 f907 	bl	80039fc <__malloc_lock>
 80037ee:	6833      	ldr	r3, [r6, #0]
 80037f0:	461c      	mov	r4, r3
 80037f2:	bb34      	cbnz	r4, 8003842 <_malloc_r+0x82>
 80037f4:	4629      	mov	r1, r5
 80037f6:	4638      	mov	r0, r7
 80037f8:	f7ff ffc2 	bl	8003780 <sbrk_aligned>
 80037fc:	1c43      	adds	r3, r0, #1
 80037fe:	4604      	mov	r4, r0
 8003800:	d14d      	bne.n	800389e <_malloc_r+0xde>
 8003802:	6834      	ldr	r4, [r6, #0]
 8003804:	4626      	mov	r6, r4
 8003806:	2e00      	cmp	r6, #0
 8003808:	d140      	bne.n	800388c <_malloc_r+0xcc>
 800380a:	6823      	ldr	r3, [r4, #0]
 800380c:	4631      	mov	r1, r6
 800380e:	4638      	mov	r0, r7
 8003810:	eb04 0803 	add.w	r8, r4, r3
 8003814:	f000 f848 	bl	80038a8 <_sbrk_r>
 8003818:	4580      	cmp	r8, r0
 800381a:	d13a      	bne.n	8003892 <_malloc_r+0xd2>
 800381c:	6821      	ldr	r1, [r4, #0]
 800381e:	3503      	adds	r5, #3
 8003820:	1a6d      	subs	r5, r5, r1
 8003822:	f025 0503 	bic.w	r5, r5, #3
 8003826:	3508      	adds	r5, #8
 8003828:	2d0c      	cmp	r5, #12
 800382a:	bf38      	it	cc
 800382c:	250c      	movcc	r5, #12
 800382e:	4629      	mov	r1, r5
 8003830:	4638      	mov	r0, r7
 8003832:	f7ff ffa5 	bl	8003780 <sbrk_aligned>
 8003836:	3001      	adds	r0, #1
 8003838:	d02b      	beq.n	8003892 <_malloc_r+0xd2>
 800383a:	6823      	ldr	r3, [r4, #0]
 800383c:	442b      	add	r3, r5
 800383e:	6023      	str	r3, [r4, #0]
 8003840:	e00e      	b.n	8003860 <_malloc_r+0xa0>
 8003842:	6822      	ldr	r2, [r4, #0]
 8003844:	1b52      	subs	r2, r2, r5
 8003846:	d41e      	bmi.n	8003886 <_malloc_r+0xc6>
 8003848:	2a0b      	cmp	r2, #11
 800384a:	d916      	bls.n	800387a <_malloc_r+0xba>
 800384c:	1961      	adds	r1, r4, r5
 800384e:	42a3      	cmp	r3, r4
 8003850:	6025      	str	r5, [r4, #0]
 8003852:	bf18      	it	ne
 8003854:	6059      	strne	r1, [r3, #4]
 8003856:	6863      	ldr	r3, [r4, #4]
 8003858:	bf08      	it	eq
 800385a:	6031      	streq	r1, [r6, #0]
 800385c:	5162      	str	r2, [r4, r5]
 800385e:	604b      	str	r3, [r1, #4]
 8003860:	4638      	mov	r0, r7
 8003862:	f104 060b 	add.w	r6, r4, #11
 8003866:	f000 f8cf 	bl	8003a08 <__malloc_unlock>
 800386a:	f026 0607 	bic.w	r6, r6, #7
 800386e:	1d23      	adds	r3, r4, #4
 8003870:	1af2      	subs	r2, r6, r3
 8003872:	d0b6      	beq.n	80037e2 <_malloc_r+0x22>
 8003874:	1b9b      	subs	r3, r3, r6
 8003876:	50a3      	str	r3, [r4, r2]
 8003878:	e7b3      	b.n	80037e2 <_malloc_r+0x22>
 800387a:	6862      	ldr	r2, [r4, #4]
 800387c:	42a3      	cmp	r3, r4
 800387e:	bf0c      	ite	eq
 8003880:	6032      	streq	r2, [r6, #0]
 8003882:	605a      	strne	r2, [r3, #4]
 8003884:	e7ec      	b.n	8003860 <_malloc_r+0xa0>
 8003886:	4623      	mov	r3, r4
 8003888:	6864      	ldr	r4, [r4, #4]
 800388a:	e7b2      	b.n	80037f2 <_malloc_r+0x32>
 800388c:	4634      	mov	r4, r6
 800388e:	6876      	ldr	r6, [r6, #4]
 8003890:	e7b9      	b.n	8003806 <_malloc_r+0x46>
 8003892:	230c      	movs	r3, #12
 8003894:	603b      	str	r3, [r7, #0]
 8003896:	4638      	mov	r0, r7
 8003898:	f000 f8b6 	bl	8003a08 <__malloc_unlock>
 800389c:	e7a1      	b.n	80037e2 <_malloc_r+0x22>
 800389e:	6025      	str	r5, [r4, #0]
 80038a0:	e7de      	b.n	8003860 <_malloc_r+0xa0>
 80038a2:	bf00      	nop
 80038a4:	200001a0 	.word	0x200001a0

080038a8 <_sbrk_r>:
 80038a8:	b538      	push	{r3, r4, r5, lr}
 80038aa:	4d06      	ldr	r5, [pc, #24]	; (80038c4 <_sbrk_r+0x1c>)
 80038ac:	2300      	movs	r3, #0
 80038ae:	4604      	mov	r4, r0
 80038b0:	4608      	mov	r0, r1
 80038b2:	602b      	str	r3, [r5, #0]
 80038b4:	f7fd f916 	bl	8000ae4 <_sbrk>
 80038b8:	1c43      	adds	r3, r0, #1
 80038ba:	d102      	bne.n	80038c2 <_sbrk_r+0x1a>
 80038bc:	682b      	ldr	r3, [r5, #0]
 80038be:	b103      	cbz	r3, 80038c2 <_sbrk_r+0x1a>
 80038c0:	6023      	str	r3, [r4, #0]
 80038c2:	bd38      	pop	{r3, r4, r5, pc}
 80038c4:	200001a8 	.word	0x200001a8

080038c8 <__sread>:
 80038c8:	b510      	push	{r4, lr}
 80038ca:	460c      	mov	r4, r1
 80038cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80038d0:	f000 f8a0 	bl	8003a14 <_read_r>
 80038d4:	2800      	cmp	r0, #0
 80038d6:	bfab      	itete	ge
 80038d8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80038da:	89a3      	ldrhlt	r3, [r4, #12]
 80038dc:	181b      	addge	r3, r3, r0
 80038de:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80038e2:	bfac      	ite	ge
 80038e4:	6563      	strge	r3, [r4, #84]	; 0x54
 80038e6:	81a3      	strhlt	r3, [r4, #12]
 80038e8:	bd10      	pop	{r4, pc}

080038ea <__swrite>:
 80038ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80038ee:	461f      	mov	r7, r3
 80038f0:	898b      	ldrh	r3, [r1, #12]
 80038f2:	05db      	lsls	r3, r3, #23
 80038f4:	4605      	mov	r5, r0
 80038f6:	460c      	mov	r4, r1
 80038f8:	4616      	mov	r6, r2
 80038fa:	d505      	bpl.n	8003908 <__swrite+0x1e>
 80038fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003900:	2302      	movs	r3, #2
 8003902:	2200      	movs	r2, #0
 8003904:	f000 f868 	bl	80039d8 <_lseek_r>
 8003908:	89a3      	ldrh	r3, [r4, #12]
 800390a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800390e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003912:	81a3      	strh	r3, [r4, #12]
 8003914:	4632      	mov	r2, r6
 8003916:	463b      	mov	r3, r7
 8003918:	4628      	mov	r0, r5
 800391a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800391e:	f000 b817 	b.w	8003950 <_write_r>

08003922 <__sseek>:
 8003922:	b510      	push	{r4, lr}
 8003924:	460c      	mov	r4, r1
 8003926:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800392a:	f000 f855 	bl	80039d8 <_lseek_r>
 800392e:	1c43      	adds	r3, r0, #1
 8003930:	89a3      	ldrh	r3, [r4, #12]
 8003932:	bf15      	itete	ne
 8003934:	6560      	strne	r0, [r4, #84]	; 0x54
 8003936:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800393a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800393e:	81a3      	strheq	r3, [r4, #12]
 8003940:	bf18      	it	ne
 8003942:	81a3      	strhne	r3, [r4, #12]
 8003944:	bd10      	pop	{r4, pc}

08003946 <__sclose>:
 8003946:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800394a:	f000 b813 	b.w	8003974 <_close_r>
	...

08003950 <_write_r>:
 8003950:	b538      	push	{r3, r4, r5, lr}
 8003952:	4d07      	ldr	r5, [pc, #28]	; (8003970 <_write_r+0x20>)
 8003954:	4604      	mov	r4, r0
 8003956:	4608      	mov	r0, r1
 8003958:	4611      	mov	r1, r2
 800395a:	2200      	movs	r2, #0
 800395c:	602a      	str	r2, [r5, #0]
 800395e:	461a      	mov	r2, r3
 8003960:	f7fd f86f 	bl	8000a42 <_write>
 8003964:	1c43      	adds	r3, r0, #1
 8003966:	d102      	bne.n	800396e <_write_r+0x1e>
 8003968:	682b      	ldr	r3, [r5, #0]
 800396a:	b103      	cbz	r3, 800396e <_write_r+0x1e>
 800396c:	6023      	str	r3, [r4, #0]
 800396e:	bd38      	pop	{r3, r4, r5, pc}
 8003970:	200001a8 	.word	0x200001a8

08003974 <_close_r>:
 8003974:	b538      	push	{r3, r4, r5, lr}
 8003976:	4d06      	ldr	r5, [pc, #24]	; (8003990 <_close_r+0x1c>)
 8003978:	2300      	movs	r3, #0
 800397a:	4604      	mov	r4, r0
 800397c:	4608      	mov	r0, r1
 800397e:	602b      	str	r3, [r5, #0]
 8003980:	f7fd f87b 	bl	8000a7a <_close>
 8003984:	1c43      	adds	r3, r0, #1
 8003986:	d102      	bne.n	800398e <_close_r+0x1a>
 8003988:	682b      	ldr	r3, [r5, #0]
 800398a:	b103      	cbz	r3, 800398e <_close_r+0x1a>
 800398c:	6023      	str	r3, [r4, #0]
 800398e:	bd38      	pop	{r3, r4, r5, pc}
 8003990:	200001a8 	.word	0x200001a8

08003994 <_fstat_r>:
 8003994:	b538      	push	{r3, r4, r5, lr}
 8003996:	4d07      	ldr	r5, [pc, #28]	; (80039b4 <_fstat_r+0x20>)
 8003998:	2300      	movs	r3, #0
 800399a:	4604      	mov	r4, r0
 800399c:	4608      	mov	r0, r1
 800399e:	4611      	mov	r1, r2
 80039a0:	602b      	str	r3, [r5, #0]
 80039a2:	f7fd f876 	bl	8000a92 <_fstat>
 80039a6:	1c43      	adds	r3, r0, #1
 80039a8:	d102      	bne.n	80039b0 <_fstat_r+0x1c>
 80039aa:	682b      	ldr	r3, [r5, #0]
 80039ac:	b103      	cbz	r3, 80039b0 <_fstat_r+0x1c>
 80039ae:	6023      	str	r3, [r4, #0]
 80039b0:	bd38      	pop	{r3, r4, r5, pc}
 80039b2:	bf00      	nop
 80039b4:	200001a8 	.word	0x200001a8

080039b8 <_isatty_r>:
 80039b8:	b538      	push	{r3, r4, r5, lr}
 80039ba:	4d06      	ldr	r5, [pc, #24]	; (80039d4 <_isatty_r+0x1c>)
 80039bc:	2300      	movs	r3, #0
 80039be:	4604      	mov	r4, r0
 80039c0:	4608      	mov	r0, r1
 80039c2:	602b      	str	r3, [r5, #0]
 80039c4:	f7fd f875 	bl	8000ab2 <_isatty>
 80039c8:	1c43      	adds	r3, r0, #1
 80039ca:	d102      	bne.n	80039d2 <_isatty_r+0x1a>
 80039cc:	682b      	ldr	r3, [r5, #0]
 80039ce:	b103      	cbz	r3, 80039d2 <_isatty_r+0x1a>
 80039d0:	6023      	str	r3, [r4, #0]
 80039d2:	bd38      	pop	{r3, r4, r5, pc}
 80039d4:	200001a8 	.word	0x200001a8

080039d8 <_lseek_r>:
 80039d8:	b538      	push	{r3, r4, r5, lr}
 80039da:	4d07      	ldr	r5, [pc, #28]	; (80039f8 <_lseek_r+0x20>)
 80039dc:	4604      	mov	r4, r0
 80039de:	4608      	mov	r0, r1
 80039e0:	4611      	mov	r1, r2
 80039e2:	2200      	movs	r2, #0
 80039e4:	602a      	str	r2, [r5, #0]
 80039e6:	461a      	mov	r2, r3
 80039e8:	f7fd f86e 	bl	8000ac8 <_lseek>
 80039ec:	1c43      	adds	r3, r0, #1
 80039ee:	d102      	bne.n	80039f6 <_lseek_r+0x1e>
 80039f0:	682b      	ldr	r3, [r5, #0]
 80039f2:	b103      	cbz	r3, 80039f6 <_lseek_r+0x1e>
 80039f4:	6023      	str	r3, [r4, #0]
 80039f6:	bd38      	pop	{r3, r4, r5, pc}
 80039f8:	200001a8 	.word	0x200001a8

080039fc <__malloc_lock>:
 80039fc:	4801      	ldr	r0, [pc, #4]	; (8003a04 <__malloc_lock+0x8>)
 80039fe:	f7ff be0b 	b.w	8003618 <__retarget_lock_acquire_recursive>
 8003a02:	bf00      	nop
 8003a04:	2000019c 	.word	0x2000019c

08003a08 <__malloc_unlock>:
 8003a08:	4801      	ldr	r0, [pc, #4]	; (8003a10 <__malloc_unlock+0x8>)
 8003a0a:	f7ff be06 	b.w	800361a <__retarget_lock_release_recursive>
 8003a0e:	bf00      	nop
 8003a10:	2000019c 	.word	0x2000019c

08003a14 <_read_r>:
 8003a14:	b538      	push	{r3, r4, r5, lr}
 8003a16:	4d07      	ldr	r5, [pc, #28]	; (8003a34 <_read_r+0x20>)
 8003a18:	4604      	mov	r4, r0
 8003a1a:	4608      	mov	r0, r1
 8003a1c:	4611      	mov	r1, r2
 8003a1e:	2200      	movs	r2, #0
 8003a20:	602a      	str	r2, [r5, #0]
 8003a22:	461a      	mov	r2, r3
 8003a24:	f7fc fff0 	bl	8000a08 <_read>
 8003a28:	1c43      	adds	r3, r0, #1
 8003a2a:	d102      	bne.n	8003a32 <_read_r+0x1e>
 8003a2c:	682b      	ldr	r3, [r5, #0]
 8003a2e:	b103      	cbz	r3, 8003a32 <_read_r+0x1e>
 8003a30:	6023      	str	r3, [r4, #0]
 8003a32:	bd38      	pop	{r3, r4, r5, pc}
 8003a34:	200001a8 	.word	0x200001a8

08003a38 <_init>:
 8003a38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a3a:	bf00      	nop
 8003a3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a3e:	bc08      	pop	{r3}
 8003a40:	469e      	mov	lr, r3
 8003a42:	4770      	bx	lr

08003a44 <_fini>:
 8003a44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a46:	bf00      	nop
 8003a48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a4a:	bc08      	pop	{r3}
 8003a4c:	469e      	mov	lr, r3
 8003a4e:	4770      	bx	lr
