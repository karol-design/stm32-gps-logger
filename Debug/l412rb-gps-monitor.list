
l412rb-gps-monitor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000098f4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000724  08009a88  08009a88  00019a88  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a1ac  0800a1ac  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800a1ac  0800a1ac  0001a1ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a1b4  0800a1b4  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a1b4  0800a1b4  0001a1b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a1b8  0800a1b8  0001a1b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800a1bc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000013c  200001e0  0800a39c  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000031c  0800a39c  0002031c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d414  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000020dc  00000000  00000000  0002d624  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a78  00000000  00000000  0002f700  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009a0  00000000  00000000  00030178  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a6e0  00000000  00000000  00030b18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000cbf0  00000000  00000000  0004b1f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a06e8  00000000  00000000  00057de8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f84d0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000421c  00000000  00000000  000f8520  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e0 	.word	0x200001e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009a6c 	.word	0x08009a6c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e4 	.word	0x200001e4
 80001cc:	08009a6c 	.word	0x08009a6c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9aa 	b.w	8000ff4 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	468e      	mov	lr, r1
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d14d      	bne.n	8000dce <__udivmoddi4+0xaa>
 8000d32:	428a      	cmp	r2, r1
 8000d34:	4694      	mov	ip, r2
 8000d36:	d969      	bls.n	8000e0c <__udivmoddi4+0xe8>
 8000d38:	fab2 f282 	clz	r2, r2
 8000d3c:	b152      	cbz	r2, 8000d54 <__udivmoddi4+0x30>
 8000d3e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d42:	f1c2 0120 	rsb	r1, r2, #32
 8000d46:	fa20 f101 	lsr.w	r1, r0, r1
 8000d4a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d4e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d52:	4094      	lsls	r4, r2
 8000d54:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d58:	0c21      	lsrs	r1, r4, #16
 8000d5a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d5e:	fa1f f78c 	uxth.w	r7, ip
 8000d62:	fb08 e316 	mls	r3, r8, r6, lr
 8000d66:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d6a:	fb06 f107 	mul.w	r1, r6, r7
 8000d6e:	4299      	cmp	r1, r3
 8000d70:	d90a      	bls.n	8000d88 <__udivmoddi4+0x64>
 8000d72:	eb1c 0303 	adds.w	r3, ip, r3
 8000d76:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d7a:	f080 811f 	bcs.w	8000fbc <__udivmoddi4+0x298>
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	f240 811c 	bls.w	8000fbc <__udivmoddi4+0x298>
 8000d84:	3e02      	subs	r6, #2
 8000d86:	4463      	add	r3, ip
 8000d88:	1a5b      	subs	r3, r3, r1
 8000d8a:	b2a4      	uxth	r4, r4
 8000d8c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d90:	fb08 3310 	mls	r3, r8, r0, r3
 8000d94:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d98:	fb00 f707 	mul.w	r7, r0, r7
 8000d9c:	42a7      	cmp	r7, r4
 8000d9e:	d90a      	bls.n	8000db6 <__udivmoddi4+0x92>
 8000da0:	eb1c 0404 	adds.w	r4, ip, r4
 8000da4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000da8:	f080 810a 	bcs.w	8000fc0 <__udivmoddi4+0x29c>
 8000dac:	42a7      	cmp	r7, r4
 8000dae:	f240 8107 	bls.w	8000fc0 <__udivmoddi4+0x29c>
 8000db2:	4464      	add	r4, ip
 8000db4:	3802      	subs	r0, #2
 8000db6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dba:	1be4      	subs	r4, r4, r7
 8000dbc:	2600      	movs	r6, #0
 8000dbe:	b11d      	cbz	r5, 8000dc8 <__udivmoddi4+0xa4>
 8000dc0:	40d4      	lsrs	r4, r2
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	e9c5 4300 	strd	r4, r3, [r5]
 8000dc8:	4631      	mov	r1, r6
 8000dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d909      	bls.n	8000de6 <__udivmoddi4+0xc2>
 8000dd2:	2d00      	cmp	r5, #0
 8000dd4:	f000 80ef 	beq.w	8000fb6 <__udivmoddi4+0x292>
 8000dd8:	2600      	movs	r6, #0
 8000dda:	e9c5 0100 	strd	r0, r1, [r5]
 8000dde:	4630      	mov	r0, r6
 8000de0:	4631      	mov	r1, r6
 8000de2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de6:	fab3 f683 	clz	r6, r3
 8000dea:	2e00      	cmp	r6, #0
 8000dec:	d14a      	bne.n	8000e84 <__udivmoddi4+0x160>
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d302      	bcc.n	8000df8 <__udivmoddi4+0xd4>
 8000df2:	4282      	cmp	r2, r0
 8000df4:	f200 80f9 	bhi.w	8000fea <__udivmoddi4+0x2c6>
 8000df8:	1a84      	subs	r4, r0, r2
 8000dfa:	eb61 0303 	sbc.w	r3, r1, r3
 8000dfe:	2001      	movs	r0, #1
 8000e00:	469e      	mov	lr, r3
 8000e02:	2d00      	cmp	r5, #0
 8000e04:	d0e0      	beq.n	8000dc8 <__udivmoddi4+0xa4>
 8000e06:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e0a:	e7dd      	b.n	8000dc8 <__udivmoddi4+0xa4>
 8000e0c:	b902      	cbnz	r2, 8000e10 <__udivmoddi4+0xec>
 8000e0e:	deff      	udf	#255	; 0xff
 8000e10:	fab2 f282 	clz	r2, r2
 8000e14:	2a00      	cmp	r2, #0
 8000e16:	f040 8092 	bne.w	8000f3e <__udivmoddi4+0x21a>
 8000e1a:	eba1 010c 	sub.w	r1, r1, ip
 8000e1e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e22:	fa1f fe8c 	uxth.w	lr, ip
 8000e26:	2601      	movs	r6, #1
 8000e28:	0c20      	lsrs	r0, r4, #16
 8000e2a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e2e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e32:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e36:	fb0e f003 	mul.w	r0, lr, r3
 8000e3a:	4288      	cmp	r0, r1
 8000e3c:	d908      	bls.n	8000e50 <__udivmoddi4+0x12c>
 8000e3e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e42:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e46:	d202      	bcs.n	8000e4e <__udivmoddi4+0x12a>
 8000e48:	4288      	cmp	r0, r1
 8000e4a:	f200 80cb 	bhi.w	8000fe4 <__udivmoddi4+0x2c0>
 8000e4e:	4643      	mov	r3, r8
 8000e50:	1a09      	subs	r1, r1, r0
 8000e52:	b2a4      	uxth	r4, r4
 8000e54:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e58:	fb07 1110 	mls	r1, r7, r0, r1
 8000e5c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e60:	fb0e fe00 	mul.w	lr, lr, r0
 8000e64:	45a6      	cmp	lr, r4
 8000e66:	d908      	bls.n	8000e7a <__udivmoddi4+0x156>
 8000e68:	eb1c 0404 	adds.w	r4, ip, r4
 8000e6c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e70:	d202      	bcs.n	8000e78 <__udivmoddi4+0x154>
 8000e72:	45a6      	cmp	lr, r4
 8000e74:	f200 80bb 	bhi.w	8000fee <__udivmoddi4+0x2ca>
 8000e78:	4608      	mov	r0, r1
 8000e7a:	eba4 040e 	sub.w	r4, r4, lr
 8000e7e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e82:	e79c      	b.n	8000dbe <__udivmoddi4+0x9a>
 8000e84:	f1c6 0720 	rsb	r7, r6, #32
 8000e88:	40b3      	lsls	r3, r6
 8000e8a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e8e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e92:	fa20 f407 	lsr.w	r4, r0, r7
 8000e96:	fa01 f306 	lsl.w	r3, r1, r6
 8000e9a:	431c      	orrs	r4, r3
 8000e9c:	40f9      	lsrs	r1, r7
 8000e9e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ea2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ea6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eaa:	0c20      	lsrs	r0, r4, #16
 8000eac:	fa1f fe8c 	uxth.w	lr, ip
 8000eb0:	fb09 1118 	mls	r1, r9, r8, r1
 8000eb4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000eb8:	fb08 f00e 	mul.w	r0, r8, lr
 8000ebc:	4288      	cmp	r0, r1
 8000ebe:	fa02 f206 	lsl.w	r2, r2, r6
 8000ec2:	d90b      	bls.n	8000edc <__udivmoddi4+0x1b8>
 8000ec4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ec8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ecc:	f080 8088 	bcs.w	8000fe0 <__udivmoddi4+0x2bc>
 8000ed0:	4288      	cmp	r0, r1
 8000ed2:	f240 8085 	bls.w	8000fe0 <__udivmoddi4+0x2bc>
 8000ed6:	f1a8 0802 	sub.w	r8, r8, #2
 8000eda:	4461      	add	r1, ip
 8000edc:	1a09      	subs	r1, r1, r0
 8000ede:	b2a4      	uxth	r4, r4
 8000ee0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ee4:	fb09 1110 	mls	r1, r9, r0, r1
 8000ee8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000eec:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ef0:	458e      	cmp	lr, r1
 8000ef2:	d908      	bls.n	8000f06 <__udivmoddi4+0x1e2>
 8000ef4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef8:	f100 34ff 	add.w	r4, r0, #4294967295
 8000efc:	d26c      	bcs.n	8000fd8 <__udivmoddi4+0x2b4>
 8000efe:	458e      	cmp	lr, r1
 8000f00:	d96a      	bls.n	8000fd8 <__udivmoddi4+0x2b4>
 8000f02:	3802      	subs	r0, #2
 8000f04:	4461      	add	r1, ip
 8000f06:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f0a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f0e:	eba1 010e 	sub.w	r1, r1, lr
 8000f12:	42a1      	cmp	r1, r4
 8000f14:	46c8      	mov	r8, r9
 8000f16:	46a6      	mov	lr, r4
 8000f18:	d356      	bcc.n	8000fc8 <__udivmoddi4+0x2a4>
 8000f1a:	d053      	beq.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f1c:	b15d      	cbz	r5, 8000f36 <__udivmoddi4+0x212>
 8000f1e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f22:	eb61 010e 	sbc.w	r1, r1, lr
 8000f26:	fa01 f707 	lsl.w	r7, r1, r7
 8000f2a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f2e:	40f1      	lsrs	r1, r6
 8000f30:	431f      	orrs	r7, r3
 8000f32:	e9c5 7100 	strd	r7, r1, [r5]
 8000f36:	2600      	movs	r6, #0
 8000f38:	4631      	mov	r1, r6
 8000f3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f3e:	f1c2 0320 	rsb	r3, r2, #32
 8000f42:	40d8      	lsrs	r0, r3
 8000f44:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f48:	fa21 f303 	lsr.w	r3, r1, r3
 8000f4c:	4091      	lsls	r1, r2
 8000f4e:	4301      	orrs	r1, r0
 8000f50:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f54:	fa1f fe8c 	uxth.w	lr, ip
 8000f58:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f5c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f60:	0c0b      	lsrs	r3, r1, #16
 8000f62:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f66:	fb00 f60e 	mul.w	r6, r0, lr
 8000f6a:	429e      	cmp	r6, r3
 8000f6c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f70:	d908      	bls.n	8000f84 <__udivmoddi4+0x260>
 8000f72:	eb1c 0303 	adds.w	r3, ip, r3
 8000f76:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f7a:	d22f      	bcs.n	8000fdc <__udivmoddi4+0x2b8>
 8000f7c:	429e      	cmp	r6, r3
 8000f7e:	d92d      	bls.n	8000fdc <__udivmoddi4+0x2b8>
 8000f80:	3802      	subs	r0, #2
 8000f82:	4463      	add	r3, ip
 8000f84:	1b9b      	subs	r3, r3, r6
 8000f86:	b289      	uxth	r1, r1
 8000f88:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f8c:	fb07 3316 	mls	r3, r7, r6, r3
 8000f90:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f94:	fb06 f30e 	mul.w	r3, r6, lr
 8000f98:	428b      	cmp	r3, r1
 8000f9a:	d908      	bls.n	8000fae <__udivmoddi4+0x28a>
 8000f9c:	eb1c 0101 	adds.w	r1, ip, r1
 8000fa0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fa4:	d216      	bcs.n	8000fd4 <__udivmoddi4+0x2b0>
 8000fa6:	428b      	cmp	r3, r1
 8000fa8:	d914      	bls.n	8000fd4 <__udivmoddi4+0x2b0>
 8000faa:	3e02      	subs	r6, #2
 8000fac:	4461      	add	r1, ip
 8000fae:	1ac9      	subs	r1, r1, r3
 8000fb0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fb4:	e738      	b.n	8000e28 <__udivmoddi4+0x104>
 8000fb6:	462e      	mov	r6, r5
 8000fb8:	4628      	mov	r0, r5
 8000fba:	e705      	b.n	8000dc8 <__udivmoddi4+0xa4>
 8000fbc:	4606      	mov	r6, r0
 8000fbe:	e6e3      	b.n	8000d88 <__udivmoddi4+0x64>
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	e6f8      	b.n	8000db6 <__udivmoddi4+0x92>
 8000fc4:	454b      	cmp	r3, r9
 8000fc6:	d2a9      	bcs.n	8000f1c <__udivmoddi4+0x1f8>
 8000fc8:	ebb9 0802 	subs.w	r8, r9, r2
 8000fcc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000fd0:	3801      	subs	r0, #1
 8000fd2:	e7a3      	b.n	8000f1c <__udivmoddi4+0x1f8>
 8000fd4:	4646      	mov	r6, r8
 8000fd6:	e7ea      	b.n	8000fae <__udivmoddi4+0x28a>
 8000fd8:	4620      	mov	r0, r4
 8000fda:	e794      	b.n	8000f06 <__udivmoddi4+0x1e2>
 8000fdc:	4640      	mov	r0, r8
 8000fde:	e7d1      	b.n	8000f84 <__udivmoddi4+0x260>
 8000fe0:	46d0      	mov	r8, sl
 8000fe2:	e77b      	b.n	8000edc <__udivmoddi4+0x1b8>
 8000fe4:	3b02      	subs	r3, #2
 8000fe6:	4461      	add	r1, ip
 8000fe8:	e732      	b.n	8000e50 <__udivmoddi4+0x12c>
 8000fea:	4630      	mov	r0, r6
 8000fec:	e709      	b.n	8000e02 <__udivmoddi4+0xde>
 8000fee:	4464      	add	r4, ip
 8000ff0:	3802      	subs	r0, #2
 8000ff2:	e742      	b.n	8000e7a <__udivmoddi4+0x156>

08000ff4 <__aeabi_idiv0>:
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop

08000ff8 <__io_putchar>:
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE {
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b082      	sub	sp, #8
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*) &ch, 1, HAL_MAX_DELAY);
 8001000:	1d39      	adds	r1, r7, #4
 8001002:	f04f 33ff 	mov.w	r3, #4294967295
 8001006:	2201      	movs	r2, #1
 8001008:	4803      	ldr	r0, [pc, #12]	; (8001018 <__io_putchar+0x20>)
 800100a:	f002 f99d 	bl	8003348 <HAL_UART_Transmit>
	return ch;
 800100e:	687b      	ldr	r3, [r7, #4]
}
 8001010:	4618      	mov	r0, r3
 8001012:	3708      	adds	r7, #8
 8001014:	46bd      	mov	sp, r7
 8001016:	bd80      	pop	{r7, pc}
 8001018:	200001fc 	.word	0x200001fc

0800101c <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 800101c:	b580      	push	{r7, lr}
 800101e:	b08a      	sub	sp, #40	; 0x28
 8001020:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001022:	f000 fcf3 	bl	8001a0c <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001026:	f000 f899 	bl	800115c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800102a:	f000 f947 	bl	80012bc <MX_GPIO_Init>
	MX_USART2_UART_Init();
 800102e:	f000 f8e5 	bl	80011fc <MX_USART2_UART_Init>
	MX_USART3_UART_Init();
 8001032:	f000 f913 	bl	800125c <MX_USART3_UART_Init>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */

	printf("\033[2JGPS Monitor Startup\n");
 8001036:	483a      	ldr	r0, [pc, #232]	; (8001120 <main+0x104>)
 8001038:	f004 fad0 	bl	80055dc <puts>

	ublox_neo6m_ConfigStruct neo6m_conf = {
 800103c:	4a39      	ldr	r2, [pc, #228]	; (8001124 <main+0x108>)
 800103e:	f107 031c 	add.w	r3, r7, #28
 8001042:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001046:	e883 0003 	stmia.w	r3, {r0, r1}
			.huartNeo6m = &huart3,
			.huartLogging = &huart2 };

	ublox_neo6m_DataStruct neo6m_data;
	ublox_neo6m_ErrorType err = UBLOX_OK;
 800104a:	2300      	movs	r3, #0
 800104c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	err = ublox_neo6m_init(&neo6m_conf);
 8001050:	f107 031c 	add.w	r3, r7, #28
 8001054:	4618      	mov	r0, r3
 8001056:	f000 fb91 	bl	800177c <ublox_neo6m_init>
 800105a:	4603      	mov	r3, r0
 800105c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (err == UBLOX_OK) {
 8001060:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001064:	2b00      	cmp	r3, #0
 8001066:	d103      	bne.n	8001070 <main+0x54>
		printf("Dbg: U-blox NEO-6M Initialised correctly\n\n");
 8001068:	482f      	ldr	r0, [pc, #188]	; (8001128 <main+0x10c>)
 800106a:	f004 fab7 	bl	80055dc <puts>
 800106e:	e002      	b.n	8001076 <main+0x5a>
	} else {
		printf("Err: U-blox NEO-6M Initialisation error!\n");
 8001070:	482e      	ldr	r0, [pc, #184]	; (800112c <main+0x110>)
 8001072:	f004 fab3 	bl	80055dc <puts>
	}

	do {
		err = ublox_neo6m_readData(&neo6m_conf, &neo6m_data);
 8001076:	463a      	mov	r2, r7
 8001078:	f107 031c 	add.w	r3, r7, #28
 800107c:	4611      	mov	r1, r2
 800107e:	4618      	mov	r0, r3
 8001080:	f000 fc0a 	bl	8001898 <ublox_neo6m_readData>
 8001084:	4603      	mov	r3, r0
 8001086:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		printf("U-blox NEO-6M Data reading returned: %d\n", err);
 800108a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800108e:	4619      	mov	r1, r3
 8001090:	4827      	ldr	r0, [pc, #156]	; (8001130 <main+0x114>)
 8001092:	f004 fa1d 	bl	80054d0 <iprintf>
		HAL_UART_Abort(neo6m_conf.huartNeo6m);
 8001096:	69fb      	ldr	r3, [r7, #28]
 8001098:	4618      	mov	r0, r3
 800109a:	f002 faba 	bl	8003612 <HAL_UART_Abort>
	} while (err != UBLOX_OK);
 800109e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d1e7      	bne.n	8001076 <main+0x5a>

	printf("Dbg: U-blox NEO-6M Data read correctly\n");
 80010a6:	4823      	ldr	r0, [pc, #140]	; (8001134 <main+0x118>)
 80010a8:	f004 fa98 	bl	80055dc <puts>

	printf("\n\n--------------- GPS Data ---------------\n");
 80010ac:	4822      	ldr	r0, [pc, #136]	; (8001138 <main+0x11c>)
 80010ae:	f004 fa95 	bl	80055dc <puts>
	printf("| GPS Status:\t\t%u\t\t|\n", neo6m_data.isGpsActive);
 80010b2:	783b      	ldrb	r3, [r7, #0]
 80010b4:	4619      	mov	r1, r3
 80010b6:	4821      	ldr	r0, [pc, #132]	; (800113c <main+0x120>)
 80010b8:	f004 fa0a 	bl	80054d0 <iprintf>
	printf("| Satellites tracked:\t%u\t\t|\n", neo6m_data.satTracked);
 80010bc:	7e3b      	ldrb	r3, [r7, #24]
 80010be:	4619      	mov	r1, r3
 80010c0:	481f      	ldr	r0, [pc, #124]	; (8001140 <main+0x124>)
 80010c2:	f004 fa05 	bl	80054d0 <iprintf>
	printf("| Latitude:\t\t%u %c\t|\n", neo6m_data.coordLatitude, neo6m_data.coordLatitudeHem);
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	7b3a      	ldrb	r2, [r7, #12]
 80010ca:	4619      	mov	r1, r3
 80010cc:	481d      	ldr	r0, [pc, #116]	; (8001144 <main+0x128>)
 80010ce:	f004 f9ff 	bl	80054d0 <iprintf>
	printf("| Longitude:\t\t%u %c\t|\n", neo6m_data.coordLongitude, neo6m_data.coordLongitudeHem);
 80010d2:	68bb      	ldr	r3, [r7, #8]
 80010d4:	7b7a      	ldrb	r2, [r7, #13]
 80010d6:	4619      	mov	r1, r3
 80010d8:	481b      	ldr	r0, [pc, #108]	; (8001148 <main+0x12c>)
 80010da:	f004 f9f9 	bl	80054d0 <iprintf>
	printf("| Altitude:\t\t%d cm\t\t|\n", neo6m_data.altitude);
 80010de:	693b      	ldr	r3, [r7, #16]
 80010e0:	4619      	mov	r1, r3
 80010e2:	481a      	ldr	r0, [pc, #104]	; (800114c <main+0x130>)
 80010e4:	f004 f9f4 	bl	80054d0 <iprintf>
	printf("| Time:\t\t\t%d\t\t|\n", neo6m_data.time);
 80010e8:	697b      	ldr	r3, [r7, #20]
 80010ea:	4619      	mov	r1, r3
 80010ec:	4818      	ldr	r0, [pc, #96]	; (8001150 <main+0x134>)
 80010ee:	f004 f9ef 	bl	80054d0 <iprintf>
	printf("-----------------------------------------\n");
 80010f2:	4818      	ldr	r0, [pc, #96]	; (8001154 <main+0x138>)
 80010f4:	f004 fa72 	bl	80055dc <puts>

	while (1) {
		// Blink an LED to indicate that new data has been received
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_13);
 80010f8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80010fc:	4816      	ldr	r0, [pc, #88]	; (8001158 <main+0x13c>)
 80010fe:	f001 f84b 	bl	8002198 <HAL_GPIO_TogglePin>
		HAL_Delay(1000);
 8001102:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001106:	f000 fcfd 	bl	8001b04 <HAL_Delay>
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_13);
 800110a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800110e:	4812      	ldr	r0, [pc, #72]	; (8001158 <main+0x13c>)
 8001110:	f001 f842 	bl	8002198 <HAL_GPIO_TogglePin>
		HAL_Delay(1000);
 8001114:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001118:	f000 fcf4 	bl	8001b04 <HAL_Delay>
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_13);
 800111c:	e7ec      	b.n	80010f8 <main+0xdc>
 800111e:	bf00      	nop
 8001120:	08009a88 	.word	0x08009a88
 8001124:	08009c38 	.word	0x08009c38
 8001128:	08009aa0 	.word	0x08009aa0
 800112c:	08009acc 	.word	0x08009acc
 8001130:	08009af8 	.word	0x08009af8
 8001134:	08009b24 	.word	0x08009b24
 8001138:	08009b4c 	.word	0x08009b4c
 800113c:	08009b78 	.word	0x08009b78
 8001140:	08009b90 	.word	0x08009b90
 8001144:	08009bb0 	.word	0x08009bb0
 8001148:	08009bc8 	.word	0x08009bc8
 800114c:	08009be0 	.word	0x08009be0
 8001150:	08009bf8 	.word	0x08009bf8
 8001154:	08009c0c 	.word	0x08009c0c
 8001158:	48000400 	.word	0x48000400

0800115c <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 800115c:	b580      	push	{r7, lr}
 800115e:	b096      	sub	sp, #88	; 0x58
 8001160:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {
 8001162:	f107 0314 	add.w	r3, r7, #20
 8001166:	2244      	movs	r2, #68	; 0x44
 8001168:	2100      	movs	r1, #0
 800116a:	4618      	mov	r0, r3
 800116c:	f003 fb2e 	bl	80047cc <memset>
			0 };
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {
 8001170:	463b      	mov	r3, r7
 8001172:	2200      	movs	r2, #0
 8001174:	601a      	str	r2, [r3, #0]
 8001176:	605a      	str	r2, [r3, #4]
 8001178:	609a      	str	r2, [r3, #8]
 800117a:	60da      	str	r2, [r3, #12]
 800117c:	611a      	str	r2, [r3, #16]
			0 };

	/** Configure the main internal regulator output voltage
	 */
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK) {
 800117e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001182:	f001 f831 	bl	80021e8 <HAL_PWREx_ControlVoltageScaling>
 8001186:	4603      	mov	r3, r0
 8001188:	2b00      	cmp	r3, #0
 800118a:	d001      	beq.n	8001190 <SystemClock_Config+0x34>
		Error_Handler();
 800118c:	f000 f920 	bl	80013d0 <Error_Handler>
	}

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8001190:	2310      	movs	r3, #16
 8001192:	617b      	str	r3, [r7, #20]
	RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001194:	2301      	movs	r3, #1
 8001196:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.MSICalibrationValue = 0;
 8001198:	2300      	movs	r3, #0
 800119a:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800119c:	2360      	movs	r3, #96	; 0x60
 800119e:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011a0:	2302      	movs	r3, #2
 80011a2:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80011a4:	2301      	movs	r3, #1
 80011a6:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLM = 1;
 80011a8:	2301      	movs	r3, #1
 80011aa:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLN = 40;
 80011ac:	2328      	movs	r3, #40	; 0x28
 80011ae:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80011b0:	2302      	movs	r3, #2
 80011b2:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80011b4:	2302      	movs	r3, #2
 80011b6:	657b      	str	r3, [r7, #84]	; 0x54
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80011b8:	f107 0314 	add.w	r3, r7, #20
 80011bc:	4618      	mov	r0, r3
 80011be:	f001 f869 	bl	8002294 <HAL_RCC_OscConfig>
 80011c2:	4603      	mov	r3, r0
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d001      	beq.n	80011cc <SystemClock_Config+0x70>
		Error_Handler();
 80011c8:	f000 f902 	bl	80013d0 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80011cc:	230f      	movs	r3, #15
 80011ce:	603b      	str	r3, [r7, #0]
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011d0:	2303      	movs	r3, #3
 80011d2:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011d4:	2300      	movs	r3, #0
 80011d6:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80011d8:	2300      	movs	r3, #0
 80011da:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011dc:	2300      	movs	r3, #0
 80011de:	613b      	str	r3, [r7, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK) {
 80011e0:	463b      	mov	r3, r7
 80011e2:	2104      	movs	r1, #4
 80011e4:	4618      	mov	r0, r3
 80011e6:	f001 fcb7 	bl	8002b58 <HAL_RCC_ClockConfig>
 80011ea:	4603      	mov	r3, r0
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d001      	beq.n	80011f4 <SystemClock_Config+0x98>
		Error_Handler();
 80011f0:	f000 f8ee 	bl	80013d0 <Error_Handler>
	}
}
 80011f4:	bf00      	nop
 80011f6:	3758      	adds	r7, #88	; 0x58
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bd80      	pop	{r7, pc}

080011fc <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 80011fc:	b580      	push	{r7, lr}
 80011fe:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8001200:	4b14      	ldr	r3, [pc, #80]	; (8001254 <MX_USART2_UART_Init+0x58>)
 8001202:	4a15      	ldr	r2, [pc, #84]	; (8001258 <MX_USART2_UART_Init+0x5c>)
 8001204:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8001206:	4b13      	ldr	r3, [pc, #76]	; (8001254 <MX_USART2_UART_Init+0x58>)
 8001208:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800120c:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800120e:	4b11      	ldr	r3, [pc, #68]	; (8001254 <MX_USART2_UART_Init+0x58>)
 8001210:	2200      	movs	r2, #0
 8001212:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8001214:	4b0f      	ldr	r3, [pc, #60]	; (8001254 <MX_USART2_UART_Init+0x58>)
 8001216:	2200      	movs	r2, #0
 8001218:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 800121a:	4b0e      	ldr	r3, [pc, #56]	; (8001254 <MX_USART2_UART_Init+0x58>)
 800121c:	2200      	movs	r2, #0
 800121e:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8001220:	4b0c      	ldr	r3, [pc, #48]	; (8001254 <MX_USART2_UART_Init+0x58>)
 8001222:	220c      	movs	r2, #12
 8001224:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001226:	4b0b      	ldr	r3, [pc, #44]	; (8001254 <MX_USART2_UART_Init+0x58>)
 8001228:	2200      	movs	r2, #0
 800122a:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800122c:	4b09      	ldr	r3, [pc, #36]	; (8001254 <MX_USART2_UART_Init+0x58>)
 800122e:	2200      	movs	r2, #0
 8001230:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001232:	4b08      	ldr	r3, [pc, #32]	; (8001254 <MX_USART2_UART_Init+0x58>)
 8001234:	2200      	movs	r2, #0
 8001236:	621a      	str	r2, [r3, #32]
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001238:	4b06      	ldr	r3, [pc, #24]	; (8001254 <MX_USART2_UART_Init+0x58>)
 800123a:	2200      	movs	r2, #0
 800123c:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 800123e:	4805      	ldr	r0, [pc, #20]	; (8001254 <MX_USART2_UART_Init+0x58>)
 8001240:	f002 f834 	bl	80032ac <HAL_UART_Init>
 8001244:	4603      	mov	r3, r0
 8001246:	2b00      	cmp	r3, #0
 8001248:	d001      	beq.n	800124e <MX_USART2_UART_Init+0x52>
		Error_Handler();
 800124a:	f000 f8c1 	bl	80013d0 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 800124e:	bf00      	nop
 8001250:	bd80      	pop	{r7, pc}
 8001252:	bf00      	nop
 8001254:	200001fc 	.word	0x200001fc
 8001258:	40004400 	.word	0x40004400

0800125c <MX_USART3_UART_Init>:
/**
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void) {
 800125c:	b580      	push	{r7, lr}
 800125e:	af00      	add	r7, sp, #0
	/* USER CODE END USART3_Init 0 */

	/* USER CODE BEGIN USART3_Init 1 */

	/* USER CODE END USART3_Init 1 */
	huart3.Instance = USART3;
 8001260:	4b14      	ldr	r3, [pc, #80]	; (80012b4 <MX_USART3_UART_Init+0x58>)
 8001262:	4a15      	ldr	r2, [pc, #84]	; (80012b8 <MX_USART3_UART_Init+0x5c>)
 8001264:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 9600;
 8001266:	4b13      	ldr	r3, [pc, #76]	; (80012b4 <MX_USART3_UART_Init+0x58>)
 8001268:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800126c:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800126e:	4b11      	ldr	r3, [pc, #68]	; (80012b4 <MX_USART3_UART_Init+0x58>)
 8001270:	2200      	movs	r2, #0
 8001272:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 8001274:	4b0f      	ldr	r3, [pc, #60]	; (80012b4 <MX_USART3_UART_Init+0x58>)
 8001276:	2200      	movs	r2, #0
 8001278:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 800127a:	4b0e      	ldr	r3, [pc, #56]	; (80012b4 <MX_USART3_UART_Init+0x58>)
 800127c:	2200      	movs	r2, #0
 800127e:	611a      	str	r2, [r3, #16]
	huart3.Init.Mode = UART_MODE_TX_RX;
 8001280:	4b0c      	ldr	r3, [pc, #48]	; (80012b4 <MX_USART3_UART_Init+0x58>)
 8001282:	220c      	movs	r2, #12
 8001284:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001286:	4b0b      	ldr	r3, [pc, #44]	; (80012b4 <MX_USART3_UART_Init+0x58>)
 8001288:	2200      	movs	r2, #0
 800128a:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800128c:	4b09      	ldr	r3, [pc, #36]	; (80012b4 <MX_USART3_UART_Init+0x58>)
 800128e:	2200      	movs	r2, #0
 8001290:	61da      	str	r2, [r3, #28]
	huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001292:	4b08      	ldr	r3, [pc, #32]	; (80012b4 <MX_USART3_UART_Init+0x58>)
 8001294:	2200      	movs	r2, #0
 8001296:	621a      	str	r2, [r3, #32]
	huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001298:	4b06      	ldr	r3, [pc, #24]	; (80012b4 <MX_USART3_UART_Init+0x58>)
 800129a:	2200      	movs	r2, #0
 800129c:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart3) != HAL_OK) {
 800129e:	4805      	ldr	r0, [pc, #20]	; (80012b4 <MX_USART3_UART_Init+0x58>)
 80012a0:	f002 f804 	bl	80032ac <HAL_UART_Init>
 80012a4:	4603      	mov	r3, r0
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d001      	beq.n	80012ae <MX_USART3_UART_Init+0x52>
		Error_Handler();
 80012aa:	f000 f891 	bl	80013d0 <Error_Handler>
	}
	/* USER CODE BEGIN USART3_Init 2 */

	/* USER CODE END USART3_Init 2 */

}
 80012ae:	bf00      	nop
 80012b0:	bd80      	pop	{r7, pc}
 80012b2:	bf00      	nop
 80012b4:	20000280 	.word	0x20000280
 80012b8:	40004800 	.word	0x40004800

080012bc <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80012bc:	b580      	push	{r7, lr}
 80012be:	b08a      	sub	sp, #40	; 0x28
 80012c0:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {
 80012c2:	f107 0314 	add.w	r3, r7, #20
 80012c6:	2200      	movs	r2, #0
 80012c8:	601a      	str	r2, [r3, #0]
 80012ca:	605a      	str	r2, [r3, #4]
 80012cc:	609a      	str	r2, [r3, #8]
 80012ce:	60da      	str	r2, [r3, #12]
 80012d0:	611a      	str	r2, [r3, #16]
			0 };
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80012d2:	4b3c      	ldr	r3, [pc, #240]	; (80013c4 <MX_GPIO_Init+0x108>)
 80012d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012d6:	4a3b      	ldr	r2, [pc, #236]	; (80013c4 <MX_GPIO_Init+0x108>)
 80012d8:	f043 0304 	orr.w	r3, r3, #4
 80012dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012de:	4b39      	ldr	r3, [pc, #228]	; (80013c4 <MX_GPIO_Init+0x108>)
 80012e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012e2:	f003 0304 	and.w	r3, r3, #4
 80012e6:	613b      	str	r3, [r7, #16]
 80012e8:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 80012ea:	4b36      	ldr	r3, [pc, #216]	; (80013c4 <MX_GPIO_Init+0x108>)
 80012ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012ee:	4a35      	ldr	r2, [pc, #212]	; (80013c4 <MX_GPIO_Init+0x108>)
 80012f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80012f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012f6:	4b33      	ldr	r3, [pc, #204]	; (80013c4 <MX_GPIO_Init+0x108>)
 80012f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012fe:	60fb      	str	r3, [r7, #12]
 8001300:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001302:	4b30      	ldr	r3, [pc, #192]	; (80013c4 <MX_GPIO_Init+0x108>)
 8001304:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001306:	4a2f      	ldr	r2, [pc, #188]	; (80013c4 <MX_GPIO_Init+0x108>)
 8001308:	f043 0301 	orr.w	r3, r3, #1
 800130c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800130e:	4b2d      	ldr	r3, [pc, #180]	; (80013c4 <MX_GPIO_Init+0x108>)
 8001310:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001312:	f003 0301 	and.w	r3, r3, #1
 8001316:	60bb      	str	r3, [r7, #8]
 8001318:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800131a:	4b2a      	ldr	r3, [pc, #168]	; (80013c4 <MX_GPIO_Init+0x108>)
 800131c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800131e:	4a29      	ldr	r2, [pc, #164]	; (80013c4 <MX_GPIO_Init+0x108>)
 8001320:	f043 0302 	orr.w	r3, r3, #2
 8001324:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001326:	4b27      	ldr	r3, [pc, #156]	; (80013c4 <MX_GPIO_Init+0x108>)
 8001328:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800132a:	f003 0302 	and.w	r3, r3, #2
 800132e:	607b      	str	r3, [r7, #4]
 8001330:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, SMPS_EN_Pin | SMPS_V1_Pin | SMPS_SW_Pin, GPIO_PIN_RESET);
 8001332:	2200      	movs	r2, #0
 8001334:	21b0      	movs	r1, #176	; 0xb0
 8001336:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800133a:	f000 ff15 	bl	8002168 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_RESET);
 800133e:	2200      	movs	r2, #0
 8001340:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001344:	4820      	ldr	r0, [pc, #128]	; (80013c8 <MX_GPIO_Init+0x10c>)
 8001346:	f000 ff0f 	bl	8002168 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 800134a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800134e:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001350:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001354:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001356:	2300      	movs	r3, #0
 8001358:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800135a:	f107 0314 	add.w	r3, r7, #20
 800135e:	4619      	mov	r1, r3
 8001360:	481a      	ldr	r0, [pc, #104]	; (80013cc <MX_GPIO_Init+0x110>)
 8001362:	f000 fd8f 	bl	8001e84 <HAL_GPIO_Init>

	/*Configure GPIO pins : SMPS_EN_Pin SMPS_V1_Pin SMPS_SW_Pin */
	GPIO_InitStruct.Pin = SMPS_EN_Pin | SMPS_V1_Pin | SMPS_SW_Pin;
 8001366:	23b0      	movs	r3, #176	; 0xb0
 8001368:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800136a:	2301      	movs	r3, #1
 800136c:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800136e:	2300      	movs	r3, #0
 8001370:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001372:	2300      	movs	r3, #0
 8001374:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001376:	f107 0314 	add.w	r3, r7, #20
 800137a:	4619      	mov	r1, r3
 800137c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001380:	f000 fd80 	bl	8001e84 <HAL_GPIO_Init>

	/*Configure GPIO pin : SMPS_PG_Pin */
	GPIO_InitStruct.Pin = SMPS_PG_Pin;
 8001384:	2340      	movs	r3, #64	; 0x40
 8001386:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001388:	2300      	movs	r3, #0
 800138a:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 800138c:	2301      	movs	r3, #1
 800138e:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(SMPS_PG_GPIO_Port, &GPIO_InitStruct);
 8001390:	f107 0314 	add.w	r3, r7, #20
 8001394:	4619      	mov	r1, r3
 8001396:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800139a:	f000 fd73 	bl	8001e84 <HAL_GPIO_Init>

	/*Configure GPIO pin : LD4_Pin */
	GPIO_InitStruct.Pin = LD4_Pin;
 800139e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80013a2:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013a4:	2301      	movs	r3, #1
 80013a6:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a8:	2300      	movs	r3, #0
 80013aa:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ac:	2300      	movs	r3, #0
 80013ae:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(LD4_GPIO_Port, &GPIO_InitStruct);
 80013b0:	f107 0314 	add.w	r3, r7, #20
 80013b4:	4619      	mov	r1, r3
 80013b6:	4804      	ldr	r0, [pc, #16]	; (80013c8 <MX_GPIO_Init+0x10c>)
 80013b8:	f000 fd64 	bl	8001e84 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 80013bc:	bf00      	nop
 80013be:	3728      	adds	r7, #40	; 0x28
 80013c0:	46bd      	mov	sp, r7
 80013c2:	bd80      	pop	{r7, pc}
 80013c4:	40021000 	.word	0x40021000
 80013c8:	48000400 	.word	0x48000400
 80013cc:	48000800 	.word	0x48000800

080013d0 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80013d0:	b480      	push	{r7}
 80013d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013d4:	b672      	cpsid	i
}
 80013d6:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80013d8:	e7fe      	b.n	80013d8 <Error_Handler+0x8>
	...

080013dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013dc:	b480      	push	{r7}
 80013de:	b083      	sub	sp, #12
 80013e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013e2:	4b0f      	ldr	r3, [pc, #60]	; (8001420 <HAL_MspInit+0x44>)
 80013e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013e6:	4a0e      	ldr	r2, [pc, #56]	; (8001420 <HAL_MspInit+0x44>)
 80013e8:	f043 0301 	orr.w	r3, r3, #1
 80013ec:	6613      	str	r3, [r2, #96]	; 0x60
 80013ee:	4b0c      	ldr	r3, [pc, #48]	; (8001420 <HAL_MspInit+0x44>)
 80013f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013f2:	f003 0301 	and.w	r3, r3, #1
 80013f6:	607b      	str	r3, [r7, #4]
 80013f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013fa:	4b09      	ldr	r3, [pc, #36]	; (8001420 <HAL_MspInit+0x44>)
 80013fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013fe:	4a08      	ldr	r2, [pc, #32]	; (8001420 <HAL_MspInit+0x44>)
 8001400:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001404:	6593      	str	r3, [r2, #88]	; 0x58
 8001406:	4b06      	ldr	r3, [pc, #24]	; (8001420 <HAL_MspInit+0x44>)
 8001408:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800140a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800140e:	603b      	str	r3, [r7, #0]
 8001410:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001412:	bf00      	nop
 8001414:	370c      	adds	r7, #12
 8001416:	46bd      	mov	sp, r7
 8001418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141c:	4770      	bx	lr
 800141e:	bf00      	nop
 8001420:	40021000 	.word	0x40021000

08001424 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b098      	sub	sp, #96	; 0x60
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800142c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001430:	2200      	movs	r2, #0
 8001432:	601a      	str	r2, [r3, #0]
 8001434:	605a      	str	r2, [r3, #4]
 8001436:	609a      	str	r2, [r3, #8]
 8001438:	60da      	str	r2, [r3, #12]
 800143a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800143c:	f107 0318 	add.w	r3, r7, #24
 8001440:	2234      	movs	r2, #52	; 0x34
 8001442:	2100      	movs	r1, #0
 8001444:	4618      	mov	r0, r3
 8001446:	f003 f9c1 	bl	80047cc <memset>
  if(huart->Instance==USART2)
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	4a41      	ldr	r2, [pc, #260]	; (8001554 <HAL_UART_MspInit+0x130>)
 8001450:	4293      	cmp	r3, r2
 8001452:	d137      	bne.n	80014c4 <HAL_UART_MspInit+0xa0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001454:	2302      	movs	r3, #2
 8001456:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001458:	2300      	movs	r3, #0
 800145a:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800145c:	f107 0318 	add.w	r3, r7, #24
 8001460:	4618      	mov	r0, r3
 8001462:	f001 fd9d 	bl	8002fa0 <HAL_RCCEx_PeriphCLKConfig>
 8001466:	4603      	mov	r3, r0
 8001468:	2b00      	cmp	r3, #0
 800146a:	d001      	beq.n	8001470 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800146c:	f7ff ffb0 	bl	80013d0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001470:	4b39      	ldr	r3, [pc, #228]	; (8001558 <HAL_UART_MspInit+0x134>)
 8001472:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001474:	4a38      	ldr	r2, [pc, #224]	; (8001558 <HAL_UART_MspInit+0x134>)
 8001476:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800147a:	6593      	str	r3, [r2, #88]	; 0x58
 800147c:	4b36      	ldr	r3, [pc, #216]	; (8001558 <HAL_UART_MspInit+0x134>)
 800147e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001480:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001484:	617b      	str	r3, [r7, #20]
 8001486:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001488:	4b33      	ldr	r3, [pc, #204]	; (8001558 <HAL_UART_MspInit+0x134>)
 800148a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800148c:	4a32      	ldr	r2, [pc, #200]	; (8001558 <HAL_UART_MspInit+0x134>)
 800148e:	f043 0301 	orr.w	r3, r3, #1
 8001492:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001494:	4b30      	ldr	r3, [pc, #192]	; (8001558 <HAL_UART_MspInit+0x134>)
 8001496:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001498:	f003 0301 	and.w	r3, r3, #1
 800149c:	613b      	str	r3, [r7, #16]
 800149e:	693b      	ldr	r3, [r7, #16]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80014a0:	230c      	movs	r3, #12
 80014a2:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014a4:	2302      	movs	r3, #2
 80014a6:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a8:	2300      	movs	r3, #0
 80014aa:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014ac:	2303      	movs	r3, #3
 80014ae:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80014b0:	2307      	movs	r3, #7
 80014b2:	65fb      	str	r3, [r7, #92]	; 0x5c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014b4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80014b8:	4619      	mov	r1, r3
 80014ba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014be:	f000 fce1 	bl	8001e84 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80014c2:	e043      	b.n	800154c <HAL_UART_MspInit+0x128>
  else if(huart->Instance==USART3)
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	4a24      	ldr	r2, [pc, #144]	; (800155c <HAL_UART_MspInit+0x138>)
 80014ca:	4293      	cmp	r3, r2
 80014cc:	d13e      	bne.n	800154c <HAL_UART_MspInit+0x128>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80014ce:	2304      	movs	r3, #4
 80014d0:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80014d2:	2300      	movs	r3, #0
 80014d4:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80014d6:	f107 0318 	add.w	r3, r7, #24
 80014da:	4618      	mov	r0, r3
 80014dc:	f001 fd60 	bl	8002fa0 <HAL_RCCEx_PeriphCLKConfig>
 80014e0:	4603      	mov	r3, r0
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d001      	beq.n	80014ea <HAL_UART_MspInit+0xc6>
      Error_Handler();
 80014e6:	f7ff ff73 	bl	80013d0 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80014ea:	4b1b      	ldr	r3, [pc, #108]	; (8001558 <HAL_UART_MspInit+0x134>)
 80014ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014ee:	4a1a      	ldr	r2, [pc, #104]	; (8001558 <HAL_UART_MspInit+0x134>)
 80014f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80014f4:	6593      	str	r3, [r2, #88]	; 0x58
 80014f6:	4b18      	ldr	r3, [pc, #96]	; (8001558 <HAL_UART_MspInit+0x134>)
 80014f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014fa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80014fe:	60fb      	str	r3, [r7, #12]
 8001500:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001502:	4b15      	ldr	r3, [pc, #84]	; (8001558 <HAL_UART_MspInit+0x134>)
 8001504:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001506:	4a14      	ldr	r2, [pc, #80]	; (8001558 <HAL_UART_MspInit+0x134>)
 8001508:	f043 0302 	orr.w	r3, r3, #2
 800150c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800150e:	4b12      	ldr	r3, [pc, #72]	; (8001558 <HAL_UART_MspInit+0x134>)
 8001510:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001512:	f003 0302 	and.w	r3, r3, #2
 8001516:	60bb      	str	r3, [r7, #8]
 8001518:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800151a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800151e:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001520:	2302      	movs	r3, #2
 8001522:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001524:	2300      	movs	r3, #0
 8001526:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001528:	2303      	movs	r3, #3
 800152a:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800152c:	2307      	movs	r3, #7
 800152e:	65fb      	str	r3, [r7, #92]	; 0x5c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001530:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001534:	4619      	mov	r1, r3
 8001536:	480a      	ldr	r0, [pc, #40]	; (8001560 <HAL_UART_MspInit+0x13c>)
 8001538:	f000 fca4 	bl	8001e84 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800153c:	2200      	movs	r2, #0
 800153e:	2100      	movs	r1, #0
 8001540:	2027      	movs	r0, #39	; 0x27
 8001542:	f000 fbde 	bl	8001d02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001546:	2027      	movs	r0, #39	; 0x27
 8001548:	f000 fbf7 	bl	8001d3a <HAL_NVIC_EnableIRQ>
}
 800154c:	bf00      	nop
 800154e:	3760      	adds	r7, #96	; 0x60
 8001550:	46bd      	mov	sp, r7
 8001552:	bd80      	pop	{r7, pc}
 8001554:	40004400 	.word	0x40004400
 8001558:	40021000 	.word	0x40021000
 800155c:	40004800 	.word	0x40004800
 8001560:	48000400 	.word	0x48000400

08001564 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001564:	b480      	push	{r7}
 8001566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001568:	e7fe      	b.n	8001568 <NMI_Handler+0x4>

0800156a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800156a:	b480      	push	{r7}
 800156c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800156e:	e7fe      	b.n	800156e <HardFault_Handler+0x4>

08001570 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001570:	b480      	push	{r7}
 8001572:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001574:	e7fe      	b.n	8001574 <MemManage_Handler+0x4>

08001576 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001576:	b480      	push	{r7}
 8001578:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800157a:	e7fe      	b.n	800157a <BusFault_Handler+0x4>

0800157c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800157c:	b480      	push	{r7}
 800157e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001580:	e7fe      	b.n	8001580 <UsageFault_Handler+0x4>

08001582 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001582:	b480      	push	{r7}
 8001584:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001586:	bf00      	nop
 8001588:	46bd      	mov	sp, r7
 800158a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158e:	4770      	bx	lr

08001590 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001590:	b480      	push	{r7}
 8001592:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001594:	bf00      	nop
 8001596:	46bd      	mov	sp, r7
 8001598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159c:	4770      	bx	lr

0800159e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800159e:	b480      	push	{r7}
 80015a0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015a2:	bf00      	nop
 80015a4:	46bd      	mov	sp, r7
 80015a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015aa:	4770      	bx	lr

080015ac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015b0:	f000 fa88 	bl	8001ac4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015b4:	bf00      	nop
 80015b6:	bd80      	pop	{r7, pc}

080015b8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80015bc:	4802      	ldr	r0, [pc, #8]	; (80015c8 <USART3_IRQHandler+0x10>)
 80015be:	f002 f923 	bl	8003808 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80015c2:	bf00      	nop
 80015c4:	bd80      	pop	{r7, pc}
 80015c6:	bf00      	nop
 80015c8:	20000280 	.word	0x20000280

080015cc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80015cc:	b480      	push	{r7}
 80015ce:	af00      	add	r7, sp, #0
  return 1;
 80015d0:	2301      	movs	r3, #1
}
 80015d2:	4618      	mov	r0, r3
 80015d4:	46bd      	mov	sp, r7
 80015d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015da:	4770      	bx	lr

080015dc <_kill>:

int _kill(int pid, int sig)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b082      	sub	sp, #8
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
 80015e4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80015e6:	f003 f8c7 	bl	8004778 <__errno>
 80015ea:	4603      	mov	r3, r0
 80015ec:	2216      	movs	r2, #22
 80015ee:	601a      	str	r2, [r3, #0]
  return -1;
 80015f0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80015f4:	4618      	mov	r0, r3
 80015f6:	3708      	adds	r7, #8
 80015f8:	46bd      	mov	sp, r7
 80015fa:	bd80      	pop	{r7, pc}

080015fc <_exit>:

void _exit (int status)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b082      	sub	sp, #8
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001604:	f04f 31ff 	mov.w	r1, #4294967295
 8001608:	6878      	ldr	r0, [r7, #4]
 800160a:	f7ff ffe7 	bl	80015dc <_kill>
  while (1) {}    /* Make sure we hang here */
 800160e:	e7fe      	b.n	800160e <_exit+0x12>

08001610 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b086      	sub	sp, #24
 8001614:	af00      	add	r7, sp, #0
 8001616:	60f8      	str	r0, [r7, #12]
 8001618:	60b9      	str	r1, [r7, #8]
 800161a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800161c:	2300      	movs	r3, #0
 800161e:	617b      	str	r3, [r7, #20]
 8001620:	e00a      	b.n	8001638 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001622:	f3af 8000 	nop.w
 8001626:	4601      	mov	r1, r0
 8001628:	68bb      	ldr	r3, [r7, #8]
 800162a:	1c5a      	adds	r2, r3, #1
 800162c:	60ba      	str	r2, [r7, #8]
 800162e:	b2ca      	uxtb	r2, r1
 8001630:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001632:	697b      	ldr	r3, [r7, #20]
 8001634:	3301      	adds	r3, #1
 8001636:	617b      	str	r3, [r7, #20]
 8001638:	697a      	ldr	r2, [r7, #20]
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	429a      	cmp	r2, r3
 800163e:	dbf0      	blt.n	8001622 <_read+0x12>
  }

  return len;
 8001640:	687b      	ldr	r3, [r7, #4]
}
 8001642:	4618      	mov	r0, r3
 8001644:	3718      	adds	r7, #24
 8001646:	46bd      	mov	sp, r7
 8001648:	bd80      	pop	{r7, pc}

0800164a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800164a:	b580      	push	{r7, lr}
 800164c:	b086      	sub	sp, #24
 800164e:	af00      	add	r7, sp, #0
 8001650:	60f8      	str	r0, [r7, #12]
 8001652:	60b9      	str	r1, [r7, #8]
 8001654:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001656:	2300      	movs	r3, #0
 8001658:	617b      	str	r3, [r7, #20]
 800165a:	e009      	b.n	8001670 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800165c:	68bb      	ldr	r3, [r7, #8]
 800165e:	1c5a      	adds	r2, r3, #1
 8001660:	60ba      	str	r2, [r7, #8]
 8001662:	781b      	ldrb	r3, [r3, #0]
 8001664:	4618      	mov	r0, r3
 8001666:	f7ff fcc7 	bl	8000ff8 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800166a:	697b      	ldr	r3, [r7, #20]
 800166c:	3301      	adds	r3, #1
 800166e:	617b      	str	r3, [r7, #20]
 8001670:	697a      	ldr	r2, [r7, #20]
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	429a      	cmp	r2, r3
 8001676:	dbf1      	blt.n	800165c <_write+0x12>
  }
  return len;
 8001678:	687b      	ldr	r3, [r7, #4]
}
 800167a:	4618      	mov	r0, r3
 800167c:	3718      	adds	r7, #24
 800167e:	46bd      	mov	sp, r7
 8001680:	bd80      	pop	{r7, pc}

08001682 <_close>:

int _close(int file)
{
 8001682:	b480      	push	{r7}
 8001684:	b083      	sub	sp, #12
 8001686:	af00      	add	r7, sp, #0
 8001688:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800168a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800168e:	4618      	mov	r0, r3
 8001690:	370c      	adds	r7, #12
 8001692:	46bd      	mov	sp, r7
 8001694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001698:	4770      	bx	lr

0800169a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800169a:	b480      	push	{r7}
 800169c:	b083      	sub	sp, #12
 800169e:	af00      	add	r7, sp, #0
 80016a0:	6078      	str	r0, [r7, #4]
 80016a2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80016a4:	683b      	ldr	r3, [r7, #0]
 80016a6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80016aa:	605a      	str	r2, [r3, #4]
  return 0;
 80016ac:	2300      	movs	r3, #0
}
 80016ae:	4618      	mov	r0, r3
 80016b0:	370c      	adds	r7, #12
 80016b2:	46bd      	mov	sp, r7
 80016b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b8:	4770      	bx	lr

080016ba <_isatty>:

int _isatty(int file)
{
 80016ba:	b480      	push	{r7}
 80016bc:	b083      	sub	sp, #12
 80016be:	af00      	add	r7, sp, #0
 80016c0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80016c2:	2301      	movs	r3, #1
}
 80016c4:	4618      	mov	r0, r3
 80016c6:	370c      	adds	r7, #12
 80016c8:	46bd      	mov	sp, r7
 80016ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ce:	4770      	bx	lr

080016d0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80016d0:	b480      	push	{r7}
 80016d2:	b085      	sub	sp, #20
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	60f8      	str	r0, [r7, #12]
 80016d8:	60b9      	str	r1, [r7, #8]
 80016da:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80016dc:	2300      	movs	r3, #0
}
 80016de:	4618      	mov	r0, r3
 80016e0:	3714      	adds	r7, #20
 80016e2:	46bd      	mov	sp, r7
 80016e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e8:	4770      	bx	lr
	...

080016ec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b086      	sub	sp, #24
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80016f4:	4a14      	ldr	r2, [pc, #80]	; (8001748 <_sbrk+0x5c>)
 80016f6:	4b15      	ldr	r3, [pc, #84]	; (800174c <_sbrk+0x60>)
 80016f8:	1ad3      	subs	r3, r2, r3
 80016fa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80016fc:	697b      	ldr	r3, [r7, #20]
 80016fe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001700:	4b13      	ldr	r3, [pc, #76]	; (8001750 <_sbrk+0x64>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	2b00      	cmp	r3, #0
 8001706:	d102      	bne.n	800170e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001708:	4b11      	ldr	r3, [pc, #68]	; (8001750 <_sbrk+0x64>)
 800170a:	4a12      	ldr	r2, [pc, #72]	; (8001754 <_sbrk+0x68>)
 800170c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800170e:	4b10      	ldr	r3, [pc, #64]	; (8001750 <_sbrk+0x64>)
 8001710:	681a      	ldr	r2, [r3, #0]
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	4413      	add	r3, r2
 8001716:	693a      	ldr	r2, [r7, #16]
 8001718:	429a      	cmp	r2, r3
 800171a:	d207      	bcs.n	800172c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800171c:	f003 f82c 	bl	8004778 <__errno>
 8001720:	4603      	mov	r3, r0
 8001722:	220c      	movs	r2, #12
 8001724:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001726:	f04f 33ff 	mov.w	r3, #4294967295
 800172a:	e009      	b.n	8001740 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800172c:	4b08      	ldr	r3, [pc, #32]	; (8001750 <_sbrk+0x64>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001732:	4b07      	ldr	r3, [pc, #28]	; (8001750 <_sbrk+0x64>)
 8001734:	681a      	ldr	r2, [r3, #0]
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	4413      	add	r3, r2
 800173a:	4a05      	ldr	r2, [pc, #20]	; (8001750 <_sbrk+0x64>)
 800173c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800173e:	68fb      	ldr	r3, [r7, #12]
}
 8001740:	4618      	mov	r0, r3
 8001742:	3718      	adds	r7, #24
 8001744:	46bd      	mov	sp, r7
 8001746:	bd80      	pop	{r7, pc}
 8001748:	2000a000 	.word	0x2000a000
 800174c:	00000400 	.word	0x00000400
 8001750:	20000304 	.word	0x20000304
 8001754:	20000320 	.word	0x20000320

08001758 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001758:	b480      	push	{r7}
 800175a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800175c:	4b06      	ldr	r3, [pc, #24]	; (8001778 <SystemInit+0x20>)
 800175e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001762:	4a05      	ldr	r2, [pc, #20]	; (8001778 <SystemInit+0x20>)
 8001764:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001768:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 800176c:	bf00      	nop
 800176e:	46bd      	mov	sp, r7
 8001770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001774:	4770      	bx	lr
 8001776:	bf00      	nop
 8001778:	e000ed00 	.word	0xe000ed00

0800177c <ublox_neo6m_init>:
 *      Author: wojsl
 */

#include "ublox_neo6m.h"

ublox_neo6m_ErrorType ublox_neo6m_init(ublox_neo6m_ConfigStruct *devConfig) {
 800177c:	b480      	push	{r7}
 800177e:	b083      	sub	sp, #12
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
	return (UBLOX_OK);
 8001784:	2300      	movs	r3, #0
}
 8001786:	4618      	mov	r0, r3
 8001788:	370c      	adds	r7, #12
 800178a:	46bd      	mov	sp, r7
 800178c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001790:	4770      	bx	lr
	...

08001794 <ublox_neo6m_parseNMEA0813>:

static ublox_neo6m_ErrorType ublox_neo6m_parseNMEA0813(ublox_neo6m_DataStruct *devData, uint8_t *sentenceBuffer) {
 8001794:	b5b0      	push	{r4, r5, r7, lr}
 8001796:	b096      	sub	sp, #88	; 0x58
 8001798:	af0c      	add	r7, sp, #48	; 0x30
 800179a:	6078      	str	r0, [r7, #4]
 800179c:	6039      	str	r1, [r7, #0]

	uint32_t tmp_variable = 0; // Temporary variable
 800179e:	2300      	movs	r3, #0
 80017a0:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t coordLatitudeUnformatedFront, coordLatitudeUnformatedBack, coordLongitudeUnformatedFront,
			coordLongitudeUnformatedBack, altitudeMeters, altitudeDecimeters;

	// 							$GPGGA,135139.00,5214.24059,N,01650.06187,E,1,05,1.32,          42.9,M,38.8,M,,*6B
	sscanf(sentenceBuffer, "$GPGGA,%6lu.%2lu,%4lu.%5lu,%1c,%5lu.%5lu,%1c,%1u,0%1u,%1lu.%2lu,%2lu.%1lu", &devData->time,
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	f103 0414 	add.w	r4, r3, #20
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	330c      	adds	r3, #12
 80017ac:	687a      	ldr	r2, [r7, #4]
 80017ae:	320d      	adds	r2, #13
 80017b0:	6879      	ldr	r1, [r7, #4]
 80017b2:	3118      	adds	r1, #24
 80017b4:	f107 0524 	add.w	r5, r7, #36	; 0x24
 80017b8:	f107 000c 	add.w	r0, r7, #12
 80017bc:	900b      	str	r0, [sp, #44]	; 0x2c
 80017be:	f107 0010 	add.w	r0, r7, #16
 80017c2:	900a      	str	r0, [sp, #40]	; 0x28
 80017c4:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80017c8:	9009      	str	r0, [sp, #36]	; 0x24
 80017ca:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80017ce:	9008      	str	r0, [sp, #32]
 80017d0:	9107      	str	r1, [sp, #28]
 80017d2:	f107 0124 	add.w	r1, r7, #36	; 0x24
 80017d6:	9106      	str	r1, [sp, #24]
 80017d8:	9205      	str	r2, [sp, #20]
 80017da:	f107 0214 	add.w	r2, r7, #20
 80017de:	9204      	str	r2, [sp, #16]
 80017e0:	f107 0218 	add.w	r2, r7, #24
 80017e4:	9203      	str	r2, [sp, #12]
 80017e6:	9302      	str	r3, [sp, #8]
 80017e8:	f107 031c 	add.w	r3, r7, #28
 80017ec:	9301      	str	r3, [sp, #4]
 80017ee:	f107 0320 	add.w	r3, r7, #32
 80017f2:	9300      	str	r3, [sp, #0]
 80017f4:	462b      	mov	r3, r5
 80017f6:	4622      	mov	r2, r4
 80017f8:	4913      	ldr	r1, [pc, #76]	; (8001848 <ublox_neo6m_parseNMEA0813+0xb4>)
 80017fa:	6838      	ldr	r0, [r7, #0]
 80017fc:	f003 ff1c 	bl	8005638 <siscanf>
			&tmp_variable, &coordLatitudeUnformatedFront, &coordLatitudeUnformatedBack, &devData->coordLatitudeHem,
			&coordLongitudeUnformatedFront, &coordLongitudeUnformatedBack, &devData->coordLongitudeHem, &tmp_variable,
			&devData->satTracked, &tmp_variable, &tmp_variable, &altitudeMeters, &altitudeDecimeters);

	devData->coordLatitude = (coordLatitudeUnformatedFront * 100000U + coordLatitudeUnformatedBack);
 8001800:	6a3b      	ldr	r3, [r7, #32]
 8001802:	4a12      	ldr	r2, [pc, #72]	; (800184c <ublox_neo6m_parseNMEA0813+0xb8>)
 8001804:	fb03 f202 	mul.w	r2, r3, r2
 8001808:	69fb      	ldr	r3, [r7, #28]
 800180a:	441a      	add	r2, r3
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	605a      	str	r2, [r3, #4]
	devData->coordLongitude = (coordLongitudeUnformatedFront * 100000U + coordLongitudeUnformatedBack);
 8001810:	69bb      	ldr	r3, [r7, #24]
 8001812:	4a0e      	ldr	r2, [pc, #56]	; (800184c <ublox_neo6m_parseNMEA0813+0xb8>)
 8001814:	fb03 f202 	mul.w	r2, r3, r2
 8001818:	697b      	ldr	r3, [r7, #20]
 800181a:	441a      	add	r2, r3
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	609a      	str	r2, [r3, #8]
	devData->altitude = 100 * altitudeMeters + 10 * altitudeDecimeters;
 8001820:	693b      	ldr	r3, [r7, #16]
 8001822:	2264      	movs	r2, #100	; 0x64
 8001824:	fb02 f103 	mul.w	r1, r2, r3
 8001828:	68fa      	ldr	r2, [r7, #12]
 800182a:	4613      	mov	r3, r2
 800182c:	009b      	lsls	r3, r3, #2
 800182e:	4413      	add	r3, r2
 8001830:	005b      	lsls	r3, r3, #1
 8001832:	18ca      	adds	r2, r1, r3
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	611a      	str	r2, [r3, #16]
	devData->isGpsActive = 1;
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	2201      	movs	r2, #1
 800183c:	701a      	strb	r2, [r3, #0]

	return (UBLOX_OK);
 800183e:	2300      	movs	r3, #0
}
 8001840:	4618      	mov	r0, r3
 8001842:	3728      	adds	r7, #40	; 0x28
 8001844:	46bd      	mov	sp, r7
 8001846:	bdb0      	pop	{r4, r5, r7, pc}
 8001848:	08009c40 	.word	0x08009c40
 800184c:	000186a0 	.word	0x000186a0

08001850 <ublox_neo6m_resetDataStruct>:

static ublox_neo6m_ErrorType ublox_neo6m_resetDataStruct(ublox_neo6m_DataStruct *devData) {
 8001850:	b480      	push	{r7}
 8001852:	b083      	sub	sp, #12
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]

	devData->isGpsActive = 0;			// GPS Location defined flag
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	2200      	movs	r2, #0
 800185c:	701a      	strb	r2, [r3, #0]
	devData->coordLatitude = 0;		// Latitude value (e.g. 1650.05758 eq. to 16°50.05758')
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	2200      	movs	r2, #0
 8001862:	605a      	str	r2, [r3, #4]
	devData->coordLongitude = 0;		// Longitude value (as with Longitude)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	2200      	movs	r2, #0
 8001868:	609a      	str	r2, [r3, #8]
	devData->coordLatitudeHem = 0;	// Latitude hemisphere (N/S)
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	2200      	movs	r2, #0
 800186e:	731a      	strb	r2, [r3, #12]
	devData->coordLongitudeHem = 0;	// Longitude hemisphere (W/E)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	2200      	movs	r2, #0
 8001874:	735a      	strb	r2, [r3, #13]
	devData->altitude = 0.0;			// Altitude above mean sea level (m)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	2200      	movs	r2, #0
 800187a:	611a      	str	r2, [r3, #16]
	devData->time = 0;					// Time of fix, UTC (hhmmss)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	2200      	movs	r2, #0
 8001880:	615a      	str	r2, [r3, #20]
	devData->satTracked = 0;			// Number of satellites being tracked
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	2200      	movs	r2, #0
 8001886:	761a      	strb	r2, [r3, #24]

	return (UBLOX_OK);
 8001888:	2300      	movs	r3, #0
}
 800188a:	4618      	mov	r0, r3
 800188c:	370c      	adds	r7, #12
 800188e:	46bd      	mov	sp, r7
 8001890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001894:	4770      	bx	lr
	...

08001898 <ublox_neo6m_readData>:

/*
 * Read data from the $GPGGA (Global Positioning System Fix Data) sentence.
 */
ublox_neo6m_ErrorType ublox_neo6m_readData(ublox_neo6m_ConfigStruct *devConfig, ublox_neo6m_DataStruct *devData) {
 8001898:	b580      	push	{r7, lr}
 800189a:	b09a      	sub	sp, #104	; 0x68
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
 80018a0:	6039      	str	r1, [r7, #0]

	HAL_StatusTypeDef err = HAL_OK;
 80018a2:	2300      	movs	r3, #0
 80018a4:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63

	uint8_t sentenceBuffer[NMEA_0183_MAX_MESSAGE_LENGTH];
	uint8_t receivedByte;
	size_t byteInMessage = 0;
 80018a8:	2300      	movs	r3, #0
 80018aa:	667b      	str	r3, [r7, #100]	; 0x64
	uint8_t byteRead = 0;
 80018ac:	2300      	movs	r3, #0
 80018ae:	73fb      	strb	r3, [r7, #15]

// UART Abort required before first call to UART_Receive (otherwise timeout error)
	err = HAL_UART_Abort(devConfig->huartNeo6m);
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	4618      	mov	r0, r3
 80018b6:	f001 feac 	bl	8003612 <HAL_UART_Abort>
 80018ba:	4603      	mov	r3, r0
 80018bc:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
	if (err != HAL_OK) {
 80018c0:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d002      	beq.n	80018ce <ublox_neo6m_readData+0x36>
		// Error when aborting any UART tx/rx
		return err;
 80018c8:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 80018cc:	e06d      	b.n	80019aa <ublox_neo6m_readData+0x112>
	}

	while (1) {
		// Read last character from the UART buffer and store as the first element of the sentence buffer
		err = HAL_UART_Receive((devConfig->huartNeo6m), sentenceBuffer, 1, 5000);
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	6818      	ldr	r0, [r3, #0]
 80018d2:	f107 0110 	add.w	r1, r7, #16
 80018d6:	f241 3388 	movw	r3, #5000	; 0x1388
 80018da:	2201      	movs	r2, #1
 80018dc:	f001 fdc8 	bl	8003470 <HAL_UART_Receive>
 80018e0:	4603      	mov	r3, r0
 80018e2:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
		if (err != HAL_OK) {
 80018e6:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d002      	beq.n	80018f4 <ublox_neo6m_readData+0x5c>
			// Error receiving byte of data!
			return err;
 80018ee:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 80018f2:	e05a      	b.n	80019aa <ublox_neo6m_readData+0x112>
		}

		// Test if it is a start character ($) indicating a new sentence
		if ((*sentenceBuffer) == '$') {
 80018f4:	7c3b      	ldrb	r3, [r7, #16]
 80018f6:	2b24      	cmp	r3, #36	; 0x24
 80018f8:	d1e9      	bne.n	80018ce <ublox_neo6m_readData+0x36>
			// Read talker ID and sentence type (5 bytes) and store as 5 consecutive elements of the sentence buffer
			HAL_UART_Receive(devConfig->huartNeo6m, (sentenceBuffer + 1), 5, HAL_MAX_DELAY);
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	6818      	ldr	r0, [r3, #0]
 80018fe:	f107 0110 	add.w	r1, r7, #16
 8001902:	3101      	adds	r1, #1
 8001904:	f04f 33ff 	mov.w	r3, #4294967295
 8001908:	2205      	movs	r2, #5
 800190a:	f001 fdb1 	bl	8003470 <HAL_UART_Receive>

			// Proceed only if it is a GGA sentence
			uint8_t isSentenceGGA = !(strncmp((sentenceBuffer + 1), "GPGGA", 5));
 800190e:	f107 0310 	add.w	r3, r7, #16
 8001912:	3301      	adds	r3, #1
 8001914:	2205      	movs	r2, #5
 8001916:	4927      	ldr	r1, [pc, #156]	; (80019b4 <ublox_neo6m_readData+0x11c>)
 8001918:	4618      	mov	r0, r3
 800191a:	f003 fefe 	bl	800571a <strncmp>
 800191e:	4603      	mov	r3, r0
 8001920:	2b00      	cmp	r3, #0
 8001922:	bf0c      	ite	eq
 8001924:	2301      	moveq	r3, #1
 8001926:	2300      	movne	r3, #0
 8001928:	b2db      	uxtb	r3, r3
 800192a:	f887 3062 	strb.w	r3, [r7, #98]	; 0x62
			byteInMessage = 6; // Current byte in a message, counting from 0
 800192e:	2306      	movs	r3, #6
 8001930:	667b      	str	r3, [r7, #100]	; 0x64

			if (isSentenceGGA == 1) {
 8001932:	f897 3062 	ldrb.w	r3, [r7, #98]	; 0x62
 8001936:	2b01      	cmp	r3, #1
 8001938:	d1c9      	bne.n	80018ce <ublox_neo6m_readData+0x36>
				do {
					HAL_UART_Receive(devConfig->huartNeo6m, &byteRead, 1, HAL_MAX_DELAY); // Read one char from the UART buffer
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	6818      	ldr	r0, [r3, #0]
 800193e:	f107 010f 	add.w	r1, r7, #15
 8001942:	f04f 33ff 	mov.w	r3, #4294967295
 8001946:	2201      	movs	r2, #1
 8001948:	f001 fd92 	bl	8003470 <HAL_UART_Receive>
					strncpy((sentenceBuffer + byteInMessage), &byteRead, 1);
 800194c:	f107 0210 	add.w	r2, r7, #16
 8001950:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001952:	4413      	add	r3, r2
 8001954:	f107 010f 	add.w	r1, r7, #15
 8001958:	2201      	movs	r2, #1
 800195a:	4618      	mov	r0, r3
 800195c:	f003 fef1 	bl	8005742 <strncpy>
					byteInMessage++;
 8001960:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001962:	3301      	adds	r3, #1
 8001964:	667b      	str	r3, [r7, #100]	; 0x64

					// Continue until Line Feed (LF or 0x0a in ASCI) is encountered or max length is reached
				} while ((byteRead != 0x0a) && (byteInMessage < NMEA_0183_MAX_MESSAGE_LENGTH));
 8001966:	7bfb      	ldrb	r3, [r7, #15]
 8001968:	2b0a      	cmp	r3, #10
 800196a:	d002      	beq.n	8001972 <ublox_neo6m_readData+0xda>
 800196c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800196e:	2b51      	cmp	r3, #81	; 0x51
 8001970:	d9e3      	bls.n	800193a <ublox_neo6m_readData+0xa2>

				break;	// Now break from the while loop and return
 8001972:	bf00      	nop
			}
		}
	}

	err = ublox_neo6m_resetDataStruct(devData);
 8001974:	6838      	ldr	r0, [r7, #0]
 8001976:	f7ff ff6b 	bl	8001850 <ublox_neo6m_resetDataStruct>
 800197a:	4603      	mov	r3, r0
 800197c:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63

	// Parse stored NMEA0813 sentence
	err = ublox_neo6m_parseNMEA0813(devData, sentenceBuffer);
 8001980:	f107 0310 	add.w	r3, r7, #16
 8001984:	4619      	mov	r1, r3
 8001986:	6838      	ldr	r0, [r7, #0]
 8001988:	f7ff ff04 	bl	8001794 <ublox_neo6m_parseNMEA0813>
 800198c:	4603      	mov	r3, r0
 800198e:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63

	HAL_UART_Transmit(devConfig->huartLogging, (sentenceBuffer), byteInMessage, HAL_MAX_DELAY);
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	6858      	ldr	r0, [r3, #4]
 8001996:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001998:	b29a      	uxth	r2, r3
 800199a:	f107 0110 	add.w	r1, r7, #16
 800199e:	f04f 33ff 	mov.w	r3, #4294967295
 80019a2:	f001 fcd1 	bl	8003348 <HAL_UART_Transmit>

	return (err);
 80019a6:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
}
 80019aa:	4618      	mov	r0, r3
 80019ac:	3768      	adds	r7, #104	; 0x68
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bd80      	pop	{r7, pc}
 80019b2:	bf00      	nop
 80019b4:	08009c8c 	.word	0x08009c8c

080019b8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80019b8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80019f0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80019bc:	f7ff fecc 	bl	8001758 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80019c0:	480c      	ldr	r0, [pc, #48]	; (80019f4 <LoopForever+0x6>)
  ldr r1, =_edata
 80019c2:	490d      	ldr	r1, [pc, #52]	; (80019f8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80019c4:	4a0d      	ldr	r2, [pc, #52]	; (80019fc <LoopForever+0xe>)
  movs r3, #0
 80019c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80019c8:	e002      	b.n	80019d0 <LoopCopyDataInit>

080019ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019ce:	3304      	adds	r3, #4

080019d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019d4:	d3f9      	bcc.n	80019ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019d6:	4a0a      	ldr	r2, [pc, #40]	; (8001a00 <LoopForever+0x12>)
  ldr r4, =_ebss
 80019d8:	4c0a      	ldr	r4, [pc, #40]	; (8001a04 <LoopForever+0x16>)
  movs r3, #0
 80019da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019dc:	e001      	b.n	80019e2 <LoopFillZerobss>

080019de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019e0:	3204      	adds	r2, #4

080019e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019e4:	d3fb      	bcc.n	80019de <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80019e6:	f002 fecd 	bl	8004784 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80019ea:	f7ff fb17 	bl	800101c <main>

080019ee <LoopForever>:

LoopForever:
    b LoopForever
 80019ee:	e7fe      	b.n	80019ee <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80019f0:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 80019f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80019f8:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 80019fc:	0800a1bc 	.word	0x0800a1bc
  ldr r2, =_sbss
 8001a00:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8001a04:	2000031c 	.word	0x2000031c

08001a08 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001a08:	e7fe      	b.n	8001a08 <ADC1_2_IRQHandler>
	...

08001a0c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b082      	sub	sp, #8
 8001a10:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001a12:	2300      	movs	r3, #0
 8001a14:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a16:	4b0c      	ldr	r3, [pc, #48]	; (8001a48 <HAL_Init+0x3c>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	4a0b      	ldr	r2, [pc, #44]	; (8001a48 <HAL_Init+0x3c>)
 8001a1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a20:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a22:	2003      	movs	r0, #3
 8001a24:	f000 f962 	bl	8001cec <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001a28:	2000      	movs	r0, #0
 8001a2a:	f000 f80f 	bl	8001a4c <HAL_InitTick>
 8001a2e:	4603      	mov	r3, r0
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d002      	beq.n	8001a3a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001a34:	2301      	movs	r3, #1
 8001a36:	71fb      	strb	r3, [r7, #7]
 8001a38:	e001      	b.n	8001a3e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001a3a:	f7ff fccf 	bl	80013dc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001a3e:	79fb      	ldrb	r3, [r7, #7]
}
 8001a40:	4618      	mov	r0, r3
 8001a42:	3708      	adds	r7, #8
 8001a44:	46bd      	mov	sp, r7
 8001a46:	bd80      	pop	{r7, pc}
 8001a48:	40022000 	.word	0x40022000

08001a4c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b084      	sub	sp, #16
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001a54:	2300      	movs	r3, #0
 8001a56:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001a58:	4b17      	ldr	r3, [pc, #92]	; (8001ab8 <HAL_InitTick+0x6c>)
 8001a5a:	781b      	ldrb	r3, [r3, #0]
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d023      	beq.n	8001aa8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001a60:	4b16      	ldr	r3, [pc, #88]	; (8001abc <HAL_InitTick+0x70>)
 8001a62:	681a      	ldr	r2, [r3, #0]
 8001a64:	4b14      	ldr	r3, [pc, #80]	; (8001ab8 <HAL_InitTick+0x6c>)
 8001a66:	781b      	ldrb	r3, [r3, #0]
 8001a68:	4619      	mov	r1, r3
 8001a6a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a6e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a72:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a76:	4618      	mov	r0, r3
 8001a78:	f000 f96d 	bl	8001d56 <HAL_SYSTICK_Config>
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d10f      	bne.n	8001aa2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	2b0f      	cmp	r3, #15
 8001a86:	d809      	bhi.n	8001a9c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a88:	2200      	movs	r2, #0
 8001a8a:	6879      	ldr	r1, [r7, #4]
 8001a8c:	f04f 30ff 	mov.w	r0, #4294967295
 8001a90:	f000 f937 	bl	8001d02 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001a94:	4a0a      	ldr	r2, [pc, #40]	; (8001ac0 <HAL_InitTick+0x74>)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	6013      	str	r3, [r2, #0]
 8001a9a:	e007      	b.n	8001aac <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001a9c:	2301      	movs	r3, #1
 8001a9e:	73fb      	strb	r3, [r7, #15]
 8001aa0:	e004      	b.n	8001aac <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001aa2:	2301      	movs	r3, #1
 8001aa4:	73fb      	strb	r3, [r7, #15]
 8001aa6:	e001      	b.n	8001aac <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001aa8:	2301      	movs	r3, #1
 8001aaa:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001aac:	7bfb      	ldrb	r3, [r7, #15]
}
 8001aae:	4618      	mov	r0, r3
 8001ab0:	3710      	adds	r7, #16
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bd80      	pop	{r7, pc}
 8001ab6:	bf00      	nop
 8001ab8:	20000008 	.word	0x20000008
 8001abc:	20000000 	.word	0x20000000
 8001ac0:	20000004 	.word	0x20000004

08001ac4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001ac8:	4b06      	ldr	r3, [pc, #24]	; (8001ae4 <HAL_IncTick+0x20>)
 8001aca:	781b      	ldrb	r3, [r3, #0]
 8001acc:	461a      	mov	r2, r3
 8001ace:	4b06      	ldr	r3, [pc, #24]	; (8001ae8 <HAL_IncTick+0x24>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	4413      	add	r3, r2
 8001ad4:	4a04      	ldr	r2, [pc, #16]	; (8001ae8 <HAL_IncTick+0x24>)
 8001ad6:	6013      	str	r3, [r2, #0]
}
 8001ad8:	bf00      	nop
 8001ada:	46bd      	mov	sp, r7
 8001adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae0:	4770      	bx	lr
 8001ae2:	bf00      	nop
 8001ae4:	20000008 	.word	0x20000008
 8001ae8:	20000308 	.word	0x20000308

08001aec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001aec:	b480      	push	{r7}
 8001aee:	af00      	add	r7, sp, #0
  return uwTick;
 8001af0:	4b03      	ldr	r3, [pc, #12]	; (8001b00 <HAL_GetTick+0x14>)
 8001af2:	681b      	ldr	r3, [r3, #0]
}
 8001af4:	4618      	mov	r0, r3
 8001af6:	46bd      	mov	sp, r7
 8001af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afc:	4770      	bx	lr
 8001afe:	bf00      	nop
 8001b00:	20000308 	.word	0x20000308

08001b04 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b084      	sub	sp, #16
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b0c:	f7ff ffee 	bl	8001aec <HAL_GetTick>
 8001b10:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b1c:	d005      	beq.n	8001b2a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001b1e:	4b0a      	ldr	r3, [pc, #40]	; (8001b48 <HAL_Delay+0x44>)
 8001b20:	781b      	ldrb	r3, [r3, #0]
 8001b22:	461a      	mov	r2, r3
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	4413      	add	r3, r2
 8001b28:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001b2a:	bf00      	nop
 8001b2c:	f7ff ffde 	bl	8001aec <HAL_GetTick>
 8001b30:	4602      	mov	r2, r0
 8001b32:	68bb      	ldr	r3, [r7, #8]
 8001b34:	1ad3      	subs	r3, r2, r3
 8001b36:	68fa      	ldr	r2, [r7, #12]
 8001b38:	429a      	cmp	r2, r3
 8001b3a:	d8f7      	bhi.n	8001b2c <HAL_Delay+0x28>
  {
  }
}
 8001b3c:	bf00      	nop
 8001b3e:	bf00      	nop
 8001b40:	3710      	adds	r7, #16
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bd80      	pop	{r7, pc}
 8001b46:	bf00      	nop
 8001b48:	20000008 	.word	0x20000008

08001b4c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	b085      	sub	sp, #20
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	f003 0307 	and.w	r3, r3, #7
 8001b5a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b5c:	4b0c      	ldr	r3, [pc, #48]	; (8001b90 <__NVIC_SetPriorityGrouping+0x44>)
 8001b5e:	68db      	ldr	r3, [r3, #12]
 8001b60:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b62:	68ba      	ldr	r2, [r7, #8]
 8001b64:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b68:	4013      	ands	r3, r2
 8001b6a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b70:	68bb      	ldr	r3, [r7, #8]
 8001b72:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b74:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b7c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b7e:	4a04      	ldr	r2, [pc, #16]	; (8001b90 <__NVIC_SetPriorityGrouping+0x44>)
 8001b80:	68bb      	ldr	r3, [r7, #8]
 8001b82:	60d3      	str	r3, [r2, #12]
}
 8001b84:	bf00      	nop
 8001b86:	3714      	adds	r7, #20
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8e:	4770      	bx	lr
 8001b90:	e000ed00 	.word	0xe000ed00

08001b94 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b94:	b480      	push	{r7}
 8001b96:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b98:	4b04      	ldr	r3, [pc, #16]	; (8001bac <__NVIC_GetPriorityGrouping+0x18>)
 8001b9a:	68db      	ldr	r3, [r3, #12]
 8001b9c:	0a1b      	lsrs	r3, r3, #8
 8001b9e:	f003 0307 	and.w	r3, r3, #7
}
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001baa:	4770      	bx	lr
 8001bac:	e000ed00 	.word	0xe000ed00

08001bb0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	b083      	sub	sp, #12
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	db0b      	blt.n	8001bda <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001bc2:	79fb      	ldrb	r3, [r7, #7]
 8001bc4:	f003 021f 	and.w	r2, r3, #31
 8001bc8:	4907      	ldr	r1, [pc, #28]	; (8001be8 <__NVIC_EnableIRQ+0x38>)
 8001bca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bce:	095b      	lsrs	r3, r3, #5
 8001bd0:	2001      	movs	r0, #1
 8001bd2:	fa00 f202 	lsl.w	r2, r0, r2
 8001bd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001bda:	bf00      	nop
 8001bdc:	370c      	adds	r7, #12
 8001bde:	46bd      	mov	sp, r7
 8001be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be4:	4770      	bx	lr
 8001be6:	bf00      	nop
 8001be8:	e000e100 	.word	0xe000e100

08001bec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001bec:	b480      	push	{r7}
 8001bee:	b083      	sub	sp, #12
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	6039      	str	r1, [r7, #0]
 8001bf6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bf8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	db0a      	blt.n	8001c16 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	b2da      	uxtb	r2, r3
 8001c04:	490c      	ldr	r1, [pc, #48]	; (8001c38 <__NVIC_SetPriority+0x4c>)
 8001c06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c0a:	0112      	lsls	r2, r2, #4
 8001c0c:	b2d2      	uxtb	r2, r2
 8001c0e:	440b      	add	r3, r1
 8001c10:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c14:	e00a      	b.n	8001c2c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c16:	683b      	ldr	r3, [r7, #0]
 8001c18:	b2da      	uxtb	r2, r3
 8001c1a:	4908      	ldr	r1, [pc, #32]	; (8001c3c <__NVIC_SetPriority+0x50>)
 8001c1c:	79fb      	ldrb	r3, [r7, #7]
 8001c1e:	f003 030f 	and.w	r3, r3, #15
 8001c22:	3b04      	subs	r3, #4
 8001c24:	0112      	lsls	r2, r2, #4
 8001c26:	b2d2      	uxtb	r2, r2
 8001c28:	440b      	add	r3, r1
 8001c2a:	761a      	strb	r2, [r3, #24]
}
 8001c2c:	bf00      	nop
 8001c2e:	370c      	adds	r7, #12
 8001c30:	46bd      	mov	sp, r7
 8001c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c36:	4770      	bx	lr
 8001c38:	e000e100 	.word	0xe000e100
 8001c3c:	e000ed00 	.word	0xe000ed00

08001c40 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c40:	b480      	push	{r7}
 8001c42:	b089      	sub	sp, #36	; 0x24
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	60f8      	str	r0, [r7, #12]
 8001c48:	60b9      	str	r1, [r7, #8]
 8001c4a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	f003 0307 	and.w	r3, r3, #7
 8001c52:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c54:	69fb      	ldr	r3, [r7, #28]
 8001c56:	f1c3 0307 	rsb	r3, r3, #7
 8001c5a:	2b04      	cmp	r3, #4
 8001c5c:	bf28      	it	cs
 8001c5e:	2304      	movcs	r3, #4
 8001c60:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c62:	69fb      	ldr	r3, [r7, #28]
 8001c64:	3304      	adds	r3, #4
 8001c66:	2b06      	cmp	r3, #6
 8001c68:	d902      	bls.n	8001c70 <NVIC_EncodePriority+0x30>
 8001c6a:	69fb      	ldr	r3, [r7, #28]
 8001c6c:	3b03      	subs	r3, #3
 8001c6e:	e000      	b.n	8001c72 <NVIC_EncodePriority+0x32>
 8001c70:	2300      	movs	r3, #0
 8001c72:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c74:	f04f 32ff 	mov.w	r2, #4294967295
 8001c78:	69bb      	ldr	r3, [r7, #24]
 8001c7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c7e:	43da      	mvns	r2, r3
 8001c80:	68bb      	ldr	r3, [r7, #8]
 8001c82:	401a      	ands	r2, r3
 8001c84:	697b      	ldr	r3, [r7, #20]
 8001c86:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c88:	f04f 31ff 	mov.w	r1, #4294967295
 8001c8c:	697b      	ldr	r3, [r7, #20]
 8001c8e:	fa01 f303 	lsl.w	r3, r1, r3
 8001c92:	43d9      	mvns	r1, r3
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c98:	4313      	orrs	r3, r2
         );
}
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	3724      	adds	r7, #36	; 0x24
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca4:	4770      	bx	lr
	...

08001ca8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b082      	sub	sp, #8
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	3b01      	subs	r3, #1
 8001cb4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001cb8:	d301      	bcc.n	8001cbe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001cba:	2301      	movs	r3, #1
 8001cbc:	e00f      	b.n	8001cde <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001cbe:	4a0a      	ldr	r2, [pc, #40]	; (8001ce8 <SysTick_Config+0x40>)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	3b01      	subs	r3, #1
 8001cc4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001cc6:	210f      	movs	r1, #15
 8001cc8:	f04f 30ff 	mov.w	r0, #4294967295
 8001ccc:	f7ff ff8e 	bl	8001bec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001cd0:	4b05      	ldr	r3, [pc, #20]	; (8001ce8 <SysTick_Config+0x40>)
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001cd6:	4b04      	ldr	r3, [pc, #16]	; (8001ce8 <SysTick_Config+0x40>)
 8001cd8:	2207      	movs	r2, #7
 8001cda:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001cdc:	2300      	movs	r3, #0
}
 8001cde:	4618      	mov	r0, r3
 8001ce0:	3708      	adds	r7, #8
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bd80      	pop	{r7, pc}
 8001ce6:	bf00      	nop
 8001ce8:	e000e010 	.word	0xe000e010

08001cec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b082      	sub	sp, #8
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001cf4:	6878      	ldr	r0, [r7, #4]
 8001cf6:	f7ff ff29 	bl	8001b4c <__NVIC_SetPriorityGrouping>
}
 8001cfa:	bf00      	nop
 8001cfc:	3708      	adds	r7, #8
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bd80      	pop	{r7, pc}

08001d02 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d02:	b580      	push	{r7, lr}
 8001d04:	b086      	sub	sp, #24
 8001d06:	af00      	add	r7, sp, #0
 8001d08:	4603      	mov	r3, r0
 8001d0a:	60b9      	str	r1, [r7, #8]
 8001d0c:	607a      	str	r2, [r7, #4]
 8001d0e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001d10:	2300      	movs	r3, #0
 8001d12:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001d14:	f7ff ff3e 	bl	8001b94 <__NVIC_GetPriorityGrouping>
 8001d18:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d1a:	687a      	ldr	r2, [r7, #4]
 8001d1c:	68b9      	ldr	r1, [r7, #8]
 8001d1e:	6978      	ldr	r0, [r7, #20]
 8001d20:	f7ff ff8e 	bl	8001c40 <NVIC_EncodePriority>
 8001d24:	4602      	mov	r2, r0
 8001d26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d2a:	4611      	mov	r1, r2
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	f7ff ff5d 	bl	8001bec <__NVIC_SetPriority>
}
 8001d32:	bf00      	nop
 8001d34:	3718      	adds	r7, #24
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bd80      	pop	{r7, pc}

08001d3a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d3a:	b580      	push	{r7, lr}
 8001d3c:	b082      	sub	sp, #8
 8001d3e:	af00      	add	r7, sp, #0
 8001d40:	4603      	mov	r3, r0
 8001d42:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d48:	4618      	mov	r0, r3
 8001d4a:	f7ff ff31 	bl	8001bb0 <__NVIC_EnableIRQ>
}
 8001d4e:	bf00      	nop
 8001d50:	3708      	adds	r7, #8
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bd80      	pop	{r7, pc}

08001d56 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d56:	b580      	push	{r7, lr}
 8001d58:	b082      	sub	sp, #8
 8001d5a:	af00      	add	r7, sp, #0
 8001d5c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d5e:	6878      	ldr	r0, [r7, #4]
 8001d60:	f7ff ffa2 	bl	8001ca8 <SysTick_Config>
 8001d64:	4603      	mov	r3, r0
}
 8001d66:	4618      	mov	r0, r3
 8001d68:	3708      	adds	r7, #8
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bd80      	pop	{r7, pc}

08001d6e <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001d6e:	b480      	push	{r7}
 8001d70:	b085      	sub	sp, #20
 8001d72:	af00      	add	r7, sp, #0
 8001d74:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001d76:	2300      	movs	r3, #0
 8001d78:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001d80:	b2db      	uxtb	r3, r3
 8001d82:	2b02      	cmp	r3, #2
 8001d84:	d008      	beq.n	8001d98 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	2204      	movs	r2, #4
 8001d8a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	2200      	movs	r2, #0
 8001d90:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001d94:	2301      	movs	r3, #1
 8001d96:	e022      	b.n	8001dde <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	681a      	ldr	r2, [r3, #0]
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f022 020e 	bic.w	r2, r2, #14
 8001da6:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	681a      	ldr	r2, [r3, #0]
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f022 0201 	bic.w	r2, r2, #1
 8001db6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dbc:	f003 021c 	and.w	r2, r3, #28
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dc4:	2101      	movs	r1, #1
 8001dc6:	fa01 f202 	lsl.w	r2, r1, r2
 8001dca:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	2201      	movs	r2, #1
 8001dd0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8001ddc:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8001dde:	4618      	mov	r0, r3
 8001de0:	3714      	adds	r7, #20
 8001de2:	46bd      	mov	sp, r7
 8001de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de8:	4770      	bx	lr

08001dea <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001dea:	b580      	push	{r7, lr}
 8001dec:	b084      	sub	sp, #16
 8001dee:	af00      	add	r7, sp, #0
 8001df0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001df2:	2300      	movs	r3, #0
 8001df4:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001dfc:	b2db      	uxtb	r3, r3
 8001dfe:	2b02      	cmp	r3, #2
 8001e00:	d005      	beq.n	8001e0e <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	2204      	movs	r2, #4
 8001e06:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001e08:	2301      	movs	r3, #1
 8001e0a:	73fb      	strb	r3, [r7, #15]
 8001e0c:	e029      	b.n	8001e62 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	681a      	ldr	r2, [r3, #0]
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f022 020e 	bic.w	r2, r2, #14
 8001e1c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	681a      	ldr	r2, [r3, #0]
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f022 0201 	bic.w	r2, r2, #1
 8001e2c:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e32:	f003 021c 	and.w	r2, r3, #28
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e3a:	2101      	movs	r1, #1
 8001e3c:	fa01 f202 	lsl.w	r2, r1, r2
 8001e40:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	2201      	movs	r2, #1
 8001e46:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d003      	beq.n	8001e62 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e5e:	6878      	ldr	r0, [r7, #4]
 8001e60:	4798      	blx	r3
    }
  }
  return status;
 8001e62:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e64:	4618      	mov	r0, r3
 8001e66:	3710      	adds	r7, #16
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	bd80      	pop	{r7, pc}

08001e6c <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	b083      	sub	sp, #12
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
}
 8001e78:	4618      	mov	r0, r3
 8001e7a:	370c      	adds	r7, #12
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e82:	4770      	bx	lr

08001e84 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e84:	b480      	push	{r7}
 8001e86:	b087      	sub	sp, #28
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
 8001e8c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001e8e:	2300      	movs	r3, #0
 8001e90:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e92:	e14e      	b.n	8002132 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	681a      	ldr	r2, [r3, #0]
 8001e98:	2101      	movs	r1, #1
 8001e9a:	697b      	ldr	r3, [r7, #20]
 8001e9c:	fa01 f303 	lsl.w	r3, r1, r3
 8001ea0:	4013      	ands	r3, r2
 8001ea2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	f000 8140 	beq.w	800212c <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	685b      	ldr	r3, [r3, #4]
 8001eb0:	f003 0303 	and.w	r3, r3, #3
 8001eb4:	2b01      	cmp	r3, #1
 8001eb6:	d005      	beq.n	8001ec4 <HAL_GPIO_Init+0x40>
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	685b      	ldr	r3, [r3, #4]
 8001ebc:	f003 0303 	and.w	r3, r3, #3
 8001ec0:	2b02      	cmp	r3, #2
 8001ec2:	d130      	bne.n	8001f26 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	689b      	ldr	r3, [r3, #8]
 8001ec8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001eca:	697b      	ldr	r3, [r7, #20]
 8001ecc:	005b      	lsls	r3, r3, #1
 8001ece:	2203      	movs	r2, #3
 8001ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed4:	43db      	mvns	r3, r3
 8001ed6:	693a      	ldr	r2, [r7, #16]
 8001ed8:	4013      	ands	r3, r2
 8001eda:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	68da      	ldr	r2, [r3, #12]
 8001ee0:	697b      	ldr	r3, [r7, #20]
 8001ee2:	005b      	lsls	r3, r3, #1
 8001ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee8:	693a      	ldr	r2, [r7, #16]
 8001eea:	4313      	orrs	r3, r2
 8001eec:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	693a      	ldr	r2, [r7, #16]
 8001ef2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	685b      	ldr	r3, [r3, #4]
 8001ef8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001efa:	2201      	movs	r2, #1
 8001efc:	697b      	ldr	r3, [r7, #20]
 8001efe:	fa02 f303 	lsl.w	r3, r2, r3
 8001f02:	43db      	mvns	r3, r3
 8001f04:	693a      	ldr	r2, [r7, #16]
 8001f06:	4013      	ands	r3, r2
 8001f08:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	685b      	ldr	r3, [r3, #4]
 8001f0e:	091b      	lsrs	r3, r3, #4
 8001f10:	f003 0201 	and.w	r2, r3, #1
 8001f14:	697b      	ldr	r3, [r7, #20]
 8001f16:	fa02 f303 	lsl.w	r3, r2, r3
 8001f1a:	693a      	ldr	r2, [r7, #16]
 8001f1c:	4313      	orrs	r3, r2
 8001f1e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	693a      	ldr	r2, [r7, #16]
 8001f24:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f26:	683b      	ldr	r3, [r7, #0]
 8001f28:	685b      	ldr	r3, [r3, #4]
 8001f2a:	f003 0303 	and.w	r3, r3, #3
 8001f2e:	2b03      	cmp	r3, #3
 8001f30:	d017      	beq.n	8001f62 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	68db      	ldr	r3, [r3, #12]
 8001f36:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001f38:	697b      	ldr	r3, [r7, #20]
 8001f3a:	005b      	lsls	r3, r3, #1
 8001f3c:	2203      	movs	r2, #3
 8001f3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f42:	43db      	mvns	r3, r3
 8001f44:	693a      	ldr	r2, [r7, #16]
 8001f46:	4013      	ands	r3, r2
 8001f48:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f4a:	683b      	ldr	r3, [r7, #0]
 8001f4c:	689a      	ldr	r2, [r3, #8]
 8001f4e:	697b      	ldr	r3, [r7, #20]
 8001f50:	005b      	lsls	r3, r3, #1
 8001f52:	fa02 f303 	lsl.w	r3, r2, r3
 8001f56:	693a      	ldr	r2, [r7, #16]
 8001f58:	4313      	orrs	r3, r2
 8001f5a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	693a      	ldr	r2, [r7, #16]
 8001f60:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	685b      	ldr	r3, [r3, #4]
 8001f66:	f003 0303 	and.w	r3, r3, #3
 8001f6a:	2b02      	cmp	r3, #2
 8001f6c:	d123      	bne.n	8001fb6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001f6e:	697b      	ldr	r3, [r7, #20]
 8001f70:	08da      	lsrs	r2, r3, #3
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	3208      	adds	r2, #8
 8001f76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f7a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001f7c:	697b      	ldr	r3, [r7, #20]
 8001f7e:	f003 0307 	and.w	r3, r3, #7
 8001f82:	009b      	lsls	r3, r3, #2
 8001f84:	220f      	movs	r2, #15
 8001f86:	fa02 f303 	lsl.w	r3, r2, r3
 8001f8a:	43db      	mvns	r3, r3
 8001f8c:	693a      	ldr	r2, [r7, #16]
 8001f8e:	4013      	ands	r3, r2
 8001f90:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	691a      	ldr	r2, [r3, #16]
 8001f96:	697b      	ldr	r3, [r7, #20]
 8001f98:	f003 0307 	and.w	r3, r3, #7
 8001f9c:	009b      	lsls	r3, r3, #2
 8001f9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa2:	693a      	ldr	r2, [r7, #16]
 8001fa4:	4313      	orrs	r3, r2
 8001fa6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001fa8:	697b      	ldr	r3, [r7, #20]
 8001faa:	08da      	lsrs	r2, r3, #3
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	3208      	adds	r2, #8
 8001fb0:	6939      	ldr	r1, [r7, #16]
 8001fb2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001fbc:	697b      	ldr	r3, [r7, #20]
 8001fbe:	005b      	lsls	r3, r3, #1
 8001fc0:	2203      	movs	r2, #3
 8001fc2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc6:	43db      	mvns	r3, r3
 8001fc8:	693a      	ldr	r2, [r7, #16]
 8001fca:	4013      	ands	r3, r2
 8001fcc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001fce:	683b      	ldr	r3, [r7, #0]
 8001fd0:	685b      	ldr	r3, [r3, #4]
 8001fd2:	f003 0203 	and.w	r2, r3, #3
 8001fd6:	697b      	ldr	r3, [r7, #20]
 8001fd8:	005b      	lsls	r3, r3, #1
 8001fda:	fa02 f303 	lsl.w	r3, r2, r3
 8001fde:	693a      	ldr	r2, [r7, #16]
 8001fe0:	4313      	orrs	r3, r2
 8001fe2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	693a      	ldr	r2, [r7, #16]
 8001fe8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	685b      	ldr	r3, [r3, #4]
 8001fee:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	f000 809a 	beq.w	800212c <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ff8:	4b55      	ldr	r3, [pc, #340]	; (8002150 <HAL_GPIO_Init+0x2cc>)
 8001ffa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ffc:	4a54      	ldr	r2, [pc, #336]	; (8002150 <HAL_GPIO_Init+0x2cc>)
 8001ffe:	f043 0301 	orr.w	r3, r3, #1
 8002002:	6613      	str	r3, [r2, #96]	; 0x60
 8002004:	4b52      	ldr	r3, [pc, #328]	; (8002150 <HAL_GPIO_Init+0x2cc>)
 8002006:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002008:	f003 0301 	and.w	r3, r3, #1
 800200c:	60bb      	str	r3, [r7, #8]
 800200e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002010:	4a50      	ldr	r2, [pc, #320]	; (8002154 <HAL_GPIO_Init+0x2d0>)
 8002012:	697b      	ldr	r3, [r7, #20]
 8002014:	089b      	lsrs	r3, r3, #2
 8002016:	3302      	adds	r3, #2
 8002018:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800201c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800201e:	697b      	ldr	r3, [r7, #20]
 8002020:	f003 0303 	and.w	r3, r3, #3
 8002024:	009b      	lsls	r3, r3, #2
 8002026:	220f      	movs	r2, #15
 8002028:	fa02 f303 	lsl.w	r3, r2, r3
 800202c:	43db      	mvns	r3, r3
 800202e:	693a      	ldr	r2, [r7, #16]
 8002030:	4013      	ands	r3, r2
 8002032:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800203a:	d013      	beq.n	8002064 <HAL_GPIO_Init+0x1e0>
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	4a46      	ldr	r2, [pc, #280]	; (8002158 <HAL_GPIO_Init+0x2d4>)
 8002040:	4293      	cmp	r3, r2
 8002042:	d00d      	beq.n	8002060 <HAL_GPIO_Init+0x1dc>
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	4a45      	ldr	r2, [pc, #276]	; (800215c <HAL_GPIO_Init+0x2d8>)
 8002048:	4293      	cmp	r3, r2
 800204a:	d007      	beq.n	800205c <HAL_GPIO_Init+0x1d8>
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	4a44      	ldr	r2, [pc, #272]	; (8002160 <HAL_GPIO_Init+0x2dc>)
 8002050:	4293      	cmp	r3, r2
 8002052:	d101      	bne.n	8002058 <HAL_GPIO_Init+0x1d4>
 8002054:	2303      	movs	r3, #3
 8002056:	e006      	b.n	8002066 <HAL_GPIO_Init+0x1e2>
 8002058:	2307      	movs	r3, #7
 800205a:	e004      	b.n	8002066 <HAL_GPIO_Init+0x1e2>
 800205c:	2302      	movs	r3, #2
 800205e:	e002      	b.n	8002066 <HAL_GPIO_Init+0x1e2>
 8002060:	2301      	movs	r3, #1
 8002062:	e000      	b.n	8002066 <HAL_GPIO_Init+0x1e2>
 8002064:	2300      	movs	r3, #0
 8002066:	697a      	ldr	r2, [r7, #20]
 8002068:	f002 0203 	and.w	r2, r2, #3
 800206c:	0092      	lsls	r2, r2, #2
 800206e:	4093      	lsls	r3, r2
 8002070:	693a      	ldr	r2, [r7, #16]
 8002072:	4313      	orrs	r3, r2
 8002074:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002076:	4937      	ldr	r1, [pc, #220]	; (8002154 <HAL_GPIO_Init+0x2d0>)
 8002078:	697b      	ldr	r3, [r7, #20]
 800207a:	089b      	lsrs	r3, r3, #2
 800207c:	3302      	adds	r3, #2
 800207e:	693a      	ldr	r2, [r7, #16]
 8002080:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002084:	4b37      	ldr	r3, [pc, #220]	; (8002164 <HAL_GPIO_Init+0x2e0>)
 8002086:	689b      	ldr	r3, [r3, #8]
 8002088:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	43db      	mvns	r3, r3
 800208e:	693a      	ldr	r2, [r7, #16]
 8002090:	4013      	ands	r3, r2
 8002092:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	685b      	ldr	r3, [r3, #4]
 8002098:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800209c:	2b00      	cmp	r3, #0
 800209e:	d003      	beq.n	80020a8 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 80020a0:	693a      	ldr	r2, [r7, #16]
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	4313      	orrs	r3, r2
 80020a6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80020a8:	4a2e      	ldr	r2, [pc, #184]	; (8002164 <HAL_GPIO_Init+0x2e0>)
 80020aa:	693b      	ldr	r3, [r7, #16]
 80020ac:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80020ae:	4b2d      	ldr	r3, [pc, #180]	; (8002164 <HAL_GPIO_Init+0x2e0>)
 80020b0:	68db      	ldr	r3, [r3, #12]
 80020b2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	43db      	mvns	r3, r3
 80020b8:	693a      	ldr	r2, [r7, #16]
 80020ba:	4013      	ands	r3, r2
 80020bc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	685b      	ldr	r3, [r3, #4]
 80020c2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d003      	beq.n	80020d2 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 80020ca:	693a      	ldr	r2, [r7, #16]
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	4313      	orrs	r3, r2
 80020d0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80020d2:	4a24      	ldr	r2, [pc, #144]	; (8002164 <HAL_GPIO_Init+0x2e0>)
 80020d4:	693b      	ldr	r3, [r7, #16]
 80020d6:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80020d8:	4b22      	ldr	r3, [pc, #136]	; (8002164 <HAL_GPIO_Init+0x2e0>)
 80020da:	685b      	ldr	r3, [r3, #4]
 80020dc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	43db      	mvns	r3, r3
 80020e2:	693a      	ldr	r2, [r7, #16]
 80020e4:	4013      	ands	r3, r2
 80020e6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	685b      	ldr	r3, [r3, #4]
 80020ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d003      	beq.n	80020fc <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 80020f4:	693a      	ldr	r2, [r7, #16]
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	4313      	orrs	r3, r2
 80020fa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80020fc:	4a19      	ldr	r2, [pc, #100]	; (8002164 <HAL_GPIO_Init+0x2e0>)
 80020fe:	693b      	ldr	r3, [r7, #16]
 8002100:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002102:	4b18      	ldr	r3, [pc, #96]	; (8002164 <HAL_GPIO_Init+0x2e0>)
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	43db      	mvns	r3, r3
 800210c:	693a      	ldr	r2, [r7, #16]
 800210e:	4013      	ands	r3, r2
 8002110:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002112:	683b      	ldr	r3, [r7, #0]
 8002114:	685b      	ldr	r3, [r3, #4]
 8002116:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800211a:	2b00      	cmp	r3, #0
 800211c:	d003      	beq.n	8002126 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 800211e:	693a      	ldr	r2, [r7, #16]
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	4313      	orrs	r3, r2
 8002124:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002126:	4a0f      	ldr	r2, [pc, #60]	; (8002164 <HAL_GPIO_Init+0x2e0>)
 8002128:	693b      	ldr	r3, [r7, #16]
 800212a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800212c:	697b      	ldr	r3, [r7, #20]
 800212e:	3301      	adds	r3, #1
 8002130:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	681a      	ldr	r2, [r3, #0]
 8002136:	697b      	ldr	r3, [r7, #20]
 8002138:	fa22 f303 	lsr.w	r3, r2, r3
 800213c:	2b00      	cmp	r3, #0
 800213e:	f47f aea9 	bne.w	8001e94 <HAL_GPIO_Init+0x10>
  }
}
 8002142:	bf00      	nop
 8002144:	bf00      	nop
 8002146:	371c      	adds	r7, #28
 8002148:	46bd      	mov	sp, r7
 800214a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214e:	4770      	bx	lr
 8002150:	40021000 	.word	0x40021000
 8002154:	40010000 	.word	0x40010000
 8002158:	48000400 	.word	0x48000400
 800215c:	48000800 	.word	0x48000800
 8002160:	48000c00 	.word	0x48000c00
 8002164:	40010400 	.word	0x40010400

08002168 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002168:	b480      	push	{r7}
 800216a:	b083      	sub	sp, #12
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
 8002170:	460b      	mov	r3, r1
 8002172:	807b      	strh	r3, [r7, #2]
 8002174:	4613      	mov	r3, r2
 8002176:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002178:	787b      	ldrb	r3, [r7, #1]
 800217a:	2b00      	cmp	r3, #0
 800217c:	d003      	beq.n	8002186 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800217e:	887a      	ldrh	r2, [r7, #2]
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002184:	e002      	b.n	800218c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002186:	887a      	ldrh	r2, [r7, #2]
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800218c:	bf00      	nop
 800218e:	370c      	adds	r7, #12
 8002190:	46bd      	mov	sp, r7
 8002192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002196:	4770      	bx	lr

08002198 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002198:	b480      	push	{r7}
 800219a:	b085      	sub	sp, #20
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
 80021a0:	460b      	mov	r3, r1
 80021a2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	695b      	ldr	r3, [r3, #20]
 80021a8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80021aa:	887a      	ldrh	r2, [r7, #2]
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	4013      	ands	r3, r2
 80021b0:	041a      	lsls	r2, r3, #16
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	43d9      	mvns	r1, r3
 80021b6:	887b      	ldrh	r3, [r7, #2]
 80021b8:	400b      	ands	r3, r1
 80021ba:	431a      	orrs	r2, r3
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	619a      	str	r2, [r3, #24]
}
 80021c0:	bf00      	nop
 80021c2:	3714      	adds	r7, #20
 80021c4:	46bd      	mov	sp, r7
 80021c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ca:	4770      	bx	lr

080021cc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80021cc:	b480      	push	{r7}
 80021ce:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80021d0:	4b04      	ldr	r3, [pc, #16]	; (80021e4 <HAL_PWREx_GetVoltageRange+0x18>)
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80021d8:	4618      	mov	r0, r3
 80021da:	46bd      	mov	sp, r7
 80021dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e0:	4770      	bx	lr
 80021e2:	bf00      	nop
 80021e4:	40007000 	.word	0x40007000

080021e8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80021e8:	b480      	push	{r7}
 80021ea:	b085      	sub	sp, #20
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80021f6:	d130      	bne.n	800225a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80021f8:	4b23      	ldr	r3, [pc, #140]	; (8002288 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002200:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002204:	d038      	beq.n	8002278 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002206:	4b20      	ldr	r3, [pc, #128]	; (8002288 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800220e:	4a1e      	ldr	r2, [pc, #120]	; (8002288 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002210:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002214:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002216:	4b1d      	ldr	r3, [pc, #116]	; (800228c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	2232      	movs	r2, #50	; 0x32
 800221c:	fb02 f303 	mul.w	r3, r2, r3
 8002220:	4a1b      	ldr	r2, [pc, #108]	; (8002290 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002222:	fba2 2303 	umull	r2, r3, r2, r3
 8002226:	0c9b      	lsrs	r3, r3, #18
 8002228:	3301      	adds	r3, #1
 800222a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800222c:	e002      	b.n	8002234 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	3b01      	subs	r3, #1
 8002232:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002234:	4b14      	ldr	r3, [pc, #80]	; (8002288 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002236:	695b      	ldr	r3, [r3, #20]
 8002238:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800223c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002240:	d102      	bne.n	8002248 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	2b00      	cmp	r3, #0
 8002246:	d1f2      	bne.n	800222e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002248:	4b0f      	ldr	r3, [pc, #60]	; (8002288 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800224a:	695b      	ldr	r3, [r3, #20]
 800224c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002250:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002254:	d110      	bne.n	8002278 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002256:	2303      	movs	r3, #3
 8002258:	e00f      	b.n	800227a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800225a:	4b0b      	ldr	r3, [pc, #44]	; (8002288 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002262:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002266:	d007      	beq.n	8002278 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002268:	4b07      	ldr	r3, [pc, #28]	; (8002288 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002270:	4a05      	ldr	r2, [pc, #20]	; (8002288 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002272:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002276:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002278:	2300      	movs	r3, #0
}
 800227a:	4618      	mov	r0, r3
 800227c:	3714      	adds	r7, #20
 800227e:	46bd      	mov	sp, r7
 8002280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002284:	4770      	bx	lr
 8002286:	bf00      	nop
 8002288:	40007000 	.word	0x40007000
 800228c:	20000000 	.word	0x20000000
 8002290:	431bde83 	.word	0x431bde83

08002294 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b08a      	sub	sp, #40	; 0x28
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d102      	bne.n	80022a8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80022a2:	2301      	movs	r3, #1
 80022a4:	f000 bc4f 	b.w	8002b46 <HAL_RCC_OscConfig+0x8b2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80022a8:	4b97      	ldr	r3, [pc, #604]	; (8002508 <HAL_RCC_OscConfig+0x274>)
 80022aa:	689b      	ldr	r3, [r3, #8]
 80022ac:	f003 030c 	and.w	r3, r3, #12
 80022b0:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80022b2:	4b95      	ldr	r3, [pc, #596]	; (8002508 <HAL_RCC_OscConfig+0x274>)
 80022b4:	68db      	ldr	r3, [r3, #12]
 80022b6:	f003 0303 	and.w	r3, r3, #3
 80022ba:	61fb      	str	r3, [r7, #28]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f003 0310 	and.w	r3, r3, #16
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	f000 80e6 	beq.w	8002496 <HAL_RCC_OscConfig+0x202>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80022ca:	6a3b      	ldr	r3, [r7, #32]
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d007      	beq.n	80022e0 <HAL_RCC_OscConfig+0x4c>
 80022d0:	6a3b      	ldr	r3, [r7, #32]
 80022d2:	2b0c      	cmp	r3, #12
 80022d4:	f040 808d 	bne.w	80023f2 <HAL_RCC_OscConfig+0x15e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80022d8:	69fb      	ldr	r3, [r7, #28]
 80022da:	2b01      	cmp	r3, #1
 80022dc:	f040 8089 	bne.w	80023f2 <HAL_RCC_OscConfig+0x15e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80022e0:	4b89      	ldr	r3, [pc, #548]	; (8002508 <HAL_RCC_OscConfig+0x274>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f003 0302 	and.w	r3, r3, #2
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d006      	beq.n	80022fa <HAL_RCC_OscConfig+0x66>
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	69db      	ldr	r3, [r3, #28]
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d102      	bne.n	80022fa <HAL_RCC_OscConfig+0x66>
      {
        return HAL_ERROR;
 80022f4:	2301      	movs	r3, #1
 80022f6:	f000 bc26 	b.w	8002b46 <HAL_RCC_OscConfig+0x8b2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80022fe:	4b82      	ldr	r3, [pc, #520]	; (8002508 <HAL_RCC_OscConfig+0x274>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f003 0308 	and.w	r3, r3, #8
 8002306:	2b00      	cmp	r3, #0
 8002308:	d004      	beq.n	8002314 <HAL_RCC_OscConfig+0x80>
 800230a:	4b7f      	ldr	r3, [pc, #508]	; (8002508 <HAL_RCC_OscConfig+0x274>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002312:	e005      	b.n	8002320 <HAL_RCC_OscConfig+0x8c>
 8002314:	4b7c      	ldr	r3, [pc, #496]	; (8002508 <HAL_RCC_OscConfig+0x274>)
 8002316:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800231a:	091b      	lsrs	r3, r3, #4
 800231c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002320:	4293      	cmp	r3, r2
 8002322:	d224      	bcs.n	800236e <HAL_RCC_OscConfig+0xda>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002328:	4618      	mov	r0, r3
 800232a:	f000 fdd9 	bl	8002ee0 <RCC_SetFlashLatencyFromMSIRange>
 800232e:	4603      	mov	r3, r0
 8002330:	2b00      	cmp	r3, #0
 8002332:	d002      	beq.n	800233a <HAL_RCC_OscConfig+0xa6>
          {
            return HAL_ERROR;
 8002334:	2301      	movs	r3, #1
 8002336:	f000 bc06 	b.w	8002b46 <HAL_RCC_OscConfig+0x8b2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800233a:	4b73      	ldr	r3, [pc, #460]	; (8002508 <HAL_RCC_OscConfig+0x274>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	4a72      	ldr	r2, [pc, #456]	; (8002508 <HAL_RCC_OscConfig+0x274>)
 8002340:	f043 0308 	orr.w	r3, r3, #8
 8002344:	6013      	str	r3, [r2, #0]
 8002346:	4b70      	ldr	r3, [pc, #448]	; (8002508 <HAL_RCC_OscConfig+0x274>)
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002352:	496d      	ldr	r1, [pc, #436]	; (8002508 <HAL_RCC_OscConfig+0x274>)
 8002354:	4313      	orrs	r3, r2
 8002356:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002358:	4b6b      	ldr	r3, [pc, #428]	; (8002508 <HAL_RCC_OscConfig+0x274>)
 800235a:	685b      	ldr	r3, [r3, #4]
 800235c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	6a1b      	ldr	r3, [r3, #32]
 8002364:	021b      	lsls	r3, r3, #8
 8002366:	4968      	ldr	r1, [pc, #416]	; (8002508 <HAL_RCC_OscConfig+0x274>)
 8002368:	4313      	orrs	r3, r2
 800236a:	604b      	str	r3, [r1, #4]
 800236c:	e025      	b.n	80023ba <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800236e:	4b66      	ldr	r3, [pc, #408]	; (8002508 <HAL_RCC_OscConfig+0x274>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	4a65      	ldr	r2, [pc, #404]	; (8002508 <HAL_RCC_OscConfig+0x274>)
 8002374:	f043 0308 	orr.w	r3, r3, #8
 8002378:	6013      	str	r3, [r2, #0]
 800237a:	4b63      	ldr	r3, [pc, #396]	; (8002508 <HAL_RCC_OscConfig+0x274>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002386:	4960      	ldr	r1, [pc, #384]	; (8002508 <HAL_RCC_OscConfig+0x274>)
 8002388:	4313      	orrs	r3, r2
 800238a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800238c:	4b5e      	ldr	r3, [pc, #376]	; (8002508 <HAL_RCC_OscConfig+0x274>)
 800238e:	685b      	ldr	r3, [r3, #4]
 8002390:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6a1b      	ldr	r3, [r3, #32]
 8002398:	021b      	lsls	r3, r3, #8
 800239a:	495b      	ldr	r1, [pc, #364]	; (8002508 <HAL_RCC_OscConfig+0x274>)
 800239c:	4313      	orrs	r3, r2
 800239e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80023a0:	6a3b      	ldr	r3, [r7, #32]
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d109      	bne.n	80023ba <HAL_RCC_OscConfig+0x126>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023aa:	4618      	mov	r0, r3
 80023ac:	f000 fd98 	bl	8002ee0 <RCC_SetFlashLatencyFromMSIRange>
 80023b0:	4603      	mov	r3, r0
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d001      	beq.n	80023ba <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 80023b6:	2301      	movs	r3, #1
 80023b8:	e3c5      	b.n	8002b46 <HAL_RCC_OscConfig+0x8b2>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80023ba:	f000 fccd 	bl	8002d58 <HAL_RCC_GetSysClockFreq>
 80023be:	4602      	mov	r2, r0
 80023c0:	4b51      	ldr	r3, [pc, #324]	; (8002508 <HAL_RCC_OscConfig+0x274>)
 80023c2:	689b      	ldr	r3, [r3, #8]
 80023c4:	091b      	lsrs	r3, r3, #4
 80023c6:	f003 030f 	and.w	r3, r3, #15
 80023ca:	4950      	ldr	r1, [pc, #320]	; (800250c <HAL_RCC_OscConfig+0x278>)
 80023cc:	5ccb      	ldrb	r3, [r1, r3]
 80023ce:	f003 031f 	and.w	r3, r3, #31
 80023d2:	fa22 f303 	lsr.w	r3, r2, r3
 80023d6:	4a4e      	ldr	r2, [pc, #312]	; (8002510 <HAL_RCC_OscConfig+0x27c>)
 80023d8:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80023da:	4b4e      	ldr	r3, [pc, #312]	; (8002514 <HAL_RCC_OscConfig+0x280>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	4618      	mov	r0, r3
 80023e0:	f7ff fb34 	bl	8001a4c <HAL_InitTick>
 80023e4:	4603      	mov	r3, r0
 80023e6:	75fb      	strb	r3, [r7, #23]
        if(status != HAL_OK)
 80023e8:	7dfb      	ldrb	r3, [r7, #23]
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d052      	beq.n	8002494 <HAL_RCC_OscConfig+0x200>
        {
          return status;
 80023ee:	7dfb      	ldrb	r3, [r7, #23]
 80023f0:	e3a9      	b.n	8002b46 <HAL_RCC_OscConfig+0x8b2>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	69db      	ldr	r3, [r3, #28]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d032      	beq.n	8002460 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80023fa:	4b43      	ldr	r3, [pc, #268]	; (8002508 <HAL_RCC_OscConfig+0x274>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	4a42      	ldr	r2, [pc, #264]	; (8002508 <HAL_RCC_OscConfig+0x274>)
 8002400:	f043 0301 	orr.w	r3, r3, #1
 8002404:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002406:	f7ff fb71 	bl	8001aec <HAL_GetTick>
 800240a:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800240c:	e008      	b.n	8002420 <HAL_RCC_OscConfig+0x18c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800240e:	f7ff fb6d 	bl	8001aec <HAL_GetTick>
 8002412:	4602      	mov	r2, r0
 8002414:	69bb      	ldr	r3, [r7, #24]
 8002416:	1ad3      	subs	r3, r2, r3
 8002418:	2b02      	cmp	r3, #2
 800241a:	d901      	bls.n	8002420 <HAL_RCC_OscConfig+0x18c>
          {
            return HAL_TIMEOUT;
 800241c:	2303      	movs	r3, #3
 800241e:	e392      	b.n	8002b46 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002420:	4b39      	ldr	r3, [pc, #228]	; (8002508 <HAL_RCC_OscConfig+0x274>)
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f003 0302 	and.w	r3, r3, #2
 8002428:	2b00      	cmp	r3, #0
 800242a:	d0f0      	beq.n	800240e <HAL_RCC_OscConfig+0x17a>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800242c:	4b36      	ldr	r3, [pc, #216]	; (8002508 <HAL_RCC_OscConfig+0x274>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	4a35      	ldr	r2, [pc, #212]	; (8002508 <HAL_RCC_OscConfig+0x274>)
 8002432:	f043 0308 	orr.w	r3, r3, #8
 8002436:	6013      	str	r3, [r2, #0]
 8002438:	4b33      	ldr	r3, [pc, #204]	; (8002508 <HAL_RCC_OscConfig+0x274>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002444:	4930      	ldr	r1, [pc, #192]	; (8002508 <HAL_RCC_OscConfig+0x274>)
 8002446:	4313      	orrs	r3, r2
 8002448:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800244a:	4b2f      	ldr	r3, [pc, #188]	; (8002508 <HAL_RCC_OscConfig+0x274>)
 800244c:	685b      	ldr	r3, [r3, #4]
 800244e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	6a1b      	ldr	r3, [r3, #32]
 8002456:	021b      	lsls	r3, r3, #8
 8002458:	492b      	ldr	r1, [pc, #172]	; (8002508 <HAL_RCC_OscConfig+0x274>)
 800245a:	4313      	orrs	r3, r2
 800245c:	604b      	str	r3, [r1, #4]
 800245e:	e01a      	b.n	8002496 <HAL_RCC_OscConfig+0x202>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002460:	4b29      	ldr	r3, [pc, #164]	; (8002508 <HAL_RCC_OscConfig+0x274>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	4a28      	ldr	r2, [pc, #160]	; (8002508 <HAL_RCC_OscConfig+0x274>)
 8002466:	f023 0301 	bic.w	r3, r3, #1
 800246a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800246c:	f7ff fb3e 	bl	8001aec <HAL_GetTick>
 8002470:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002472:	e008      	b.n	8002486 <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002474:	f7ff fb3a 	bl	8001aec <HAL_GetTick>
 8002478:	4602      	mov	r2, r0
 800247a:	69bb      	ldr	r3, [r7, #24]
 800247c:	1ad3      	subs	r3, r2, r3
 800247e:	2b02      	cmp	r3, #2
 8002480:	d901      	bls.n	8002486 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8002482:	2303      	movs	r3, #3
 8002484:	e35f      	b.n	8002b46 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002486:	4b20      	ldr	r3, [pc, #128]	; (8002508 <HAL_RCC_OscConfig+0x274>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f003 0302 	and.w	r3, r3, #2
 800248e:	2b00      	cmp	r3, #0
 8002490:	d1f0      	bne.n	8002474 <HAL_RCC_OscConfig+0x1e0>
 8002492:	e000      	b.n	8002496 <HAL_RCC_OscConfig+0x202>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002494:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f003 0301 	and.w	r3, r3, #1
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d073      	beq.n	800258a <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80024a2:	6a3b      	ldr	r3, [r7, #32]
 80024a4:	2b08      	cmp	r3, #8
 80024a6:	d005      	beq.n	80024b4 <HAL_RCC_OscConfig+0x220>
 80024a8:	6a3b      	ldr	r3, [r7, #32]
 80024aa:	2b0c      	cmp	r3, #12
 80024ac:	d10e      	bne.n	80024cc <HAL_RCC_OscConfig+0x238>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80024ae:	69fb      	ldr	r3, [r7, #28]
 80024b0:	2b03      	cmp	r3, #3
 80024b2:	d10b      	bne.n	80024cc <HAL_RCC_OscConfig+0x238>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024b4:	4b14      	ldr	r3, [pc, #80]	; (8002508 <HAL_RCC_OscConfig+0x274>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d063      	beq.n	8002588 <HAL_RCC_OscConfig+0x2f4>
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	685b      	ldr	r3, [r3, #4]
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d15f      	bne.n	8002588 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 80024c8:	2301      	movs	r3, #1
 80024ca:	e33c      	b.n	8002b46 <HAL_RCC_OscConfig+0x8b2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	685b      	ldr	r3, [r3, #4]
 80024d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024d4:	d106      	bne.n	80024e4 <HAL_RCC_OscConfig+0x250>
 80024d6:	4b0c      	ldr	r3, [pc, #48]	; (8002508 <HAL_RCC_OscConfig+0x274>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	4a0b      	ldr	r2, [pc, #44]	; (8002508 <HAL_RCC_OscConfig+0x274>)
 80024dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024e0:	6013      	str	r3, [r2, #0]
 80024e2:	e025      	b.n	8002530 <HAL_RCC_OscConfig+0x29c>
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	685b      	ldr	r3, [r3, #4]
 80024e8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80024ec:	d114      	bne.n	8002518 <HAL_RCC_OscConfig+0x284>
 80024ee:	4b06      	ldr	r3, [pc, #24]	; (8002508 <HAL_RCC_OscConfig+0x274>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	4a05      	ldr	r2, [pc, #20]	; (8002508 <HAL_RCC_OscConfig+0x274>)
 80024f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80024f8:	6013      	str	r3, [r2, #0]
 80024fa:	4b03      	ldr	r3, [pc, #12]	; (8002508 <HAL_RCC_OscConfig+0x274>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	4a02      	ldr	r2, [pc, #8]	; (8002508 <HAL_RCC_OscConfig+0x274>)
 8002500:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002504:	6013      	str	r3, [r2, #0]
 8002506:	e013      	b.n	8002530 <HAL_RCC_OscConfig+0x29c>
 8002508:	40021000 	.word	0x40021000
 800250c:	08009ca0 	.word	0x08009ca0
 8002510:	20000000 	.word	0x20000000
 8002514:	20000004 	.word	0x20000004
 8002518:	4b8f      	ldr	r3, [pc, #572]	; (8002758 <HAL_RCC_OscConfig+0x4c4>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	4a8e      	ldr	r2, [pc, #568]	; (8002758 <HAL_RCC_OscConfig+0x4c4>)
 800251e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002522:	6013      	str	r3, [r2, #0]
 8002524:	4b8c      	ldr	r3, [pc, #560]	; (8002758 <HAL_RCC_OscConfig+0x4c4>)
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	4a8b      	ldr	r2, [pc, #556]	; (8002758 <HAL_RCC_OscConfig+0x4c4>)
 800252a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800252e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	685b      	ldr	r3, [r3, #4]
 8002534:	2b00      	cmp	r3, #0
 8002536:	d013      	beq.n	8002560 <HAL_RCC_OscConfig+0x2cc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002538:	f7ff fad8 	bl	8001aec <HAL_GetTick>
 800253c:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800253e:	e008      	b.n	8002552 <HAL_RCC_OscConfig+0x2be>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002540:	f7ff fad4 	bl	8001aec <HAL_GetTick>
 8002544:	4602      	mov	r2, r0
 8002546:	69bb      	ldr	r3, [r7, #24]
 8002548:	1ad3      	subs	r3, r2, r3
 800254a:	2b64      	cmp	r3, #100	; 0x64
 800254c:	d901      	bls.n	8002552 <HAL_RCC_OscConfig+0x2be>
          {
            return HAL_TIMEOUT;
 800254e:	2303      	movs	r3, #3
 8002550:	e2f9      	b.n	8002b46 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002552:	4b81      	ldr	r3, [pc, #516]	; (8002758 <HAL_RCC_OscConfig+0x4c4>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800255a:	2b00      	cmp	r3, #0
 800255c:	d0f0      	beq.n	8002540 <HAL_RCC_OscConfig+0x2ac>
 800255e:	e014      	b.n	800258a <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002560:	f7ff fac4 	bl	8001aec <HAL_GetTick>
 8002564:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002566:	e008      	b.n	800257a <HAL_RCC_OscConfig+0x2e6>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002568:	f7ff fac0 	bl	8001aec <HAL_GetTick>
 800256c:	4602      	mov	r2, r0
 800256e:	69bb      	ldr	r3, [r7, #24]
 8002570:	1ad3      	subs	r3, r2, r3
 8002572:	2b64      	cmp	r3, #100	; 0x64
 8002574:	d901      	bls.n	800257a <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 8002576:	2303      	movs	r3, #3
 8002578:	e2e5      	b.n	8002b46 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800257a:	4b77      	ldr	r3, [pc, #476]	; (8002758 <HAL_RCC_OscConfig+0x4c4>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002582:	2b00      	cmp	r3, #0
 8002584:	d1f0      	bne.n	8002568 <HAL_RCC_OscConfig+0x2d4>
 8002586:	e000      	b.n	800258a <HAL_RCC_OscConfig+0x2f6>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002588:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f003 0302 	and.w	r3, r3, #2
 8002592:	2b00      	cmp	r3, #0
 8002594:	d060      	beq.n	8002658 <HAL_RCC_OscConfig+0x3c4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002596:	6a3b      	ldr	r3, [r7, #32]
 8002598:	2b04      	cmp	r3, #4
 800259a:	d005      	beq.n	80025a8 <HAL_RCC_OscConfig+0x314>
 800259c:	6a3b      	ldr	r3, [r7, #32]
 800259e:	2b0c      	cmp	r3, #12
 80025a0:	d119      	bne.n	80025d6 <HAL_RCC_OscConfig+0x342>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80025a2:	69fb      	ldr	r3, [r7, #28]
 80025a4:	2b02      	cmp	r3, #2
 80025a6:	d116      	bne.n	80025d6 <HAL_RCC_OscConfig+0x342>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80025a8:	4b6b      	ldr	r3, [pc, #428]	; (8002758 <HAL_RCC_OscConfig+0x4c4>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d005      	beq.n	80025c0 <HAL_RCC_OscConfig+0x32c>
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	68db      	ldr	r3, [r3, #12]
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d101      	bne.n	80025c0 <HAL_RCC_OscConfig+0x32c>
      {
        return HAL_ERROR;
 80025bc:	2301      	movs	r3, #1
 80025be:	e2c2      	b.n	8002b46 <HAL_RCC_OscConfig+0x8b2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025c0:	4b65      	ldr	r3, [pc, #404]	; (8002758 <HAL_RCC_OscConfig+0x4c4>)
 80025c2:	685b      	ldr	r3, [r3, #4]
 80025c4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	691b      	ldr	r3, [r3, #16]
 80025cc:	061b      	lsls	r3, r3, #24
 80025ce:	4962      	ldr	r1, [pc, #392]	; (8002758 <HAL_RCC_OscConfig+0x4c4>)
 80025d0:	4313      	orrs	r3, r2
 80025d2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80025d4:	e040      	b.n	8002658 <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	68db      	ldr	r3, [r3, #12]
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d023      	beq.n	8002626 <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80025de:	4b5e      	ldr	r3, [pc, #376]	; (8002758 <HAL_RCC_OscConfig+0x4c4>)
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	4a5d      	ldr	r2, [pc, #372]	; (8002758 <HAL_RCC_OscConfig+0x4c4>)
 80025e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025ea:	f7ff fa7f 	bl	8001aec <HAL_GetTick>
 80025ee:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80025f0:	e008      	b.n	8002604 <HAL_RCC_OscConfig+0x370>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025f2:	f7ff fa7b 	bl	8001aec <HAL_GetTick>
 80025f6:	4602      	mov	r2, r0
 80025f8:	69bb      	ldr	r3, [r7, #24]
 80025fa:	1ad3      	subs	r3, r2, r3
 80025fc:	2b02      	cmp	r3, #2
 80025fe:	d901      	bls.n	8002604 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8002600:	2303      	movs	r3, #3
 8002602:	e2a0      	b.n	8002b46 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002604:	4b54      	ldr	r3, [pc, #336]	; (8002758 <HAL_RCC_OscConfig+0x4c4>)
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800260c:	2b00      	cmp	r3, #0
 800260e:	d0f0      	beq.n	80025f2 <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002610:	4b51      	ldr	r3, [pc, #324]	; (8002758 <HAL_RCC_OscConfig+0x4c4>)
 8002612:	685b      	ldr	r3, [r3, #4]
 8002614:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	691b      	ldr	r3, [r3, #16]
 800261c:	061b      	lsls	r3, r3, #24
 800261e:	494e      	ldr	r1, [pc, #312]	; (8002758 <HAL_RCC_OscConfig+0x4c4>)
 8002620:	4313      	orrs	r3, r2
 8002622:	604b      	str	r3, [r1, #4]
 8002624:	e018      	b.n	8002658 <HAL_RCC_OscConfig+0x3c4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002626:	4b4c      	ldr	r3, [pc, #304]	; (8002758 <HAL_RCC_OscConfig+0x4c4>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	4a4b      	ldr	r2, [pc, #300]	; (8002758 <HAL_RCC_OscConfig+0x4c4>)
 800262c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002630:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002632:	f7ff fa5b 	bl	8001aec <HAL_GetTick>
 8002636:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002638:	e008      	b.n	800264c <HAL_RCC_OscConfig+0x3b8>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800263a:	f7ff fa57 	bl	8001aec <HAL_GetTick>
 800263e:	4602      	mov	r2, r0
 8002640:	69bb      	ldr	r3, [r7, #24]
 8002642:	1ad3      	subs	r3, r2, r3
 8002644:	2b02      	cmp	r3, #2
 8002646:	d901      	bls.n	800264c <HAL_RCC_OscConfig+0x3b8>
          {
            return HAL_TIMEOUT;
 8002648:	2303      	movs	r3, #3
 800264a:	e27c      	b.n	8002b46 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800264c:	4b42      	ldr	r3, [pc, #264]	; (8002758 <HAL_RCC_OscConfig+0x4c4>)
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002654:	2b00      	cmp	r3, #0
 8002656:	d1f0      	bne.n	800263a <HAL_RCC_OscConfig+0x3a6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f003 0308 	and.w	r3, r3, #8
 8002660:	2b00      	cmp	r3, #0
 8002662:	f000 8082 	beq.w	800276a <HAL_RCC_OscConfig+0x4d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	695b      	ldr	r3, [r3, #20]
 800266a:	2b00      	cmp	r3, #0
 800266c:	d05f      	beq.n	800272e <HAL_RCC_OscConfig+0x49a>
    {
#if defined(RCC_CSR_LSIPREDIV)
      uint32_t csr_temp = RCC->CSR;
 800266e:	4b3a      	ldr	r3, [pc, #232]	; (8002758 <HAL_RCC_OscConfig+0x4c4>)
 8002670:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002674:	613b      	str	r3, [r7, #16]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPREDIV))
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	699a      	ldr	r2, [r3, #24]
 800267a:	693b      	ldr	r3, [r7, #16]
 800267c:	f003 0310 	and.w	r3, r3, #16
 8002680:	429a      	cmp	r2, r3
 8002682:	d037      	beq.n	80026f4 <HAL_RCC_OscConfig+0x460>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8002684:	693b      	ldr	r3, [r7, #16]
 8002686:	f003 0302 	and.w	r3, r3, #2
 800268a:	2b00      	cmp	r3, #0
 800268c:	d006      	beq.n	800269c <HAL_RCC_OscConfig+0x408>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 800268e:	693b      	ldr	r3, [r7, #16]
 8002690:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8002694:	2b00      	cmp	r3, #0
 8002696:	d101      	bne.n	800269c <HAL_RCC_OscConfig+0x408>
        {
           /* If LSIRDY is set while LSION is not enabled,
              LSIPREDIV can't be updated  */
          return HAL_ERROR;
 8002698:	2301      	movs	r3, #1
 800269a:	e254      	b.n	8002b46 <HAL_RCC_OscConfig+0x8b2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPREDIV */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 800269c:	693b      	ldr	r3, [r7, #16]
 800269e:	f003 0301 	and.w	r3, r3, #1
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d01b      	beq.n	80026de <HAL_RCC_OscConfig+0x44a>
        {
          __HAL_RCC_LSI_DISABLE();
 80026a6:	4b2c      	ldr	r3, [pc, #176]	; (8002758 <HAL_RCC_OscConfig+0x4c4>)
 80026a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80026ac:	4a2a      	ldr	r2, [pc, #168]	; (8002758 <HAL_RCC_OscConfig+0x4c4>)
 80026ae:	f023 0301 	bic.w	r3, r3, #1
 80026b2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80026b6:	f7ff fa19 	bl	8001aec <HAL_GetTick>
 80026ba:	61b8      	str	r0, [r7, #24]

          /* Wait till LSI is disabled */
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80026bc:	e008      	b.n	80026d0 <HAL_RCC_OscConfig+0x43c>
          {
            if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80026be:	f7ff fa15 	bl	8001aec <HAL_GetTick>
 80026c2:	4602      	mov	r2, r0
 80026c4:	69bb      	ldr	r3, [r7, #24]
 80026c6:	1ad3      	subs	r3, r2, r3
 80026c8:	2b11      	cmp	r3, #17
 80026ca:	d901      	bls.n	80026d0 <HAL_RCC_OscConfig+0x43c>
            {
              return HAL_TIMEOUT;
 80026cc:	2303      	movs	r3, #3
 80026ce:	e23a      	b.n	8002b46 <HAL_RCC_OscConfig+0x8b2>
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80026d0:	4b21      	ldr	r3, [pc, #132]	; (8002758 <HAL_RCC_OscConfig+0x4c4>)
 80026d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80026d6:	f003 0302 	and.w	r3, r3, #2
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d1ef      	bne.n	80026be <HAL_RCC_OscConfig+0x42a>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
 80026de:	4b1e      	ldr	r3, [pc, #120]	; (8002758 <HAL_RCC_OscConfig+0x4c4>)
 80026e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80026e4:	f023 0210 	bic.w	r2, r3, #16
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	699b      	ldr	r3, [r3, #24]
 80026ec:	491a      	ldr	r1, [pc, #104]	; (8002758 <HAL_RCC_OscConfig+0x4c4>)
 80026ee:	4313      	orrs	r3, r2
 80026f0:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80026f4:	4b18      	ldr	r3, [pc, #96]	; (8002758 <HAL_RCC_OscConfig+0x4c4>)
 80026f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80026fa:	4a17      	ldr	r2, [pc, #92]	; (8002758 <HAL_RCC_OscConfig+0x4c4>)
 80026fc:	f043 0301 	orr.w	r3, r3, #1
 8002700:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002704:	f7ff f9f2 	bl	8001aec <HAL_GetTick>
 8002708:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800270a:	e008      	b.n	800271e <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800270c:	f7ff f9ee 	bl	8001aec <HAL_GetTick>
 8002710:	4602      	mov	r2, r0
 8002712:	69bb      	ldr	r3, [r7, #24]
 8002714:	1ad3      	subs	r3, r2, r3
 8002716:	2b11      	cmp	r3, #17
 8002718:	d901      	bls.n	800271e <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 800271a:	2303      	movs	r3, #3
 800271c:	e213      	b.n	8002b46 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800271e:	4b0e      	ldr	r3, [pc, #56]	; (8002758 <HAL_RCC_OscConfig+0x4c4>)
 8002720:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002724:	f003 0302 	and.w	r3, r3, #2
 8002728:	2b00      	cmp	r3, #0
 800272a:	d0ef      	beq.n	800270c <HAL_RCC_OscConfig+0x478>
 800272c:	e01d      	b.n	800276a <HAL_RCC_OscConfig+0x4d6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800272e:	4b0a      	ldr	r3, [pc, #40]	; (8002758 <HAL_RCC_OscConfig+0x4c4>)
 8002730:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002734:	4a08      	ldr	r2, [pc, #32]	; (8002758 <HAL_RCC_OscConfig+0x4c4>)
 8002736:	f023 0301 	bic.w	r3, r3, #1
 800273a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800273e:	f7ff f9d5 	bl	8001aec <HAL_GetTick>
 8002742:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002744:	e00a      	b.n	800275c <HAL_RCC_OscConfig+0x4c8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002746:	f7ff f9d1 	bl	8001aec <HAL_GetTick>
 800274a:	4602      	mov	r2, r0
 800274c:	69bb      	ldr	r3, [r7, #24]
 800274e:	1ad3      	subs	r3, r2, r3
 8002750:	2b11      	cmp	r3, #17
 8002752:	d903      	bls.n	800275c <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_TIMEOUT;
 8002754:	2303      	movs	r3, #3
 8002756:	e1f6      	b.n	8002b46 <HAL_RCC_OscConfig+0x8b2>
 8002758:	40021000 	.word	0x40021000
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800275c:	4ba9      	ldr	r3, [pc, #676]	; (8002a04 <HAL_RCC_OscConfig+0x770>)
 800275e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002762:	f003 0302 	and.w	r3, r3, #2
 8002766:	2b00      	cmp	r3, #0
 8002768:	d1ed      	bne.n	8002746 <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f003 0304 	and.w	r3, r3, #4
 8002772:	2b00      	cmp	r3, #0
 8002774:	f000 80bd 	beq.w	80028f2 <HAL_RCC_OscConfig+0x65e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002778:	2300      	movs	r3, #0
 800277a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800277e:	4ba1      	ldr	r3, [pc, #644]	; (8002a04 <HAL_RCC_OscConfig+0x770>)
 8002780:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002782:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002786:	2b00      	cmp	r3, #0
 8002788:	d10e      	bne.n	80027a8 <HAL_RCC_OscConfig+0x514>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800278a:	4b9e      	ldr	r3, [pc, #632]	; (8002a04 <HAL_RCC_OscConfig+0x770>)
 800278c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800278e:	4a9d      	ldr	r2, [pc, #628]	; (8002a04 <HAL_RCC_OscConfig+0x770>)
 8002790:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002794:	6593      	str	r3, [r2, #88]	; 0x58
 8002796:	4b9b      	ldr	r3, [pc, #620]	; (8002a04 <HAL_RCC_OscConfig+0x770>)
 8002798:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800279a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800279e:	60fb      	str	r3, [r7, #12]
 80027a0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80027a2:	2301      	movs	r3, #1
 80027a4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80027a8:	4b97      	ldr	r3, [pc, #604]	; (8002a08 <HAL_RCC_OscConfig+0x774>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d118      	bne.n	80027e6 <HAL_RCC_OscConfig+0x552>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80027b4:	4b94      	ldr	r3, [pc, #592]	; (8002a08 <HAL_RCC_OscConfig+0x774>)
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	4a93      	ldr	r2, [pc, #588]	; (8002a08 <HAL_RCC_OscConfig+0x774>)
 80027ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027be:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80027c0:	f7ff f994 	bl	8001aec <HAL_GetTick>
 80027c4:	61b8      	str	r0, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80027c6:	e008      	b.n	80027da <HAL_RCC_OscConfig+0x546>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027c8:	f7ff f990 	bl	8001aec <HAL_GetTick>
 80027cc:	4602      	mov	r2, r0
 80027ce:	69bb      	ldr	r3, [r7, #24]
 80027d0:	1ad3      	subs	r3, r2, r3
 80027d2:	2b02      	cmp	r3, #2
 80027d4:	d901      	bls.n	80027da <HAL_RCC_OscConfig+0x546>
        {
          return HAL_TIMEOUT;
 80027d6:	2303      	movs	r3, #3
 80027d8:	e1b5      	b.n	8002b46 <HAL_RCC_OscConfig+0x8b2>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80027da:	4b8b      	ldr	r3, [pc, #556]	; (8002a08 <HAL_RCC_OscConfig+0x774>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d0f0      	beq.n	80027c8 <HAL_RCC_OscConfig+0x534>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
#if defined(RCC_BDCR_LSESYSDIS)
    if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	689b      	ldr	r3, [r3, #8]
 80027ea:	f003 0301 	and.w	r3, r3, #1
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d02c      	beq.n	800284c <HAL_RCC_OscConfig+0x5b8>
    {
      /* Set LSESYSDIS bit according to LSE propagation option (enabled or disabled) */
      MODIFY_REG(RCC->BDCR, RCC_BDCR_LSESYSDIS, (RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSDIS));
 80027f2:	4b84      	ldr	r3, [pc, #528]	; (8002a04 <HAL_RCC_OscConfig+0x770>)
 80027f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027f8:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	689b      	ldr	r3, [r3, #8]
 8002800:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002804:	497f      	ldr	r1, [pc, #508]	; (8002a04 <HAL_RCC_OscConfig+0x770>)
 8002806:	4313      	orrs	r3, r2
 8002808:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

      if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	689b      	ldr	r3, [r3, #8]
 8002810:	f003 0304 	and.w	r3, r3, #4
 8002814:	2b00      	cmp	r3, #0
 8002816:	d010      	beq.n	800283a <HAL_RCC_OscConfig+0x5a6>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002818:	4b7a      	ldr	r3, [pc, #488]	; (8002a04 <HAL_RCC_OscConfig+0x770>)
 800281a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800281e:	4a79      	ldr	r2, [pc, #484]	; (8002a04 <HAL_RCC_OscConfig+0x770>)
 8002820:	f043 0304 	orr.w	r3, r3, #4
 8002824:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002828:	4b76      	ldr	r3, [pc, #472]	; (8002a04 <HAL_RCC_OscConfig+0x770>)
 800282a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800282e:	4a75      	ldr	r2, [pc, #468]	; (8002a04 <HAL_RCC_OscConfig+0x770>)
 8002830:	f043 0301 	orr.w	r3, r3, #1
 8002834:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002838:	e018      	b.n	800286c <HAL_RCC_OscConfig+0x5d8>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800283a:	4b72      	ldr	r3, [pc, #456]	; (8002a04 <HAL_RCC_OscConfig+0x770>)
 800283c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002840:	4a70      	ldr	r2, [pc, #448]	; (8002a04 <HAL_RCC_OscConfig+0x770>)
 8002842:	f043 0301 	orr.w	r3, r3, #1
 8002846:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800284a:	e00f      	b.n	800286c <HAL_RCC_OscConfig+0x5d8>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800284c:	4b6d      	ldr	r3, [pc, #436]	; (8002a04 <HAL_RCC_OscConfig+0x770>)
 800284e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002852:	4a6c      	ldr	r2, [pc, #432]	; (8002a04 <HAL_RCC_OscConfig+0x770>)
 8002854:	f023 0301 	bic.w	r3, r3, #1
 8002858:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800285c:	4b69      	ldr	r3, [pc, #420]	; (8002a04 <HAL_RCC_OscConfig+0x770>)
 800285e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002862:	4a68      	ldr	r2, [pc, #416]	; (8002a04 <HAL_RCC_OscConfig+0x770>)
 8002864:	f023 0304 	bic.w	r3, r3, #4
 8002868:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	689b      	ldr	r3, [r3, #8]
 8002870:	2b00      	cmp	r3, #0
 8002872:	d016      	beq.n	80028a2 <HAL_RCC_OscConfig+0x60e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002874:	f7ff f93a 	bl	8001aec <HAL_GetTick>
 8002878:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800287a:	e00a      	b.n	8002892 <HAL_RCC_OscConfig+0x5fe>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800287c:	f7ff f936 	bl	8001aec <HAL_GetTick>
 8002880:	4602      	mov	r2, r0
 8002882:	69bb      	ldr	r3, [r7, #24]
 8002884:	1ad3      	subs	r3, r2, r3
 8002886:	f241 3288 	movw	r2, #5000	; 0x1388
 800288a:	4293      	cmp	r3, r2
 800288c:	d901      	bls.n	8002892 <HAL_RCC_OscConfig+0x5fe>
        {
          return HAL_TIMEOUT;
 800288e:	2303      	movs	r3, #3
 8002890:	e159      	b.n	8002b46 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002892:	4b5c      	ldr	r3, [pc, #368]	; (8002a04 <HAL_RCC_OscConfig+0x770>)
 8002894:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002898:	f003 0302 	and.w	r3, r3, #2
 800289c:	2b00      	cmp	r3, #0
 800289e:	d0ed      	beq.n	800287c <HAL_RCC_OscConfig+0x5e8>
 80028a0:	e01d      	b.n	80028de <HAL_RCC_OscConfig+0x64a>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028a2:	f7ff f923 	bl	8001aec <HAL_GetTick>
 80028a6:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80028a8:	e00a      	b.n	80028c0 <HAL_RCC_OscConfig+0x62c>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028aa:	f7ff f91f 	bl	8001aec <HAL_GetTick>
 80028ae:	4602      	mov	r2, r0
 80028b0:	69bb      	ldr	r3, [r7, #24]
 80028b2:	1ad3      	subs	r3, r2, r3
 80028b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80028b8:	4293      	cmp	r3, r2
 80028ba:	d901      	bls.n	80028c0 <HAL_RCC_OscConfig+0x62c>
        {
          return HAL_TIMEOUT;
 80028bc:	2303      	movs	r3, #3
 80028be:	e142      	b.n	8002b46 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80028c0:	4b50      	ldr	r3, [pc, #320]	; (8002a04 <HAL_RCC_OscConfig+0x770>)
 80028c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028c6:	f003 0302 	and.w	r3, r3, #2
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d1ed      	bne.n	80028aa <HAL_RCC_OscConfig+0x616>
        }
      }

#if defined(RCC_BDCR_LSESYSDIS)
      /* By default, stop disabling LSE propagation */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
 80028ce:	4b4d      	ldr	r3, [pc, #308]	; (8002a04 <HAL_RCC_OscConfig+0x770>)
 80028d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028d4:	4a4b      	ldr	r2, [pc, #300]	; (8002a04 <HAL_RCC_OscConfig+0x770>)
 80028d6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80028da:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80028de:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80028e2:	2b01      	cmp	r3, #1
 80028e4:	d105      	bne.n	80028f2 <HAL_RCC_OscConfig+0x65e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028e6:	4b47      	ldr	r3, [pc, #284]	; (8002a04 <HAL_RCC_OscConfig+0x770>)
 80028e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028ea:	4a46      	ldr	r2, [pc, #280]	; (8002a04 <HAL_RCC_OscConfig+0x770>)
 80028ec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80028f0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f003 0320 	and.w	r3, r3, #32
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d03c      	beq.n	8002978 <HAL_RCC_OscConfig+0x6e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002902:	2b00      	cmp	r3, #0
 8002904:	d01c      	beq.n	8002940 <HAL_RCC_OscConfig+0x6ac>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002906:	4b3f      	ldr	r3, [pc, #252]	; (8002a04 <HAL_RCC_OscConfig+0x770>)
 8002908:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800290c:	4a3d      	ldr	r2, [pc, #244]	; (8002a04 <HAL_RCC_OscConfig+0x770>)
 800290e:	f043 0301 	orr.w	r3, r3, #1
 8002912:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002916:	f7ff f8e9 	bl	8001aec <HAL_GetTick>
 800291a:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800291c:	e008      	b.n	8002930 <HAL_RCC_OscConfig+0x69c>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800291e:	f7ff f8e5 	bl	8001aec <HAL_GetTick>
 8002922:	4602      	mov	r2, r0
 8002924:	69bb      	ldr	r3, [r7, #24]
 8002926:	1ad3      	subs	r3, r2, r3
 8002928:	2b02      	cmp	r3, #2
 800292a:	d901      	bls.n	8002930 <HAL_RCC_OscConfig+0x69c>
        {
          return HAL_TIMEOUT;
 800292c:	2303      	movs	r3, #3
 800292e:	e10a      	b.n	8002b46 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002930:	4b34      	ldr	r3, [pc, #208]	; (8002a04 <HAL_RCC_OscConfig+0x770>)
 8002932:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002936:	f003 0302 	and.w	r3, r3, #2
 800293a:	2b00      	cmp	r3, #0
 800293c:	d0ef      	beq.n	800291e <HAL_RCC_OscConfig+0x68a>
 800293e:	e01b      	b.n	8002978 <HAL_RCC_OscConfig+0x6e4>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002940:	4b30      	ldr	r3, [pc, #192]	; (8002a04 <HAL_RCC_OscConfig+0x770>)
 8002942:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002946:	4a2f      	ldr	r2, [pc, #188]	; (8002a04 <HAL_RCC_OscConfig+0x770>)
 8002948:	f023 0301 	bic.w	r3, r3, #1
 800294c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002950:	f7ff f8cc 	bl	8001aec <HAL_GetTick>
 8002954:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002956:	e008      	b.n	800296a <HAL_RCC_OscConfig+0x6d6>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002958:	f7ff f8c8 	bl	8001aec <HAL_GetTick>
 800295c:	4602      	mov	r2, r0
 800295e:	69bb      	ldr	r3, [r7, #24]
 8002960:	1ad3      	subs	r3, r2, r3
 8002962:	2b02      	cmp	r3, #2
 8002964:	d901      	bls.n	800296a <HAL_RCC_OscConfig+0x6d6>
        {
          return HAL_TIMEOUT;
 8002966:	2303      	movs	r3, #3
 8002968:	e0ed      	b.n	8002b46 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800296a:	4b26      	ldr	r3, [pc, #152]	; (8002a04 <HAL_RCC_OscConfig+0x770>)
 800296c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002970:	f003 0302 	and.w	r3, r3, #2
 8002974:	2b00      	cmp	r3, #0
 8002976:	d1ef      	bne.n	8002958 <HAL_RCC_OscConfig+0x6c4>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800297c:	2b00      	cmp	r3, #0
 800297e:	f000 80e1 	beq.w	8002b44 <HAL_RCC_OscConfig+0x8b0>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002986:	2b02      	cmp	r3, #2
 8002988:	f040 80b5 	bne.w	8002af6 <HAL_RCC_OscConfig+0x862>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800298c:	4b1d      	ldr	r3, [pc, #116]	; (8002a04 <HAL_RCC_OscConfig+0x770>)
 800298e:	68db      	ldr	r3, [r3, #12]
 8002990:	61fb      	str	r3, [r7, #28]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002992:	69fb      	ldr	r3, [r7, #28]
 8002994:	f003 0203 	and.w	r2, r3, #3
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800299c:	429a      	cmp	r2, r3
 800299e:	d124      	bne.n	80029ea <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80029a0:	69fb      	ldr	r3, [r7, #28]
 80029a2:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029aa:	3b01      	subs	r3, #1
 80029ac:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80029ae:	429a      	cmp	r2, r3
 80029b0:	d11b      	bne.n	80029ea <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80029b2:	69fb      	ldr	r3, [r7, #28]
 80029b4:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029bc:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80029be:	429a      	cmp	r2, r3
 80029c0:	d113      	bne.n	80029ea <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80029c2:	69fb      	ldr	r3, [r7, #28]
 80029c4:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029cc:	085b      	lsrs	r3, r3, #1
 80029ce:	3b01      	subs	r3, #1
 80029d0:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80029d2:	429a      	cmp	r2, r3
 80029d4:	d109      	bne.n	80029ea <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80029d6:	69fb      	ldr	r3, [r7, #28]
 80029d8:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029e0:	085b      	lsrs	r3, r3, #1
 80029e2:	3b01      	subs	r3, #1
 80029e4:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80029e6:	429a      	cmp	r2, r3
 80029e8:	d05f      	beq.n	8002aaa <HAL_RCC_OscConfig+0x816>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80029ea:	6a3b      	ldr	r3, [r7, #32]
 80029ec:	2b0c      	cmp	r3, #12
 80029ee:	d05a      	beq.n	8002aa6 <HAL_RCC_OscConfig+0x812>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80029f0:	4b04      	ldr	r3, [pc, #16]	; (8002a04 <HAL_RCC_OscConfig+0x770>)
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	4a03      	ldr	r2, [pc, #12]	; (8002a04 <HAL_RCC_OscConfig+0x770>)
 80029f6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80029fa:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80029fc:	f7ff f876 	bl	8001aec <HAL_GetTick>
 8002a00:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002a02:	e00c      	b.n	8002a1e <HAL_RCC_OscConfig+0x78a>
 8002a04:	40021000 	.word	0x40021000
 8002a08:	40007000 	.word	0x40007000
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a0c:	f7ff f86e 	bl	8001aec <HAL_GetTick>
 8002a10:	4602      	mov	r2, r0
 8002a12:	69bb      	ldr	r3, [r7, #24]
 8002a14:	1ad3      	subs	r3, r2, r3
 8002a16:	2b02      	cmp	r3, #2
 8002a18:	d901      	bls.n	8002a1e <HAL_RCC_OscConfig+0x78a>
              {
                return HAL_TIMEOUT;
 8002a1a:	2303      	movs	r3, #3
 8002a1c:	e093      	b.n	8002b46 <HAL_RCC_OscConfig+0x8b2>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002a1e:	4b4c      	ldr	r3, [pc, #304]	; (8002b50 <HAL_RCC_OscConfig+0x8bc>)
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d1f0      	bne.n	8002a0c <HAL_RCC_OscConfig+0x778>
                                 RCC_OscInitStruct->PLL.PLLN,
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#else
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002a2a:	4b49      	ldr	r3, [pc, #292]	; (8002b50 <HAL_RCC_OscConfig+0x8bc>)
 8002a2c:	68da      	ldr	r2, [r3, #12]
 8002a2e:	4b49      	ldr	r3, [pc, #292]	; (8002b54 <HAL_RCC_OscConfig+0x8c0>)
 8002a30:	4013      	ands	r3, r2
 8002a32:	687a      	ldr	r2, [r7, #4]
 8002a34:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8002a36:	687a      	ldr	r2, [r7, #4]
 8002a38:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002a3a:	3a01      	subs	r2, #1
 8002a3c:	0112      	lsls	r2, r2, #4
 8002a3e:	4311      	orrs	r1, r2
 8002a40:	687a      	ldr	r2, [r7, #4]
 8002a42:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002a44:	0212      	lsls	r2, r2, #8
 8002a46:	4311      	orrs	r1, r2
 8002a48:	687a      	ldr	r2, [r7, #4]
 8002a4a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002a4c:	0852      	lsrs	r2, r2, #1
 8002a4e:	3a01      	subs	r2, #1
 8002a50:	0552      	lsls	r2, r2, #21
 8002a52:	4311      	orrs	r1, r2
 8002a54:	687a      	ldr	r2, [r7, #4]
 8002a56:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002a58:	0852      	lsrs	r2, r2, #1
 8002a5a:	3a01      	subs	r2, #1
 8002a5c:	0652      	lsls	r2, r2, #25
 8002a5e:	430a      	orrs	r2, r1
 8002a60:	493b      	ldr	r1, [pc, #236]	; (8002b50 <HAL_RCC_OscConfig+0x8bc>)
 8002a62:	4313      	orrs	r3, r2
 8002a64:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002a66:	4b3a      	ldr	r3, [pc, #232]	; (8002b50 <HAL_RCC_OscConfig+0x8bc>)
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	4a39      	ldr	r2, [pc, #228]	; (8002b50 <HAL_RCC_OscConfig+0x8bc>)
 8002a6c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002a70:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002a72:	4b37      	ldr	r3, [pc, #220]	; (8002b50 <HAL_RCC_OscConfig+0x8bc>)
 8002a74:	68db      	ldr	r3, [r3, #12]
 8002a76:	4a36      	ldr	r2, [pc, #216]	; (8002b50 <HAL_RCC_OscConfig+0x8bc>)
 8002a78:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002a7c:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002a7e:	f7ff f835 	bl	8001aec <HAL_GetTick>
 8002a82:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a84:	e008      	b.n	8002a98 <HAL_RCC_OscConfig+0x804>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a86:	f7ff f831 	bl	8001aec <HAL_GetTick>
 8002a8a:	4602      	mov	r2, r0
 8002a8c:	69bb      	ldr	r3, [r7, #24]
 8002a8e:	1ad3      	subs	r3, r2, r3
 8002a90:	2b02      	cmp	r3, #2
 8002a92:	d901      	bls.n	8002a98 <HAL_RCC_OscConfig+0x804>
              {
                return HAL_TIMEOUT;
 8002a94:	2303      	movs	r3, #3
 8002a96:	e056      	b.n	8002b46 <HAL_RCC_OscConfig+0x8b2>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a98:	4b2d      	ldr	r3, [pc, #180]	; (8002b50 <HAL_RCC_OscConfig+0x8bc>)
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d0f0      	beq.n	8002a86 <HAL_RCC_OscConfig+0x7f2>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002aa4:	e04e      	b.n	8002b44 <HAL_RCC_OscConfig+0x8b0>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002aa6:	2301      	movs	r3, #1
 8002aa8:	e04d      	b.n	8002b46 <HAL_RCC_OscConfig+0x8b2>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002aaa:	4b29      	ldr	r3, [pc, #164]	; (8002b50 <HAL_RCC_OscConfig+0x8bc>)
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d146      	bne.n	8002b44 <HAL_RCC_OscConfig+0x8b0>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002ab6:	4b26      	ldr	r3, [pc, #152]	; (8002b50 <HAL_RCC_OscConfig+0x8bc>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	4a25      	ldr	r2, [pc, #148]	; (8002b50 <HAL_RCC_OscConfig+0x8bc>)
 8002abc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002ac0:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002ac2:	4b23      	ldr	r3, [pc, #140]	; (8002b50 <HAL_RCC_OscConfig+0x8bc>)
 8002ac4:	68db      	ldr	r3, [r3, #12]
 8002ac6:	4a22      	ldr	r2, [pc, #136]	; (8002b50 <HAL_RCC_OscConfig+0x8bc>)
 8002ac8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002acc:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002ace:	f7ff f80d 	bl	8001aec <HAL_GetTick>
 8002ad2:	61b8      	str	r0, [r7, #24]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ad4:	e008      	b.n	8002ae8 <HAL_RCC_OscConfig+0x854>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ad6:	f7ff f809 	bl	8001aec <HAL_GetTick>
 8002ada:	4602      	mov	r2, r0
 8002adc:	69bb      	ldr	r3, [r7, #24]
 8002ade:	1ad3      	subs	r3, r2, r3
 8002ae0:	2b02      	cmp	r3, #2
 8002ae2:	d901      	bls.n	8002ae8 <HAL_RCC_OscConfig+0x854>
            {
              return HAL_TIMEOUT;
 8002ae4:	2303      	movs	r3, #3
 8002ae6:	e02e      	b.n	8002b46 <HAL_RCC_OscConfig+0x8b2>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ae8:	4b19      	ldr	r3, [pc, #100]	; (8002b50 <HAL_RCC_OscConfig+0x8bc>)
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d0f0      	beq.n	8002ad6 <HAL_RCC_OscConfig+0x842>
 8002af4:	e026      	b.n	8002b44 <HAL_RCC_OscConfig+0x8b0>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002af6:	6a3b      	ldr	r3, [r7, #32]
 8002af8:	2b0c      	cmp	r3, #12
 8002afa:	d021      	beq.n	8002b40 <HAL_RCC_OscConfig+0x8ac>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002afc:	4b14      	ldr	r3, [pc, #80]	; (8002b50 <HAL_RCC_OscConfig+0x8bc>)
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	4a13      	ldr	r2, [pc, #76]	; (8002b50 <HAL_RCC_OscConfig+0x8bc>)
 8002b02:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002b06:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b08:	f7fe fff0 	bl	8001aec <HAL_GetTick>
 8002b0c:	61b8      	str	r0, [r7, #24]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b0e:	e008      	b.n	8002b22 <HAL_RCC_OscConfig+0x88e>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b10:	f7fe ffec 	bl	8001aec <HAL_GetTick>
 8002b14:	4602      	mov	r2, r0
 8002b16:	69bb      	ldr	r3, [r7, #24]
 8002b18:	1ad3      	subs	r3, r2, r3
 8002b1a:	2b02      	cmp	r3, #2
 8002b1c:	d901      	bls.n	8002b22 <HAL_RCC_OscConfig+0x88e>
          {
            return HAL_TIMEOUT;
 8002b1e:	2303      	movs	r3, #3
 8002b20:	e011      	b.n	8002b46 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b22:	4b0b      	ldr	r3, [pc, #44]	; (8002b50 <HAL_RCC_OscConfig+0x8bc>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d1f0      	bne.n	8002b10 <HAL_RCC_OscConfig+0x87c>
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
 8002b2e:	4b08      	ldr	r3, [pc, #32]	; (8002b50 <HAL_RCC_OscConfig+0x8bc>)
 8002b30:	68db      	ldr	r3, [r3, #12]
 8002b32:	4a07      	ldr	r2, [pc, #28]	; (8002b50 <HAL_RCC_OscConfig+0x8bc>)
 8002b34:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002b38:	f023 0303 	bic.w	r3, r3, #3
 8002b3c:	60d3      	str	r3, [r2, #12]
 8002b3e:	e001      	b.n	8002b44 <HAL_RCC_OscConfig+0x8b0>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002b40:	2301      	movs	r3, #1
 8002b42:	e000      	b.n	8002b46 <HAL_RCC_OscConfig+0x8b2>
      }
    }
  }
  return HAL_OK;
 8002b44:	2300      	movs	r3, #0
}
 8002b46:	4618      	mov	r0, r3
 8002b48:	3728      	adds	r7, #40	; 0x28
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	bd80      	pop	{r7, pc}
 8002b4e:	bf00      	nop
 8002b50:	40021000 	.word	0x40021000
 8002b54:	f99f808c 	.word	0xf99f808c

08002b58 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b084      	sub	sp, #16
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
 8002b60:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d101      	bne.n	8002b6c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b68:	2301      	movs	r3, #1
 8002b6a:	e0e7      	b.n	8002d3c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002b6c:	4b75      	ldr	r3, [pc, #468]	; (8002d44 <HAL_RCC_ClockConfig+0x1ec>)
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f003 0307 	and.w	r3, r3, #7
 8002b74:	683a      	ldr	r2, [r7, #0]
 8002b76:	429a      	cmp	r2, r3
 8002b78:	d910      	bls.n	8002b9c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b7a:	4b72      	ldr	r3, [pc, #456]	; (8002d44 <HAL_RCC_ClockConfig+0x1ec>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f023 0207 	bic.w	r2, r3, #7
 8002b82:	4970      	ldr	r1, [pc, #448]	; (8002d44 <HAL_RCC_ClockConfig+0x1ec>)
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	4313      	orrs	r3, r2
 8002b88:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b8a:	4b6e      	ldr	r3, [pc, #440]	; (8002d44 <HAL_RCC_ClockConfig+0x1ec>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f003 0307 	and.w	r3, r3, #7
 8002b92:	683a      	ldr	r2, [r7, #0]
 8002b94:	429a      	cmp	r2, r3
 8002b96:	d001      	beq.n	8002b9c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002b98:	2301      	movs	r3, #1
 8002b9a:	e0cf      	b.n	8002d3c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f003 0302 	and.w	r3, r3, #2
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d010      	beq.n	8002bca <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	689a      	ldr	r2, [r3, #8]
 8002bac:	4b66      	ldr	r3, [pc, #408]	; (8002d48 <HAL_RCC_ClockConfig+0x1f0>)
 8002bae:	689b      	ldr	r3, [r3, #8]
 8002bb0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002bb4:	429a      	cmp	r2, r3
 8002bb6:	d908      	bls.n	8002bca <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002bb8:	4b63      	ldr	r3, [pc, #396]	; (8002d48 <HAL_RCC_ClockConfig+0x1f0>)
 8002bba:	689b      	ldr	r3, [r3, #8]
 8002bbc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	689b      	ldr	r3, [r3, #8]
 8002bc4:	4960      	ldr	r1, [pc, #384]	; (8002d48 <HAL_RCC_ClockConfig+0x1f0>)
 8002bc6:	4313      	orrs	r3, r2
 8002bc8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f003 0301 	and.w	r3, r3, #1
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d04c      	beq.n	8002c70 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	685b      	ldr	r3, [r3, #4]
 8002bda:	2b03      	cmp	r3, #3
 8002bdc:	d107      	bne.n	8002bee <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002bde:	4b5a      	ldr	r3, [pc, #360]	; (8002d48 <HAL_RCC_ClockConfig+0x1f0>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d121      	bne.n	8002c2e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002bea:	2301      	movs	r3, #1
 8002bec:	e0a6      	b.n	8002d3c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	685b      	ldr	r3, [r3, #4]
 8002bf2:	2b02      	cmp	r3, #2
 8002bf4:	d107      	bne.n	8002c06 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002bf6:	4b54      	ldr	r3, [pc, #336]	; (8002d48 <HAL_RCC_ClockConfig+0x1f0>)
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d115      	bne.n	8002c2e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002c02:	2301      	movs	r3, #1
 8002c04:	e09a      	b.n	8002d3c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	685b      	ldr	r3, [r3, #4]
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d107      	bne.n	8002c1e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002c0e:	4b4e      	ldr	r3, [pc, #312]	; (8002d48 <HAL_RCC_ClockConfig+0x1f0>)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f003 0302 	and.w	r3, r3, #2
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d109      	bne.n	8002c2e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002c1a:	2301      	movs	r3, #1
 8002c1c:	e08e      	b.n	8002d3c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002c1e:	4b4a      	ldr	r3, [pc, #296]	; (8002d48 <HAL_RCC_ClockConfig+0x1f0>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d101      	bne.n	8002c2e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002c2a:	2301      	movs	r3, #1
 8002c2c:	e086      	b.n	8002d3c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002c2e:	4b46      	ldr	r3, [pc, #280]	; (8002d48 <HAL_RCC_ClockConfig+0x1f0>)
 8002c30:	689b      	ldr	r3, [r3, #8]
 8002c32:	f023 0203 	bic.w	r2, r3, #3
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	685b      	ldr	r3, [r3, #4]
 8002c3a:	4943      	ldr	r1, [pc, #268]	; (8002d48 <HAL_RCC_ClockConfig+0x1f0>)
 8002c3c:	4313      	orrs	r3, r2
 8002c3e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c40:	f7fe ff54 	bl	8001aec <HAL_GetTick>
 8002c44:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c46:	e00a      	b.n	8002c5e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c48:	f7fe ff50 	bl	8001aec <HAL_GetTick>
 8002c4c:	4602      	mov	r2, r0
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	1ad3      	subs	r3, r2, r3
 8002c52:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c56:	4293      	cmp	r3, r2
 8002c58:	d901      	bls.n	8002c5e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002c5a:	2303      	movs	r3, #3
 8002c5c:	e06e      	b.n	8002d3c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c5e:	4b3a      	ldr	r3, [pc, #232]	; (8002d48 <HAL_RCC_ClockConfig+0x1f0>)
 8002c60:	689b      	ldr	r3, [r3, #8]
 8002c62:	f003 020c 	and.w	r2, r3, #12
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	685b      	ldr	r3, [r3, #4]
 8002c6a:	009b      	lsls	r3, r3, #2
 8002c6c:	429a      	cmp	r2, r3
 8002c6e:	d1eb      	bne.n	8002c48 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f003 0302 	and.w	r3, r3, #2
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d010      	beq.n	8002c9e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	689a      	ldr	r2, [r3, #8]
 8002c80:	4b31      	ldr	r3, [pc, #196]	; (8002d48 <HAL_RCC_ClockConfig+0x1f0>)
 8002c82:	689b      	ldr	r3, [r3, #8]
 8002c84:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002c88:	429a      	cmp	r2, r3
 8002c8a:	d208      	bcs.n	8002c9e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c8c:	4b2e      	ldr	r3, [pc, #184]	; (8002d48 <HAL_RCC_ClockConfig+0x1f0>)
 8002c8e:	689b      	ldr	r3, [r3, #8]
 8002c90:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	689b      	ldr	r3, [r3, #8]
 8002c98:	492b      	ldr	r1, [pc, #172]	; (8002d48 <HAL_RCC_ClockConfig+0x1f0>)
 8002c9a:	4313      	orrs	r3, r2
 8002c9c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002c9e:	4b29      	ldr	r3, [pc, #164]	; (8002d44 <HAL_RCC_ClockConfig+0x1ec>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f003 0307 	and.w	r3, r3, #7
 8002ca6:	683a      	ldr	r2, [r7, #0]
 8002ca8:	429a      	cmp	r2, r3
 8002caa:	d210      	bcs.n	8002cce <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cac:	4b25      	ldr	r3, [pc, #148]	; (8002d44 <HAL_RCC_ClockConfig+0x1ec>)
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f023 0207 	bic.w	r2, r3, #7
 8002cb4:	4923      	ldr	r1, [pc, #140]	; (8002d44 <HAL_RCC_ClockConfig+0x1ec>)
 8002cb6:	683b      	ldr	r3, [r7, #0]
 8002cb8:	4313      	orrs	r3, r2
 8002cba:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cbc:	4b21      	ldr	r3, [pc, #132]	; (8002d44 <HAL_RCC_ClockConfig+0x1ec>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f003 0307 	and.w	r3, r3, #7
 8002cc4:	683a      	ldr	r2, [r7, #0]
 8002cc6:	429a      	cmp	r2, r3
 8002cc8:	d001      	beq.n	8002cce <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002cca:	2301      	movs	r3, #1
 8002ccc:	e036      	b.n	8002d3c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f003 0304 	and.w	r3, r3, #4
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d008      	beq.n	8002cec <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002cda:	4b1b      	ldr	r3, [pc, #108]	; (8002d48 <HAL_RCC_ClockConfig+0x1f0>)
 8002cdc:	689b      	ldr	r3, [r3, #8]
 8002cde:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	68db      	ldr	r3, [r3, #12]
 8002ce6:	4918      	ldr	r1, [pc, #96]	; (8002d48 <HAL_RCC_ClockConfig+0x1f0>)
 8002ce8:	4313      	orrs	r3, r2
 8002cea:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f003 0308 	and.w	r3, r3, #8
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d009      	beq.n	8002d0c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002cf8:	4b13      	ldr	r3, [pc, #76]	; (8002d48 <HAL_RCC_ClockConfig+0x1f0>)
 8002cfa:	689b      	ldr	r3, [r3, #8]
 8002cfc:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	691b      	ldr	r3, [r3, #16]
 8002d04:	00db      	lsls	r3, r3, #3
 8002d06:	4910      	ldr	r1, [pc, #64]	; (8002d48 <HAL_RCC_ClockConfig+0x1f0>)
 8002d08:	4313      	orrs	r3, r2
 8002d0a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002d0c:	f000 f824 	bl	8002d58 <HAL_RCC_GetSysClockFreq>
 8002d10:	4602      	mov	r2, r0
 8002d12:	4b0d      	ldr	r3, [pc, #52]	; (8002d48 <HAL_RCC_ClockConfig+0x1f0>)
 8002d14:	689b      	ldr	r3, [r3, #8]
 8002d16:	091b      	lsrs	r3, r3, #4
 8002d18:	f003 030f 	and.w	r3, r3, #15
 8002d1c:	490b      	ldr	r1, [pc, #44]	; (8002d4c <HAL_RCC_ClockConfig+0x1f4>)
 8002d1e:	5ccb      	ldrb	r3, [r1, r3]
 8002d20:	f003 031f 	and.w	r3, r3, #31
 8002d24:	fa22 f303 	lsr.w	r3, r2, r3
 8002d28:	4a09      	ldr	r2, [pc, #36]	; (8002d50 <HAL_RCC_ClockConfig+0x1f8>)
 8002d2a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002d2c:	4b09      	ldr	r3, [pc, #36]	; (8002d54 <HAL_RCC_ClockConfig+0x1fc>)
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	4618      	mov	r0, r3
 8002d32:	f7fe fe8b 	bl	8001a4c <HAL_InitTick>
 8002d36:	4603      	mov	r3, r0
 8002d38:	72fb      	strb	r3, [r7, #11]

  return status;
 8002d3a:	7afb      	ldrb	r3, [r7, #11]
}
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	3710      	adds	r7, #16
 8002d40:	46bd      	mov	sp, r7
 8002d42:	bd80      	pop	{r7, pc}
 8002d44:	40022000 	.word	0x40022000
 8002d48:	40021000 	.word	0x40021000
 8002d4c:	08009ca0 	.word	0x08009ca0
 8002d50:	20000000 	.word	0x20000000
 8002d54:	20000004 	.word	0x20000004

08002d58 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d58:	b480      	push	{r7}
 8002d5a:	b089      	sub	sp, #36	; 0x24
 8002d5c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002d5e:	2300      	movs	r3, #0
 8002d60:	61fb      	str	r3, [r7, #28]
 8002d62:	2300      	movs	r3, #0
 8002d64:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002d66:	4b3e      	ldr	r3, [pc, #248]	; (8002e60 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d68:	689b      	ldr	r3, [r3, #8]
 8002d6a:	f003 030c 	and.w	r3, r3, #12
 8002d6e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002d70:	4b3b      	ldr	r3, [pc, #236]	; (8002e60 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d72:	68db      	ldr	r3, [r3, #12]
 8002d74:	f003 0303 	and.w	r3, r3, #3
 8002d78:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002d7a:	693b      	ldr	r3, [r7, #16]
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d005      	beq.n	8002d8c <HAL_RCC_GetSysClockFreq+0x34>
 8002d80:	693b      	ldr	r3, [r7, #16]
 8002d82:	2b0c      	cmp	r3, #12
 8002d84:	d121      	bne.n	8002dca <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	2b01      	cmp	r3, #1
 8002d8a:	d11e      	bne.n	8002dca <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002d8c:	4b34      	ldr	r3, [pc, #208]	; (8002e60 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f003 0308 	and.w	r3, r3, #8
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d107      	bne.n	8002da8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002d98:	4b31      	ldr	r3, [pc, #196]	; (8002e60 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d9a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d9e:	0a1b      	lsrs	r3, r3, #8
 8002da0:	f003 030f 	and.w	r3, r3, #15
 8002da4:	61fb      	str	r3, [r7, #28]
 8002da6:	e005      	b.n	8002db4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002da8:	4b2d      	ldr	r3, [pc, #180]	; (8002e60 <HAL_RCC_GetSysClockFreq+0x108>)
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	091b      	lsrs	r3, r3, #4
 8002dae:	f003 030f 	and.w	r3, r3, #15
 8002db2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002db4:	4a2b      	ldr	r2, [pc, #172]	; (8002e64 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002db6:	69fb      	ldr	r3, [r7, #28]
 8002db8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002dbc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002dbe:	693b      	ldr	r3, [r7, #16]
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d10d      	bne.n	8002de0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002dc4:	69fb      	ldr	r3, [r7, #28]
 8002dc6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002dc8:	e00a      	b.n	8002de0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002dca:	693b      	ldr	r3, [r7, #16]
 8002dcc:	2b04      	cmp	r3, #4
 8002dce:	d102      	bne.n	8002dd6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002dd0:	4b25      	ldr	r3, [pc, #148]	; (8002e68 <HAL_RCC_GetSysClockFreq+0x110>)
 8002dd2:	61bb      	str	r3, [r7, #24]
 8002dd4:	e004      	b.n	8002de0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002dd6:	693b      	ldr	r3, [r7, #16]
 8002dd8:	2b08      	cmp	r3, #8
 8002dda:	d101      	bne.n	8002de0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002ddc:	4b23      	ldr	r3, [pc, #140]	; (8002e6c <HAL_RCC_GetSysClockFreq+0x114>)
 8002dde:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002de0:	693b      	ldr	r3, [r7, #16]
 8002de2:	2b0c      	cmp	r3, #12
 8002de4:	d134      	bne.n	8002e50 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002de6:	4b1e      	ldr	r3, [pc, #120]	; (8002e60 <HAL_RCC_GetSysClockFreq+0x108>)
 8002de8:	68db      	ldr	r3, [r3, #12]
 8002dea:	f003 0303 	and.w	r3, r3, #3
 8002dee:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002df0:	68bb      	ldr	r3, [r7, #8]
 8002df2:	2b02      	cmp	r3, #2
 8002df4:	d003      	beq.n	8002dfe <HAL_RCC_GetSysClockFreq+0xa6>
 8002df6:	68bb      	ldr	r3, [r7, #8]
 8002df8:	2b03      	cmp	r3, #3
 8002dfa:	d003      	beq.n	8002e04 <HAL_RCC_GetSysClockFreq+0xac>
 8002dfc:	e005      	b.n	8002e0a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002dfe:	4b1a      	ldr	r3, [pc, #104]	; (8002e68 <HAL_RCC_GetSysClockFreq+0x110>)
 8002e00:	617b      	str	r3, [r7, #20]
      break;
 8002e02:	e005      	b.n	8002e10 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002e04:	4b19      	ldr	r3, [pc, #100]	; (8002e6c <HAL_RCC_GetSysClockFreq+0x114>)
 8002e06:	617b      	str	r3, [r7, #20]
      break;
 8002e08:	e002      	b.n	8002e10 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002e0a:	69fb      	ldr	r3, [r7, #28]
 8002e0c:	617b      	str	r3, [r7, #20]
      break;
 8002e0e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002e10:	4b13      	ldr	r3, [pc, #76]	; (8002e60 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e12:	68db      	ldr	r3, [r3, #12]
 8002e14:	091b      	lsrs	r3, r3, #4
 8002e16:	f003 0307 	and.w	r3, r3, #7
 8002e1a:	3301      	adds	r3, #1
 8002e1c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002e1e:	4b10      	ldr	r3, [pc, #64]	; (8002e60 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e20:	68db      	ldr	r3, [r3, #12]
 8002e22:	0a1b      	lsrs	r3, r3, #8
 8002e24:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002e28:	697a      	ldr	r2, [r7, #20]
 8002e2a:	fb03 f202 	mul.w	r2, r3, r2
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e34:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002e36:	4b0a      	ldr	r3, [pc, #40]	; (8002e60 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e38:	68db      	ldr	r3, [r3, #12]
 8002e3a:	0e5b      	lsrs	r3, r3, #25
 8002e3c:	f003 0303 	and.w	r3, r3, #3
 8002e40:	3301      	adds	r3, #1
 8002e42:	005b      	lsls	r3, r3, #1
 8002e44:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002e46:	697a      	ldr	r2, [r7, #20]
 8002e48:	683b      	ldr	r3, [r7, #0]
 8002e4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e4e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002e50:	69bb      	ldr	r3, [r7, #24]
}
 8002e52:	4618      	mov	r0, r3
 8002e54:	3724      	adds	r7, #36	; 0x24
 8002e56:	46bd      	mov	sp, r7
 8002e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5c:	4770      	bx	lr
 8002e5e:	bf00      	nop
 8002e60:	40021000 	.word	0x40021000
 8002e64:	08009cb8 	.word	0x08009cb8
 8002e68:	00f42400 	.word	0x00f42400
 8002e6c:	007a1200 	.word	0x007a1200

08002e70 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e70:	b480      	push	{r7}
 8002e72:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002e74:	4b03      	ldr	r3, [pc, #12]	; (8002e84 <HAL_RCC_GetHCLKFreq+0x14>)
 8002e76:	681b      	ldr	r3, [r3, #0]
}
 8002e78:	4618      	mov	r0, r3
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e80:	4770      	bx	lr
 8002e82:	bf00      	nop
 8002e84:	20000000 	.word	0x20000000

08002e88 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002e8c:	f7ff fff0 	bl	8002e70 <HAL_RCC_GetHCLKFreq>
 8002e90:	4602      	mov	r2, r0
 8002e92:	4b06      	ldr	r3, [pc, #24]	; (8002eac <HAL_RCC_GetPCLK1Freq+0x24>)
 8002e94:	689b      	ldr	r3, [r3, #8]
 8002e96:	0a1b      	lsrs	r3, r3, #8
 8002e98:	f003 0307 	and.w	r3, r3, #7
 8002e9c:	4904      	ldr	r1, [pc, #16]	; (8002eb0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002e9e:	5ccb      	ldrb	r3, [r1, r3]
 8002ea0:	f003 031f 	and.w	r3, r3, #31
 8002ea4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	bd80      	pop	{r7, pc}
 8002eac:	40021000 	.word	0x40021000
 8002eb0:	08009cb0 	.word	0x08009cb0

08002eb4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002eb8:	f7ff ffda 	bl	8002e70 <HAL_RCC_GetHCLKFreq>
 8002ebc:	4602      	mov	r2, r0
 8002ebe:	4b06      	ldr	r3, [pc, #24]	; (8002ed8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002ec0:	689b      	ldr	r3, [r3, #8]
 8002ec2:	0adb      	lsrs	r3, r3, #11
 8002ec4:	f003 0307 	and.w	r3, r3, #7
 8002ec8:	4904      	ldr	r1, [pc, #16]	; (8002edc <HAL_RCC_GetPCLK2Freq+0x28>)
 8002eca:	5ccb      	ldrb	r3, [r1, r3]
 8002ecc:	f003 031f 	and.w	r3, r3, #31
 8002ed0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	bd80      	pop	{r7, pc}
 8002ed8:	40021000 	.word	0x40021000
 8002edc:	08009cb0 	.word	0x08009cb0

08002ee0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b086      	sub	sp, #24
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002ee8:	2300      	movs	r3, #0
 8002eea:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002eec:	4b2a      	ldr	r3, [pc, #168]	; (8002f98 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002eee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ef0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d003      	beq.n	8002f00 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002ef8:	f7ff f968 	bl	80021cc <HAL_PWREx_GetVoltageRange>
 8002efc:	6178      	str	r0, [r7, #20]
 8002efe:	e014      	b.n	8002f2a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002f00:	4b25      	ldr	r3, [pc, #148]	; (8002f98 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002f02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f04:	4a24      	ldr	r2, [pc, #144]	; (8002f98 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002f06:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f0a:	6593      	str	r3, [r2, #88]	; 0x58
 8002f0c:	4b22      	ldr	r3, [pc, #136]	; (8002f98 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002f0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f14:	60fb      	str	r3, [r7, #12]
 8002f16:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002f18:	f7ff f958 	bl	80021cc <HAL_PWREx_GetVoltageRange>
 8002f1c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002f1e:	4b1e      	ldr	r3, [pc, #120]	; (8002f98 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002f20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f22:	4a1d      	ldr	r2, [pc, #116]	; (8002f98 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002f24:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f28:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002f2a:	697b      	ldr	r3, [r7, #20]
 8002f2c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002f30:	d10b      	bne.n	8002f4a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	2b80      	cmp	r3, #128	; 0x80
 8002f36:	d919      	bls.n	8002f6c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2ba0      	cmp	r3, #160	; 0xa0
 8002f3c:	d902      	bls.n	8002f44 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002f3e:	2302      	movs	r3, #2
 8002f40:	613b      	str	r3, [r7, #16]
 8002f42:	e013      	b.n	8002f6c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002f44:	2301      	movs	r3, #1
 8002f46:	613b      	str	r3, [r7, #16]
 8002f48:	e010      	b.n	8002f6c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	2b80      	cmp	r3, #128	; 0x80
 8002f4e:	d902      	bls.n	8002f56 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002f50:	2303      	movs	r3, #3
 8002f52:	613b      	str	r3, [r7, #16]
 8002f54:	e00a      	b.n	8002f6c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	2b80      	cmp	r3, #128	; 0x80
 8002f5a:	d102      	bne.n	8002f62 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002f5c:	2302      	movs	r3, #2
 8002f5e:	613b      	str	r3, [r7, #16]
 8002f60:	e004      	b.n	8002f6c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	2b70      	cmp	r3, #112	; 0x70
 8002f66:	d101      	bne.n	8002f6c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002f68:	2301      	movs	r3, #1
 8002f6a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002f6c:	4b0b      	ldr	r3, [pc, #44]	; (8002f9c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f023 0207 	bic.w	r2, r3, #7
 8002f74:	4909      	ldr	r1, [pc, #36]	; (8002f9c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002f76:	693b      	ldr	r3, [r7, #16]
 8002f78:	4313      	orrs	r3, r2
 8002f7a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002f7c:	4b07      	ldr	r3, [pc, #28]	; (8002f9c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f003 0307 	and.w	r3, r3, #7
 8002f84:	693a      	ldr	r2, [r7, #16]
 8002f86:	429a      	cmp	r2, r3
 8002f88:	d001      	beq.n	8002f8e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002f8a:	2301      	movs	r3, #1
 8002f8c:	e000      	b.n	8002f90 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002f8e:	2300      	movs	r3, #0
}
 8002f90:	4618      	mov	r0, r3
 8002f92:	3718      	adds	r7, #24
 8002f94:	46bd      	mov	sp, r7
 8002f96:	bd80      	pop	{r7, pc}
 8002f98:	40021000 	.word	0x40021000
 8002f9c:	40022000 	.word	0x40022000

08002fa0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	b086      	sub	sp, #24
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002fa8:	2300      	movs	r3, #0
 8002faa:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002fac:	2300      	movs	r3, #0
 8002fae:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	f000 809e 	beq.w	80030fa <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002fc2:	4b46      	ldr	r3, [pc, #280]	; (80030dc <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002fc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d101      	bne.n	8002fd2 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8002fce:	2301      	movs	r3, #1
 8002fd0:	e000      	b.n	8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x34>
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d00d      	beq.n	8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002fd8:	4b40      	ldr	r3, [pc, #256]	; (80030dc <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002fda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fdc:	4a3f      	ldr	r2, [pc, #252]	; (80030dc <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002fde:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002fe2:	6593      	str	r3, [r2, #88]	; 0x58
 8002fe4:	4b3d      	ldr	r3, [pc, #244]	; (80030dc <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002fe6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fe8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fec:	60bb      	str	r3, [r7, #8]
 8002fee:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ff0:	2301      	movs	r3, #1
 8002ff2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002ff4:	4b3a      	ldr	r3, [pc, #232]	; (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	4a39      	ldr	r2, [pc, #228]	; (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8002ffa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ffe:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003000:	f7fe fd74 	bl	8001aec <HAL_GetTick>
 8003004:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003006:	e009      	b.n	800301c <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003008:	f7fe fd70 	bl	8001aec <HAL_GetTick>
 800300c:	4602      	mov	r2, r0
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	1ad3      	subs	r3, r2, r3
 8003012:	2b02      	cmp	r3, #2
 8003014:	d902      	bls.n	800301c <HAL_RCCEx_PeriphCLKConfig+0x7c>
      {
        ret = HAL_TIMEOUT;
 8003016:	2303      	movs	r3, #3
 8003018:	74fb      	strb	r3, [r7, #19]
        break;
 800301a:	e005      	b.n	8003028 <HAL_RCCEx_PeriphCLKConfig+0x88>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800301c:	4b30      	ldr	r3, [pc, #192]	; (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003024:	2b00      	cmp	r3, #0
 8003026:	d0ef      	beq.n	8003008 <HAL_RCCEx_PeriphCLKConfig+0x68>
      }
    }

    if(ret == HAL_OK)
 8003028:	7cfb      	ldrb	r3, [r7, #19]
 800302a:	2b00      	cmp	r3, #0
 800302c:	d15a      	bne.n	80030e4 <HAL_RCCEx_PeriphCLKConfig+0x144>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800302e:	4b2b      	ldr	r3, [pc, #172]	; (80030dc <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8003030:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003034:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003038:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800303a:	697b      	ldr	r3, [r7, #20]
 800303c:	2b00      	cmp	r3, #0
 800303e:	d01e      	beq.n	800307e <HAL_RCCEx_PeriphCLKConfig+0xde>
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003044:	697a      	ldr	r2, [r7, #20]
 8003046:	429a      	cmp	r2, r3
 8003048:	d019      	beq.n	800307e <HAL_RCCEx_PeriphCLKConfig+0xde>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800304a:	4b24      	ldr	r3, [pc, #144]	; (80030dc <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800304c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003050:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003054:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003056:	4b21      	ldr	r3, [pc, #132]	; (80030dc <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8003058:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800305c:	4a1f      	ldr	r2, [pc, #124]	; (80030dc <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800305e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003062:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003066:	4b1d      	ldr	r3, [pc, #116]	; (80030dc <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8003068:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800306c:	4a1b      	ldr	r2, [pc, #108]	; (80030dc <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800306e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003072:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003076:	4a19      	ldr	r2, [pc, #100]	; (80030dc <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8003078:	697b      	ldr	r3, [r7, #20]
 800307a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800307e:	697b      	ldr	r3, [r7, #20]
 8003080:	f003 0301 	and.w	r3, r3, #1
 8003084:	2b00      	cmp	r3, #0
 8003086:	d016      	beq.n	80030b6 <HAL_RCCEx_PeriphCLKConfig+0x116>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003088:	f7fe fd30 	bl	8001aec <HAL_GetTick>
 800308c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800308e:	e00b      	b.n	80030a8 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003090:	f7fe fd2c 	bl	8001aec <HAL_GetTick>
 8003094:	4602      	mov	r2, r0
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	1ad3      	subs	r3, r2, r3
 800309a:	f241 3288 	movw	r2, #5000	; 0x1388
 800309e:	4293      	cmp	r3, r2
 80030a0:	d902      	bls.n	80030a8 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            ret = HAL_TIMEOUT;
 80030a2:	2303      	movs	r3, #3
 80030a4:	74fb      	strb	r3, [r7, #19]
            break;
 80030a6:	e006      	b.n	80030b6 <HAL_RCCEx_PeriphCLKConfig+0x116>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80030a8:	4b0c      	ldr	r3, [pc, #48]	; (80030dc <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80030aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030ae:	f003 0302 	and.w	r3, r3, #2
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d0ec      	beq.n	8003090 <HAL_RCCEx_PeriphCLKConfig+0xf0>
          }
        }
      }

      if(ret == HAL_OK)
 80030b6:	7cfb      	ldrb	r3, [r7, #19]
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d10b      	bne.n	80030d4 <HAL_RCCEx_PeriphCLKConfig+0x134>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80030bc:	4b07      	ldr	r3, [pc, #28]	; (80030dc <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80030be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030c2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030ca:	4904      	ldr	r1, [pc, #16]	; (80030dc <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80030cc:	4313      	orrs	r3, r2
 80030ce:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80030d2:	e009      	b.n	80030e8 <HAL_RCCEx_PeriphCLKConfig+0x148>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80030d4:	7cfb      	ldrb	r3, [r7, #19]
 80030d6:	74bb      	strb	r3, [r7, #18]
 80030d8:	e006      	b.n	80030e8 <HAL_RCCEx_PeriphCLKConfig+0x148>
 80030da:	bf00      	nop
 80030dc:	40021000 	.word	0x40021000
 80030e0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030e4:	7cfb      	ldrb	r3, [r7, #19]
 80030e6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80030e8:	7c7b      	ldrb	r3, [r7, #17]
 80030ea:	2b01      	cmp	r3, #1
 80030ec:	d105      	bne.n	80030fa <HAL_RCCEx_PeriphCLKConfig+0x15a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80030ee:	4b6e      	ldr	r3, [pc, #440]	; (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80030f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030f2:	4a6d      	ldr	r2, [pc, #436]	; (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80030f4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80030f8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f003 0301 	and.w	r3, r3, #1
 8003102:	2b00      	cmp	r3, #0
 8003104:	d00a      	beq.n	800311c <HAL_RCCEx_PeriphCLKConfig+0x17c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003106:	4b68      	ldr	r3, [pc, #416]	; (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003108:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800310c:	f023 0203 	bic.w	r2, r3, #3
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	685b      	ldr	r3, [r3, #4]
 8003114:	4964      	ldr	r1, [pc, #400]	; (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003116:	4313      	orrs	r3, r2
 8003118:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f003 0302 	and.w	r3, r3, #2
 8003124:	2b00      	cmp	r3, #0
 8003126:	d00a      	beq.n	800313e <HAL_RCCEx_PeriphCLKConfig+0x19e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003128:	4b5f      	ldr	r3, [pc, #380]	; (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800312a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800312e:	f023 020c 	bic.w	r2, r3, #12
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	689b      	ldr	r3, [r3, #8]
 8003136:	495c      	ldr	r1, [pc, #368]	; (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003138:	4313      	orrs	r3, r2
 800313a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f003 0304 	and.w	r3, r3, #4
 8003146:	2b00      	cmp	r3, #0
 8003148:	d00a      	beq.n	8003160 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800314a:	4b57      	ldr	r3, [pc, #348]	; (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800314c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003150:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	68db      	ldr	r3, [r3, #12]
 8003158:	4953      	ldr	r1, [pc, #332]	; (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800315a:	4313      	orrs	r3, r2
 800315c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f003 0320 	and.w	r3, r3, #32
 8003168:	2b00      	cmp	r3, #0
 800316a:	d00a      	beq.n	8003182 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800316c:	4b4e      	ldr	r3, [pc, #312]	; (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800316e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003172:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	691b      	ldr	r3, [r3, #16]
 800317a:	494b      	ldr	r1, [pc, #300]	; (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800317c:	4313      	orrs	r3, r2
 800317e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800318a:	2b00      	cmp	r3, #0
 800318c:	d00a      	beq.n	80031a4 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800318e:	4b46      	ldr	r3, [pc, #280]	; (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003190:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003194:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6a1b      	ldr	r3, [r3, #32]
 800319c:	4942      	ldr	r1, [pc, #264]	; (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800319e:	4313      	orrs	r3, r2
 80031a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d00a      	beq.n	80031c6 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80031b0:	4b3d      	ldr	r3, [pc, #244]	; (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80031b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031b6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031be:	493a      	ldr	r1, [pc, #232]	; (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80031c0:	4313      	orrs	r3, r2
 80031c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d00a      	beq.n	80031e8 <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80031d2:	4b35      	ldr	r3, [pc, #212]	; (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80031d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031d8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	695b      	ldr	r3, [r3, #20]
 80031e0:	4931      	ldr	r1, [pc, #196]	; (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80031e2:	4313      	orrs	r3, r2
 80031e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d00a      	beq.n	800320a <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80031f4:	4b2c      	ldr	r3, [pc, #176]	; (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80031f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031fa:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	699b      	ldr	r3, [r3, #24]
 8003202:	4929      	ldr	r1, [pc, #164]	; (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003204:	4313      	orrs	r3, r2
 8003206:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003212:	2b00      	cmp	r3, #0
 8003214:	d00a      	beq.n	800322c <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003216:	4b24      	ldr	r3, [pc, #144]	; (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003218:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800321c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	69db      	ldr	r3, [r3, #28]
 8003224:	4920      	ldr	r1, [pc, #128]	; (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003226:	4313      	orrs	r3, r2
 8003228:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003234:	2b00      	cmp	r3, #0
 8003236:	d015      	beq.n	8003264 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003238:	4b1b      	ldr	r3, [pc, #108]	; (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800323a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800323e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003246:	4918      	ldr	r1, [pc, #96]	; (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003248:	4313      	orrs	r3, r2
 800324a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003252:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003256:	d105      	bne.n	8003264 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003258:	4b13      	ldr	r3, [pc, #76]	; (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800325a:	68db      	ldr	r3, [r3, #12]
 800325c:	4a12      	ldr	r2, [pc, #72]	; (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800325e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003262:	60d3      	str	r3, [r2, #12]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800326c:	2b00      	cmp	r3, #0
 800326e:	d015      	beq.n	800329c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003270:	4b0d      	ldr	r3, [pc, #52]	; (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003272:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003276:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800327e:	490a      	ldr	r1, [pc, #40]	; (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003280:	4313      	orrs	r3, r2
 8003282:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800328a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800328e:	d105      	bne.n	800329c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003290:	4b05      	ldr	r3, [pc, #20]	; (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003292:	68db      	ldr	r3, [r3, #12]
 8003294:	4a04      	ldr	r2, [pc, #16]	; (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003296:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800329a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800329c:	7cbb      	ldrb	r3, [r7, #18]
}
 800329e:	4618      	mov	r0, r3
 80032a0:	3718      	adds	r7, #24
 80032a2:	46bd      	mov	sp, r7
 80032a4:	bd80      	pop	{r7, pc}
 80032a6:	bf00      	nop
 80032a8:	40021000 	.word	0x40021000

080032ac <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b082      	sub	sp, #8
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d101      	bne.n	80032be <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80032ba:	2301      	movs	r3, #1
 80032bc:	e040      	b.n	8003340 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d106      	bne.n	80032d4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	2200      	movs	r2, #0
 80032ca:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80032ce:	6878      	ldr	r0, [r7, #4]
 80032d0:	f7fe f8a8 	bl	8001424 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2224      	movs	r2, #36	; 0x24
 80032d8:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	681a      	ldr	r2, [r3, #0]
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f022 0201 	bic.w	r2, r2, #1
 80032e8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80032ea:	6878      	ldr	r0, [r7, #4]
 80032ec:	f000 fd8e 	bl	8003e0c <UART_SetConfig>
 80032f0:	4603      	mov	r3, r0
 80032f2:	2b01      	cmp	r3, #1
 80032f4:	d101      	bne.n	80032fa <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80032f6:	2301      	movs	r3, #1
 80032f8:	e022      	b.n	8003340 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d002      	beq.n	8003308 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003302:	6878      	ldr	r0, [r7, #4]
 8003304:	f000 ffdc 	bl	80042c0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	685a      	ldr	r2, [r3, #4]
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003316:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	689a      	ldr	r2, [r3, #8]
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003326:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	681a      	ldr	r2, [r3, #0]
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f042 0201 	orr.w	r2, r2, #1
 8003336:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003338:	6878      	ldr	r0, [r7, #4]
 800333a:	f001 f863 	bl	8004404 <UART_CheckIdleState>
 800333e:	4603      	mov	r3, r0
}
 8003340:	4618      	mov	r0, r3
 8003342:	3708      	adds	r7, #8
 8003344:	46bd      	mov	sp, r7
 8003346:	bd80      	pop	{r7, pc}

08003348 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003348:	b580      	push	{r7, lr}
 800334a:	b08a      	sub	sp, #40	; 0x28
 800334c:	af02      	add	r7, sp, #8
 800334e:	60f8      	str	r0, [r7, #12]
 8003350:	60b9      	str	r1, [r7, #8]
 8003352:	603b      	str	r3, [r7, #0]
 8003354:	4613      	mov	r3, r2
 8003356:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800335c:	2b20      	cmp	r3, #32
 800335e:	f040 8082 	bne.w	8003466 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003362:	68bb      	ldr	r3, [r7, #8]
 8003364:	2b00      	cmp	r3, #0
 8003366:	d002      	beq.n	800336e <HAL_UART_Transmit+0x26>
 8003368:	88fb      	ldrh	r3, [r7, #6]
 800336a:	2b00      	cmp	r3, #0
 800336c:	d101      	bne.n	8003372 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800336e:	2301      	movs	r3, #1
 8003370:	e07a      	b.n	8003468 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003378:	2b01      	cmp	r3, #1
 800337a:	d101      	bne.n	8003380 <HAL_UART_Transmit+0x38>
 800337c:	2302      	movs	r3, #2
 800337e:	e073      	b.n	8003468 <HAL_UART_Transmit+0x120>
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	2201      	movs	r2, #1
 8003384:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	2200      	movs	r2, #0
 800338c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	2221      	movs	r2, #33	; 0x21
 8003394:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003396:	f7fe fba9 	bl	8001aec <HAL_GetTick>
 800339a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	88fa      	ldrh	r2, [r7, #6]
 80033a0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	88fa      	ldrh	r2, [r7, #6]
 80033a8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	689b      	ldr	r3, [r3, #8]
 80033b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80033b4:	d108      	bne.n	80033c8 <HAL_UART_Transmit+0x80>
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	691b      	ldr	r3, [r3, #16]
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d104      	bne.n	80033c8 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80033be:	2300      	movs	r3, #0
 80033c0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80033c2:	68bb      	ldr	r3, [r7, #8]
 80033c4:	61bb      	str	r3, [r7, #24]
 80033c6:	e003      	b.n	80033d0 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80033c8:	68bb      	ldr	r3, [r7, #8]
 80033ca:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80033cc:	2300      	movs	r3, #0
 80033ce:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	2200      	movs	r2, #0
 80033d4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80033d8:	e02d      	b.n	8003436 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80033da:	683b      	ldr	r3, [r7, #0]
 80033dc:	9300      	str	r3, [sp, #0]
 80033de:	697b      	ldr	r3, [r7, #20]
 80033e0:	2200      	movs	r2, #0
 80033e2:	2180      	movs	r1, #128	; 0x80
 80033e4:	68f8      	ldr	r0, [r7, #12]
 80033e6:	f001 f856 	bl	8004496 <UART_WaitOnFlagUntilTimeout>
 80033ea:	4603      	mov	r3, r0
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d001      	beq.n	80033f4 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80033f0:	2303      	movs	r3, #3
 80033f2:	e039      	b.n	8003468 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 80033f4:	69fb      	ldr	r3, [r7, #28]
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d10b      	bne.n	8003412 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80033fa:	69bb      	ldr	r3, [r7, #24]
 80033fc:	881a      	ldrh	r2, [r3, #0]
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003406:	b292      	uxth	r2, r2
 8003408:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800340a:	69bb      	ldr	r3, [r7, #24]
 800340c:	3302      	adds	r3, #2
 800340e:	61bb      	str	r3, [r7, #24]
 8003410:	e008      	b.n	8003424 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003412:	69fb      	ldr	r3, [r7, #28]
 8003414:	781a      	ldrb	r2, [r3, #0]
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	b292      	uxth	r2, r2
 800341c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800341e:	69fb      	ldr	r3, [r7, #28]
 8003420:	3301      	adds	r3, #1
 8003422:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800342a:	b29b      	uxth	r3, r3
 800342c:	3b01      	subs	r3, #1
 800342e:	b29a      	uxth	r2, r3
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800343c:	b29b      	uxth	r3, r3
 800343e:	2b00      	cmp	r3, #0
 8003440:	d1cb      	bne.n	80033da <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003442:	683b      	ldr	r3, [r7, #0]
 8003444:	9300      	str	r3, [sp, #0]
 8003446:	697b      	ldr	r3, [r7, #20]
 8003448:	2200      	movs	r2, #0
 800344a:	2140      	movs	r1, #64	; 0x40
 800344c:	68f8      	ldr	r0, [r7, #12]
 800344e:	f001 f822 	bl	8004496 <UART_WaitOnFlagUntilTimeout>
 8003452:	4603      	mov	r3, r0
 8003454:	2b00      	cmp	r3, #0
 8003456:	d001      	beq.n	800345c <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8003458:	2303      	movs	r3, #3
 800345a:	e005      	b.n	8003468 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	2220      	movs	r2, #32
 8003460:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8003462:	2300      	movs	r3, #0
 8003464:	e000      	b.n	8003468 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8003466:	2302      	movs	r3, #2
  }
}
 8003468:	4618      	mov	r0, r3
 800346a:	3720      	adds	r7, #32
 800346c:	46bd      	mov	sp, r7
 800346e:	bd80      	pop	{r7, pc}

08003470 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003470:	b580      	push	{r7, lr}
 8003472:	b08a      	sub	sp, #40	; 0x28
 8003474:	af02      	add	r7, sp, #8
 8003476:	60f8      	str	r0, [r7, #12]
 8003478:	60b9      	str	r1, [r7, #8]
 800347a:	603b      	str	r3, [r7, #0]
 800347c:	4613      	mov	r3, r2
 800347e:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003484:	2b20      	cmp	r3, #32
 8003486:	f040 80bf 	bne.w	8003608 <HAL_UART_Receive+0x198>
  {
    if ((pData == NULL) || (Size == 0U))
 800348a:	68bb      	ldr	r3, [r7, #8]
 800348c:	2b00      	cmp	r3, #0
 800348e:	d002      	beq.n	8003496 <HAL_UART_Receive+0x26>
 8003490:	88fb      	ldrh	r3, [r7, #6]
 8003492:	2b00      	cmp	r3, #0
 8003494:	d101      	bne.n	800349a <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 8003496:	2301      	movs	r3, #1
 8003498:	e0b7      	b.n	800360a <HAL_UART_Receive+0x19a>
    }

    __HAL_LOCK(huart);
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80034a0:	2b01      	cmp	r3, #1
 80034a2:	d101      	bne.n	80034a8 <HAL_UART_Receive+0x38>
 80034a4:	2302      	movs	r3, #2
 80034a6:	e0b0      	b.n	800360a <HAL_UART_Receive+0x19a>
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	2201      	movs	r2, #1
 80034ac:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	2200      	movs	r2, #0
 80034b4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	2222      	movs	r2, #34	; 0x22
 80034bc:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	2200      	movs	r2, #0
 80034c2:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80034c4:	f7fe fb12 	bl	8001aec <HAL_GetTick>
 80034c8:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	88fa      	ldrh	r2, [r7, #6]
 80034ce:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	88fa      	ldrh	r2, [r7, #6]
 80034d6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	689b      	ldr	r3, [r3, #8]
 80034de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80034e2:	d10e      	bne.n	8003502 <HAL_UART_Receive+0x92>
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	691b      	ldr	r3, [r3, #16]
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d105      	bne.n	80034f8 <HAL_UART_Receive+0x88>
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	f240 12ff 	movw	r2, #511	; 0x1ff
 80034f2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80034f6:	e02d      	b.n	8003554 <HAL_UART_Receive+0xe4>
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	22ff      	movs	r2, #255	; 0xff
 80034fc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003500:	e028      	b.n	8003554 <HAL_UART_Receive+0xe4>
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	689b      	ldr	r3, [r3, #8]
 8003506:	2b00      	cmp	r3, #0
 8003508:	d10d      	bne.n	8003526 <HAL_UART_Receive+0xb6>
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	691b      	ldr	r3, [r3, #16]
 800350e:	2b00      	cmp	r3, #0
 8003510:	d104      	bne.n	800351c <HAL_UART_Receive+0xac>
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	22ff      	movs	r2, #255	; 0xff
 8003516:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800351a:	e01b      	b.n	8003554 <HAL_UART_Receive+0xe4>
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	227f      	movs	r2, #127	; 0x7f
 8003520:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003524:	e016      	b.n	8003554 <HAL_UART_Receive+0xe4>
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	689b      	ldr	r3, [r3, #8]
 800352a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800352e:	d10d      	bne.n	800354c <HAL_UART_Receive+0xdc>
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	691b      	ldr	r3, [r3, #16]
 8003534:	2b00      	cmp	r3, #0
 8003536:	d104      	bne.n	8003542 <HAL_UART_Receive+0xd2>
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	227f      	movs	r2, #127	; 0x7f
 800353c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003540:	e008      	b.n	8003554 <HAL_UART_Receive+0xe4>
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	223f      	movs	r2, #63	; 0x3f
 8003546:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800354a:	e003      	b.n	8003554 <HAL_UART_Receive+0xe4>
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	2200      	movs	r2, #0
 8003550:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800355a:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	689b      	ldr	r3, [r3, #8]
 8003560:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003564:	d108      	bne.n	8003578 <HAL_UART_Receive+0x108>
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	691b      	ldr	r3, [r3, #16]
 800356a:	2b00      	cmp	r3, #0
 800356c:	d104      	bne.n	8003578 <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 800356e:	2300      	movs	r3, #0
 8003570:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003572:	68bb      	ldr	r3, [r7, #8]
 8003574:	61bb      	str	r3, [r7, #24]
 8003576:	e003      	b.n	8003580 <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 8003578:	68bb      	ldr	r3, [r7, #8]
 800357a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800357c:	2300      	movs	r3, #0
 800357e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	2200      	movs	r2, #0
 8003584:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8003588:	e033      	b.n	80035f2 <HAL_UART_Receive+0x182>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	9300      	str	r3, [sp, #0]
 800358e:	697b      	ldr	r3, [r7, #20]
 8003590:	2200      	movs	r2, #0
 8003592:	2120      	movs	r1, #32
 8003594:	68f8      	ldr	r0, [r7, #12]
 8003596:	f000 ff7e 	bl	8004496 <UART_WaitOnFlagUntilTimeout>
 800359a:	4603      	mov	r3, r0
 800359c:	2b00      	cmp	r3, #0
 800359e:	d001      	beq.n	80035a4 <HAL_UART_Receive+0x134>
      {
        return HAL_TIMEOUT;
 80035a0:	2303      	movs	r3, #3
 80035a2:	e032      	b.n	800360a <HAL_UART_Receive+0x19a>
      }
      if (pdata8bits == NULL)
 80035a4:	69fb      	ldr	r3, [r7, #28]
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d10c      	bne.n	80035c4 <HAL_UART_Receive+0x154>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80035b0:	b29a      	uxth	r2, r3
 80035b2:	8a7b      	ldrh	r3, [r7, #18]
 80035b4:	4013      	ands	r3, r2
 80035b6:	b29a      	uxth	r2, r3
 80035b8:	69bb      	ldr	r3, [r7, #24]
 80035ba:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80035bc:	69bb      	ldr	r3, [r7, #24]
 80035be:	3302      	adds	r3, #2
 80035c0:	61bb      	str	r3, [r7, #24]
 80035c2:	e00d      	b.n	80035e0 <HAL_UART_Receive+0x170>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80035ca:	b29b      	uxth	r3, r3
 80035cc:	b2da      	uxtb	r2, r3
 80035ce:	8a7b      	ldrh	r3, [r7, #18]
 80035d0:	b2db      	uxtb	r3, r3
 80035d2:	4013      	ands	r3, r2
 80035d4:	b2da      	uxtb	r2, r3
 80035d6:	69fb      	ldr	r3, [r7, #28]
 80035d8:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80035da:	69fb      	ldr	r3, [r7, #28]
 80035dc:	3301      	adds	r3, #1
 80035de:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80035e6:	b29b      	uxth	r3, r3
 80035e8:	3b01      	subs	r3, #1
 80035ea:	b29a      	uxth	r2, r3
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80035f8:	b29b      	uxth	r3, r3
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d1c5      	bne.n	800358a <HAL_UART_Receive+0x11a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	2220      	movs	r2, #32
 8003602:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8003604:	2300      	movs	r3, #0
 8003606:	e000      	b.n	800360a <HAL_UART_Receive+0x19a>
  }
  else
  {
    return HAL_BUSY;
 8003608:	2302      	movs	r3, #2
  }
}
 800360a:	4618      	mov	r0, r3
 800360c:	3720      	adds	r7, #32
 800360e:	46bd      	mov	sp, r7
 8003610:	bd80      	pop	{r7, pc}

08003612 <HAL_UART_Abort>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Abort(UART_HandleTypeDef *huart)
{
 8003612:	b580      	push	{r7, lr}
 8003614:	b0a0      	sub	sp, #128	; 0x80
 8003616:	af00      	add	r7, sp, #0
 8003618:	6078      	str	r0, [r7, #4]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                          USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE | USART_CR3_RXFTIE | USART_CR3_TXFTIE);
#else
  /* Disable TXEIE, TCIE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_TCIE));
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	65fb      	str	r3, [r7, #92]	; 0x5c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003620:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003622:	e853 3f00 	ldrex	r3, [r3]
 8003626:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8003628:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800362a:	f423 73f0 	bic.w	r3, r3, #480	; 0x1e0
 800362e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	461a      	mov	r2, r3
 8003636:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003638:	66bb      	str	r3, [r7, #104]	; 0x68
 800363a:	667a      	str	r2, [r7, #100]	; 0x64
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800363c:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800363e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003640:	e841 2300 	strex	r3, r2, [r1]
 8003644:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8003646:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003648:	2b00      	cmp	r3, #0
 800364a:	d1e6      	bne.n	800361a <HAL_UART_Abort+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	3308      	adds	r3, #8
 8003652:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003654:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003656:	e853 3f00 	ldrex	r3, [r3]
 800365a:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800365c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800365e:	f023 0301 	bic.w	r3, r3, #1
 8003662:	67bb      	str	r3, [r7, #120]	; 0x78
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	3308      	adds	r3, #8
 800366a:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800366c:	657a      	str	r2, [r7, #84]	; 0x54
 800366e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003670:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8003672:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003674:	e841 2300 	strex	r3, r2, [r1]
 8003678:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800367a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800367c:	2b00      	cmp	r3, #0
 800367e:	d1e5      	bne.n	800364c <HAL_UART_Abort+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003684:	2b01      	cmp	r3, #1
 8003686:	d118      	bne.n	80036ba <HAL_UART_Abort+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800368e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003690:	e853 3f00 	ldrex	r3, [r3]
 8003694:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003696:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003698:	f023 0310 	bic.w	r3, r3, #16
 800369c:	677b      	str	r3, [r7, #116]	; 0x74
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	461a      	mov	r2, r3
 80036a4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80036a6:	643b      	str	r3, [r7, #64]	; 0x40
 80036a8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036aa:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80036ac:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80036ae:	e841 2300 	strex	r3, r2, [r1]
 80036b2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80036b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d1e6      	bne.n	8003688 <HAL_UART_Abort+0x76>
  }

  /* Abort the UART DMA Tx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	689b      	ldr	r3, [r3, #8]
 80036c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036c4:	2b80      	cmp	r3, #128	; 0x80
 80036c6:	d137      	bne.n	8003738 <HAL_UART_Abort+0x126>
  {
    /* Disable the UART DMA Tx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	3308      	adds	r3, #8
 80036ce:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036d0:	6a3b      	ldr	r3, [r7, #32]
 80036d2:	e853 3f00 	ldrex	r3, [r3]
 80036d6:	61fb      	str	r3, [r7, #28]
   return(result);
 80036d8:	69fb      	ldr	r3, [r7, #28]
 80036da:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80036de:	673b      	str	r3, [r7, #112]	; 0x70
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	3308      	adds	r3, #8
 80036e6:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80036e8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80036ea:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036ec:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80036ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80036f0:	e841 2300 	strex	r3, r2, [r1]
 80036f4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80036f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d1e5      	bne.n	80036c8 <HAL_UART_Abort+0xb6>

    /* Abort the UART DMA Tx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmatx != NULL)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003700:	2b00      	cmp	r3, #0
 8003702:	d019      	beq.n	8003738 <HAL_UART_Abort+0x126>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = NULL;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003708:	2200      	movs	r2, #0
 800370a:	639a      	str	r2, [r3, #56]	; 0x38

      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003710:	4618      	mov	r0, r3
 8003712:	f7fe fb2c 	bl	8001d6e <HAL_DMA_Abort>
 8003716:	4603      	mov	r3, r0
 8003718:	2b00      	cmp	r3, #0
 800371a:	d00d      	beq.n	8003738 <HAL_UART_Abort+0x126>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003720:	4618      	mov	r0, r3
 8003722:	f7fe fba3 	bl	8001e6c <HAL_DMA_GetError>
 8003726:	4603      	mov	r3, r0
 8003728:	2b20      	cmp	r3, #32
 800372a:	d105      	bne.n	8003738 <HAL_UART_Abort+0x126>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2210      	movs	r2, #16
 8003730:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8003734:	2303      	movs	r3, #3
 8003736:	e062      	b.n	80037fe <HAL_UART_Abort+0x1ec>
      }
    }
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	689b      	ldr	r3, [r3, #8]
 800373e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003742:	2b40      	cmp	r3, #64	; 0x40
 8003744:	d137      	bne.n	80037b6 <HAL_UART_Abort+0x1a4>
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	3308      	adds	r3, #8
 800374c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	e853 3f00 	ldrex	r3, [r3]
 8003754:	60bb      	str	r3, [r7, #8]
   return(result);
 8003756:	68bb      	ldr	r3, [r7, #8]
 8003758:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800375c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	3308      	adds	r3, #8
 8003764:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003766:	61ba      	str	r2, [r7, #24]
 8003768:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800376a:	6979      	ldr	r1, [r7, #20]
 800376c:	69ba      	ldr	r2, [r7, #24]
 800376e:	e841 2300 	strex	r3, r2, [r1]
 8003772:	613b      	str	r3, [r7, #16]
   return(result);
 8003774:	693b      	ldr	r3, [r7, #16]
 8003776:	2b00      	cmp	r3, #0
 8003778:	d1e5      	bne.n	8003746 <HAL_UART_Abort+0x134>

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800377e:	2b00      	cmp	r3, #0
 8003780:	d019      	beq.n	80037b6 <HAL_UART_Abort+0x1a4>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003786:	2200      	movs	r2, #0
 8003788:	639a      	str	r2, [r3, #56]	; 0x38

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800378e:	4618      	mov	r0, r3
 8003790:	f7fe faed 	bl	8001d6e <HAL_DMA_Abort>
 8003794:	4603      	mov	r3, r0
 8003796:	2b00      	cmp	r3, #0
 8003798:	d00d      	beq.n	80037b6 <HAL_UART_Abort+0x1a4>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800379e:	4618      	mov	r0, r3
 80037a0:	f7fe fb64 	bl	8001e6c <HAL_DMA_GetError>
 80037a4:	4603      	mov	r3, r0
 80037a6:	2b20      	cmp	r3, #32
 80037a8:	d105      	bne.n	80037b6 <HAL_UART_Abort+0x1a4>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	2210      	movs	r2, #16
 80037ae:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80037b2:	2303      	movs	r3, #3
 80037b4:	e023      	b.n	80037fe <HAL_UART_Abort+0x1ec>
      }
    }
  }

  /* Reset Tx and Rx transfer counters */
  huart->TxXferCount = 0U;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	2200      	movs	r2, #0
 80037ba:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
  huart->RxXferCount = 0U;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	2200      	movs	r2, #0
 80037c2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	220f      	movs	r2, #15
 80037cc:	621a      	str	r2, [r3, #32]
    __HAL_UART_SEND_REQ(huart, UART_TXDATA_FLUSH_REQUEST);
  }
#endif /* USART_CR1_FIFOEN */

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	8b1b      	ldrh	r3, [r3, #24]
 80037d4:	b29a      	uxth	r2, r3
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f042 0208 	orr.w	r2, r2, #8
 80037de:	b292      	uxth	r2, r2
 80037e0:	831a      	strh	r2, [r3, #24]

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	2220      	movs	r2, #32
 80037e6:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2220      	movs	r2, #32
 80037ec:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	2200      	movs	r2, #0
 80037f2:	661a      	str	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2200      	movs	r2, #0
 80037f8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80037fc:	2300      	movs	r3, #0
}
 80037fe:	4618      	mov	r0, r3
 8003800:	3780      	adds	r7, #128	; 0x80
 8003802:	46bd      	mov	sp, r7
 8003804:	bd80      	pop	{r7, pc}
	...

08003808 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003808:	b580      	push	{r7, lr}
 800380a:	b0ba      	sub	sp, #232	; 0xe8
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	69db      	ldr	r3, [r3, #28]
 8003816:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	689b      	ldr	r3, [r3, #8]
 800382a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800382e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8003832:	f640 030f 	movw	r3, #2063	; 0x80f
 8003836:	4013      	ands	r3, r2
 8003838:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800383c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003840:	2b00      	cmp	r3, #0
 8003842:	d115      	bne.n	8003870 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003844:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003848:	f003 0320 	and.w	r3, r3, #32
 800384c:	2b00      	cmp	r3, #0
 800384e:	d00f      	beq.n	8003870 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003850:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003854:	f003 0320 	and.w	r3, r3, #32
 8003858:	2b00      	cmp	r3, #0
 800385a:	d009      	beq.n	8003870 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003860:	2b00      	cmp	r3, #0
 8003862:	f000 82a6 	beq.w	8003db2 <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800386a:	6878      	ldr	r0, [r7, #4]
 800386c:	4798      	blx	r3
      }
      return;
 800386e:	e2a0      	b.n	8003db2 <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8003870:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003874:	2b00      	cmp	r3, #0
 8003876:	f000 8117 	beq.w	8003aa8 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800387a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800387e:	f003 0301 	and.w	r3, r3, #1
 8003882:	2b00      	cmp	r3, #0
 8003884:	d106      	bne.n	8003894 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003886:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800388a:	4b85      	ldr	r3, [pc, #532]	; (8003aa0 <HAL_UART_IRQHandler+0x298>)
 800388c:	4013      	ands	r3, r2
 800388e:	2b00      	cmp	r3, #0
 8003890:	f000 810a 	beq.w	8003aa8 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003894:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003898:	f003 0301 	and.w	r3, r3, #1
 800389c:	2b00      	cmp	r3, #0
 800389e:	d011      	beq.n	80038c4 <HAL_UART_IRQHandler+0xbc>
 80038a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80038a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d00b      	beq.n	80038c4 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	2201      	movs	r2, #1
 80038b2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80038ba:	f043 0201 	orr.w	r2, r3, #1
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80038c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80038c8:	f003 0302 	and.w	r3, r3, #2
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d011      	beq.n	80038f4 <HAL_UART_IRQHandler+0xec>
 80038d0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80038d4:	f003 0301 	and.w	r3, r3, #1
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d00b      	beq.n	80038f4 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	2202      	movs	r2, #2
 80038e2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80038ea:	f043 0204 	orr.w	r2, r3, #4
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80038f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80038f8:	f003 0304 	and.w	r3, r3, #4
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d011      	beq.n	8003924 <HAL_UART_IRQHandler+0x11c>
 8003900:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003904:	f003 0301 	and.w	r3, r3, #1
 8003908:	2b00      	cmp	r3, #0
 800390a:	d00b      	beq.n	8003924 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	2204      	movs	r2, #4
 8003912:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800391a:	f043 0202 	orr.w	r2, r3, #2
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003924:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003928:	f003 0308 	and.w	r3, r3, #8
 800392c:	2b00      	cmp	r3, #0
 800392e:	d017      	beq.n	8003960 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003930:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003934:	f003 0320 	and.w	r3, r3, #32
 8003938:	2b00      	cmp	r3, #0
 800393a:	d105      	bne.n	8003948 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800393c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003940:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003944:	2b00      	cmp	r3, #0
 8003946:	d00b      	beq.n	8003960 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	2208      	movs	r2, #8
 800394e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003956:	f043 0208 	orr.w	r2, r3, #8
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003960:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003964:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003968:	2b00      	cmp	r3, #0
 800396a:	d012      	beq.n	8003992 <HAL_UART_IRQHandler+0x18a>
 800396c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003970:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003974:	2b00      	cmp	r3, #0
 8003976:	d00c      	beq.n	8003992 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003980:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003988:	f043 0220 	orr.w	r2, r3, #32
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003998:	2b00      	cmp	r3, #0
 800399a:	f000 820c 	beq.w	8003db6 <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800399e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80039a2:	f003 0320 	and.w	r3, r3, #32
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d00d      	beq.n	80039c6 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80039aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80039ae:	f003 0320 	and.w	r3, r3, #32
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d007      	beq.n	80039c6 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d003      	beq.n	80039c6 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80039c2:	6878      	ldr	r0, [r7, #4]
 80039c4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80039cc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	689b      	ldr	r3, [r3, #8]
 80039d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039da:	2b40      	cmp	r3, #64	; 0x40
 80039dc:	d005      	beq.n	80039ea <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80039de:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80039e2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d04f      	beq.n	8003a8a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80039ea:	6878      	ldr	r0, [r7, #4]
 80039ec:	f000 fe17 	bl	800461e <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	689b      	ldr	r3, [r3, #8]
 80039f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039fa:	2b40      	cmp	r3, #64	; 0x40
 80039fc:	d141      	bne.n	8003a82 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	3308      	adds	r3, #8
 8003a04:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a08:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003a0c:	e853 3f00 	ldrex	r3, [r3]
 8003a10:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003a14:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003a18:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003a1c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	3308      	adds	r3, #8
 8003a26:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003a2a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003a2e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a32:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003a36:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003a3a:	e841 2300 	strex	r3, r2, [r1]
 8003a3e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003a42:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d1d9      	bne.n	80039fe <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d013      	beq.n	8003a7a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a56:	4a13      	ldr	r2, [pc, #76]	; (8003aa4 <HAL_UART_IRQHandler+0x29c>)
 8003a58:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a5e:	4618      	mov	r0, r3
 8003a60:	f7fe f9c3 	bl	8001dea <HAL_DMA_Abort_IT>
 8003a64:	4603      	mov	r3, r0
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d017      	beq.n	8003a9a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a70:	687a      	ldr	r2, [r7, #4]
 8003a72:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8003a74:	4610      	mov	r0, r2
 8003a76:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a78:	e00f      	b.n	8003a9a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003a7a:	6878      	ldr	r0, [r7, #4]
 8003a7c:	f000 f9b0 	bl	8003de0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a80:	e00b      	b.n	8003a9a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003a82:	6878      	ldr	r0, [r7, #4]
 8003a84:	f000 f9ac 	bl	8003de0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a88:	e007      	b.n	8003a9a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003a8a:	6878      	ldr	r0, [r7, #4]
 8003a8c:	f000 f9a8 	bl	8003de0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2200      	movs	r2, #0
 8003a94:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8003a98:	e18d      	b.n	8003db6 <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a9a:	bf00      	nop
    return;
 8003a9c:	e18b      	b.n	8003db6 <HAL_UART_IRQHandler+0x5ae>
 8003a9e:	bf00      	nop
 8003aa0:	04000120 	.word	0x04000120
 8003aa4:	080046e5 	.word	0x080046e5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003aac:	2b01      	cmp	r3, #1
 8003aae:	f040 8146 	bne.w	8003d3e <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003ab2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ab6:	f003 0310 	and.w	r3, r3, #16
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	f000 813f 	beq.w	8003d3e <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003ac0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003ac4:	f003 0310 	and.w	r3, r3, #16
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	f000 8138 	beq.w	8003d3e <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	2210      	movs	r2, #16
 8003ad4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	689b      	ldr	r3, [r3, #8]
 8003adc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ae0:	2b40      	cmp	r3, #64	; 0x40
 8003ae2:	f040 80b4 	bne.w	8003c4e <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	685b      	ldr	r3, [r3, #4]
 8003aee:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003af2:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	f000 815f 	beq.w	8003dba <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003b02:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003b06:	429a      	cmp	r2, r3
 8003b08:	f080 8157 	bcs.w	8003dba <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003b12:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f003 0320 	and.w	r3, r3, #32
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	f040 8085 	bne.w	8003c32 <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b30:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003b34:	e853 3f00 	ldrex	r3, [r3]
 8003b38:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003b3c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003b40:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003b44:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	461a      	mov	r2, r3
 8003b4e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003b52:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003b56:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b5a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003b5e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003b62:	e841 2300 	strex	r3, r2, [r1]
 8003b66:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003b6a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d1da      	bne.n	8003b28 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	3308      	adds	r3, #8
 8003b78:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b7a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003b7c:	e853 3f00 	ldrex	r3, [r3]
 8003b80:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003b82:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003b84:	f023 0301 	bic.w	r3, r3, #1
 8003b88:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	3308      	adds	r3, #8
 8003b92:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003b96:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003b9a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b9c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003b9e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003ba2:	e841 2300 	strex	r3, r2, [r1]
 8003ba6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003ba8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d1e1      	bne.n	8003b72 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	3308      	adds	r3, #8
 8003bb4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bb6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003bb8:	e853 3f00 	ldrex	r3, [r3]
 8003bbc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003bbe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003bc0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003bc4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	3308      	adds	r3, #8
 8003bce:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003bd2:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003bd4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bd6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003bd8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003bda:	e841 2300 	strex	r3, r2, [r1]
 8003bde:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003be0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d1e3      	bne.n	8003bae <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	2220      	movs	r2, #32
 8003bea:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2200      	movs	r2, #0
 8003bf0:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bf8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003bfa:	e853 3f00 	ldrex	r3, [r3]
 8003bfe:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003c00:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c02:	f023 0310 	bic.w	r3, r3, #16
 8003c06:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	461a      	mov	r2, r3
 8003c10:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003c14:	65bb      	str	r3, [r7, #88]	; 0x58
 8003c16:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c18:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003c1a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003c1c:	e841 2300 	strex	r3, r2, [r1]
 8003c20:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003c22:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d1e4      	bne.n	8003bf2 <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c2c:	4618      	mov	r0, r3
 8003c2e:	f7fe f89e 	bl	8001d6e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003c3e:	b29b      	uxth	r3, r3
 8003c40:	1ad3      	subs	r3, r2, r3
 8003c42:	b29b      	uxth	r3, r3
 8003c44:	4619      	mov	r1, r3
 8003c46:	6878      	ldr	r0, [r7, #4]
 8003c48:	f000 f8d4 	bl	8003df4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003c4c:	e0b5      	b.n	8003dba <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003c5a:	b29b      	uxth	r3, r3
 8003c5c:	1ad3      	subs	r3, r2, r3
 8003c5e:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003c68:	b29b      	uxth	r3, r3
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	f000 80a7 	beq.w	8003dbe <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 8003c70:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	f000 80a2 	beq.w	8003dbe <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c82:	e853 3f00 	ldrex	r3, [r3]
 8003c86:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003c88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c8a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003c8e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	461a      	mov	r2, r3
 8003c98:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003c9c:	647b      	str	r3, [r7, #68]	; 0x44
 8003c9e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ca0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003ca2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003ca4:	e841 2300 	strex	r3, r2, [r1]
 8003ca8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003caa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d1e4      	bne.n	8003c7a <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	3308      	adds	r3, #8
 8003cb6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cba:	e853 3f00 	ldrex	r3, [r3]
 8003cbe:	623b      	str	r3, [r7, #32]
   return(result);
 8003cc0:	6a3b      	ldr	r3, [r7, #32]
 8003cc2:	f023 0301 	bic.w	r3, r3, #1
 8003cc6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	3308      	adds	r3, #8
 8003cd0:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003cd4:	633a      	str	r2, [r7, #48]	; 0x30
 8003cd6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cd8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003cda:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003cdc:	e841 2300 	strex	r3, r2, [r1]
 8003ce0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003ce2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d1e3      	bne.n	8003cb0 <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2220      	movs	r2, #32
 8003cec:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d00:	693b      	ldr	r3, [r7, #16]
 8003d02:	e853 3f00 	ldrex	r3, [r3]
 8003d06:	60fb      	str	r3, [r7, #12]
   return(result);
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	f023 0310 	bic.w	r3, r3, #16
 8003d0e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	461a      	mov	r2, r3
 8003d18:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003d1c:	61fb      	str	r3, [r7, #28]
 8003d1e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d20:	69b9      	ldr	r1, [r7, #24]
 8003d22:	69fa      	ldr	r2, [r7, #28]
 8003d24:	e841 2300 	strex	r3, r2, [r1]
 8003d28:	617b      	str	r3, [r7, #20]
   return(result);
 8003d2a:	697b      	ldr	r3, [r7, #20]
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d1e4      	bne.n	8003cfa <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003d30:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003d34:	4619      	mov	r1, r3
 8003d36:	6878      	ldr	r0, [r7, #4]
 8003d38:	f000 f85c 	bl	8003df4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003d3c:	e03f      	b.n	8003dbe <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003d3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d42:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d00e      	beq.n	8003d68 <HAL_UART_IRQHandler+0x560>
 8003d4a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003d4e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d008      	beq.n	8003d68 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003d5e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003d60:	6878      	ldr	r0, [r7, #4]
 8003d62:	f000 fcff 	bl	8004764 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003d66:	e02d      	b.n	8003dc4 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003d68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d00e      	beq.n	8003d92 <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003d74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003d78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d008      	beq.n	8003d92 <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d01c      	beq.n	8003dc2 <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003d8c:	6878      	ldr	r0, [r7, #4]
 8003d8e:	4798      	blx	r3
    }
    return;
 8003d90:	e017      	b.n	8003dc2 <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003d92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d012      	beq.n	8003dc4 <HAL_UART_IRQHandler+0x5bc>
 8003d9e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003da2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d00c      	beq.n	8003dc4 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 8003daa:	6878      	ldr	r0, [r7, #4]
 8003dac:	f000 fcb0 	bl	8004710 <UART_EndTransmit_IT>
    return;
 8003db0:	e008      	b.n	8003dc4 <HAL_UART_IRQHandler+0x5bc>
      return;
 8003db2:	bf00      	nop
 8003db4:	e006      	b.n	8003dc4 <HAL_UART_IRQHandler+0x5bc>
    return;
 8003db6:	bf00      	nop
 8003db8:	e004      	b.n	8003dc4 <HAL_UART_IRQHandler+0x5bc>
      return;
 8003dba:	bf00      	nop
 8003dbc:	e002      	b.n	8003dc4 <HAL_UART_IRQHandler+0x5bc>
      return;
 8003dbe:	bf00      	nop
 8003dc0:	e000      	b.n	8003dc4 <HAL_UART_IRQHandler+0x5bc>
    return;
 8003dc2:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8003dc4:	37e8      	adds	r7, #232	; 0xe8
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	bd80      	pop	{r7, pc}
 8003dca:	bf00      	nop

08003dcc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003dcc:	b480      	push	{r7}
 8003dce:	b083      	sub	sp, #12
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003dd4:	bf00      	nop
 8003dd6:	370c      	adds	r7, #12
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dde:	4770      	bx	lr

08003de0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003de0:	b480      	push	{r7}
 8003de2:	b083      	sub	sp, #12
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003de8:	bf00      	nop
 8003dea:	370c      	adds	r7, #12
 8003dec:	46bd      	mov	sp, r7
 8003dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df2:	4770      	bx	lr

08003df4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003df4:	b480      	push	{r7}
 8003df6:	b083      	sub	sp, #12
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
 8003dfc:	460b      	mov	r3, r1
 8003dfe:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003e00:	bf00      	nop
 8003e02:	370c      	adds	r7, #12
 8003e04:	46bd      	mov	sp, r7
 8003e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0a:	4770      	bx	lr

08003e0c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003e0c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003e10:	b08a      	sub	sp, #40	; 0x28
 8003e12:	af00      	add	r7, sp, #0
 8003e14:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003e16:	2300      	movs	r3, #0
 8003e18:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	689a      	ldr	r2, [r3, #8]
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	691b      	ldr	r3, [r3, #16]
 8003e24:	431a      	orrs	r2, r3
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	695b      	ldr	r3, [r3, #20]
 8003e2a:	431a      	orrs	r2, r3
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	69db      	ldr	r3, [r3, #28]
 8003e30:	4313      	orrs	r3, r2
 8003e32:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	681a      	ldr	r2, [r3, #0]
 8003e3a:	4b9e      	ldr	r3, [pc, #632]	; (80040b4 <UART_SetConfig+0x2a8>)
 8003e3c:	4013      	ands	r3, r2
 8003e3e:	68fa      	ldr	r2, [r7, #12]
 8003e40:	6812      	ldr	r2, [r2, #0]
 8003e42:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003e44:	430b      	orrs	r3, r1
 8003e46:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	685b      	ldr	r3, [r3, #4]
 8003e4e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	68da      	ldr	r2, [r3, #12]
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	430a      	orrs	r2, r1
 8003e5c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	699b      	ldr	r3, [r3, #24]
 8003e62:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	4a93      	ldr	r2, [pc, #588]	; (80040b8 <UART_SetConfig+0x2ac>)
 8003e6a:	4293      	cmp	r3, r2
 8003e6c:	d004      	beq.n	8003e78 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	6a1b      	ldr	r3, [r3, #32]
 8003e72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e74:	4313      	orrs	r3, r2
 8003e76:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	689b      	ldr	r3, [r3, #8]
 8003e7e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e88:	430a      	orrs	r2, r1
 8003e8a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	4a8a      	ldr	r2, [pc, #552]	; (80040bc <UART_SetConfig+0x2b0>)
 8003e92:	4293      	cmp	r3, r2
 8003e94:	d126      	bne.n	8003ee4 <UART_SetConfig+0xd8>
 8003e96:	4b8a      	ldr	r3, [pc, #552]	; (80040c0 <UART_SetConfig+0x2b4>)
 8003e98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e9c:	f003 0303 	and.w	r3, r3, #3
 8003ea0:	2b03      	cmp	r3, #3
 8003ea2:	d81b      	bhi.n	8003edc <UART_SetConfig+0xd0>
 8003ea4:	a201      	add	r2, pc, #4	; (adr r2, 8003eac <UART_SetConfig+0xa0>)
 8003ea6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003eaa:	bf00      	nop
 8003eac:	08003ebd 	.word	0x08003ebd
 8003eb0:	08003ecd 	.word	0x08003ecd
 8003eb4:	08003ec5 	.word	0x08003ec5
 8003eb8:	08003ed5 	.word	0x08003ed5
 8003ebc:	2301      	movs	r3, #1
 8003ebe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ec2:	e0ab      	b.n	800401c <UART_SetConfig+0x210>
 8003ec4:	2302      	movs	r3, #2
 8003ec6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003eca:	e0a7      	b.n	800401c <UART_SetConfig+0x210>
 8003ecc:	2304      	movs	r3, #4
 8003ece:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ed2:	e0a3      	b.n	800401c <UART_SetConfig+0x210>
 8003ed4:	2308      	movs	r3, #8
 8003ed6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003eda:	e09f      	b.n	800401c <UART_SetConfig+0x210>
 8003edc:	2310      	movs	r3, #16
 8003ede:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ee2:	e09b      	b.n	800401c <UART_SetConfig+0x210>
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	4a76      	ldr	r2, [pc, #472]	; (80040c4 <UART_SetConfig+0x2b8>)
 8003eea:	4293      	cmp	r3, r2
 8003eec:	d138      	bne.n	8003f60 <UART_SetConfig+0x154>
 8003eee:	4b74      	ldr	r3, [pc, #464]	; (80040c0 <UART_SetConfig+0x2b4>)
 8003ef0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ef4:	f003 030c 	and.w	r3, r3, #12
 8003ef8:	2b0c      	cmp	r3, #12
 8003efa:	d82d      	bhi.n	8003f58 <UART_SetConfig+0x14c>
 8003efc:	a201      	add	r2, pc, #4	; (adr r2, 8003f04 <UART_SetConfig+0xf8>)
 8003efe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f02:	bf00      	nop
 8003f04:	08003f39 	.word	0x08003f39
 8003f08:	08003f59 	.word	0x08003f59
 8003f0c:	08003f59 	.word	0x08003f59
 8003f10:	08003f59 	.word	0x08003f59
 8003f14:	08003f49 	.word	0x08003f49
 8003f18:	08003f59 	.word	0x08003f59
 8003f1c:	08003f59 	.word	0x08003f59
 8003f20:	08003f59 	.word	0x08003f59
 8003f24:	08003f41 	.word	0x08003f41
 8003f28:	08003f59 	.word	0x08003f59
 8003f2c:	08003f59 	.word	0x08003f59
 8003f30:	08003f59 	.word	0x08003f59
 8003f34:	08003f51 	.word	0x08003f51
 8003f38:	2300      	movs	r3, #0
 8003f3a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f3e:	e06d      	b.n	800401c <UART_SetConfig+0x210>
 8003f40:	2302      	movs	r3, #2
 8003f42:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f46:	e069      	b.n	800401c <UART_SetConfig+0x210>
 8003f48:	2304      	movs	r3, #4
 8003f4a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f4e:	e065      	b.n	800401c <UART_SetConfig+0x210>
 8003f50:	2308      	movs	r3, #8
 8003f52:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f56:	e061      	b.n	800401c <UART_SetConfig+0x210>
 8003f58:	2310      	movs	r3, #16
 8003f5a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f5e:	e05d      	b.n	800401c <UART_SetConfig+0x210>
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	4a58      	ldr	r2, [pc, #352]	; (80040c8 <UART_SetConfig+0x2bc>)
 8003f66:	4293      	cmp	r3, r2
 8003f68:	d125      	bne.n	8003fb6 <UART_SetConfig+0x1aa>
 8003f6a:	4b55      	ldr	r3, [pc, #340]	; (80040c0 <UART_SetConfig+0x2b4>)
 8003f6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f70:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003f74:	2b30      	cmp	r3, #48	; 0x30
 8003f76:	d016      	beq.n	8003fa6 <UART_SetConfig+0x19a>
 8003f78:	2b30      	cmp	r3, #48	; 0x30
 8003f7a:	d818      	bhi.n	8003fae <UART_SetConfig+0x1a2>
 8003f7c:	2b20      	cmp	r3, #32
 8003f7e:	d00a      	beq.n	8003f96 <UART_SetConfig+0x18a>
 8003f80:	2b20      	cmp	r3, #32
 8003f82:	d814      	bhi.n	8003fae <UART_SetConfig+0x1a2>
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d002      	beq.n	8003f8e <UART_SetConfig+0x182>
 8003f88:	2b10      	cmp	r3, #16
 8003f8a:	d008      	beq.n	8003f9e <UART_SetConfig+0x192>
 8003f8c:	e00f      	b.n	8003fae <UART_SetConfig+0x1a2>
 8003f8e:	2300      	movs	r3, #0
 8003f90:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f94:	e042      	b.n	800401c <UART_SetConfig+0x210>
 8003f96:	2302      	movs	r3, #2
 8003f98:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f9c:	e03e      	b.n	800401c <UART_SetConfig+0x210>
 8003f9e:	2304      	movs	r3, #4
 8003fa0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003fa4:	e03a      	b.n	800401c <UART_SetConfig+0x210>
 8003fa6:	2308      	movs	r3, #8
 8003fa8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003fac:	e036      	b.n	800401c <UART_SetConfig+0x210>
 8003fae:	2310      	movs	r3, #16
 8003fb0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003fb4:	e032      	b.n	800401c <UART_SetConfig+0x210>
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	4a3f      	ldr	r2, [pc, #252]	; (80040b8 <UART_SetConfig+0x2ac>)
 8003fbc:	4293      	cmp	r3, r2
 8003fbe:	d12a      	bne.n	8004016 <UART_SetConfig+0x20a>
 8003fc0:	4b3f      	ldr	r3, [pc, #252]	; (80040c0 <UART_SetConfig+0x2b4>)
 8003fc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fc6:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003fca:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003fce:	d01a      	beq.n	8004006 <UART_SetConfig+0x1fa>
 8003fd0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003fd4:	d81b      	bhi.n	800400e <UART_SetConfig+0x202>
 8003fd6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003fda:	d00c      	beq.n	8003ff6 <UART_SetConfig+0x1ea>
 8003fdc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003fe0:	d815      	bhi.n	800400e <UART_SetConfig+0x202>
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d003      	beq.n	8003fee <UART_SetConfig+0x1e2>
 8003fe6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003fea:	d008      	beq.n	8003ffe <UART_SetConfig+0x1f2>
 8003fec:	e00f      	b.n	800400e <UART_SetConfig+0x202>
 8003fee:	2300      	movs	r3, #0
 8003ff0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ff4:	e012      	b.n	800401c <UART_SetConfig+0x210>
 8003ff6:	2302      	movs	r3, #2
 8003ff8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ffc:	e00e      	b.n	800401c <UART_SetConfig+0x210>
 8003ffe:	2304      	movs	r3, #4
 8004000:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004004:	e00a      	b.n	800401c <UART_SetConfig+0x210>
 8004006:	2308      	movs	r3, #8
 8004008:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800400c:	e006      	b.n	800401c <UART_SetConfig+0x210>
 800400e:	2310      	movs	r3, #16
 8004010:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004014:	e002      	b.n	800401c <UART_SetConfig+0x210>
 8004016:	2310      	movs	r3, #16
 8004018:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	4a25      	ldr	r2, [pc, #148]	; (80040b8 <UART_SetConfig+0x2ac>)
 8004022:	4293      	cmp	r3, r2
 8004024:	f040 808a 	bne.w	800413c <UART_SetConfig+0x330>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004028:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800402c:	2b08      	cmp	r3, #8
 800402e:	d824      	bhi.n	800407a <UART_SetConfig+0x26e>
 8004030:	a201      	add	r2, pc, #4	; (adr r2, 8004038 <UART_SetConfig+0x22c>)
 8004032:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004036:	bf00      	nop
 8004038:	0800405d 	.word	0x0800405d
 800403c:	0800407b 	.word	0x0800407b
 8004040:	08004065 	.word	0x08004065
 8004044:	0800407b 	.word	0x0800407b
 8004048:	0800406b 	.word	0x0800406b
 800404c:	0800407b 	.word	0x0800407b
 8004050:	0800407b 	.word	0x0800407b
 8004054:	0800407b 	.word	0x0800407b
 8004058:	08004073 	.word	0x08004073
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800405c:	f7fe ff14 	bl	8002e88 <HAL_RCC_GetPCLK1Freq>
 8004060:	61f8      	str	r0, [r7, #28]
        break;
 8004062:	e010      	b.n	8004086 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004064:	4b19      	ldr	r3, [pc, #100]	; (80040cc <UART_SetConfig+0x2c0>)
 8004066:	61fb      	str	r3, [r7, #28]
        break;
 8004068:	e00d      	b.n	8004086 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800406a:	f7fe fe75 	bl	8002d58 <HAL_RCC_GetSysClockFreq>
 800406e:	61f8      	str	r0, [r7, #28]
        break;
 8004070:	e009      	b.n	8004086 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004072:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004076:	61fb      	str	r3, [r7, #28]
        break;
 8004078:	e005      	b.n	8004086 <UART_SetConfig+0x27a>
      default:
        pclk = 0U;
 800407a:	2300      	movs	r3, #0
 800407c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800407e:	2301      	movs	r3, #1
 8004080:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004084:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004086:	69fb      	ldr	r3, [r7, #28]
 8004088:	2b00      	cmp	r3, #0
 800408a:	f000 8109 	beq.w	80042a0 <UART_SetConfig+0x494>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	685a      	ldr	r2, [r3, #4]
 8004092:	4613      	mov	r3, r2
 8004094:	005b      	lsls	r3, r3, #1
 8004096:	4413      	add	r3, r2
 8004098:	69fa      	ldr	r2, [r7, #28]
 800409a:	429a      	cmp	r2, r3
 800409c:	d305      	bcc.n	80040aa <UART_SetConfig+0x29e>
          (pclk > (4096U * huart->Init.BaudRate)))
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	685b      	ldr	r3, [r3, #4]
 80040a2:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80040a4:	69fa      	ldr	r2, [r7, #28]
 80040a6:	429a      	cmp	r2, r3
 80040a8:	d912      	bls.n	80040d0 <UART_SetConfig+0x2c4>
      {
        ret = HAL_ERROR;
 80040aa:	2301      	movs	r3, #1
 80040ac:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80040b0:	e0f6      	b.n	80042a0 <UART_SetConfig+0x494>
 80040b2:	bf00      	nop
 80040b4:	efff69f3 	.word	0xefff69f3
 80040b8:	40008000 	.word	0x40008000
 80040bc:	40013800 	.word	0x40013800
 80040c0:	40021000 	.word	0x40021000
 80040c4:	40004400 	.word	0x40004400
 80040c8:	40004800 	.word	0x40004800
 80040cc:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80040d0:	69fb      	ldr	r3, [r7, #28]
 80040d2:	2200      	movs	r2, #0
 80040d4:	461c      	mov	r4, r3
 80040d6:	4615      	mov	r5, r2
 80040d8:	f04f 0200 	mov.w	r2, #0
 80040dc:	f04f 0300 	mov.w	r3, #0
 80040e0:	022b      	lsls	r3, r5, #8
 80040e2:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80040e6:	0222      	lsls	r2, r4, #8
 80040e8:	68f9      	ldr	r1, [r7, #12]
 80040ea:	6849      	ldr	r1, [r1, #4]
 80040ec:	0849      	lsrs	r1, r1, #1
 80040ee:	2000      	movs	r0, #0
 80040f0:	4688      	mov	r8, r1
 80040f2:	4681      	mov	r9, r0
 80040f4:	eb12 0a08 	adds.w	sl, r2, r8
 80040f8:	eb43 0b09 	adc.w	fp, r3, r9
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	685b      	ldr	r3, [r3, #4]
 8004100:	2200      	movs	r2, #0
 8004102:	603b      	str	r3, [r7, #0]
 8004104:	607a      	str	r2, [r7, #4]
 8004106:	e9d7 2300 	ldrd	r2, r3, [r7]
 800410a:	4650      	mov	r0, sl
 800410c:	4659      	mov	r1, fp
 800410e:	f7fc fdbb 	bl	8000c88 <__aeabi_uldivmod>
 8004112:	4602      	mov	r2, r0
 8004114:	460b      	mov	r3, r1
 8004116:	4613      	mov	r3, r2
 8004118:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800411a:	69bb      	ldr	r3, [r7, #24]
 800411c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004120:	d308      	bcc.n	8004134 <UART_SetConfig+0x328>
 8004122:	69bb      	ldr	r3, [r7, #24]
 8004124:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004128:	d204      	bcs.n	8004134 <UART_SetConfig+0x328>
        {
          huart->Instance->BRR = usartdiv;
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	69ba      	ldr	r2, [r7, #24]
 8004130:	60da      	str	r2, [r3, #12]
 8004132:	e0b5      	b.n	80042a0 <UART_SetConfig+0x494>
        }
        else
        {
          ret = HAL_ERROR;
 8004134:	2301      	movs	r3, #1
 8004136:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800413a:	e0b1      	b.n	80042a0 <UART_SetConfig+0x494>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	69db      	ldr	r3, [r3, #28]
 8004140:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004144:	d15d      	bne.n	8004202 <UART_SetConfig+0x3f6>
  {
    switch (clocksource)
 8004146:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800414a:	2b08      	cmp	r3, #8
 800414c:	d827      	bhi.n	800419e <UART_SetConfig+0x392>
 800414e:	a201      	add	r2, pc, #4	; (adr r2, 8004154 <UART_SetConfig+0x348>)
 8004150:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004154:	08004179 	.word	0x08004179
 8004158:	08004181 	.word	0x08004181
 800415c:	08004189 	.word	0x08004189
 8004160:	0800419f 	.word	0x0800419f
 8004164:	0800418f 	.word	0x0800418f
 8004168:	0800419f 	.word	0x0800419f
 800416c:	0800419f 	.word	0x0800419f
 8004170:	0800419f 	.word	0x0800419f
 8004174:	08004197 	.word	0x08004197
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004178:	f7fe fe86 	bl	8002e88 <HAL_RCC_GetPCLK1Freq>
 800417c:	61f8      	str	r0, [r7, #28]
        break;
 800417e:	e014      	b.n	80041aa <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004180:	f7fe fe98 	bl	8002eb4 <HAL_RCC_GetPCLK2Freq>
 8004184:	61f8      	str	r0, [r7, #28]
        break;
 8004186:	e010      	b.n	80041aa <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004188:	4b4c      	ldr	r3, [pc, #304]	; (80042bc <UART_SetConfig+0x4b0>)
 800418a:	61fb      	str	r3, [r7, #28]
        break;
 800418c:	e00d      	b.n	80041aa <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800418e:	f7fe fde3 	bl	8002d58 <HAL_RCC_GetSysClockFreq>
 8004192:	61f8      	str	r0, [r7, #28]
        break;
 8004194:	e009      	b.n	80041aa <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004196:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800419a:	61fb      	str	r3, [r7, #28]
        break;
 800419c:	e005      	b.n	80041aa <UART_SetConfig+0x39e>
      default:
        pclk = 0U;
 800419e:	2300      	movs	r3, #0
 80041a0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80041a2:	2301      	movs	r3, #1
 80041a4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80041a8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80041aa:	69fb      	ldr	r3, [r7, #28]
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d077      	beq.n	80042a0 <UART_SetConfig+0x494>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80041b0:	69fb      	ldr	r3, [r7, #28]
 80041b2:	005a      	lsls	r2, r3, #1
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	685b      	ldr	r3, [r3, #4]
 80041b8:	085b      	lsrs	r3, r3, #1
 80041ba:	441a      	add	r2, r3
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	685b      	ldr	r3, [r3, #4]
 80041c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80041c4:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80041c6:	69bb      	ldr	r3, [r7, #24]
 80041c8:	2b0f      	cmp	r3, #15
 80041ca:	d916      	bls.n	80041fa <UART_SetConfig+0x3ee>
 80041cc:	69bb      	ldr	r3, [r7, #24]
 80041ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80041d2:	d212      	bcs.n	80041fa <UART_SetConfig+0x3ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80041d4:	69bb      	ldr	r3, [r7, #24]
 80041d6:	b29b      	uxth	r3, r3
 80041d8:	f023 030f 	bic.w	r3, r3, #15
 80041dc:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80041de:	69bb      	ldr	r3, [r7, #24]
 80041e0:	085b      	lsrs	r3, r3, #1
 80041e2:	b29b      	uxth	r3, r3
 80041e4:	f003 0307 	and.w	r3, r3, #7
 80041e8:	b29a      	uxth	r2, r3
 80041ea:	8afb      	ldrh	r3, [r7, #22]
 80041ec:	4313      	orrs	r3, r2
 80041ee:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	8afa      	ldrh	r2, [r7, #22]
 80041f6:	60da      	str	r2, [r3, #12]
 80041f8:	e052      	b.n	80042a0 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 80041fa:	2301      	movs	r3, #1
 80041fc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004200:	e04e      	b.n	80042a0 <UART_SetConfig+0x494>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004202:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004206:	2b08      	cmp	r3, #8
 8004208:	d827      	bhi.n	800425a <UART_SetConfig+0x44e>
 800420a:	a201      	add	r2, pc, #4	; (adr r2, 8004210 <UART_SetConfig+0x404>)
 800420c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004210:	08004235 	.word	0x08004235
 8004214:	0800423d 	.word	0x0800423d
 8004218:	08004245 	.word	0x08004245
 800421c:	0800425b 	.word	0x0800425b
 8004220:	0800424b 	.word	0x0800424b
 8004224:	0800425b 	.word	0x0800425b
 8004228:	0800425b 	.word	0x0800425b
 800422c:	0800425b 	.word	0x0800425b
 8004230:	08004253 	.word	0x08004253
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004234:	f7fe fe28 	bl	8002e88 <HAL_RCC_GetPCLK1Freq>
 8004238:	61f8      	str	r0, [r7, #28]
        break;
 800423a:	e014      	b.n	8004266 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800423c:	f7fe fe3a 	bl	8002eb4 <HAL_RCC_GetPCLK2Freq>
 8004240:	61f8      	str	r0, [r7, #28]
        break;
 8004242:	e010      	b.n	8004266 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004244:	4b1d      	ldr	r3, [pc, #116]	; (80042bc <UART_SetConfig+0x4b0>)
 8004246:	61fb      	str	r3, [r7, #28]
        break;
 8004248:	e00d      	b.n	8004266 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800424a:	f7fe fd85 	bl	8002d58 <HAL_RCC_GetSysClockFreq>
 800424e:	61f8      	str	r0, [r7, #28]
        break;
 8004250:	e009      	b.n	8004266 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004252:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004256:	61fb      	str	r3, [r7, #28]
        break;
 8004258:	e005      	b.n	8004266 <UART_SetConfig+0x45a>
      default:
        pclk = 0U;
 800425a:	2300      	movs	r3, #0
 800425c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800425e:	2301      	movs	r3, #1
 8004260:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004264:	bf00      	nop
    }

    if (pclk != 0U)
 8004266:	69fb      	ldr	r3, [r7, #28]
 8004268:	2b00      	cmp	r3, #0
 800426a:	d019      	beq.n	80042a0 <UART_SetConfig+0x494>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	685b      	ldr	r3, [r3, #4]
 8004270:	085a      	lsrs	r2, r3, #1
 8004272:	69fb      	ldr	r3, [r7, #28]
 8004274:	441a      	add	r2, r3
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	685b      	ldr	r3, [r3, #4]
 800427a:	fbb2 f3f3 	udiv	r3, r2, r3
 800427e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004280:	69bb      	ldr	r3, [r7, #24]
 8004282:	2b0f      	cmp	r3, #15
 8004284:	d909      	bls.n	800429a <UART_SetConfig+0x48e>
 8004286:	69bb      	ldr	r3, [r7, #24]
 8004288:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800428c:	d205      	bcs.n	800429a <UART_SetConfig+0x48e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800428e:	69bb      	ldr	r3, [r7, #24]
 8004290:	b29a      	uxth	r2, r3
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	60da      	str	r2, [r3, #12]
 8004298:	e002      	b.n	80042a0 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 800429a:	2301      	movs	r3, #1
 800429c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	2200      	movs	r2, #0
 80042a4:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	2200      	movs	r2, #0
 80042aa:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80042ac:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80042b0:	4618      	mov	r0, r3
 80042b2:	3728      	adds	r7, #40	; 0x28
 80042b4:	46bd      	mov	sp, r7
 80042b6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80042ba:	bf00      	nop
 80042bc:	00f42400 	.word	0x00f42400

080042c0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80042c0:	b480      	push	{r7}
 80042c2:	b083      	sub	sp, #12
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042cc:	f003 0301 	and.w	r3, r3, #1
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d00a      	beq.n	80042ea <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	685b      	ldr	r3, [r3, #4]
 80042da:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	430a      	orrs	r2, r1
 80042e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ee:	f003 0302 	and.w	r3, r3, #2
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d00a      	beq.n	800430c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	685b      	ldr	r3, [r3, #4]
 80042fc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	430a      	orrs	r2, r1
 800430a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004310:	f003 0304 	and.w	r3, r3, #4
 8004314:	2b00      	cmp	r3, #0
 8004316:	d00a      	beq.n	800432e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	685b      	ldr	r3, [r3, #4]
 800431e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	430a      	orrs	r2, r1
 800432c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004332:	f003 0308 	and.w	r3, r3, #8
 8004336:	2b00      	cmp	r3, #0
 8004338:	d00a      	beq.n	8004350 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	685b      	ldr	r3, [r3, #4]
 8004340:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	430a      	orrs	r2, r1
 800434e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004354:	f003 0310 	and.w	r3, r3, #16
 8004358:	2b00      	cmp	r3, #0
 800435a:	d00a      	beq.n	8004372 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	689b      	ldr	r3, [r3, #8]
 8004362:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	430a      	orrs	r2, r1
 8004370:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004376:	f003 0320 	and.w	r3, r3, #32
 800437a:	2b00      	cmp	r3, #0
 800437c:	d00a      	beq.n	8004394 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	689b      	ldr	r3, [r3, #8]
 8004384:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	430a      	orrs	r2, r1
 8004392:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004398:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800439c:	2b00      	cmp	r3, #0
 800439e:	d01a      	beq.n	80043d6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	685b      	ldr	r3, [r3, #4]
 80043a6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	430a      	orrs	r2, r1
 80043b4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043ba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80043be:	d10a      	bne.n	80043d6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	685b      	ldr	r3, [r3, #4]
 80043c6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	430a      	orrs	r2, r1
 80043d4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d00a      	beq.n	80043f8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	685b      	ldr	r3, [r3, #4]
 80043e8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	430a      	orrs	r2, r1
 80043f6:	605a      	str	r2, [r3, #4]
  }
}
 80043f8:	bf00      	nop
 80043fa:	370c      	adds	r7, #12
 80043fc:	46bd      	mov	sp, r7
 80043fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004402:	4770      	bx	lr

08004404 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004404:	b580      	push	{r7, lr}
 8004406:	b086      	sub	sp, #24
 8004408:	af02      	add	r7, sp, #8
 800440a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	2200      	movs	r2, #0
 8004410:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004414:	f7fd fb6a 	bl	8001aec <HAL_GetTick>
 8004418:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f003 0308 	and.w	r3, r3, #8
 8004424:	2b08      	cmp	r3, #8
 8004426:	d10e      	bne.n	8004446 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004428:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800442c:	9300      	str	r3, [sp, #0]
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	2200      	movs	r2, #0
 8004432:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004436:	6878      	ldr	r0, [r7, #4]
 8004438:	f000 f82d 	bl	8004496 <UART_WaitOnFlagUntilTimeout>
 800443c:	4603      	mov	r3, r0
 800443e:	2b00      	cmp	r3, #0
 8004440:	d001      	beq.n	8004446 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004442:	2303      	movs	r3, #3
 8004444:	e023      	b.n	800448e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f003 0304 	and.w	r3, r3, #4
 8004450:	2b04      	cmp	r3, #4
 8004452:	d10e      	bne.n	8004472 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004454:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004458:	9300      	str	r3, [sp, #0]
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	2200      	movs	r2, #0
 800445e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004462:	6878      	ldr	r0, [r7, #4]
 8004464:	f000 f817 	bl	8004496 <UART_WaitOnFlagUntilTimeout>
 8004468:	4603      	mov	r3, r0
 800446a:	2b00      	cmp	r3, #0
 800446c:	d001      	beq.n	8004472 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800446e:	2303      	movs	r3, #3
 8004470:	e00d      	b.n	800448e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	2220      	movs	r2, #32
 8004476:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2220      	movs	r2, #32
 800447c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	2200      	movs	r2, #0
 8004482:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2200      	movs	r2, #0
 8004488:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800448c:	2300      	movs	r3, #0
}
 800448e:	4618      	mov	r0, r3
 8004490:	3710      	adds	r7, #16
 8004492:	46bd      	mov	sp, r7
 8004494:	bd80      	pop	{r7, pc}

08004496 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004496:	b580      	push	{r7, lr}
 8004498:	b09c      	sub	sp, #112	; 0x70
 800449a:	af00      	add	r7, sp, #0
 800449c:	60f8      	str	r0, [r7, #12]
 800449e:	60b9      	str	r1, [r7, #8]
 80044a0:	603b      	str	r3, [r7, #0]
 80044a2:	4613      	mov	r3, r2
 80044a4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80044a6:	e0a5      	b.n	80045f4 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80044a8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80044aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044ae:	f000 80a1 	beq.w	80045f4 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80044b2:	f7fd fb1b 	bl	8001aec <HAL_GetTick>
 80044b6:	4602      	mov	r2, r0
 80044b8:	683b      	ldr	r3, [r7, #0]
 80044ba:	1ad3      	subs	r3, r2, r3
 80044bc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80044be:	429a      	cmp	r2, r3
 80044c0:	d302      	bcc.n	80044c8 <UART_WaitOnFlagUntilTimeout+0x32>
 80044c2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d13e      	bne.n	8004546 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80044d0:	e853 3f00 	ldrex	r3, [r3]
 80044d4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80044d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80044d8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80044dc:	667b      	str	r3, [r7, #100]	; 0x64
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	461a      	mov	r2, r3
 80044e4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80044e6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80044e8:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044ea:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80044ec:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80044ee:	e841 2300 	strex	r3, r2, [r1]
 80044f2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80044f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d1e6      	bne.n	80044c8 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	3308      	adds	r3, #8
 8004500:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004502:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004504:	e853 3f00 	ldrex	r3, [r3]
 8004508:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800450a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800450c:	f023 0301 	bic.w	r3, r3, #1
 8004510:	663b      	str	r3, [r7, #96]	; 0x60
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	3308      	adds	r3, #8
 8004518:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800451a:	64ba      	str	r2, [r7, #72]	; 0x48
 800451c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800451e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004520:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004522:	e841 2300 	strex	r3, r2, [r1]
 8004526:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004528:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800452a:	2b00      	cmp	r3, #0
 800452c:	d1e5      	bne.n	80044fa <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	2220      	movs	r2, #32
 8004532:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	2220      	movs	r2, #32
 8004538:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	2200      	movs	r2, #0
 800453e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8004542:	2303      	movs	r3, #3
 8004544:	e067      	b.n	8004616 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f003 0304 	and.w	r3, r3, #4
 8004550:	2b00      	cmp	r3, #0
 8004552:	d04f      	beq.n	80045f4 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	69db      	ldr	r3, [r3, #28]
 800455a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800455e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004562:	d147      	bne.n	80045f4 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800456c:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004574:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004576:	e853 3f00 	ldrex	r3, [r3]
 800457a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800457c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800457e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004582:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	461a      	mov	r2, r3
 800458a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800458c:	637b      	str	r3, [r7, #52]	; 0x34
 800458e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004590:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004592:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004594:	e841 2300 	strex	r3, r2, [r1]
 8004598:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800459a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800459c:	2b00      	cmp	r3, #0
 800459e:	d1e6      	bne.n	800456e <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	3308      	adds	r3, #8
 80045a6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045a8:	697b      	ldr	r3, [r7, #20]
 80045aa:	e853 3f00 	ldrex	r3, [r3]
 80045ae:	613b      	str	r3, [r7, #16]
   return(result);
 80045b0:	693b      	ldr	r3, [r7, #16]
 80045b2:	f023 0301 	bic.w	r3, r3, #1
 80045b6:	66bb      	str	r3, [r7, #104]	; 0x68
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	3308      	adds	r3, #8
 80045be:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80045c0:	623a      	str	r2, [r7, #32]
 80045c2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045c4:	69f9      	ldr	r1, [r7, #28]
 80045c6:	6a3a      	ldr	r2, [r7, #32]
 80045c8:	e841 2300 	strex	r3, r2, [r1]
 80045cc:	61bb      	str	r3, [r7, #24]
   return(result);
 80045ce:	69bb      	ldr	r3, [r7, #24]
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d1e5      	bne.n	80045a0 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	2220      	movs	r2, #32
 80045d8:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	2220      	movs	r2, #32
 80045de:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	2220      	movs	r2, #32
 80045e4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	2200      	movs	r2, #0
 80045ec:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80045f0:	2303      	movs	r3, #3
 80045f2:	e010      	b.n	8004616 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	69da      	ldr	r2, [r3, #28]
 80045fa:	68bb      	ldr	r3, [r7, #8]
 80045fc:	4013      	ands	r3, r2
 80045fe:	68ba      	ldr	r2, [r7, #8]
 8004600:	429a      	cmp	r2, r3
 8004602:	bf0c      	ite	eq
 8004604:	2301      	moveq	r3, #1
 8004606:	2300      	movne	r3, #0
 8004608:	b2db      	uxtb	r3, r3
 800460a:	461a      	mov	r2, r3
 800460c:	79fb      	ldrb	r3, [r7, #7]
 800460e:	429a      	cmp	r2, r3
 8004610:	f43f af4a 	beq.w	80044a8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004614:	2300      	movs	r3, #0
}
 8004616:	4618      	mov	r0, r3
 8004618:	3770      	adds	r7, #112	; 0x70
 800461a:	46bd      	mov	sp, r7
 800461c:	bd80      	pop	{r7, pc}

0800461e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800461e:	b480      	push	{r7}
 8004620:	b095      	sub	sp, #84	; 0x54
 8004622:	af00      	add	r7, sp, #0
 8004624:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800462c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800462e:	e853 3f00 	ldrex	r3, [r3]
 8004632:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004634:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004636:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800463a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	461a      	mov	r2, r3
 8004642:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004644:	643b      	str	r3, [r7, #64]	; 0x40
 8004646:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004648:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800464a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800464c:	e841 2300 	strex	r3, r2, [r1]
 8004650:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004652:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004654:	2b00      	cmp	r3, #0
 8004656:	d1e6      	bne.n	8004626 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	3308      	adds	r3, #8
 800465e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004660:	6a3b      	ldr	r3, [r7, #32]
 8004662:	e853 3f00 	ldrex	r3, [r3]
 8004666:	61fb      	str	r3, [r7, #28]
   return(result);
 8004668:	69fb      	ldr	r3, [r7, #28]
 800466a:	f023 0301 	bic.w	r3, r3, #1
 800466e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	3308      	adds	r3, #8
 8004676:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004678:	62fa      	str	r2, [r7, #44]	; 0x2c
 800467a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800467c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800467e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004680:	e841 2300 	strex	r3, r2, [r1]
 8004684:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004688:	2b00      	cmp	r3, #0
 800468a:	d1e5      	bne.n	8004658 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004690:	2b01      	cmp	r3, #1
 8004692:	d118      	bne.n	80046c6 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	e853 3f00 	ldrex	r3, [r3]
 80046a0:	60bb      	str	r3, [r7, #8]
   return(result);
 80046a2:	68bb      	ldr	r3, [r7, #8]
 80046a4:	f023 0310 	bic.w	r3, r3, #16
 80046a8:	647b      	str	r3, [r7, #68]	; 0x44
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	461a      	mov	r2, r3
 80046b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80046b2:	61bb      	str	r3, [r7, #24]
 80046b4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046b6:	6979      	ldr	r1, [r7, #20]
 80046b8:	69ba      	ldr	r2, [r7, #24]
 80046ba:	e841 2300 	strex	r3, r2, [r1]
 80046be:	613b      	str	r3, [r7, #16]
   return(result);
 80046c0:	693b      	ldr	r3, [r7, #16]
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d1e6      	bne.n	8004694 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	2220      	movs	r2, #32
 80046ca:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2200      	movs	r2, #0
 80046d0:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	2200      	movs	r2, #0
 80046d6:	665a      	str	r2, [r3, #100]	; 0x64
}
 80046d8:	bf00      	nop
 80046da:	3754      	adds	r7, #84	; 0x54
 80046dc:	46bd      	mov	sp, r7
 80046de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e2:	4770      	bx	lr

080046e4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80046e4:	b580      	push	{r7, lr}
 80046e6:	b084      	sub	sp, #16
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046f0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	2200      	movs	r2, #0
 80046f6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	2200      	movs	r2, #0
 80046fe:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004702:	68f8      	ldr	r0, [r7, #12]
 8004704:	f7ff fb6c 	bl	8003de0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004708:	bf00      	nop
 800470a:	3710      	adds	r7, #16
 800470c:	46bd      	mov	sp, r7
 800470e:	bd80      	pop	{r7, pc}

08004710 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004710:	b580      	push	{r7, lr}
 8004712:	b088      	sub	sp, #32
 8004714:	af00      	add	r7, sp, #0
 8004716:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	e853 3f00 	ldrex	r3, [r3]
 8004724:	60bb      	str	r3, [r7, #8]
   return(result);
 8004726:	68bb      	ldr	r3, [r7, #8]
 8004728:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800472c:	61fb      	str	r3, [r7, #28]
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	461a      	mov	r2, r3
 8004734:	69fb      	ldr	r3, [r7, #28]
 8004736:	61bb      	str	r3, [r7, #24]
 8004738:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800473a:	6979      	ldr	r1, [r7, #20]
 800473c:	69ba      	ldr	r2, [r7, #24]
 800473e:	e841 2300 	strex	r3, r2, [r1]
 8004742:	613b      	str	r3, [r7, #16]
   return(result);
 8004744:	693b      	ldr	r3, [r7, #16]
 8004746:	2b00      	cmp	r3, #0
 8004748:	d1e6      	bne.n	8004718 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	2220      	movs	r2, #32
 800474e:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2200      	movs	r2, #0
 8004754:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004756:	6878      	ldr	r0, [r7, #4]
 8004758:	f7ff fb38 	bl	8003dcc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800475c:	bf00      	nop
 800475e:	3720      	adds	r7, #32
 8004760:	46bd      	mov	sp, r7
 8004762:	bd80      	pop	{r7, pc}

08004764 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004764:	b480      	push	{r7}
 8004766:	b083      	sub	sp, #12
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800476c:	bf00      	nop
 800476e:	370c      	adds	r7, #12
 8004770:	46bd      	mov	sp, r7
 8004772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004776:	4770      	bx	lr

08004778 <__errno>:
 8004778:	4b01      	ldr	r3, [pc, #4]	; (8004780 <__errno+0x8>)
 800477a:	6818      	ldr	r0, [r3, #0]
 800477c:	4770      	bx	lr
 800477e:	bf00      	nop
 8004780:	2000000c 	.word	0x2000000c

08004784 <__libc_init_array>:
 8004784:	b570      	push	{r4, r5, r6, lr}
 8004786:	4d0d      	ldr	r5, [pc, #52]	; (80047bc <__libc_init_array+0x38>)
 8004788:	4c0d      	ldr	r4, [pc, #52]	; (80047c0 <__libc_init_array+0x3c>)
 800478a:	1b64      	subs	r4, r4, r5
 800478c:	10a4      	asrs	r4, r4, #2
 800478e:	2600      	movs	r6, #0
 8004790:	42a6      	cmp	r6, r4
 8004792:	d109      	bne.n	80047a8 <__libc_init_array+0x24>
 8004794:	4d0b      	ldr	r5, [pc, #44]	; (80047c4 <__libc_init_array+0x40>)
 8004796:	4c0c      	ldr	r4, [pc, #48]	; (80047c8 <__libc_init_array+0x44>)
 8004798:	f005 f968 	bl	8009a6c <_init>
 800479c:	1b64      	subs	r4, r4, r5
 800479e:	10a4      	asrs	r4, r4, #2
 80047a0:	2600      	movs	r6, #0
 80047a2:	42a6      	cmp	r6, r4
 80047a4:	d105      	bne.n	80047b2 <__libc_init_array+0x2e>
 80047a6:	bd70      	pop	{r4, r5, r6, pc}
 80047a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80047ac:	4798      	blx	r3
 80047ae:	3601      	adds	r6, #1
 80047b0:	e7ee      	b.n	8004790 <__libc_init_array+0xc>
 80047b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80047b6:	4798      	blx	r3
 80047b8:	3601      	adds	r6, #1
 80047ba:	e7f2      	b.n	80047a2 <__libc_init_array+0x1e>
 80047bc:	0800a1b4 	.word	0x0800a1b4
 80047c0:	0800a1b4 	.word	0x0800a1b4
 80047c4:	0800a1b4 	.word	0x0800a1b4
 80047c8:	0800a1b8 	.word	0x0800a1b8

080047cc <memset>:
 80047cc:	4402      	add	r2, r0
 80047ce:	4603      	mov	r3, r0
 80047d0:	4293      	cmp	r3, r2
 80047d2:	d100      	bne.n	80047d6 <memset+0xa>
 80047d4:	4770      	bx	lr
 80047d6:	f803 1b01 	strb.w	r1, [r3], #1
 80047da:	e7f9      	b.n	80047d0 <memset+0x4>

080047dc <__cvt>:
 80047dc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80047e0:	ec55 4b10 	vmov	r4, r5, d0
 80047e4:	2d00      	cmp	r5, #0
 80047e6:	460e      	mov	r6, r1
 80047e8:	4619      	mov	r1, r3
 80047ea:	462b      	mov	r3, r5
 80047ec:	bfbb      	ittet	lt
 80047ee:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80047f2:	461d      	movlt	r5, r3
 80047f4:	2300      	movge	r3, #0
 80047f6:	232d      	movlt	r3, #45	; 0x2d
 80047f8:	700b      	strb	r3, [r1, #0]
 80047fa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80047fc:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8004800:	4691      	mov	r9, r2
 8004802:	f023 0820 	bic.w	r8, r3, #32
 8004806:	bfbc      	itt	lt
 8004808:	4622      	movlt	r2, r4
 800480a:	4614      	movlt	r4, r2
 800480c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004810:	d005      	beq.n	800481e <__cvt+0x42>
 8004812:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8004816:	d100      	bne.n	800481a <__cvt+0x3e>
 8004818:	3601      	adds	r6, #1
 800481a:	2102      	movs	r1, #2
 800481c:	e000      	b.n	8004820 <__cvt+0x44>
 800481e:	2103      	movs	r1, #3
 8004820:	ab03      	add	r3, sp, #12
 8004822:	9301      	str	r3, [sp, #4]
 8004824:	ab02      	add	r3, sp, #8
 8004826:	9300      	str	r3, [sp, #0]
 8004828:	ec45 4b10 	vmov	d0, r4, r5
 800482c:	4653      	mov	r3, sl
 800482e:	4632      	mov	r2, r6
 8004830:	f001 ffb6 	bl	80067a0 <_dtoa_r>
 8004834:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004838:	4607      	mov	r7, r0
 800483a:	d102      	bne.n	8004842 <__cvt+0x66>
 800483c:	f019 0f01 	tst.w	r9, #1
 8004840:	d022      	beq.n	8004888 <__cvt+0xac>
 8004842:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004846:	eb07 0906 	add.w	r9, r7, r6
 800484a:	d110      	bne.n	800486e <__cvt+0x92>
 800484c:	783b      	ldrb	r3, [r7, #0]
 800484e:	2b30      	cmp	r3, #48	; 0x30
 8004850:	d10a      	bne.n	8004868 <__cvt+0x8c>
 8004852:	2200      	movs	r2, #0
 8004854:	2300      	movs	r3, #0
 8004856:	4620      	mov	r0, r4
 8004858:	4629      	mov	r1, r5
 800485a:	f7fc f935 	bl	8000ac8 <__aeabi_dcmpeq>
 800485e:	b918      	cbnz	r0, 8004868 <__cvt+0x8c>
 8004860:	f1c6 0601 	rsb	r6, r6, #1
 8004864:	f8ca 6000 	str.w	r6, [sl]
 8004868:	f8da 3000 	ldr.w	r3, [sl]
 800486c:	4499      	add	r9, r3
 800486e:	2200      	movs	r2, #0
 8004870:	2300      	movs	r3, #0
 8004872:	4620      	mov	r0, r4
 8004874:	4629      	mov	r1, r5
 8004876:	f7fc f927 	bl	8000ac8 <__aeabi_dcmpeq>
 800487a:	b108      	cbz	r0, 8004880 <__cvt+0xa4>
 800487c:	f8cd 900c 	str.w	r9, [sp, #12]
 8004880:	2230      	movs	r2, #48	; 0x30
 8004882:	9b03      	ldr	r3, [sp, #12]
 8004884:	454b      	cmp	r3, r9
 8004886:	d307      	bcc.n	8004898 <__cvt+0xbc>
 8004888:	9b03      	ldr	r3, [sp, #12]
 800488a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800488c:	1bdb      	subs	r3, r3, r7
 800488e:	4638      	mov	r0, r7
 8004890:	6013      	str	r3, [r2, #0]
 8004892:	b004      	add	sp, #16
 8004894:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004898:	1c59      	adds	r1, r3, #1
 800489a:	9103      	str	r1, [sp, #12]
 800489c:	701a      	strb	r2, [r3, #0]
 800489e:	e7f0      	b.n	8004882 <__cvt+0xa6>

080048a0 <__exponent>:
 80048a0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80048a2:	4603      	mov	r3, r0
 80048a4:	2900      	cmp	r1, #0
 80048a6:	bfb8      	it	lt
 80048a8:	4249      	neglt	r1, r1
 80048aa:	f803 2b02 	strb.w	r2, [r3], #2
 80048ae:	bfb4      	ite	lt
 80048b0:	222d      	movlt	r2, #45	; 0x2d
 80048b2:	222b      	movge	r2, #43	; 0x2b
 80048b4:	2909      	cmp	r1, #9
 80048b6:	7042      	strb	r2, [r0, #1]
 80048b8:	dd2a      	ble.n	8004910 <__exponent+0x70>
 80048ba:	f10d 0407 	add.w	r4, sp, #7
 80048be:	46a4      	mov	ip, r4
 80048c0:	270a      	movs	r7, #10
 80048c2:	46a6      	mov	lr, r4
 80048c4:	460a      	mov	r2, r1
 80048c6:	fb91 f6f7 	sdiv	r6, r1, r7
 80048ca:	fb07 1516 	mls	r5, r7, r6, r1
 80048ce:	3530      	adds	r5, #48	; 0x30
 80048d0:	2a63      	cmp	r2, #99	; 0x63
 80048d2:	f104 34ff 	add.w	r4, r4, #4294967295
 80048d6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80048da:	4631      	mov	r1, r6
 80048dc:	dcf1      	bgt.n	80048c2 <__exponent+0x22>
 80048de:	3130      	adds	r1, #48	; 0x30
 80048e0:	f1ae 0502 	sub.w	r5, lr, #2
 80048e4:	f804 1c01 	strb.w	r1, [r4, #-1]
 80048e8:	1c44      	adds	r4, r0, #1
 80048ea:	4629      	mov	r1, r5
 80048ec:	4561      	cmp	r1, ip
 80048ee:	d30a      	bcc.n	8004906 <__exponent+0x66>
 80048f0:	f10d 0209 	add.w	r2, sp, #9
 80048f4:	eba2 020e 	sub.w	r2, r2, lr
 80048f8:	4565      	cmp	r5, ip
 80048fa:	bf88      	it	hi
 80048fc:	2200      	movhi	r2, #0
 80048fe:	4413      	add	r3, r2
 8004900:	1a18      	subs	r0, r3, r0
 8004902:	b003      	add	sp, #12
 8004904:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004906:	f811 2b01 	ldrb.w	r2, [r1], #1
 800490a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800490e:	e7ed      	b.n	80048ec <__exponent+0x4c>
 8004910:	2330      	movs	r3, #48	; 0x30
 8004912:	3130      	adds	r1, #48	; 0x30
 8004914:	7083      	strb	r3, [r0, #2]
 8004916:	70c1      	strb	r1, [r0, #3]
 8004918:	1d03      	adds	r3, r0, #4
 800491a:	e7f1      	b.n	8004900 <__exponent+0x60>

0800491c <_printf_float>:
 800491c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004920:	ed2d 8b02 	vpush	{d8}
 8004924:	b08d      	sub	sp, #52	; 0x34
 8004926:	460c      	mov	r4, r1
 8004928:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800492c:	4616      	mov	r6, r2
 800492e:	461f      	mov	r7, r3
 8004930:	4605      	mov	r5, r0
 8004932:	f003 fa49 	bl	8007dc8 <_localeconv_r>
 8004936:	f8d0 a000 	ldr.w	sl, [r0]
 800493a:	4650      	mov	r0, sl
 800493c:	f7fb fc48 	bl	80001d0 <strlen>
 8004940:	2300      	movs	r3, #0
 8004942:	930a      	str	r3, [sp, #40]	; 0x28
 8004944:	6823      	ldr	r3, [r4, #0]
 8004946:	9305      	str	r3, [sp, #20]
 8004948:	f8d8 3000 	ldr.w	r3, [r8]
 800494c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8004950:	3307      	adds	r3, #7
 8004952:	f023 0307 	bic.w	r3, r3, #7
 8004956:	f103 0208 	add.w	r2, r3, #8
 800495a:	f8c8 2000 	str.w	r2, [r8]
 800495e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004962:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004966:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800496a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800496e:	9307      	str	r3, [sp, #28]
 8004970:	f8cd 8018 	str.w	r8, [sp, #24]
 8004974:	ee08 0a10 	vmov	s16, r0
 8004978:	4b9f      	ldr	r3, [pc, #636]	; (8004bf8 <_printf_float+0x2dc>)
 800497a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800497e:	f04f 32ff 	mov.w	r2, #4294967295
 8004982:	f7fc f8d3 	bl	8000b2c <__aeabi_dcmpun>
 8004986:	bb88      	cbnz	r0, 80049ec <_printf_float+0xd0>
 8004988:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800498c:	4b9a      	ldr	r3, [pc, #616]	; (8004bf8 <_printf_float+0x2dc>)
 800498e:	f04f 32ff 	mov.w	r2, #4294967295
 8004992:	f7fc f8ad 	bl	8000af0 <__aeabi_dcmple>
 8004996:	bb48      	cbnz	r0, 80049ec <_printf_float+0xd0>
 8004998:	2200      	movs	r2, #0
 800499a:	2300      	movs	r3, #0
 800499c:	4640      	mov	r0, r8
 800499e:	4649      	mov	r1, r9
 80049a0:	f7fc f89c 	bl	8000adc <__aeabi_dcmplt>
 80049a4:	b110      	cbz	r0, 80049ac <_printf_float+0x90>
 80049a6:	232d      	movs	r3, #45	; 0x2d
 80049a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80049ac:	4b93      	ldr	r3, [pc, #588]	; (8004bfc <_printf_float+0x2e0>)
 80049ae:	4894      	ldr	r0, [pc, #592]	; (8004c00 <_printf_float+0x2e4>)
 80049b0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80049b4:	bf94      	ite	ls
 80049b6:	4698      	movls	r8, r3
 80049b8:	4680      	movhi	r8, r0
 80049ba:	2303      	movs	r3, #3
 80049bc:	6123      	str	r3, [r4, #16]
 80049be:	9b05      	ldr	r3, [sp, #20]
 80049c0:	f023 0204 	bic.w	r2, r3, #4
 80049c4:	6022      	str	r2, [r4, #0]
 80049c6:	f04f 0900 	mov.w	r9, #0
 80049ca:	9700      	str	r7, [sp, #0]
 80049cc:	4633      	mov	r3, r6
 80049ce:	aa0b      	add	r2, sp, #44	; 0x2c
 80049d0:	4621      	mov	r1, r4
 80049d2:	4628      	mov	r0, r5
 80049d4:	f000 f9d8 	bl	8004d88 <_printf_common>
 80049d8:	3001      	adds	r0, #1
 80049da:	f040 8090 	bne.w	8004afe <_printf_float+0x1e2>
 80049de:	f04f 30ff 	mov.w	r0, #4294967295
 80049e2:	b00d      	add	sp, #52	; 0x34
 80049e4:	ecbd 8b02 	vpop	{d8}
 80049e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80049ec:	4642      	mov	r2, r8
 80049ee:	464b      	mov	r3, r9
 80049f0:	4640      	mov	r0, r8
 80049f2:	4649      	mov	r1, r9
 80049f4:	f7fc f89a 	bl	8000b2c <__aeabi_dcmpun>
 80049f8:	b140      	cbz	r0, 8004a0c <_printf_float+0xf0>
 80049fa:	464b      	mov	r3, r9
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	bfbc      	itt	lt
 8004a00:	232d      	movlt	r3, #45	; 0x2d
 8004a02:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8004a06:	487f      	ldr	r0, [pc, #508]	; (8004c04 <_printf_float+0x2e8>)
 8004a08:	4b7f      	ldr	r3, [pc, #508]	; (8004c08 <_printf_float+0x2ec>)
 8004a0a:	e7d1      	b.n	80049b0 <_printf_float+0x94>
 8004a0c:	6863      	ldr	r3, [r4, #4]
 8004a0e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8004a12:	9206      	str	r2, [sp, #24]
 8004a14:	1c5a      	adds	r2, r3, #1
 8004a16:	d13f      	bne.n	8004a98 <_printf_float+0x17c>
 8004a18:	2306      	movs	r3, #6
 8004a1a:	6063      	str	r3, [r4, #4]
 8004a1c:	9b05      	ldr	r3, [sp, #20]
 8004a1e:	6861      	ldr	r1, [r4, #4]
 8004a20:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8004a24:	2300      	movs	r3, #0
 8004a26:	9303      	str	r3, [sp, #12]
 8004a28:	ab0a      	add	r3, sp, #40	; 0x28
 8004a2a:	e9cd b301 	strd	fp, r3, [sp, #4]
 8004a2e:	ab09      	add	r3, sp, #36	; 0x24
 8004a30:	ec49 8b10 	vmov	d0, r8, r9
 8004a34:	9300      	str	r3, [sp, #0]
 8004a36:	6022      	str	r2, [r4, #0]
 8004a38:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8004a3c:	4628      	mov	r0, r5
 8004a3e:	f7ff fecd 	bl	80047dc <__cvt>
 8004a42:	9b06      	ldr	r3, [sp, #24]
 8004a44:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004a46:	2b47      	cmp	r3, #71	; 0x47
 8004a48:	4680      	mov	r8, r0
 8004a4a:	d108      	bne.n	8004a5e <_printf_float+0x142>
 8004a4c:	1cc8      	adds	r0, r1, #3
 8004a4e:	db02      	blt.n	8004a56 <_printf_float+0x13a>
 8004a50:	6863      	ldr	r3, [r4, #4]
 8004a52:	4299      	cmp	r1, r3
 8004a54:	dd41      	ble.n	8004ada <_printf_float+0x1be>
 8004a56:	f1ab 0b02 	sub.w	fp, fp, #2
 8004a5a:	fa5f fb8b 	uxtb.w	fp, fp
 8004a5e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004a62:	d820      	bhi.n	8004aa6 <_printf_float+0x18a>
 8004a64:	3901      	subs	r1, #1
 8004a66:	465a      	mov	r2, fp
 8004a68:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004a6c:	9109      	str	r1, [sp, #36]	; 0x24
 8004a6e:	f7ff ff17 	bl	80048a0 <__exponent>
 8004a72:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004a74:	1813      	adds	r3, r2, r0
 8004a76:	2a01      	cmp	r2, #1
 8004a78:	4681      	mov	r9, r0
 8004a7a:	6123      	str	r3, [r4, #16]
 8004a7c:	dc02      	bgt.n	8004a84 <_printf_float+0x168>
 8004a7e:	6822      	ldr	r2, [r4, #0]
 8004a80:	07d2      	lsls	r2, r2, #31
 8004a82:	d501      	bpl.n	8004a88 <_printf_float+0x16c>
 8004a84:	3301      	adds	r3, #1
 8004a86:	6123      	str	r3, [r4, #16]
 8004a88:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d09c      	beq.n	80049ca <_printf_float+0xae>
 8004a90:	232d      	movs	r3, #45	; 0x2d
 8004a92:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004a96:	e798      	b.n	80049ca <_printf_float+0xae>
 8004a98:	9a06      	ldr	r2, [sp, #24]
 8004a9a:	2a47      	cmp	r2, #71	; 0x47
 8004a9c:	d1be      	bne.n	8004a1c <_printf_float+0x100>
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d1bc      	bne.n	8004a1c <_printf_float+0x100>
 8004aa2:	2301      	movs	r3, #1
 8004aa4:	e7b9      	b.n	8004a1a <_printf_float+0xfe>
 8004aa6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8004aaa:	d118      	bne.n	8004ade <_printf_float+0x1c2>
 8004aac:	2900      	cmp	r1, #0
 8004aae:	6863      	ldr	r3, [r4, #4]
 8004ab0:	dd0b      	ble.n	8004aca <_printf_float+0x1ae>
 8004ab2:	6121      	str	r1, [r4, #16]
 8004ab4:	b913      	cbnz	r3, 8004abc <_printf_float+0x1a0>
 8004ab6:	6822      	ldr	r2, [r4, #0]
 8004ab8:	07d0      	lsls	r0, r2, #31
 8004aba:	d502      	bpl.n	8004ac2 <_printf_float+0x1a6>
 8004abc:	3301      	adds	r3, #1
 8004abe:	440b      	add	r3, r1
 8004ac0:	6123      	str	r3, [r4, #16]
 8004ac2:	65a1      	str	r1, [r4, #88]	; 0x58
 8004ac4:	f04f 0900 	mov.w	r9, #0
 8004ac8:	e7de      	b.n	8004a88 <_printf_float+0x16c>
 8004aca:	b913      	cbnz	r3, 8004ad2 <_printf_float+0x1b6>
 8004acc:	6822      	ldr	r2, [r4, #0]
 8004ace:	07d2      	lsls	r2, r2, #31
 8004ad0:	d501      	bpl.n	8004ad6 <_printf_float+0x1ba>
 8004ad2:	3302      	adds	r3, #2
 8004ad4:	e7f4      	b.n	8004ac0 <_printf_float+0x1a4>
 8004ad6:	2301      	movs	r3, #1
 8004ad8:	e7f2      	b.n	8004ac0 <_printf_float+0x1a4>
 8004ada:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8004ade:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004ae0:	4299      	cmp	r1, r3
 8004ae2:	db05      	blt.n	8004af0 <_printf_float+0x1d4>
 8004ae4:	6823      	ldr	r3, [r4, #0]
 8004ae6:	6121      	str	r1, [r4, #16]
 8004ae8:	07d8      	lsls	r0, r3, #31
 8004aea:	d5ea      	bpl.n	8004ac2 <_printf_float+0x1a6>
 8004aec:	1c4b      	adds	r3, r1, #1
 8004aee:	e7e7      	b.n	8004ac0 <_printf_float+0x1a4>
 8004af0:	2900      	cmp	r1, #0
 8004af2:	bfd4      	ite	le
 8004af4:	f1c1 0202 	rsble	r2, r1, #2
 8004af8:	2201      	movgt	r2, #1
 8004afa:	4413      	add	r3, r2
 8004afc:	e7e0      	b.n	8004ac0 <_printf_float+0x1a4>
 8004afe:	6823      	ldr	r3, [r4, #0]
 8004b00:	055a      	lsls	r2, r3, #21
 8004b02:	d407      	bmi.n	8004b14 <_printf_float+0x1f8>
 8004b04:	6923      	ldr	r3, [r4, #16]
 8004b06:	4642      	mov	r2, r8
 8004b08:	4631      	mov	r1, r6
 8004b0a:	4628      	mov	r0, r5
 8004b0c:	47b8      	blx	r7
 8004b0e:	3001      	adds	r0, #1
 8004b10:	d12c      	bne.n	8004b6c <_printf_float+0x250>
 8004b12:	e764      	b.n	80049de <_printf_float+0xc2>
 8004b14:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004b18:	f240 80e0 	bls.w	8004cdc <_printf_float+0x3c0>
 8004b1c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004b20:	2200      	movs	r2, #0
 8004b22:	2300      	movs	r3, #0
 8004b24:	f7fb ffd0 	bl	8000ac8 <__aeabi_dcmpeq>
 8004b28:	2800      	cmp	r0, #0
 8004b2a:	d034      	beq.n	8004b96 <_printf_float+0x27a>
 8004b2c:	4a37      	ldr	r2, [pc, #220]	; (8004c0c <_printf_float+0x2f0>)
 8004b2e:	2301      	movs	r3, #1
 8004b30:	4631      	mov	r1, r6
 8004b32:	4628      	mov	r0, r5
 8004b34:	47b8      	blx	r7
 8004b36:	3001      	adds	r0, #1
 8004b38:	f43f af51 	beq.w	80049de <_printf_float+0xc2>
 8004b3c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004b40:	429a      	cmp	r2, r3
 8004b42:	db02      	blt.n	8004b4a <_printf_float+0x22e>
 8004b44:	6823      	ldr	r3, [r4, #0]
 8004b46:	07d8      	lsls	r0, r3, #31
 8004b48:	d510      	bpl.n	8004b6c <_printf_float+0x250>
 8004b4a:	ee18 3a10 	vmov	r3, s16
 8004b4e:	4652      	mov	r2, sl
 8004b50:	4631      	mov	r1, r6
 8004b52:	4628      	mov	r0, r5
 8004b54:	47b8      	blx	r7
 8004b56:	3001      	adds	r0, #1
 8004b58:	f43f af41 	beq.w	80049de <_printf_float+0xc2>
 8004b5c:	f04f 0800 	mov.w	r8, #0
 8004b60:	f104 091a 	add.w	r9, r4, #26
 8004b64:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004b66:	3b01      	subs	r3, #1
 8004b68:	4543      	cmp	r3, r8
 8004b6a:	dc09      	bgt.n	8004b80 <_printf_float+0x264>
 8004b6c:	6823      	ldr	r3, [r4, #0]
 8004b6e:	079b      	lsls	r3, r3, #30
 8004b70:	f100 8105 	bmi.w	8004d7e <_printf_float+0x462>
 8004b74:	68e0      	ldr	r0, [r4, #12]
 8004b76:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004b78:	4298      	cmp	r0, r3
 8004b7a:	bfb8      	it	lt
 8004b7c:	4618      	movlt	r0, r3
 8004b7e:	e730      	b.n	80049e2 <_printf_float+0xc6>
 8004b80:	2301      	movs	r3, #1
 8004b82:	464a      	mov	r2, r9
 8004b84:	4631      	mov	r1, r6
 8004b86:	4628      	mov	r0, r5
 8004b88:	47b8      	blx	r7
 8004b8a:	3001      	adds	r0, #1
 8004b8c:	f43f af27 	beq.w	80049de <_printf_float+0xc2>
 8004b90:	f108 0801 	add.w	r8, r8, #1
 8004b94:	e7e6      	b.n	8004b64 <_printf_float+0x248>
 8004b96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	dc39      	bgt.n	8004c10 <_printf_float+0x2f4>
 8004b9c:	4a1b      	ldr	r2, [pc, #108]	; (8004c0c <_printf_float+0x2f0>)
 8004b9e:	2301      	movs	r3, #1
 8004ba0:	4631      	mov	r1, r6
 8004ba2:	4628      	mov	r0, r5
 8004ba4:	47b8      	blx	r7
 8004ba6:	3001      	adds	r0, #1
 8004ba8:	f43f af19 	beq.w	80049de <_printf_float+0xc2>
 8004bac:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004bb0:	4313      	orrs	r3, r2
 8004bb2:	d102      	bne.n	8004bba <_printf_float+0x29e>
 8004bb4:	6823      	ldr	r3, [r4, #0]
 8004bb6:	07d9      	lsls	r1, r3, #31
 8004bb8:	d5d8      	bpl.n	8004b6c <_printf_float+0x250>
 8004bba:	ee18 3a10 	vmov	r3, s16
 8004bbe:	4652      	mov	r2, sl
 8004bc0:	4631      	mov	r1, r6
 8004bc2:	4628      	mov	r0, r5
 8004bc4:	47b8      	blx	r7
 8004bc6:	3001      	adds	r0, #1
 8004bc8:	f43f af09 	beq.w	80049de <_printf_float+0xc2>
 8004bcc:	f04f 0900 	mov.w	r9, #0
 8004bd0:	f104 0a1a 	add.w	sl, r4, #26
 8004bd4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004bd6:	425b      	negs	r3, r3
 8004bd8:	454b      	cmp	r3, r9
 8004bda:	dc01      	bgt.n	8004be0 <_printf_float+0x2c4>
 8004bdc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004bde:	e792      	b.n	8004b06 <_printf_float+0x1ea>
 8004be0:	2301      	movs	r3, #1
 8004be2:	4652      	mov	r2, sl
 8004be4:	4631      	mov	r1, r6
 8004be6:	4628      	mov	r0, r5
 8004be8:	47b8      	blx	r7
 8004bea:	3001      	adds	r0, #1
 8004bec:	f43f aef7 	beq.w	80049de <_printf_float+0xc2>
 8004bf0:	f109 0901 	add.w	r9, r9, #1
 8004bf4:	e7ee      	b.n	8004bd4 <_printf_float+0x2b8>
 8004bf6:	bf00      	nop
 8004bf8:	7fefffff 	.word	0x7fefffff
 8004bfc:	08009cec 	.word	0x08009cec
 8004c00:	08009cf0 	.word	0x08009cf0
 8004c04:	08009cf8 	.word	0x08009cf8
 8004c08:	08009cf4 	.word	0x08009cf4
 8004c0c:	0800a159 	.word	0x0800a159
 8004c10:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004c12:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004c14:	429a      	cmp	r2, r3
 8004c16:	bfa8      	it	ge
 8004c18:	461a      	movge	r2, r3
 8004c1a:	2a00      	cmp	r2, #0
 8004c1c:	4691      	mov	r9, r2
 8004c1e:	dc37      	bgt.n	8004c90 <_printf_float+0x374>
 8004c20:	f04f 0b00 	mov.w	fp, #0
 8004c24:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004c28:	f104 021a 	add.w	r2, r4, #26
 8004c2c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004c2e:	9305      	str	r3, [sp, #20]
 8004c30:	eba3 0309 	sub.w	r3, r3, r9
 8004c34:	455b      	cmp	r3, fp
 8004c36:	dc33      	bgt.n	8004ca0 <_printf_float+0x384>
 8004c38:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004c3c:	429a      	cmp	r2, r3
 8004c3e:	db3b      	blt.n	8004cb8 <_printf_float+0x39c>
 8004c40:	6823      	ldr	r3, [r4, #0]
 8004c42:	07da      	lsls	r2, r3, #31
 8004c44:	d438      	bmi.n	8004cb8 <_printf_float+0x39c>
 8004c46:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004c48:	9a05      	ldr	r2, [sp, #20]
 8004c4a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004c4c:	1a9a      	subs	r2, r3, r2
 8004c4e:	eba3 0901 	sub.w	r9, r3, r1
 8004c52:	4591      	cmp	r9, r2
 8004c54:	bfa8      	it	ge
 8004c56:	4691      	movge	r9, r2
 8004c58:	f1b9 0f00 	cmp.w	r9, #0
 8004c5c:	dc35      	bgt.n	8004cca <_printf_float+0x3ae>
 8004c5e:	f04f 0800 	mov.w	r8, #0
 8004c62:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004c66:	f104 0a1a 	add.w	sl, r4, #26
 8004c6a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004c6e:	1a9b      	subs	r3, r3, r2
 8004c70:	eba3 0309 	sub.w	r3, r3, r9
 8004c74:	4543      	cmp	r3, r8
 8004c76:	f77f af79 	ble.w	8004b6c <_printf_float+0x250>
 8004c7a:	2301      	movs	r3, #1
 8004c7c:	4652      	mov	r2, sl
 8004c7e:	4631      	mov	r1, r6
 8004c80:	4628      	mov	r0, r5
 8004c82:	47b8      	blx	r7
 8004c84:	3001      	adds	r0, #1
 8004c86:	f43f aeaa 	beq.w	80049de <_printf_float+0xc2>
 8004c8a:	f108 0801 	add.w	r8, r8, #1
 8004c8e:	e7ec      	b.n	8004c6a <_printf_float+0x34e>
 8004c90:	4613      	mov	r3, r2
 8004c92:	4631      	mov	r1, r6
 8004c94:	4642      	mov	r2, r8
 8004c96:	4628      	mov	r0, r5
 8004c98:	47b8      	blx	r7
 8004c9a:	3001      	adds	r0, #1
 8004c9c:	d1c0      	bne.n	8004c20 <_printf_float+0x304>
 8004c9e:	e69e      	b.n	80049de <_printf_float+0xc2>
 8004ca0:	2301      	movs	r3, #1
 8004ca2:	4631      	mov	r1, r6
 8004ca4:	4628      	mov	r0, r5
 8004ca6:	9205      	str	r2, [sp, #20]
 8004ca8:	47b8      	blx	r7
 8004caa:	3001      	adds	r0, #1
 8004cac:	f43f ae97 	beq.w	80049de <_printf_float+0xc2>
 8004cb0:	9a05      	ldr	r2, [sp, #20]
 8004cb2:	f10b 0b01 	add.w	fp, fp, #1
 8004cb6:	e7b9      	b.n	8004c2c <_printf_float+0x310>
 8004cb8:	ee18 3a10 	vmov	r3, s16
 8004cbc:	4652      	mov	r2, sl
 8004cbe:	4631      	mov	r1, r6
 8004cc0:	4628      	mov	r0, r5
 8004cc2:	47b8      	blx	r7
 8004cc4:	3001      	adds	r0, #1
 8004cc6:	d1be      	bne.n	8004c46 <_printf_float+0x32a>
 8004cc8:	e689      	b.n	80049de <_printf_float+0xc2>
 8004cca:	9a05      	ldr	r2, [sp, #20]
 8004ccc:	464b      	mov	r3, r9
 8004cce:	4442      	add	r2, r8
 8004cd0:	4631      	mov	r1, r6
 8004cd2:	4628      	mov	r0, r5
 8004cd4:	47b8      	blx	r7
 8004cd6:	3001      	adds	r0, #1
 8004cd8:	d1c1      	bne.n	8004c5e <_printf_float+0x342>
 8004cda:	e680      	b.n	80049de <_printf_float+0xc2>
 8004cdc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004cde:	2a01      	cmp	r2, #1
 8004ce0:	dc01      	bgt.n	8004ce6 <_printf_float+0x3ca>
 8004ce2:	07db      	lsls	r3, r3, #31
 8004ce4:	d538      	bpl.n	8004d58 <_printf_float+0x43c>
 8004ce6:	2301      	movs	r3, #1
 8004ce8:	4642      	mov	r2, r8
 8004cea:	4631      	mov	r1, r6
 8004cec:	4628      	mov	r0, r5
 8004cee:	47b8      	blx	r7
 8004cf0:	3001      	adds	r0, #1
 8004cf2:	f43f ae74 	beq.w	80049de <_printf_float+0xc2>
 8004cf6:	ee18 3a10 	vmov	r3, s16
 8004cfa:	4652      	mov	r2, sl
 8004cfc:	4631      	mov	r1, r6
 8004cfe:	4628      	mov	r0, r5
 8004d00:	47b8      	blx	r7
 8004d02:	3001      	adds	r0, #1
 8004d04:	f43f ae6b 	beq.w	80049de <_printf_float+0xc2>
 8004d08:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004d0c:	2200      	movs	r2, #0
 8004d0e:	2300      	movs	r3, #0
 8004d10:	f7fb feda 	bl	8000ac8 <__aeabi_dcmpeq>
 8004d14:	b9d8      	cbnz	r0, 8004d4e <_printf_float+0x432>
 8004d16:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004d18:	f108 0201 	add.w	r2, r8, #1
 8004d1c:	3b01      	subs	r3, #1
 8004d1e:	4631      	mov	r1, r6
 8004d20:	4628      	mov	r0, r5
 8004d22:	47b8      	blx	r7
 8004d24:	3001      	adds	r0, #1
 8004d26:	d10e      	bne.n	8004d46 <_printf_float+0x42a>
 8004d28:	e659      	b.n	80049de <_printf_float+0xc2>
 8004d2a:	2301      	movs	r3, #1
 8004d2c:	4652      	mov	r2, sl
 8004d2e:	4631      	mov	r1, r6
 8004d30:	4628      	mov	r0, r5
 8004d32:	47b8      	blx	r7
 8004d34:	3001      	adds	r0, #1
 8004d36:	f43f ae52 	beq.w	80049de <_printf_float+0xc2>
 8004d3a:	f108 0801 	add.w	r8, r8, #1
 8004d3e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004d40:	3b01      	subs	r3, #1
 8004d42:	4543      	cmp	r3, r8
 8004d44:	dcf1      	bgt.n	8004d2a <_printf_float+0x40e>
 8004d46:	464b      	mov	r3, r9
 8004d48:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004d4c:	e6dc      	b.n	8004b08 <_printf_float+0x1ec>
 8004d4e:	f04f 0800 	mov.w	r8, #0
 8004d52:	f104 0a1a 	add.w	sl, r4, #26
 8004d56:	e7f2      	b.n	8004d3e <_printf_float+0x422>
 8004d58:	2301      	movs	r3, #1
 8004d5a:	4642      	mov	r2, r8
 8004d5c:	e7df      	b.n	8004d1e <_printf_float+0x402>
 8004d5e:	2301      	movs	r3, #1
 8004d60:	464a      	mov	r2, r9
 8004d62:	4631      	mov	r1, r6
 8004d64:	4628      	mov	r0, r5
 8004d66:	47b8      	blx	r7
 8004d68:	3001      	adds	r0, #1
 8004d6a:	f43f ae38 	beq.w	80049de <_printf_float+0xc2>
 8004d6e:	f108 0801 	add.w	r8, r8, #1
 8004d72:	68e3      	ldr	r3, [r4, #12]
 8004d74:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004d76:	1a5b      	subs	r3, r3, r1
 8004d78:	4543      	cmp	r3, r8
 8004d7a:	dcf0      	bgt.n	8004d5e <_printf_float+0x442>
 8004d7c:	e6fa      	b.n	8004b74 <_printf_float+0x258>
 8004d7e:	f04f 0800 	mov.w	r8, #0
 8004d82:	f104 0919 	add.w	r9, r4, #25
 8004d86:	e7f4      	b.n	8004d72 <_printf_float+0x456>

08004d88 <_printf_common>:
 8004d88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004d8c:	4616      	mov	r6, r2
 8004d8e:	4699      	mov	r9, r3
 8004d90:	688a      	ldr	r2, [r1, #8]
 8004d92:	690b      	ldr	r3, [r1, #16]
 8004d94:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004d98:	4293      	cmp	r3, r2
 8004d9a:	bfb8      	it	lt
 8004d9c:	4613      	movlt	r3, r2
 8004d9e:	6033      	str	r3, [r6, #0]
 8004da0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004da4:	4607      	mov	r7, r0
 8004da6:	460c      	mov	r4, r1
 8004da8:	b10a      	cbz	r2, 8004dae <_printf_common+0x26>
 8004daa:	3301      	adds	r3, #1
 8004dac:	6033      	str	r3, [r6, #0]
 8004dae:	6823      	ldr	r3, [r4, #0]
 8004db0:	0699      	lsls	r1, r3, #26
 8004db2:	bf42      	ittt	mi
 8004db4:	6833      	ldrmi	r3, [r6, #0]
 8004db6:	3302      	addmi	r3, #2
 8004db8:	6033      	strmi	r3, [r6, #0]
 8004dba:	6825      	ldr	r5, [r4, #0]
 8004dbc:	f015 0506 	ands.w	r5, r5, #6
 8004dc0:	d106      	bne.n	8004dd0 <_printf_common+0x48>
 8004dc2:	f104 0a19 	add.w	sl, r4, #25
 8004dc6:	68e3      	ldr	r3, [r4, #12]
 8004dc8:	6832      	ldr	r2, [r6, #0]
 8004dca:	1a9b      	subs	r3, r3, r2
 8004dcc:	42ab      	cmp	r3, r5
 8004dce:	dc26      	bgt.n	8004e1e <_printf_common+0x96>
 8004dd0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004dd4:	1e13      	subs	r3, r2, #0
 8004dd6:	6822      	ldr	r2, [r4, #0]
 8004dd8:	bf18      	it	ne
 8004dda:	2301      	movne	r3, #1
 8004ddc:	0692      	lsls	r2, r2, #26
 8004dde:	d42b      	bmi.n	8004e38 <_printf_common+0xb0>
 8004de0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004de4:	4649      	mov	r1, r9
 8004de6:	4638      	mov	r0, r7
 8004de8:	47c0      	blx	r8
 8004dea:	3001      	adds	r0, #1
 8004dec:	d01e      	beq.n	8004e2c <_printf_common+0xa4>
 8004dee:	6823      	ldr	r3, [r4, #0]
 8004df0:	68e5      	ldr	r5, [r4, #12]
 8004df2:	6832      	ldr	r2, [r6, #0]
 8004df4:	f003 0306 	and.w	r3, r3, #6
 8004df8:	2b04      	cmp	r3, #4
 8004dfa:	bf08      	it	eq
 8004dfc:	1aad      	subeq	r5, r5, r2
 8004dfe:	68a3      	ldr	r3, [r4, #8]
 8004e00:	6922      	ldr	r2, [r4, #16]
 8004e02:	bf0c      	ite	eq
 8004e04:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004e08:	2500      	movne	r5, #0
 8004e0a:	4293      	cmp	r3, r2
 8004e0c:	bfc4      	itt	gt
 8004e0e:	1a9b      	subgt	r3, r3, r2
 8004e10:	18ed      	addgt	r5, r5, r3
 8004e12:	2600      	movs	r6, #0
 8004e14:	341a      	adds	r4, #26
 8004e16:	42b5      	cmp	r5, r6
 8004e18:	d11a      	bne.n	8004e50 <_printf_common+0xc8>
 8004e1a:	2000      	movs	r0, #0
 8004e1c:	e008      	b.n	8004e30 <_printf_common+0xa8>
 8004e1e:	2301      	movs	r3, #1
 8004e20:	4652      	mov	r2, sl
 8004e22:	4649      	mov	r1, r9
 8004e24:	4638      	mov	r0, r7
 8004e26:	47c0      	blx	r8
 8004e28:	3001      	adds	r0, #1
 8004e2a:	d103      	bne.n	8004e34 <_printf_common+0xac>
 8004e2c:	f04f 30ff 	mov.w	r0, #4294967295
 8004e30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e34:	3501      	adds	r5, #1
 8004e36:	e7c6      	b.n	8004dc6 <_printf_common+0x3e>
 8004e38:	18e1      	adds	r1, r4, r3
 8004e3a:	1c5a      	adds	r2, r3, #1
 8004e3c:	2030      	movs	r0, #48	; 0x30
 8004e3e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004e42:	4422      	add	r2, r4
 8004e44:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004e48:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004e4c:	3302      	adds	r3, #2
 8004e4e:	e7c7      	b.n	8004de0 <_printf_common+0x58>
 8004e50:	2301      	movs	r3, #1
 8004e52:	4622      	mov	r2, r4
 8004e54:	4649      	mov	r1, r9
 8004e56:	4638      	mov	r0, r7
 8004e58:	47c0      	blx	r8
 8004e5a:	3001      	adds	r0, #1
 8004e5c:	d0e6      	beq.n	8004e2c <_printf_common+0xa4>
 8004e5e:	3601      	adds	r6, #1
 8004e60:	e7d9      	b.n	8004e16 <_printf_common+0x8e>
	...

08004e64 <_printf_i>:
 8004e64:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004e68:	7e0f      	ldrb	r7, [r1, #24]
 8004e6a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004e6c:	2f78      	cmp	r7, #120	; 0x78
 8004e6e:	4691      	mov	r9, r2
 8004e70:	4680      	mov	r8, r0
 8004e72:	460c      	mov	r4, r1
 8004e74:	469a      	mov	sl, r3
 8004e76:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004e7a:	d807      	bhi.n	8004e8c <_printf_i+0x28>
 8004e7c:	2f62      	cmp	r7, #98	; 0x62
 8004e7e:	d80a      	bhi.n	8004e96 <_printf_i+0x32>
 8004e80:	2f00      	cmp	r7, #0
 8004e82:	f000 80d8 	beq.w	8005036 <_printf_i+0x1d2>
 8004e86:	2f58      	cmp	r7, #88	; 0x58
 8004e88:	f000 80a3 	beq.w	8004fd2 <_printf_i+0x16e>
 8004e8c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004e90:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004e94:	e03a      	b.n	8004f0c <_printf_i+0xa8>
 8004e96:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004e9a:	2b15      	cmp	r3, #21
 8004e9c:	d8f6      	bhi.n	8004e8c <_printf_i+0x28>
 8004e9e:	a101      	add	r1, pc, #4	; (adr r1, 8004ea4 <_printf_i+0x40>)
 8004ea0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004ea4:	08004efd 	.word	0x08004efd
 8004ea8:	08004f11 	.word	0x08004f11
 8004eac:	08004e8d 	.word	0x08004e8d
 8004eb0:	08004e8d 	.word	0x08004e8d
 8004eb4:	08004e8d 	.word	0x08004e8d
 8004eb8:	08004e8d 	.word	0x08004e8d
 8004ebc:	08004f11 	.word	0x08004f11
 8004ec0:	08004e8d 	.word	0x08004e8d
 8004ec4:	08004e8d 	.word	0x08004e8d
 8004ec8:	08004e8d 	.word	0x08004e8d
 8004ecc:	08004e8d 	.word	0x08004e8d
 8004ed0:	0800501d 	.word	0x0800501d
 8004ed4:	08004f41 	.word	0x08004f41
 8004ed8:	08004fff 	.word	0x08004fff
 8004edc:	08004e8d 	.word	0x08004e8d
 8004ee0:	08004e8d 	.word	0x08004e8d
 8004ee4:	0800503f 	.word	0x0800503f
 8004ee8:	08004e8d 	.word	0x08004e8d
 8004eec:	08004f41 	.word	0x08004f41
 8004ef0:	08004e8d 	.word	0x08004e8d
 8004ef4:	08004e8d 	.word	0x08004e8d
 8004ef8:	08005007 	.word	0x08005007
 8004efc:	682b      	ldr	r3, [r5, #0]
 8004efe:	1d1a      	adds	r2, r3, #4
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	602a      	str	r2, [r5, #0]
 8004f04:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004f08:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004f0c:	2301      	movs	r3, #1
 8004f0e:	e0a3      	b.n	8005058 <_printf_i+0x1f4>
 8004f10:	6820      	ldr	r0, [r4, #0]
 8004f12:	6829      	ldr	r1, [r5, #0]
 8004f14:	0606      	lsls	r6, r0, #24
 8004f16:	f101 0304 	add.w	r3, r1, #4
 8004f1a:	d50a      	bpl.n	8004f32 <_printf_i+0xce>
 8004f1c:	680e      	ldr	r6, [r1, #0]
 8004f1e:	602b      	str	r3, [r5, #0]
 8004f20:	2e00      	cmp	r6, #0
 8004f22:	da03      	bge.n	8004f2c <_printf_i+0xc8>
 8004f24:	232d      	movs	r3, #45	; 0x2d
 8004f26:	4276      	negs	r6, r6
 8004f28:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004f2c:	485e      	ldr	r0, [pc, #376]	; (80050a8 <_printf_i+0x244>)
 8004f2e:	230a      	movs	r3, #10
 8004f30:	e019      	b.n	8004f66 <_printf_i+0x102>
 8004f32:	680e      	ldr	r6, [r1, #0]
 8004f34:	602b      	str	r3, [r5, #0]
 8004f36:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004f3a:	bf18      	it	ne
 8004f3c:	b236      	sxthne	r6, r6
 8004f3e:	e7ef      	b.n	8004f20 <_printf_i+0xbc>
 8004f40:	682b      	ldr	r3, [r5, #0]
 8004f42:	6820      	ldr	r0, [r4, #0]
 8004f44:	1d19      	adds	r1, r3, #4
 8004f46:	6029      	str	r1, [r5, #0]
 8004f48:	0601      	lsls	r1, r0, #24
 8004f4a:	d501      	bpl.n	8004f50 <_printf_i+0xec>
 8004f4c:	681e      	ldr	r6, [r3, #0]
 8004f4e:	e002      	b.n	8004f56 <_printf_i+0xf2>
 8004f50:	0646      	lsls	r6, r0, #25
 8004f52:	d5fb      	bpl.n	8004f4c <_printf_i+0xe8>
 8004f54:	881e      	ldrh	r6, [r3, #0]
 8004f56:	4854      	ldr	r0, [pc, #336]	; (80050a8 <_printf_i+0x244>)
 8004f58:	2f6f      	cmp	r7, #111	; 0x6f
 8004f5a:	bf0c      	ite	eq
 8004f5c:	2308      	moveq	r3, #8
 8004f5e:	230a      	movne	r3, #10
 8004f60:	2100      	movs	r1, #0
 8004f62:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004f66:	6865      	ldr	r5, [r4, #4]
 8004f68:	60a5      	str	r5, [r4, #8]
 8004f6a:	2d00      	cmp	r5, #0
 8004f6c:	bfa2      	ittt	ge
 8004f6e:	6821      	ldrge	r1, [r4, #0]
 8004f70:	f021 0104 	bicge.w	r1, r1, #4
 8004f74:	6021      	strge	r1, [r4, #0]
 8004f76:	b90e      	cbnz	r6, 8004f7c <_printf_i+0x118>
 8004f78:	2d00      	cmp	r5, #0
 8004f7a:	d04d      	beq.n	8005018 <_printf_i+0x1b4>
 8004f7c:	4615      	mov	r5, r2
 8004f7e:	fbb6 f1f3 	udiv	r1, r6, r3
 8004f82:	fb03 6711 	mls	r7, r3, r1, r6
 8004f86:	5dc7      	ldrb	r7, [r0, r7]
 8004f88:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004f8c:	4637      	mov	r7, r6
 8004f8e:	42bb      	cmp	r3, r7
 8004f90:	460e      	mov	r6, r1
 8004f92:	d9f4      	bls.n	8004f7e <_printf_i+0x11a>
 8004f94:	2b08      	cmp	r3, #8
 8004f96:	d10b      	bne.n	8004fb0 <_printf_i+0x14c>
 8004f98:	6823      	ldr	r3, [r4, #0]
 8004f9a:	07de      	lsls	r6, r3, #31
 8004f9c:	d508      	bpl.n	8004fb0 <_printf_i+0x14c>
 8004f9e:	6923      	ldr	r3, [r4, #16]
 8004fa0:	6861      	ldr	r1, [r4, #4]
 8004fa2:	4299      	cmp	r1, r3
 8004fa4:	bfde      	ittt	le
 8004fa6:	2330      	movle	r3, #48	; 0x30
 8004fa8:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004fac:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004fb0:	1b52      	subs	r2, r2, r5
 8004fb2:	6122      	str	r2, [r4, #16]
 8004fb4:	f8cd a000 	str.w	sl, [sp]
 8004fb8:	464b      	mov	r3, r9
 8004fba:	aa03      	add	r2, sp, #12
 8004fbc:	4621      	mov	r1, r4
 8004fbe:	4640      	mov	r0, r8
 8004fc0:	f7ff fee2 	bl	8004d88 <_printf_common>
 8004fc4:	3001      	adds	r0, #1
 8004fc6:	d14c      	bne.n	8005062 <_printf_i+0x1fe>
 8004fc8:	f04f 30ff 	mov.w	r0, #4294967295
 8004fcc:	b004      	add	sp, #16
 8004fce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004fd2:	4835      	ldr	r0, [pc, #212]	; (80050a8 <_printf_i+0x244>)
 8004fd4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004fd8:	6829      	ldr	r1, [r5, #0]
 8004fda:	6823      	ldr	r3, [r4, #0]
 8004fdc:	f851 6b04 	ldr.w	r6, [r1], #4
 8004fe0:	6029      	str	r1, [r5, #0]
 8004fe2:	061d      	lsls	r5, r3, #24
 8004fe4:	d514      	bpl.n	8005010 <_printf_i+0x1ac>
 8004fe6:	07df      	lsls	r7, r3, #31
 8004fe8:	bf44      	itt	mi
 8004fea:	f043 0320 	orrmi.w	r3, r3, #32
 8004fee:	6023      	strmi	r3, [r4, #0]
 8004ff0:	b91e      	cbnz	r6, 8004ffa <_printf_i+0x196>
 8004ff2:	6823      	ldr	r3, [r4, #0]
 8004ff4:	f023 0320 	bic.w	r3, r3, #32
 8004ff8:	6023      	str	r3, [r4, #0]
 8004ffa:	2310      	movs	r3, #16
 8004ffc:	e7b0      	b.n	8004f60 <_printf_i+0xfc>
 8004ffe:	6823      	ldr	r3, [r4, #0]
 8005000:	f043 0320 	orr.w	r3, r3, #32
 8005004:	6023      	str	r3, [r4, #0]
 8005006:	2378      	movs	r3, #120	; 0x78
 8005008:	4828      	ldr	r0, [pc, #160]	; (80050ac <_printf_i+0x248>)
 800500a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800500e:	e7e3      	b.n	8004fd8 <_printf_i+0x174>
 8005010:	0659      	lsls	r1, r3, #25
 8005012:	bf48      	it	mi
 8005014:	b2b6      	uxthmi	r6, r6
 8005016:	e7e6      	b.n	8004fe6 <_printf_i+0x182>
 8005018:	4615      	mov	r5, r2
 800501a:	e7bb      	b.n	8004f94 <_printf_i+0x130>
 800501c:	682b      	ldr	r3, [r5, #0]
 800501e:	6826      	ldr	r6, [r4, #0]
 8005020:	6961      	ldr	r1, [r4, #20]
 8005022:	1d18      	adds	r0, r3, #4
 8005024:	6028      	str	r0, [r5, #0]
 8005026:	0635      	lsls	r5, r6, #24
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	d501      	bpl.n	8005030 <_printf_i+0x1cc>
 800502c:	6019      	str	r1, [r3, #0]
 800502e:	e002      	b.n	8005036 <_printf_i+0x1d2>
 8005030:	0670      	lsls	r0, r6, #25
 8005032:	d5fb      	bpl.n	800502c <_printf_i+0x1c8>
 8005034:	8019      	strh	r1, [r3, #0]
 8005036:	2300      	movs	r3, #0
 8005038:	6123      	str	r3, [r4, #16]
 800503a:	4615      	mov	r5, r2
 800503c:	e7ba      	b.n	8004fb4 <_printf_i+0x150>
 800503e:	682b      	ldr	r3, [r5, #0]
 8005040:	1d1a      	adds	r2, r3, #4
 8005042:	602a      	str	r2, [r5, #0]
 8005044:	681d      	ldr	r5, [r3, #0]
 8005046:	6862      	ldr	r2, [r4, #4]
 8005048:	2100      	movs	r1, #0
 800504a:	4628      	mov	r0, r5
 800504c:	f7fb f8c8 	bl	80001e0 <memchr>
 8005050:	b108      	cbz	r0, 8005056 <_printf_i+0x1f2>
 8005052:	1b40      	subs	r0, r0, r5
 8005054:	6060      	str	r0, [r4, #4]
 8005056:	6863      	ldr	r3, [r4, #4]
 8005058:	6123      	str	r3, [r4, #16]
 800505a:	2300      	movs	r3, #0
 800505c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005060:	e7a8      	b.n	8004fb4 <_printf_i+0x150>
 8005062:	6923      	ldr	r3, [r4, #16]
 8005064:	462a      	mov	r2, r5
 8005066:	4649      	mov	r1, r9
 8005068:	4640      	mov	r0, r8
 800506a:	47d0      	blx	sl
 800506c:	3001      	adds	r0, #1
 800506e:	d0ab      	beq.n	8004fc8 <_printf_i+0x164>
 8005070:	6823      	ldr	r3, [r4, #0]
 8005072:	079b      	lsls	r3, r3, #30
 8005074:	d413      	bmi.n	800509e <_printf_i+0x23a>
 8005076:	68e0      	ldr	r0, [r4, #12]
 8005078:	9b03      	ldr	r3, [sp, #12]
 800507a:	4298      	cmp	r0, r3
 800507c:	bfb8      	it	lt
 800507e:	4618      	movlt	r0, r3
 8005080:	e7a4      	b.n	8004fcc <_printf_i+0x168>
 8005082:	2301      	movs	r3, #1
 8005084:	4632      	mov	r2, r6
 8005086:	4649      	mov	r1, r9
 8005088:	4640      	mov	r0, r8
 800508a:	47d0      	blx	sl
 800508c:	3001      	adds	r0, #1
 800508e:	d09b      	beq.n	8004fc8 <_printf_i+0x164>
 8005090:	3501      	adds	r5, #1
 8005092:	68e3      	ldr	r3, [r4, #12]
 8005094:	9903      	ldr	r1, [sp, #12]
 8005096:	1a5b      	subs	r3, r3, r1
 8005098:	42ab      	cmp	r3, r5
 800509a:	dcf2      	bgt.n	8005082 <_printf_i+0x21e>
 800509c:	e7eb      	b.n	8005076 <_printf_i+0x212>
 800509e:	2500      	movs	r5, #0
 80050a0:	f104 0619 	add.w	r6, r4, #25
 80050a4:	e7f5      	b.n	8005092 <_printf_i+0x22e>
 80050a6:	bf00      	nop
 80050a8:	08009cfc 	.word	0x08009cfc
 80050ac:	08009d0d 	.word	0x08009d0d

080050b0 <_scanf_float>:
 80050b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80050b4:	b087      	sub	sp, #28
 80050b6:	4617      	mov	r7, r2
 80050b8:	9303      	str	r3, [sp, #12]
 80050ba:	688b      	ldr	r3, [r1, #8]
 80050bc:	1e5a      	subs	r2, r3, #1
 80050be:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80050c2:	bf83      	ittte	hi
 80050c4:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80050c8:	195b      	addhi	r3, r3, r5
 80050ca:	9302      	strhi	r3, [sp, #8]
 80050cc:	2300      	movls	r3, #0
 80050ce:	bf86      	itte	hi
 80050d0:	f240 135d 	movwhi	r3, #349	; 0x15d
 80050d4:	608b      	strhi	r3, [r1, #8]
 80050d6:	9302      	strls	r3, [sp, #8]
 80050d8:	680b      	ldr	r3, [r1, #0]
 80050da:	468b      	mov	fp, r1
 80050dc:	2500      	movs	r5, #0
 80050de:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80050e2:	f84b 3b1c 	str.w	r3, [fp], #28
 80050e6:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80050ea:	4680      	mov	r8, r0
 80050ec:	460c      	mov	r4, r1
 80050ee:	465e      	mov	r6, fp
 80050f0:	46aa      	mov	sl, r5
 80050f2:	46a9      	mov	r9, r5
 80050f4:	9501      	str	r5, [sp, #4]
 80050f6:	68a2      	ldr	r2, [r4, #8]
 80050f8:	b152      	cbz	r2, 8005110 <_scanf_float+0x60>
 80050fa:	683b      	ldr	r3, [r7, #0]
 80050fc:	781b      	ldrb	r3, [r3, #0]
 80050fe:	2b4e      	cmp	r3, #78	; 0x4e
 8005100:	d864      	bhi.n	80051cc <_scanf_float+0x11c>
 8005102:	2b40      	cmp	r3, #64	; 0x40
 8005104:	d83c      	bhi.n	8005180 <_scanf_float+0xd0>
 8005106:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800510a:	b2c8      	uxtb	r0, r1
 800510c:	280e      	cmp	r0, #14
 800510e:	d93a      	bls.n	8005186 <_scanf_float+0xd6>
 8005110:	f1b9 0f00 	cmp.w	r9, #0
 8005114:	d003      	beq.n	800511e <_scanf_float+0x6e>
 8005116:	6823      	ldr	r3, [r4, #0]
 8005118:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800511c:	6023      	str	r3, [r4, #0]
 800511e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005122:	f1ba 0f01 	cmp.w	sl, #1
 8005126:	f200 8113 	bhi.w	8005350 <_scanf_float+0x2a0>
 800512a:	455e      	cmp	r6, fp
 800512c:	f200 8105 	bhi.w	800533a <_scanf_float+0x28a>
 8005130:	2501      	movs	r5, #1
 8005132:	4628      	mov	r0, r5
 8005134:	b007      	add	sp, #28
 8005136:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800513a:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800513e:	2a0d      	cmp	r2, #13
 8005140:	d8e6      	bhi.n	8005110 <_scanf_float+0x60>
 8005142:	a101      	add	r1, pc, #4	; (adr r1, 8005148 <_scanf_float+0x98>)
 8005144:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8005148:	08005287 	.word	0x08005287
 800514c:	08005111 	.word	0x08005111
 8005150:	08005111 	.word	0x08005111
 8005154:	08005111 	.word	0x08005111
 8005158:	080052e7 	.word	0x080052e7
 800515c:	080052bf 	.word	0x080052bf
 8005160:	08005111 	.word	0x08005111
 8005164:	08005111 	.word	0x08005111
 8005168:	08005295 	.word	0x08005295
 800516c:	08005111 	.word	0x08005111
 8005170:	08005111 	.word	0x08005111
 8005174:	08005111 	.word	0x08005111
 8005178:	08005111 	.word	0x08005111
 800517c:	0800524d 	.word	0x0800524d
 8005180:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8005184:	e7db      	b.n	800513e <_scanf_float+0x8e>
 8005186:	290e      	cmp	r1, #14
 8005188:	d8c2      	bhi.n	8005110 <_scanf_float+0x60>
 800518a:	a001      	add	r0, pc, #4	; (adr r0, 8005190 <_scanf_float+0xe0>)
 800518c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8005190:	0800523f 	.word	0x0800523f
 8005194:	08005111 	.word	0x08005111
 8005198:	0800523f 	.word	0x0800523f
 800519c:	080052d3 	.word	0x080052d3
 80051a0:	08005111 	.word	0x08005111
 80051a4:	080051ed 	.word	0x080051ed
 80051a8:	08005229 	.word	0x08005229
 80051ac:	08005229 	.word	0x08005229
 80051b0:	08005229 	.word	0x08005229
 80051b4:	08005229 	.word	0x08005229
 80051b8:	08005229 	.word	0x08005229
 80051bc:	08005229 	.word	0x08005229
 80051c0:	08005229 	.word	0x08005229
 80051c4:	08005229 	.word	0x08005229
 80051c8:	08005229 	.word	0x08005229
 80051cc:	2b6e      	cmp	r3, #110	; 0x6e
 80051ce:	d809      	bhi.n	80051e4 <_scanf_float+0x134>
 80051d0:	2b60      	cmp	r3, #96	; 0x60
 80051d2:	d8b2      	bhi.n	800513a <_scanf_float+0x8a>
 80051d4:	2b54      	cmp	r3, #84	; 0x54
 80051d6:	d077      	beq.n	80052c8 <_scanf_float+0x218>
 80051d8:	2b59      	cmp	r3, #89	; 0x59
 80051da:	d199      	bne.n	8005110 <_scanf_float+0x60>
 80051dc:	2d07      	cmp	r5, #7
 80051de:	d197      	bne.n	8005110 <_scanf_float+0x60>
 80051e0:	2508      	movs	r5, #8
 80051e2:	e029      	b.n	8005238 <_scanf_float+0x188>
 80051e4:	2b74      	cmp	r3, #116	; 0x74
 80051e6:	d06f      	beq.n	80052c8 <_scanf_float+0x218>
 80051e8:	2b79      	cmp	r3, #121	; 0x79
 80051ea:	e7f6      	b.n	80051da <_scanf_float+0x12a>
 80051ec:	6821      	ldr	r1, [r4, #0]
 80051ee:	05c8      	lsls	r0, r1, #23
 80051f0:	d51a      	bpl.n	8005228 <_scanf_float+0x178>
 80051f2:	9b02      	ldr	r3, [sp, #8]
 80051f4:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80051f8:	6021      	str	r1, [r4, #0]
 80051fa:	f109 0901 	add.w	r9, r9, #1
 80051fe:	b11b      	cbz	r3, 8005208 <_scanf_float+0x158>
 8005200:	3b01      	subs	r3, #1
 8005202:	3201      	adds	r2, #1
 8005204:	9302      	str	r3, [sp, #8]
 8005206:	60a2      	str	r2, [r4, #8]
 8005208:	68a3      	ldr	r3, [r4, #8]
 800520a:	3b01      	subs	r3, #1
 800520c:	60a3      	str	r3, [r4, #8]
 800520e:	6923      	ldr	r3, [r4, #16]
 8005210:	3301      	adds	r3, #1
 8005212:	6123      	str	r3, [r4, #16]
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	3b01      	subs	r3, #1
 8005218:	2b00      	cmp	r3, #0
 800521a:	607b      	str	r3, [r7, #4]
 800521c:	f340 8084 	ble.w	8005328 <_scanf_float+0x278>
 8005220:	683b      	ldr	r3, [r7, #0]
 8005222:	3301      	adds	r3, #1
 8005224:	603b      	str	r3, [r7, #0]
 8005226:	e766      	b.n	80050f6 <_scanf_float+0x46>
 8005228:	eb1a 0f05 	cmn.w	sl, r5
 800522c:	f47f af70 	bne.w	8005110 <_scanf_float+0x60>
 8005230:	6822      	ldr	r2, [r4, #0]
 8005232:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8005236:	6022      	str	r2, [r4, #0]
 8005238:	f806 3b01 	strb.w	r3, [r6], #1
 800523c:	e7e4      	b.n	8005208 <_scanf_float+0x158>
 800523e:	6822      	ldr	r2, [r4, #0]
 8005240:	0610      	lsls	r0, r2, #24
 8005242:	f57f af65 	bpl.w	8005110 <_scanf_float+0x60>
 8005246:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800524a:	e7f4      	b.n	8005236 <_scanf_float+0x186>
 800524c:	f1ba 0f00 	cmp.w	sl, #0
 8005250:	d10e      	bne.n	8005270 <_scanf_float+0x1c0>
 8005252:	f1b9 0f00 	cmp.w	r9, #0
 8005256:	d10e      	bne.n	8005276 <_scanf_float+0x1c6>
 8005258:	6822      	ldr	r2, [r4, #0]
 800525a:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800525e:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8005262:	d108      	bne.n	8005276 <_scanf_float+0x1c6>
 8005264:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8005268:	6022      	str	r2, [r4, #0]
 800526a:	f04f 0a01 	mov.w	sl, #1
 800526e:	e7e3      	b.n	8005238 <_scanf_float+0x188>
 8005270:	f1ba 0f02 	cmp.w	sl, #2
 8005274:	d055      	beq.n	8005322 <_scanf_float+0x272>
 8005276:	2d01      	cmp	r5, #1
 8005278:	d002      	beq.n	8005280 <_scanf_float+0x1d0>
 800527a:	2d04      	cmp	r5, #4
 800527c:	f47f af48 	bne.w	8005110 <_scanf_float+0x60>
 8005280:	3501      	adds	r5, #1
 8005282:	b2ed      	uxtb	r5, r5
 8005284:	e7d8      	b.n	8005238 <_scanf_float+0x188>
 8005286:	f1ba 0f01 	cmp.w	sl, #1
 800528a:	f47f af41 	bne.w	8005110 <_scanf_float+0x60>
 800528e:	f04f 0a02 	mov.w	sl, #2
 8005292:	e7d1      	b.n	8005238 <_scanf_float+0x188>
 8005294:	b97d      	cbnz	r5, 80052b6 <_scanf_float+0x206>
 8005296:	f1b9 0f00 	cmp.w	r9, #0
 800529a:	f47f af3c 	bne.w	8005116 <_scanf_float+0x66>
 800529e:	6822      	ldr	r2, [r4, #0]
 80052a0:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80052a4:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80052a8:	f47f af39 	bne.w	800511e <_scanf_float+0x6e>
 80052ac:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80052b0:	6022      	str	r2, [r4, #0]
 80052b2:	2501      	movs	r5, #1
 80052b4:	e7c0      	b.n	8005238 <_scanf_float+0x188>
 80052b6:	2d03      	cmp	r5, #3
 80052b8:	d0e2      	beq.n	8005280 <_scanf_float+0x1d0>
 80052ba:	2d05      	cmp	r5, #5
 80052bc:	e7de      	b.n	800527c <_scanf_float+0x1cc>
 80052be:	2d02      	cmp	r5, #2
 80052c0:	f47f af26 	bne.w	8005110 <_scanf_float+0x60>
 80052c4:	2503      	movs	r5, #3
 80052c6:	e7b7      	b.n	8005238 <_scanf_float+0x188>
 80052c8:	2d06      	cmp	r5, #6
 80052ca:	f47f af21 	bne.w	8005110 <_scanf_float+0x60>
 80052ce:	2507      	movs	r5, #7
 80052d0:	e7b2      	b.n	8005238 <_scanf_float+0x188>
 80052d2:	6822      	ldr	r2, [r4, #0]
 80052d4:	0591      	lsls	r1, r2, #22
 80052d6:	f57f af1b 	bpl.w	8005110 <_scanf_float+0x60>
 80052da:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 80052de:	6022      	str	r2, [r4, #0]
 80052e0:	f8cd 9004 	str.w	r9, [sp, #4]
 80052e4:	e7a8      	b.n	8005238 <_scanf_float+0x188>
 80052e6:	6822      	ldr	r2, [r4, #0]
 80052e8:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 80052ec:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80052f0:	d006      	beq.n	8005300 <_scanf_float+0x250>
 80052f2:	0550      	lsls	r0, r2, #21
 80052f4:	f57f af0c 	bpl.w	8005110 <_scanf_float+0x60>
 80052f8:	f1b9 0f00 	cmp.w	r9, #0
 80052fc:	f43f af0f 	beq.w	800511e <_scanf_float+0x6e>
 8005300:	0591      	lsls	r1, r2, #22
 8005302:	bf58      	it	pl
 8005304:	9901      	ldrpl	r1, [sp, #4]
 8005306:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800530a:	bf58      	it	pl
 800530c:	eba9 0101 	subpl.w	r1, r9, r1
 8005310:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8005314:	bf58      	it	pl
 8005316:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800531a:	6022      	str	r2, [r4, #0]
 800531c:	f04f 0900 	mov.w	r9, #0
 8005320:	e78a      	b.n	8005238 <_scanf_float+0x188>
 8005322:	f04f 0a03 	mov.w	sl, #3
 8005326:	e787      	b.n	8005238 <_scanf_float+0x188>
 8005328:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800532c:	4639      	mov	r1, r7
 800532e:	4640      	mov	r0, r8
 8005330:	4798      	blx	r3
 8005332:	2800      	cmp	r0, #0
 8005334:	f43f aedf 	beq.w	80050f6 <_scanf_float+0x46>
 8005338:	e6ea      	b.n	8005110 <_scanf_float+0x60>
 800533a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800533e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005342:	463a      	mov	r2, r7
 8005344:	4640      	mov	r0, r8
 8005346:	4798      	blx	r3
 8005348:	6923      	ldr	r3, [r4, #16]
 800534a:	3b01      	subs	r3, #1
 800534c:	6123      	str	r3, [r4, #16]
 800534e:	e6ec      	b.n	800512a <_scanf_float+0x7a>
 8005350:	1e6b      	subs	r3, r5, #1
 8005352:	2b06      	cmp	r3, #6
 8005354:	d825      	bhi.n	80053a2 <_scanf_float+0x2f2>
 8005356:	2d02      	cmp	r5, #2
 8005358:	d836      	bhi.n	80053c8 <_scanf_float+0x318>
 800535a:	455e      	cmp	r6, fp
 800535c:	f67f aee8 	bls.w	8005130 <_scanf_float+0x80>
 8005360:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005364:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005368:	463a      	mov	r2, r7
 800536a:	4640      	mov	r0, r8
 800536c:	4798      	blx	r3
 800536e:	6923      	ldr	r3, [r4, #16]
 8005370:	3b01      	subs	r3, #1
 8005372:	6123      	str	r3, [r4, #16]
 8005374:	e7f1      	b.n	800535a <_scanf_float+0x2aa>
 8005376:	9802      	ldr	r0, [sp, #8]
 8005378:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800537c:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8005380:	9002      	str	r0, [sp, #8]
 8005382:	463a      	mov	r2, r7
 8005384:	4640      	mov	r0, r8
 8005386:	4798      	blx	r3
 8005388:	6923      	ldr	r3, [r4, #16]
 800538a:	3b01      	subs	r3, #1
 800538c:	6123      	str	r3, [r4, #16]
 800538e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005392:	fa5f fa8a 	uxtb.w	sl, sl
 8005396:	f1ba 0f02 	cmp.w	sl, #2
 800539a:	d1ec      	bne.n	8005376 <_scanf_float+0x2c6>
 800539c:	3d03      	subs	r5, #3
 800539e:	b2ed      	uxtb	r5, r5
 80053a0:	1b76      	subs	r6, r6, r5
 80053a2:	6823      	ldr	r3, [r4, #0]
 80053a4:	05da      	lsls	r2, r3, #23
 80053a6:	d52f      	bpl.n	8005408 <_scanf_float+0x358>
 80053a8:	055b      	lsls	r3, r3, #21
 80053aa:	d510      	bpl.n	80053ce <_scanf_float+0x31e>
 80053ac:	455e      	cmp	r6, fp
 80053ae:	f67f aebf 	bls.w	8005130 <_scanf_float+0x80>
 80053b2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80053b6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80053ba:	463a      	mov	r2, r7
 80053bc:	4640      	mov	r0, r8
 80053be:	4798      	blx	r3
 80053c0:	6923      	ldr	r3, [r4, #16]
 80053c2:	3b01      	subs	r3, #1
 80053c4:	6123      	str	r3, [r4, #16]
 80053c6:	e7f1      	b.n	80053ac <_scanf_float+0x2fc>
 80053c8:	46aa      	mov	sl, r5
 80053ca:	9602      	str	r6, [sp, #8]
 80053cc:	e7df      	b.n	800538e <_scanf_float+0x2de>
 80053ce:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80053d2:	6923      	ldr	r3, [r4, #16]
 80053d4:	2965      	cmp	r1, #101	; 0x65
 80053d6:	f103 33ff 	add.w	r3, r3, #4294967295
 80053da:	f106 35ff 	add.w	r5, r6, #4294967295
 80053de:	6123      	str	r3, [r4, #16]
 80053e0:	d00c      	beq.n	80053fc <_scanf_float+0x34c>
 80053e2:	2945      	cmp	r1, #69	; 0x45
 80053e4:	d00a      	beq.n	80053fc <_scanf_float+0x34c>
 80053e6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80053ea:	463a      	mov	r2, r7
 80053ec:	4640      	mov	r0, r8
 80053ee:	4798      	blx	r3
 80053f0:	6923      	ldr	r3, [r4, #16]
 80053f2:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80053f6:	3b01      	subs	r3, #1
 80053f8:	1eb5      	subs	r5, r6, #2
 80053fa:	6123      	str	r3, [r4, #16]
 80053fc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005400:	463a      	mov	r2, r7
 8005402:	4640      	mov	r0, r8
 8005404:	4798      	blx	r3
 8005406:	462e      	mov	r6, r5
 8005408:	6825      	ldr	r5, [r4, #0]
 800540a:	f015 0510 	ands.w	r5, r5, #16
 800540e:	d159      	bne.n	80054c4 <_scanf_float+0x414>
 8005410:	7035      	strb	r5, [r6, #0]
 8005412:	6823      	ldr	r3, [r4, #0]
 8005414:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005418:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800541c:	d11b      	bne.n	8005456 <_scanf_float+0x3a6>
 800541e:	9b01      	ldr	r3, [sp, #4]
 8005420:	454b      	cmp	r3, r9
 8005422:	eba3 0209 	sub.w	r2, r3, r9
 8005426:	d123      	bne.n	8005470 <_scanf_float+0x3c0>
 8005428:	2200      	movs	r2, #0
 800542a:	4659      	mov	r1, fp
 800542c:	4640      	mov	r0, r8
 800542e:	f000 ffbd 	bl	80063ac <_strtod_r>
 8005432:	6822      	ldr	r2, [r4, #0]
 8005434:	9b03      	ldr	r3, [sp, #12]
 8005436:	f012 0f02 	tst.w	r2, #2
 800543a:	ec57 6b10 	vmov	r6, r7, d0
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	d021      	beq.n	8005486 <_scanf_float+0x3d6>
 8005442:	9903      	ldr	r1, [sp, #12]
 8005444:	1d1a      	adds	r2, r3, #4
 8005446:	600a      	str	r2, [r1, #0]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	e9c3 6700 	strd	r6, r7, [r3]
 800544e:	68e3      	ldr	r3, [r4, #12]
 8005450:	3301      	adds	r3, #1
 8005452:	60e3      	str	r3, [r4, #12]
 8005454:	e66d      	b.n	8005132 <_scanf_float+0x82>
 8005456:	9b04      	ldr	r3, [sp, #16]
 8005458:	2b00      	cmp	r3, #0
 800545a:	d0e5      	beq.n	8005428 <_scanf_float+0x378>
 800545c:	9905      	ldr	r1, [sp, #20]
 800545e:	230a      	movs	r3, #10
 8005460:	462a      	mov	r2, r5
 8005462:	3101      	adds	r1, #1
 8005464:	4640      	mov	r0, r8
 8005466:	f001 f829 	bl	80064bc <_strtol_r>
 800546a:	9b04      	ldr	r3, [sp, #16]
 800546c:	9e05      	ldr	r6, [sp, #20]
 800546e:	1ac2      	subs	r2, r0, r3
 8005470:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8005474:	429e      	cmp	r6, r3
 8005476:	bf28      	it	cs
 8005478:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800547c:	4912      	ldr	r1, [pc, #72]	; (80054c8 <_scanf_float+0x418>)
 800547e:	4630      	mov	r0, r6
 8005480:	f000 f8ba 	bl	80055f8 <siprintf>
 8005484:	e7d0      	b.n	8005428 <_scanf_float+0x378>
 8005486:	9903      	ldr	r1, [sp, #12]
 8005488:	f012 0f04 	tst.w	r2, #4
 800548c:	f103 0204 	add.w	r2, r3, #4
 8005490:	600a      	str	r2, [r1, #0]
 8005492:	d1d9      	bne.n	8005448 <_scanf_float+0x398>
 8005494:	f8d3 8000 	ldr.w	r8, [r3]
 8005498:	ee10 2a10 	vmov	r2, s0
 800549c:	ee10 0a10 	vmov	r0, s0
 80054a0:	463b      	mov	r3, r7
 80054a2:	4639      	mov	r1, r7
 80054a4:	f7fb fb42 	bl	8000b2c <__aeabi_dcmpun>
 80054a8:	b128      	cbz	r0, 80054b6 <_scanf_float+0x406>
 80054aa:	4808      	ldr	r0, [pc, #32]	; (80054cc <_scanf_float+0x41c>)
 80054ac:	f000 f89e 	bl	80055ec <nanf>
 80054b0:	ed88 0a00 	vstr	s0, [r8]
 80054b4:	e7cb      	b.n	800544e <_scanf_float+0x39e>
 80054b6:	4630      	mov	r0, r6
 80054b8:	4639      	mov	r1, r7
 80054ba:	f7fb fb95 	bl	8000be8 <__aeabi_d2f>
 80054be:	f8c8 0000 	str.w	r0, [r8]
 80054c2:	e7c4      	b.n	800544e <_scanf_float+0x39e>
 80054c4:	2500      	movs	r5, #0
 80054c6:	e634      	b.n	8005132 <_scanf_float+0x82>
 80054c8:	08009d1e 	.word	0x08009d1e
 80054cc:	0800a1ab 	.word	0x0800a1ab

080054d0 <iprintf>:
 80054d0:	b40f      	push	{r0, r1, r2, r3}
 80054d2:	4b0a      	ldr	r3, [pc, #40]	; (80054fc <iprintf+0x2c>)
 80054d4:	b513      	push	{r0, r1, r4, lr}
 80054d6:	681c      	ldr	r4, [r3, #0]
 80054d8:	b124      	cbz	r4, 80054e4 <iprintf+0x14>
 80054da:	69a3      	ldr	r3, [r4, #24]
 80054dc:	b913      	cbnz	r3, 80054e4 <iprintf+0x14>
 80054de:	4620      	mov	r0, r4
 80054e0:	f002 f866 	bl	80075b0 <__sinit>
 80054e4:	ab05      	add	r3, sp, #20
 80054e6:	9a04      	ldr	r2, [sp, #16]
 80054e8:	68a1      	ldr	r1, [r4, #8]
 80054ea:	9301      	str	r3, [sp, #4]
 80054ec:	4620      	mov	r0, r4
 80054ee:	f003 fe23 	bl	8009138 <_vfiprintf_r>
 80054f2:	b002      	add	sp, #8
 80054f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80054f8:	b004      	add	sp, #16
 80054fa:	4770      	bx	lr
 80054fc:	2000000c 	.word	0x2000000c

08005500 <_puts_r>:
 8005500:	b570      	push	{r4, r5, r6, lr}
 8005502:	460e      	mov	r6, r1
 8005504:	4605      	mov	r5, r0
 8005506:	b118      	cbz	r0, 8005510 <_puts_r+0x10>
 8005508:	6983      	ldr	r3, [r0, #24]
 800550a:	b90b      	cbnz	r3, 8005510 <_puts_r+0x10>
 800550c:	f002 f850 	bl	80075b0 <__sinit>
 8005510:	69ab      	ldr	r3, [r5, #24]
 8005512:	68ac      	ldr	r4, [r5, #8]
 8005514:	b913      	cbnz	r3, 800551c <_puts_r+0x1c>
 8005516:	4628      	mov	r0, r5
 8005518:	f002 f84a 	bl	80075b0 <__sinit>
 800551c:	4b2c      	ldr	r3, [pc, #176]	; (80055d0 <_puts_r+0xd0>)
 800551e:	429c      	cmp	r4, r3
 8005520:	d120      	bne.n	8005564 <_puts_r+0x64>
 8005522:	686c      	ldr	r4, [r5, #4]
 8005524:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005526:	07db      	lsls	r3, r3, #31
 8005528:	d405      	bmi.n	8005536 <_puts_r+0x36>
 800552a:	89a3      	ldrh	r3, [r4, #12]
 800552c:	0598      	lsls	r0, r3, #22
 800552e:	d402      	bmi.n	8005536 <_puts_r+0x36>
 8005530:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005532:	f002 fc4e 	bl	8007dd2 <__retarget_lock_acquire_recursive>
 8005536:	89a3      	ldrh	r3, [r4, #12]
 8005538:	0719      	lsls	r1, r3, #28
 800553a:	d51d      	bpl.n	8005578 <_puts_r+0x78>
 800553c:	6923      	ldr	r3, [r4, #16]
 800553e:	b1db      	cbz	r3, 8005578 <_puts_r+0x78>
 8005540:	3e01      	subs	r6, #1
 8005542:	68a3      	ldr	r3, [r4, #8]
 8005544:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005548:	3b01      	subs	r3, #1
 800554a:	60a3      	str	r3, [r4, #8]
 800554c:	bb39      	cbnz	r1, 800559e <_puts_r+0x9e>
 800554e:	2b00      	cmp	r3, #0
 8005550:	da38      	bge.n	80055c4 <_puts_r+0xc4>
 8005552:	4622      	mov	r2, r4
 8005554:	210a      	movs	r1, #10
 8005556:	4628      	mov	r0, r5
 8005558:	f000 ffb2 	bl	80064c0 <__swbuf_r>
 800555c:	3001      	adds	r0, #1
 800555e:	d011      	beq.n	8005584 <_puts_r+0x84>
 8005560:	250a      	movs	r5, #10
 8005562:	e011      	b.n	8005588 <_puts_r+0x88>
 8005564:	4b1b      	ldr	r3, [pc, #108]	; (80055d4 <_puts_r+0xd4>)
 8005566:	429c      	cmp	r4, r3
 8005568:	d101      	bne.n	800556e <_puts_r+0x6e>
 800556a:	68ac      	ldr	r4, [r5, #8]
 800556c:	e7da      	b.n	8005524 <_puts_r+0x24>
 800556e:	4b1a      	ldr	r3, [pc, #104]	; (80055d8 <_puts_r+0xd8>)
 8005570:	429c      	cmp	r4, r3
 8005572:	bf08      	it	eq
 8005574:	68ec      	ldreq	r4, [r5, #12]
 8005576:	e7d5      	b.n	8005524 <_puts_r+0x24>
 8005578:	4621      	mov	r1, r4
 800557a:	4628      	mov	r0, r5
 800557c:	f001 f804 	bl	8006588 <__swsetup_r>
 8005580:	2800      	cmp	r0, #0
 8005582:	d0dd      	beq.n	8005540 <_puts_r+0x40>
 8005584:	f04f 35ff 	mov.w	r5, #4294967295
 8005588:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800558a:	07da      	lsls	r2, r3, #31
 800558c:	d405      	bmi.n	800559a <_puts_r+0x9a>
 800558e:	89a3      	ldrh	r3, [r4, #12]
 8005590:	059b      	lsls	r3, r3, #22
 8005592:	d402      	bmi.n	800559a <_puts_r+0x9a>
 8005594:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005596:	f002 fc1d 	bl	8007dd4 <__retarget_lock_release_recursive>
 800559a:	4628      	mov	r0, r5
 800559c:	bd70      	pop	{r4, r5, r6, pc}
 800559e:	2b00      	cmp	r3, #0
 80055a0:	da04      	bge.n	80055ac <_puts_r+0xac>
 80055a2:	69a2      	ldr	r2, [r4, #24]
 80055a4:	429a      	cmp	r2, r3
 80055a6:	dc06      	bgt.n	80055b6 <_puts_r+0xb6>
 80055a8:	290a      	cmp	r1, #10
 80055aa:	d004      	beq.n	80055b6 <_puts_r+0xb6>
 80055ac:	6823      	ldr	r3, [r4, #0]
 80055ae:	1c5a      	adds	r2, r3, #1
 80055b0:	6022      	str	r2, [r4, #0]
 80055b2:	7019      	strb	r1, [r3, #0]
 80055b4:	e7c5      	b.n	8005542 <_puts_r+0x42>
 80055b6:	4622      	mov	r2, r4
 80055b8:	4628      	mov	r0, r5
 80055ba:	f000 ff81 	bl	80064c0 <__swbuf_r>
 80055be:	3001      	adds	r0, #1
 80055c0:	d1bf      	bne.n	8005542 <_puts_r+0x42>
 80055c2:	e7df      	b.n	8005584 <_puts_r+0x84>
 80055c4:	6823      	ldr	r3, [r4, #0]
 80055c6:	250a      	movs	r5, #10
 80055c8:	1c5a      	adds	r2, r3, #1
 80055ca:	6022      	str	r2, [r4, #0]
 80055cc:	701d      	strb	r5, [r3, #0]
 80055ce:	e7db      	b.n	8005588 <_puts_r+0x88>
 80055d0:	08009f2c 	.word	0x08009f2c
 80055d4:	08009f4c 	.word	0x08009f4c
 80055d8:	08009f0c 	.word	0x08009f0c

080055dc <puts>:
 80055dc:	4b02      	ldr	r3, [pc, #8]	; (80055e8 <puts+0xc>)
 80055de:	4601      	mov	r1, r0
 80055e0:	6818      	ldr	r0, [r3, #0]
 80055e2:	f7ff bf8d 	b.w	8005500 <_puts_r>
 80055e6:	bf00      	nop
 80055e8:	2000000c 	.word	0x2000000c

080055ec <nanf>:
 80055ec:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80055f4 <nanf+0x8>
 80055f0:	4770      	bx	lr
 80055f2:	bf00      	nop
 80055f4:	7fc00000 	.word	0x7fc00000

080055f8 <siprintf>:
 80055f8:	b40e      	push	{r1, r2, r3}
 80055fa:	b500      	push	{lr}
 80055fc:	b09c      	sub	sp, #112	; 0x70
 80055fe:	ab1d      	add	r3, sp, #116	; 0x74
 8005600:	9002      	str	r0, [sp, #8]
 8005602:	9006      	str	r0, [sp, #24]
 8005604:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005608:	4809      	ldr	r0, [pc, #36]	; (8005630 <siprintf+0x38>)
 800560a:	9107      	str	r1, [sp, #28]
 800560c:	9104      	str	r1, [sp, #16]
 800560e:	4909      	ldr	r1, [pc, #36]	; (8005634 <siprintf+0x3c>)
 8005610:	f853 2b04 	ldr.w	r2, [r3], #4
 8005614:	9105      	str	r1, [sp, #20]
 8005616:	6800      	ldr	r0, [r0, #0]
 8005618:	9301      	str	r3, [sp, #4]
 800561a:	a902      	add	r1, sp, #8
 800561c:	f003 fa90 	bl	8008b40 <_svfiprintf_r>
 8005620:	9b02      	ldr	r3, [sp, #8]
 8005622:	2200      	movs	r2, #0
 8005624:	701a      	strb	r2, [r3, #0]
 8005626:	b01c      	add	sp, #112	; 0x70
 8005628:	f85d eb04 	ldr.w	lr, [sp], #4
 800562c:	b003      	add	sp, #12
 800562e:	4770      	bx	lr
 8005630:	2000000c 	.word	0x2000000c
 8005634:	ffff0208 	.word	0xffff0208

08005638 <siscanf>:
 8005638:	b40e      	push	{r1, r2, r3}
 800563a:	b510      	push	{r4, lr}
 800563c:	b09f      	sub	sp, #124	; 0x7c
 800563e:	ac21      	add	r4, sp, #132	; 0x84
 8005640:	f44f 7101 	mov.w	r1, #516	; 0x204
 8005644:	f854 2b04 	ldr.w	r2, [r4], #4
 8005648:	9201      	str	r2, [sp, #4]
 800564a:	f8ad 101c 	strh.w	r1, [sp, #28]
 800564e:	9004      	str	r0, [sp, #16]
 8005650:	9008      	str	r0, [sp, #32]
 8005652:	f7fa fdbd 	bl	80001d0 <strlen>
 8005656:	4b0c      	ldr	r3, [pc, #48]	; (8005688 <siscanf+0x50>)
 8005658:	9005      	str	r0, [sp, #20]
 800565a:	9009      	str	r0, [sp, #36]	; 0x24
 800565c:	930d      	str	r3, [sp, #52]	; 0x34
 800565e:	480b      	ldr	r0, [pc, #44]	; (800568c <siscanf+0x54>)
 8005660:	9a01      	ldr	r2, [sp, #4]
 8005662:	6800      	ldr	r0, [r0, #0]
 8005664:	9403      	str	r4, [sp, #12]
 8005666:	2300      	movs	r3, #0
 8005668:	9311      	str	r3, [sp, #68]	; 0x44
 800566a:	9316      	str	r3, [sp, #88]	; 0x58
 800566c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005670:	f8ad 301e 	strh.w	r3, [sp, #30]
 8005674:	a904      	add	r1, sp, #16
 8005676:	4623      	mov	r3, r4
 8005678:	f003 fbbc 	bl	8008df4 <__ssvfiscanf_r>
 800567c:	b01f      	add	sp, #124	; 0x7c
 800567e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005682:	b003      	add	sp, #12
 8005684:	4770      	bx	lr
 8005686:	bf00      	nop
 8005688:	080056b3 	.word	0x080056b3
 800568c:	2000000c 	.word	0x2000000c

08005690 <__sread>:
 8005690:	b510      	push	{r4, lr}
 8005692:	460c      	mov	r4, r1
 8005694:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005698:	f003 ffd0 	bl	800963c <_read_r>
 800569c:	2800      	cmp	r0, #0
 800569e:	bfab      	itete	ge
 80056a0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80056a2:	89a3      	ldrhlt	r3, [r4, #12]
 80056a4:	181b      	addge	r3, r3, r0
 80056a6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80056aa:	bfac      	ite	ge
 80056ac:	6563      	strge	r3, [r4, #84]	; 0x54
 80056ae:	81a3      	strhlt	r3, [r4, #12]
 80056b0:	bd10      	pop	{r4, pc}

080056b2 <__seofread>:
 80056b2:	2000      	movs	r0, #0
 80056b4:	4770      	bx	lr

080056b6 <__swrite>:
 80056b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80056ba:	461f      	mov	r7, r3
 80056bc:	898b      	ldrh	r3, [r1, #12]
 80056be:	05db      	lsls	r3, r3, #23
 80056c0:	4605      	mov	r5, r0
 80056c2:	460c      	mov	r4, r1
 80056c4:	4616      	mov	r6, r2
 80056c6:	d505      	bpl.n	80056d4 <__swrite+0x1e>
 80056c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80056cc:	2302      	movs	r3, #2
 80056ce:	2200      	movs	r2, #0
 80056d0:	f002 fb82 	bl	8007dd8 <_lseek_r>
 80056d4:	89a3      	ldrh	r3, [r4, #12]
 80056d6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80056da:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80056de:	81a3      	strh	r3, [r4, #12]
 80056e0:	4632      	mov	r2, r6
 80056e2:	463b      	mov	r3, r7
 80056e4:	4628      	mov	r0, r5
 80056e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80056ea:	f000 bf3b 	b.w	8006564 <_write_r>

080056ee <__sseek>:
 80056ee:	b510      	push	{r4, lr}
 80056f0:	460c      	mov	r4, r1
 80056f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80056f6:	f002 fb6f 	bl	8007dd8 <_lseek_r>
 80056fa:	1c43      	adds	r3, r0, #1
 80056fc:	89a3      	ldrh	r3, [r4, #12]
 80056fe:	bf15      	itete	ne
 8005700:	6560      	strne	r0, [r4, #84]	; 0x54
 8005702:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005706:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800570a:	81a3      	strheq	r3, [r4, #12]
 800570c:	bf18      	it	ne
 800570e:	81a3      	strhne	r3, [r4, #12]
 8005710:	bd10      	pop	{r4, pc}

08005712 <__sclose>:
 8005712:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005716:	f000 bfa5 	b.w	8006664 <_close_r>

0800571a <strncmp>:
 800571a:	b510      	push	{r4, lr}
 800571c:	b17a      	cbz	r2, 800573e <strncmp+0x24>
 800571e:	4603      	mov	r3, r0
 8005720:	3901      	subs	r1, #1
 8005722:	1884      	adds	r4, r0, r2
 8005724:	f813 0b01 	ldrb.w	r0, [r3], #1
 8005728:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800572c:	4290      	cmp	r0, r2
 800572e:	d101      	bne.n	8005734 <strncmp+0x1a>
 8005730:	42a3      	cmp	r3, r4
 8005732:	d101      	bne.n	8005738 <strncmp+0x1e>
 8005734:	1a80      	subs	r0, r0, r2
 8005736:	bd10      	pop	{r4, pc}
 8005738:	2800      	cmp	r0, #0
 800573a:	d1f3      	bne.n	8005724 <strncmp+0xa>
 800573c:	e7fa      	b.n	8005734 <strncmp+0x1a>
 800573e:	4610      	mov	r0, r2
 8005740:	e7f9      	b.n	8005736 <strncmp+0x1c>

08005742 <strncpy>:
 8005742:	b510      	push	{r4, lr}
 8005744:	3901      	subs	r1, #1
 8005746:	4603      	mov	r3, r0
 8005748:	b132      	cbz	r2, 8005758 <strncpy+0x16>
 800574a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800574e:	f803 4b01 	strb.w	r4, [r3], #1
 8005752:	3a01      	subs	r2, #1
 8005754:	2c00      	cmp	r4, #0
 8005756:	d1f7      	bne.n	8005748 <strncpy+0x6>
 8005758:	441a      	add	r2, r3
 800575a:	2100      	movs	r1, #0
 800575c:	4293      	cmp	r3, r2
 800575e:	d100      	bne.n	8005762 <strncpy+0x20>
 8005760:	bd10      	pop	{r4, pc}
 8005762:	f803 1b01 	strb.w	r1, [r3], #1
 8005766:	e7f9      	b.n	800575c <strncpy+0x1a>

08005768 <sulp>:
 8005768:	b570      	push	{r4, r5, r6, lr}
 800576a:	4604      	mov	r4, r0
 800576c:	460d      	mov	r5, r1
 800576e:	ec45 4b10 	vmov	d0, r4, r5
 8005772:	4616      	mov	r6, r2
 8005774:	f002 ff42 	bl	80085fc <__ulp>
 8005778:	ec51 0b10 	vmov	r0, r1, d0
 800577c:	b17e      	cbz	r6, 800579e <sulp+0x36>
 800577e:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8005782:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8005786:	2b00      	cmp	r3, #0
 8005788:	dd09      	ble.n	800579e <sulp+0x36>
 800578a:	051b      	lsls	r3, r3, #20
 800578c:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8005790:	2400      	movs	r4, #0
 8005792:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8005796:	4622      	mov	r2, r4
 8005798:	462b      	mov	r3, r5
 800579a:	f7fa ff2d 	bl	80005f8 <__aeabi_dmul>
 800579e:	bd70      	pop	{r4, r5, r6, pc}

080057a0 <_strtod_l>:
 80057a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057a4:	ed2d 8b02 	vpush	{d8}
 80057a8:	b09d      	sub	sp, #116	; 0x74
 80057aa:	461f      	mov	r7, r3
 80057ac:	2300      	movs	r3, #0
 80057ae:	9318      	str	r3, [sp, #96]	; 0x60
 80057b0:	4ba2      	ldr	r3, [pc, #648]	; (8005a3c <_strtod_l+0x29c>)
 80057b2:	9213      	str	r2, [sp, #76]	; 0x4c
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	9305      	str	r3, [sp, #20]
 80057b8:	4604      	mov	r4, r0
 80057ba:	4618      	mov	r0, r3
 80057bc:	4688      	mov	r8, r1
 80057be:	f7fa fd07 	bl	80001d0 <strlen>
 80057c2:	f04f 0a00 	mov.w	sl, #0
 80057c6:	4605      	mov	r5, r0
 80057c8:	f04f 0b00 	mov.w	fp, #0
 80057cc:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80057d0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80057d2:	781a      	ldrb	r2, [r3, #0]
 80057d4:	2a2b      	cmp	r2, #43	; 0x2b
 80057d6:	d04e      	beq.n	8005876 <_strtod_l+0xd6>
 80057d8:	d83b      	bhi.n	8005852 <_strtod_l+0xb2>
 80057da:	2a0d      	cmp	r2, #13
 80057dc:	d834      	bhi.n	8005848 <_strtod_l+0xa8>
 80057de:	2a08      	cmp	r2, #8
 80057e0:	d834      	bhi.n	800584c <_strtod_l+0xac>
 80057e2:	2a00      	cmp	r2, #0
 80057e4:	d03e      	beq.n	8005864 <_strtod_l+0xc4>
 80057e6:	2300      	movs	r3, #0
 80057e8:	930a      	str	r3, [sp, #40]	; 0x28
 80057ea:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 80057ec:	7833      	ldrb	r3, [r6, #0]
 80057ee:	2b30      	cmp	r3, #48	; 0x30
 80057f0:	f040 80b0 	bne.w	8005954 <_strtod_l+0x1b4>
 80057f4:	7873      	ldrb	r3, [r6, #1]
 80057f6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80057fa:	2b58      	cmp	r3, #88	; 0x58
 80057fc:	d168      	bne.n	80058d0 <_strtod_l+0x130>
 80057fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005800:	9301      	str	r3, [sp, #4]
 8005802:	ab18      	add	r3, sp, #96	; 0x60
 8005804:	9702      	str	r7, [sp, #8]
 8005806:	9300      	str	r3, [sp, #0]
 8005808:	4a8d      	ldr	r2, [pc, #564]	; (8005a40 <_strtod_l+0x2a0>)
 800580a:	ab19      	add	r3, sp, #100	; 0x64
 800580c:	a917      	add	r1, sp, #92	; 0x5c
 800580e:	4620      	mov	r0, r4
 8005810:	f001 ffd2 	bl	80077b8 <__gethex>
 8005814:	f010 0707 	ands.w	r7, r0, #7
 8005818:	4605      	mov	r5, r0
 800581a:	d005      	beq.n	8005828 <_strtod_l+0x88>
 800581c:	2f06      	cmp	r7, #6
 800581e:	d12c      	bne.n	800587a <_strtod_l+0xda>
 8005820:	3601      	adds	r6, #1
 8005822:	2300      	movs	r3, #0
 8005824:	9617      	str	r6, [sp, #92]	; 0x5c
 8005826:	930a      	str	r3, [sp, #40]	; 0x28
 8005828:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800582a:	2b00      	cmp	r3, #0
 800582c:	f040 8590 	bne.w	8006350 <_strtod_l+0xbb0>
 8005830:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005832:	b1eb      	cbz	r3, 8005870 <_strtod_l+0xd0>
 8005834:	4652      	mov	r2, sl
 8005836:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800583a:	ec43 2b10 	vmov	d0, r2, r3
 800583e:	b01d      	add	sp, #116	; 0x74
 8005840:	ecbd 8b02 	vpop	{d8}
 8005844:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005848:	2a20      	cmp	r2, #32
 800584a:	d1cc      	bne.n	80057e6 <_strtod_l+0x46>
 800584c:	3301      	adds	r3, #1
 800584e:	9317      	str	r3, [sp, #92]	; 0x5c
 8005850:	e7be      	b.n	80057d0 <_strtod_l+0x30>
 8005852:	2a2d      	cmp	r2, #45	; 0x2d
 8005854:	d1c7      	bne.n	80057e6 <_strtod_l+0x46>
 8005856:	2201      	movs	r2, #1
 8005858:	920a      	str	r2, [sp, #40]	; 0x28
 800585a:	1c5a      	adds	r2, r3, #1
 800585c:	9217      	str	r2, [sp, #92]	; 0x5c
 800585e:	785b      	ldrb	r3, [r3, #1]
 8005860:	2b00      	cmp	r3, #0
 8005862:	d1c2      	bne.n	80057ea <_strtod_l+0x4a>
 8005864:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005866:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800586a:	2b00      	cmp	r3, #0
 800586c:	f040 856e 	bne.w	800634c <_strtod_l+0xbac>
 8005870:	4652      	mov	r2, sl
 8005872:	465b      	mov	r3, fp
 8005874:	e7e1      	b.n	800583a <_strtod_l+0x9a>
 8005876:	2200      	movs	r2, #0
 8005878:	e7ee      	b.n	8005858 <_strtod_l+0xb8>
 800587a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800587c:	b13a      	cbz	r2, 800588e <_strtod_l+0xee>
 800587e:	2135      	movs	r1, #53	; 0x35
 8005880:	a81a      	add	r0, sp, #104	; 0x68
 8005882:	f002 ffc6 	bl	8008812 <__copybits>
 8005886:	9918      	ldr	r1, [sp, #96]	; 0x60
 8005888:	4620      	mov	r0, r4
 800588a:	f002 fb85 	bl	8007f98 <_Bfree>
 800588e:	3f01      	subs	r7, #1
 8005890:	2f04      	cmp	r7, #4
 8005892:	d806      	bhi.n	80058a2 <_strtod_l+0x102>
 8005894:	e8df f007 	tbb	[pc, r7]
 8005898:	1714030a 	.word	0x1714030a
 800589c:	0a          	.byte	0x0a
 800589d:	00          	.byte	0x00
 800589e:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 80058a2:	0728      	lsls	r0, r5, #28
 80058a4:	d5c0      	bpl.n	8005828 <_strtod_l+0x88>
 80058a6:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 80058aa:	e7bd      	b.n	8005828 <_strtod_l+0x88>
 80058ac:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 80058b0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80058b2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80058b6:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80058ba:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80058be:	e7f0      	b.n	80058a2 <_strtod_l+0x102>
 80058c0:	f8df b180 	ldr.w	fp, [pc, #384]	; 8005a44 <_strtod_l+0x2a4>
 80058c4:	e7ed      	b.n	80058a2 <_strtod_l+0x102>
 80058c6:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 80058ca:	f04f 3aff 	mov.w	sl, #4294967295
 80058ce:	e7e8      	b.n	80058a2 <_strtod_l+0x102>
 80058d0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80058d2:	1c5a      	adds	r2, r3, #1
 80058d4:	9217      	str	r2, [sp, #92]	; 0x5c
 80058d6:	785b      	ldrb	r3, [r3, #1]
 80058d8:	2b30      	cmp	r3, #48	; 0x30
 80058da:	d0f9      	beq.n	80058d0 <_strtod_l+0x130>
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d0a3      	beq.n	8005828 <_strtod_l+0x88>
 80058e0:	2301      	movs	r3, #1
 80058e2:	f04f 0900 	mov.w	r9, #0
 80058e6:	9304      	str	r3, [sp, #16]
 80058e8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80058ea:	9308      	str	r3, [sp, #32]
 80058ec:	f8cd 901c 	str.w	r9, [sp, #28]
 80058f0:	464f      	mov	r7, r9
 80058f2:	220a      	movs	r2, #10
 80058f4:	9817      	ldr	r0, [sp, #92]	; 0x5c
 80058f6:	7806      	ldrb	r6, [r0, #0]
 80058f8:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 80058fc:	b2d9      	uxtb	r1, r3
 80058fe:	2909      	cmp	r1, #9
 8005900:	d92a      	bls.n	8005958 <_strtod_l+0x1b8>
 8005902:	9905      	ldr	r1, [sp, #20]
 8005904:	462a      	mov	r2, r5
 8005906:	f7ff ff08 	bl	800571a <strncmp>
 800590a:	b398      	cbz	r0, 8005974 <_strtod_l+0x1d4>
 800590c:	2000      	movs	r0, #0
 800590e:	4632      	mov	r2, r6
 8005910:	463d      	mov	r5, r7
 8005912:	9005      	str	r0, [sp, #20]
 8005914:	4603      	mov	r3, r0
 8005916:	2a65      	cmp	r2, #101	; 0x65
 8005918:	d001      	beq.n	800591e <_strtod_l+0x17e>
 800591a:	2a45      	cmp	r2, #69	; 0x45
 800591c:	d118      	bne.n	8005950 <_strtod_l+0x1b0>
 800591e:	b91d      	cbnz	r5, 8005928 <_strtod_l+0x188>
 8005920:	9a04      	ldr	r2, [sp, #16]
 8005922:	4302      	orrs	r2, r0
 8005924:	d09e      	beq.n	8005864 <_strtod_l+0xc4>
 8005926:	2500      	movs	r5, #0
 8005928:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800592c:	f108 0201 	add.w	r2, r8, #1
 8005930:	9217      	str	r2, [sp, #92]	; 0x5c
 8005932:	f898 2001 	ldrb.w	r2, [r8, #1]
 8005936:	2a2b      	cmp	r2, #43	; 0x2b
 8005938:	d075      	beq.n	8005a26 <_strtod_l+0x286>
 800593a:	2a2d      	cmp	r2, #45	; 0x2d
 800593c:	d07b      	beq.n	8005a36 <_strtod_l+0x296>
 800593e:	f04f 0c00 	mov.w	ip, #0
 8005942:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8005946:	2909      	cmp	r1, #9
 8005948:	f240 8082 	bls.w	8005a50 <_strtod_l+0x2b0>
 800594c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8005950:	2600      	movs	r6, #0
 8005952:	e09d      	b.n	8005a90 <_strtod_l+0x2f0>
 8005954:	2300      	movs	r3, #0
 8005956:	e7c4      	b.n	80058e2 <_strtod_l+0x142>
 8005958:	2f08      	cmp	r7, #8
 800595a:	bfd8      	it	le
 800595c:	9907      	ldrle	r1, [sp, #28]
 800595e:	f100 0001 	add.w	r0, r0, #1
 8005962:	bfda      	itte	le
 8005964:	fb02 3301 	mlale	r3, r2, r1, r3
 8005968:	9307      	strle	r3, [sp, #28]
 800596a:	fb02 3909 	mlagt	r9, r2, r9, r3
 800596e:	3701      	adds	r7, #1
 8005970:	9017      	str	r0, [sp, #92]	; 0x5c
 8005972:	e7bf      	b.n	80058f4 <_strtod_l+0x154>
 8005974:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005976:	195a      	adds	r2, r3, r5
 8005978:	9217      	str	r2, [sp, #92]	; 0x5c
 800597a:	5d5a      	ldrb	r2, [r3, r5]
 800597c:	2f00      	cmp	r7, #0
 800597e:	d037      	beq.n	80059f0 <_strtod_l+0x250>
 8005980:	9005      	str	r0, [sp, #20]
 8005982:	463d      	mov	r5, r7
 8005984:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8005988:	2b09      	cmp	r3, #9
 800598a:	d912      	bls.n	80059b2 <_strtod_l+0x212>
 800598c:	2301      	movs	r3, #1
 800598e:	e7c2      	b.n	8005916 <_strtod_l+0x176>
 8005990:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005992:	1c5a      	adds	r2, r3, #1
 8005994:	9217      	str	r2, [sp, #92]	; 0x5c
 8005996:	785a      	ldrb	r2, [r3, #1]
 8005998:	3001      	adds	r0, #1
 800599a:	2a30      	cmp	r2, #48	; 0x30
 800599c:	d0f8      	beq.n	8005990 <_strtod_l+0x1f0>
 800599e:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 80059a2:	2b08      	cmp	r3, #8
 80059a4:	f200 84d9 	bhi.w	800635a <_strtod_l+0xbba>
 80059a8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80059aa:	9005      	str	r0, [sp, #20]
 80059ac:	2000      	movs	r0, #0
 80059ae:	9308      	str	r3, [sp, #32]
 80059b0:	4605      	mov	r5, r0
 80059b2:	3a30      	subs	r2, #48	; 0x30
 80059b4:	f100 0301 	add.w	r3, r0, #1
 80059b8:	d014      	beq.n	80059e4 <_strtod_l+0x244>
 80059ba:	9905      	ldr	r1, [sp, #20]
 80059bc:	4419      	add	r1, r3
 80059be:	9105      	str	r1, [sp, #20]
 80059c0:	462b      	mov	r3, r5
 80059c2:	eb00 0e05 	add.w	lr, r0, r5
 80059c6:	210a      	movs	r1, #10
 80059c8:	4573      	cmp	r3, lr
 80059ca:	d113      	bne.n	80059f4 <_strtod_l+0x254>
 80059cc:	182b      	adds	r3, r5, r0
 80059ce:	2b08      	cmp	r3, #8
 80059d0:	f105 0501 	add.w	r5, r5, #1
 80059d4:	4405      	add	r5, r0
 80059d6:	dc1c      	bgt.n	8005a12 <_strtod_l+0x272>
 80059d8:	9907      	ldr	r1, [sp, #28]
 80059da:	230a      	movs	r3, #10
 80059dc:	fb03 2301 	mla	r3, r3, r1, r2
 80059e0:	9307      	str	r3, [sp, #28]
 80059e2:	2300      	movs	r3, #0
 80059e4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80059e6:	1c51      	adds	r1, r2, #1
 80059e8:	9117      	str	r1, [sp, #92]	; 0x5c
 80059ea:	7852      	ldrb	r2, [r2, #1]
 80059ec:	4618      	mov	r0, r3
 80059ee:	e7c9      	b.n	8005984 <_strtod_l+0x1e4>
 80059f0:	4638      	mov	r0, r7
 80059f2:	e7d2      	b.n	800599a <_strtod_l+0x1fa>
 80059f4:	2b08      	cmp	r3, #8
 80059f6:	dc04      	bgt.n	8005a02 <_strtod_l+0x262>
 80059f8:	9e07      	ldr	r6, [sp, #28]
 80059fa:	434e      	muls	r6, r1
 80059fc:	9607      	str	r6, [sp, #28]
 80059fe:	3301      	adds	r3, #1
 8005a00:	e7e2      	b.n	80059c8 <_strtod_l+0x228>
 8005a02:	f103 0c01 	add.w	ip, r3, #1
 8005a06:	f1bc 0f10 	cmp.w	ip, #16
 8005a0a:	bfd8      	it	le
 8005a0c:	fb01 f909 	mulle.w	r9, r1, r9
 8005a10:	e7f5      	b.n	80059fe <_strtod_l+0x25e>
 8005a12:	2d10      	cmp	r5, #16
 8005a14:	bfdc      	itt	le
 8005a16:	230a      	movle	r3, #10
 8005a18:	fb03 2909 	mlale	r9, r3, r9, r2
 8005a1c:	e7e1      	b.n	80059e2 <_strtod_l+0x242>
 8005a1e:	2300      	movs	r3, #0
 8005a20:	9305      	str	r3, [sp, #20]
 8005a22:	2301      	movs	r3, #1
 8005a24:	e77c      	b.n	8005920 <_strtod_l+0x180>
 8005a26:	f04f 0c00 	mov.w	ip, #0
 8005a2a:	f108 0202 	add.w	r2, r8, #2
 8005a2e:	9217      	str	r2, [sp, #92]	; 0x5c
 8005a30:	f898 2002 	ldrb.w	r2, [r8, #2]
 8005a34:	e785      	b.n	8005942 <_strtod_l+0x1a2>
 8005a36:	f04f 0c01 	mov.w	ip, #1
 8005a3a:	e7f6      	b.n	8005a2a <_strtod_l+0x28a>
 8005a3c:	08009fd4 	.word	0x08009fd4
 8005a40:	08009d24 	.word	0x08009d24
 8005a44:	7ff00000 	.word	0x7ff00000
 8005a48:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8005a4a:	1c51      	adds	r1, r2, #1
 8005a4c:	9117      	str	r1, [sp, #92]	; 0x5c
 8005a4e:	7852      	ldrb	r2, [r2, #1]
 8005a50:	2a30      	cmp	r2, #48	; 0x30
 8005a52:	d0f9      	beq.n	8005a48 <_strtod_l+0x2a8>
 8005a54:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8005a58:	2908      	cmp	r1, #8
 8005a5a:	f63f af79 	bhi.w	8005950 <_strtod_l+0x1b0>
 8005a5e:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8005a62:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8005a64:	9206      	str	r2, [sp, #24]
 8005a66:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8005a68:	1c51      	adds	r1, r2, #1
 8005a6a:	9117      	str	r1, [sp, #92]	; 0x5c
 8005a6c:	7852      	ldrb	r2, [r2, #1]
 8005a6e:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 8005a72:	2e09      	cmp	r6, #9
 8005a74:	d937      	bls.n	8005ae6 <_strtod_l+0x346>
 8005a76:	9e06      	ldr	r6, [sp, #24]
 8005a78:	1b89      	subs	r1, r1, r6
 8005a7a:	2908      	cmp	r1, #8
 8005a7c:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8005a80:	dc02      	bgt.n	8005a88 <_strtod_l+0x2e8>
 8005a82:	4576      	cmp	r6, lr
 8005a84:	bfa8      	it	ge
 8005a86:	4676      	movge	r6, lr
 8005a88:	f1bc 0f00 	cmp.w	ip, #0
 8005a8c:	d000      	beq.n	8005a90 <_strtod_l+0x2f0>
 8005a8e:	4276      	negs	r6, r6
 8005a90:	2d00      	cmp	r5, #0
 8005a92:	d14d      	bne.n	8005b30 <_strtod_l+0x390>
 8005a94:	9904      	ldr	r1, [sp, #16]
 8005a96:	4301      	orrs	r1, r0
 8005a98:	f47f aec6 	bne.w	8005828 <_strtod_l+0x88>
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	f47f aee1 	bne.w	8005864 <_strtod_l+0xc4>
 8005aa2:	2a69      	cmp	r2, #105	; 0x69
 8005aa4:	d027      	beq.n	8005af6 <_strtod_l+0x356>
 8005aa6:	dc24      	bgt.n	8005af2 <_strtod_l+0x352>
 8005aa8:	2a49      	cmp	r2, #73	; 0x49
 8005aaa:	d024      	beq.n	8005af6 <_strtod_l+0x356>
 8005aac:	2a4e      	cmp	r2, #78	; 0x4e
 8005aae:	f47f aed9 	bne.w	8005864 <_strtod_l+0xc4>
 8005ab2:	499f      	ldr	r1, [pc, #636]	; (8005d30 <_strtod_l+0x590>)
 8005ab4:	a817      	add	r0, sp, #92	; 0x5c
 8005ab6:	f002 f8d7 	bl	8007c68 <__match>
 8005aba:	2800      	cmp	r0, #0
 8005abc:	f43f aed2 	beq.w	8005864 <_strtod_l+0xc4>
 8005ac0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005ac2:	781b      	ldrb	r3, [r3, #0]
 8005ac4:	2b28      	cmp	r3, #40	; 0x28
 8005ac6:	d12d      	bne.n	8005b24 <_strtod_l+0x384>
 8005ac8:	499a      	ldr	r1, [pc, #616]	; (8005d34 <_strtod_l+0x594>)
 8005aca:	aa1a      	add	r2, sp, #104	; 0x68
 8005acc:	a817      	add	r0, sp, #92	; 0x5c
 8005ace:	f002 f8df 	bl	8007c90 <__hexnan>
 8005ad2:	2805      	cmp	r0, #5
 8005ad4:	d126      	bne.n	8005b24 <_strtod_l+0x384>
 8005ad6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005ad8:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8005adc:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8005ae0:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8005ae4:	e6a0      	b.n	8005828 <_strtod_l+0x88>
 8005ae6:	210a      	movs	r1, #10
 8005ae8:	fb01 2e0e 	mla	lr, r1, lr, r2
 8005aec:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8005af0:	e7b9      	b.n	8005a66 <_strtod_l+0x2c6>
 8005af2:	2a6e      	cmp	r2, #110	; 0x6e
 8005af4:	e7db      	b.n	8005aae <_strtod_l+0x30e>
 8005af6:	4990      	ldr	r1, [pc, #576]	; (8005d38 <_strtod_l+0x598>)
 8005af8:	a817      	add	r0, sp, #92	; 0x5c
 8005afa:	f002 f8b5 	bl	8007c68 <__match>
 8005afe:	2800      	cmp	r0, #0
 8005b00:	f43f aeb0 	beq.w	8005864 <_strtod_l+0xc4>
 8005b04:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005b06:	498d      	ldr	r1, [pc, #564]	; (8005d3c <_strtod_l+0x59c>)
 8005b08:	3b01      	subs	r3, #1
 8005b0a:	a817      	add	r0, sp, #92	; 0x5c
 8005b0c:	9317      	str	r3, [sp, #92]	; 0x5c
 8005b0e:	f002 f8ab 	bl	8007c68 <__match>
 8005b12:	b910      	cbnz	r0, 8005b1a <_strtod_l+0x37a>
 8005b14:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005b16:	3301      	adds	r3, #1
 8005b18:	9317      	str	r3, [sp, #92]	; 0x5c
 8005b1a:	f8df b230 	ldr.w	fp, [pc, #560]	; 8005d4c <_strtod_l+0x5ac>
 8005b1e:	f04f 0a00 	mov.w	sl, #0
 8005b22:	e681      	b.n	8005828 <_strtod_l+0x88>
 8005b24:	4886      	ldr	r0, [pc, #536]	; (8005d40 <_strtod_l+0x5a0>)
 8005b26:	f003 fd9b 	bl	8009660 <nan>
 8005b2a:	ec5b ab10 	vmov	sl, fp, d0
 8005b2e:	e67b      	b.n	8005828 <_strtod_l+0x88>
 8005b30:	9b05      	ldr	r3, [sp, #20]
 8005b32:	9807      	ldr	r0, [sp, #28]
 8005b34:	1af3      	subs	r3, r6, r3
 8005b36:	2f00      	cmp	r7, #0
 8005b38:	bf08      	it	eq
 8005b3a:	462f      	moveq	r7, r5
 8005b3c:	2d10      	cmp	r5, #16
 8005b3e:	9306      	str	r3, [sp, #24]
 8005b40:	46a8      	mov	r8, r5
 8005b42:	bfa8      	it	ge
 8005b44:	f04f 0810 	movge.w	r8, #16
 8005b48:	f7fa fcdc 	bl	8000504 <__aeabi_ui2d>
 8005b4c:	2d09      	cmp	r5, #9
 8005b4e:	4682      	mov	sl, r0
 8005b50:	468b      	mov	fp, r1
 8005b52:	dd13      	ble.n	8005b7c <_strtod_l+0x3dc>
 8005b54:	4b7b      	ldr	r3, [pc, #492]	; (8005d44 <_strtod_l+0x5a4>)
 8005b56:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8005b5a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8005b5e:	f7fa fd4b 	bl	80005f8 <__aeabi_dmul>
 8005b62:	4682      	mov	sl, r0
 8005b64:	4648      	mov	r0, r9
 8005b66:	468b      	mov	fp, r1
 8005b68:	f7fa fccc 	bl	8000504 <__aeabi_ui2d>
 8005b6c:	4602      	mov	r2, r0
 8005b6e:	460b      	mov	r3, r1
 8005b70:	4650      	mov	r0, sl
 8005b72:	4659      	mov	r1, fp
 8005b74:	f7fa fb8a 	bl	800028c <__adddf3>
 8005b78:	4682      	mov	sl, r0
 8005b7a:	468b      	mov	fp, r1
 8005b7c:	2d0f      	cmp	r5, #15
 8005b7e:	dc38      	bgt.n	8005bf2 <_strtod_l+0x452>
 8005b80:	9b06      	ldr	r3, [sp, #24]
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	f43f ae50 	beq.w	8005828 <_strtod_l+0x88>
 8005b88:	dd24      	ble.n	8005bd4 <_strtod_l+0x434>
 8005b8a:	2b16      	cmp	r3, #22
 8005b8c:	dc0b      	bgt.n	8005ba6 <_strtod_l+0x406>
 8005b8e:	496d      	ldr	r1, [pc, #436]	; (8005d44 <_strtod_l+0x5a4>)
 8005b90:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8005b94:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005b98:	4652      	mov	r2, sl
 8005b9a:	465b      	mov	r3, fp
 8005b9c:	f7fa fd2c 	bl	80005f8 <__aeabi_dmul>
 8005ba0:	4682      	mov	sl, r0
 8005ba2:	468b      	mov	fp, r1
 8005ba4:	e640      	b.n	8005828 <_strtod_l+0x88>
 8005ba6:	9a06      	ldr	r2, [sp, #24]
 8005ba8:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8005bac:	4293      	cmp	r3, r2
 8005bae:	db20      	blt.n	8005bf2 <_strtod_l+0x452>
 8005bb0:	4c64      	ldr	r4, [pc, #400]	; (8005d44 <_strtod_l+0x5a4>)
 8005bb2:	f1c5 050f 	rsb	r5, r5, #15
 8005bb6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8005bba:	4652      	mov	r2, sl
 8005bbc:	465b      	mov	r3, fp
 8005bbe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005bc2:	f7fa fd19 	bl	80005f8 <__aeabi_dmul>
 8005bc6:	9b06      	ldr	r3, [sp, #24]
 8005bc8:	1b5d      	subs	r5, r3, r5
 8005bca:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8005bce:	e9d4 2300 	ldrd	r2, r3, [r4]
 8005bd2:	e7e3      	b.n	8005b9c <_strtod_l+0x3fc>
 8005bd4:	9b06      	ldr	r3, [sp, #24]
 8005bd6:	3316      	adds	r3, #22
 8005bd8:	db0b      	blt.n	8005bf2 <_strtod_l+0x452>
 8005bda:	9b05      	ldr	r3, [sp, #20]
 8005bdc:	1b9e      	subs	r6, r3, r6
 8005bde:	4b59      	ldr	r3, [pc, #356]	; (8005d44 <_strtod_l+0x5a4>)
 8005be0:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8005be4:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005be8:	4650      	mov	r0, sl
 8005bea:	4659      	mov	r1, fp
 8005bec:	f7fa fe2e 	bl	800084c <__aeabi_ddiv>
 8005bf0:	e7d6      	b.n	8005ba0 <_strtod_l+0x400>
 8005bf2:	9b06      	ldr	r3, [sp, #24]
 8005bf4:	eba5 0808 	sub.w	r8, r5, r8
 8005bf8:	4498      	add	r8, r3
 8005bfa:	f1b8 0f00 	cmp.w	r8, #0
 8005bfe:	dd74      	ble.n	8005cea <_strtod_l+0x54a>
 8005c00:	f018 030f 	ands.w	r3, r8, #15
 8005c04:	d00a      	beq.n	8005c1c <_strtod_l+0x47c>
 8005c06:	494f      	ldr	r1, [pc, #316]	; (8005d44 <_strtod_l+0x5a4>)
 8005c08:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8005c0c:	4652      	mov	r2, sl
 8005c0e:	465b      	mov	r3, fp
 8005c10:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005c14:	f7fa fcf0 	bl	80005f8 <__aeabi_dmul>
 8005c18:	4682      	mov	sl, r0
 8005c1a:	468b      	mov	fp, r1
 8005c1c:	f038 080f 	bics.w	r8, r8, #15
 8005c20:	d04f      	beq.n	8005cc2 <_strtod_l+0x522>
 8005c22:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8005c26:	dd22      	ble.n	8005c6e <_strtod_l+0x4ce>
 8005c28:	2500      	movs	r5, #0
 8005c2a:	462e      	mov	r6, r5
 8005c2c:	9507      	str	r5, [sp, #28]
 8005c2e:	9505      	str	r5, [sp, #20]
 8005c30:	2322      	movs	r3, #34	; 0x22
 8005c32:	f8df b118 	ldr.w	fp, [pc, #280]	; 8005d4c <_strtod_l+0x5ac>
 8005c36:	6023      	str	r3, [r4, #0]
 8005c38:	f04f 0a00 	mov.w	sl, #0
 8005c3c:	9b07      	ldr	r3, [sp, #28]
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	f43f adf2 	beq.w	8005828 <_strtod_l+0x88>
 8005c44:	9918      	ldr	r1, [sp, #96]	; 0x60
 8005c46:	4620      	mov	r0, r4
 8005c48:	f002 f9a6 	bl	8007f98 <_Bfree>
 8005c4c:	9905      	ldr	r1, [sp, #20]
 8005c4e:	4620      	mov	r0, r4
 8005c50:	f002 f9a2 	bl	8007f98 <_Bfree>
 8005c54:	4631      	mov	r1, r6
 8005c56:	4620      	mov	r0, r4
 8005c58:	f002 f99e 	bl	8007f98 <_Bfree>
 8005c5c:	9907      	ldr	r1, [sp, #28]
 8005c5e:	4620      	mov	r0, r4
 8005c60:	f002 f99a 	bl	8007f98 <_Bfree>
 8005c64:	4629      	mov	r1, r5
 8005c66:	4620      	mov	r0, r4
 8005c68:	f002 f996 	bl	8007f98 <_Bfree>
 8005c6c:	e5dc      	b.n	8005828 <_strtod_l+0x88>
 8005c6e:	4b36      	ldr	r3, [pc, #216]	; (8005d48 <_strtod_l+0x5a8>)
 8005c70:	9304      	str	r3, [sp, #16]
 8005c72:	2300      	movs	r3, #0
 8005c74:	ea4f 1828 	mov.w	r8, r8, asr #4
 8005c78:	4650      	mov	r0, sl
 8005c7a:	4659      	mov	r1, fp
 8005c7c:	4699      	mov	r9, r3
 8005c7e:	f1b8 0f01 	cmp.w	r8, #1
 8005c82:	dc21      	bgt.n	8005cc8 <_strtod_l+0x528>
 8005c84:	b10b      	cbz	r3, 8005c8a <_strtod_l+0x4ea>
 8005c86:	4682      	mov	sl, r0
 8005c88:	468b      	mov	fp, r1
 8005c8a:	4b2f      	ldr	r3, [pc, #188]	; (8005d48 <_strtod_l+0x5a8>)
 8005c8c:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8005c90:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8005c94:	4652      	mov	r2, sl
 8005c96:	465b      	mov	r3, fp
 8005c98:	e9d9 0100 	ldrd	r0, r1, [r9]
 8005c9c:	f7fa fcac 	bl	80005f8 <__aeabi_dmul>
 8005ca0:	4b2a      	ldr	r3, [pc, #168]	; (8005d4c <_strtod_l+0x5ac>)
 8005ca2:	460a      	mov	r2, r1
 8005ca4:	400b      	ands	r3, r1
 8005ca6:	492a      	ldr	r1, [pc, #168]	; (8005d50 <_strtod_l+0x5b0>)
 8005ca8:	428b      	cmp	r3, r1
 8005caa:	4682      	mov	sl, r0
 8005cac:	d8bc      	bhi.n	8005c28 <_strtod_l+0x488>
 8005cae:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8005cb2:	428b      	cmp	r3, r1
 8005cb4:	bf86      	itte	hi
 8005cb6:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 8005d54 <_strtod_l+0x5b4>
 8005cba:	f04f 3aff 	movhi.w	sl, #4294967295
 8005cbe:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8005cc2:	2300      	movs	r3, #0
 8005cc4:	9304      	str	r3, [sp, #16]
 8005cc6:	e084      	b.n	8005dd2 <_strtod_l+0x632>
 8005cc8:	f018 0f01 	tst.w	r8, #1
 8005ccc:	d005      	beq.n	8005cda <_strtod_l+0x53a>
 8005cce:	9b04      	ldr	r3, [sp, #16]
 8005cd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cd4:	f7fa fc90 	bl	80005f8 <__aeabi_dmul>
 8005cd8:	2301      	movs	r3, #1
 8005cda:	9a04      	ldr	r2, [sp, #16]
 8005cdc:	3208      	adds	r2, #8
 8005cde:	f109 0901 	add.w	r9, r9, #1
 8005ce2:	ea4f 0868 	mov.w	r8, r8, asr #1
 8005ce6:	9204      	str	r2, [sp, #16]
 8005ce8:	e7c9      	b.n	8005c7e <_strtod_l+0x4de>
 8005cea:	d0ea      	beq.n	8005cc2 <_strtod_l+0x522>
 8005cec:	f1c8 0800 	rsb	r8, r8, #0
 8005cf0:	f018 020f 	ands.w	r2, r8, #15
 8005cf4:	d00a      	beq.n	8005d0c <_strtod_l+0x56c>
 8005cf6:	4b13      	ldr	r3, [pc, #76]	; (8005d44 <_strtod_l+0x5a4>)
 8005cf8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005cfc:	4650      	mov	r0, sl
 8005cfe:	4659      	mov	r1, fp
 8005d00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d04:	f7fa fda2 	bl	800084c <__aeabi_ddiv>
 8005d08:	4682      	mov	sl, r0
 8005d0a:	468b      	mov	fp, r1
 8005d0c:	ea5f 1828 	movs.w	r8, r8, asr #4
 8005d10:	d0d7      	beq.n	8005cc2 <_strtod_l+0x522>
 8005d12:	f1b8 0f1f 	cmp.w	r8, #31
 8005d16:	dd1f      	ble.n	8005d58 <_strtod_l+0x5b8>
 8005d18:	2500      	movs	r5, #0
 8005d1a:	462e      	mov	r6, r5
 8005d1c:	9507      	str	r5, [sp, #28]
 8005d1e:	9505      	str	r5, [sp, #20]
 8005d20:	2322      	movs	r3, #34	; 0x22
 8005d22:	f04f 0a00 	mov.w	sl, #0
 8005d26:	f04f 0b00 	mov.w	fp, #0
 8005d2a:	6023      	str	r3, [r4, #0]
 8005d2c:	e786      	b.n	8005c3c <_strtod_l+0x49c>
 8005d2e:	bf00      	nop
 8005d30:	08009cf9 	.word	0x08009cf9
 8005d34:	08009d38 	.word	0x08009d38
 8005d38:	08009cf1 	.word	0x08009cf1
 8005d3c:	08009e7c 	.word	0x08009e7c
 8005d40:	0800a1ab 	.word	0x0800a1ab
 8005d44:	0800a070 	.word	0x0800a070
 8005d48:	0800a048 	.word	0x0800a048
 8005d4c:	7ff00000 	.word	0x7ff00000
 8005d50:	7ca00000 	.word	0x7ca00000
 8005d54:	7fefffff 	.word	0x7fefffff
 8005d58:	f018 0310 	ands.w	r3, r8, #16
 8005d5c:	bf18      	it	ne
 8005d5e:	236a      	movne	r3, #106	; 0x6a
 8005d60:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8006110 <_strtod_l+0x970>
 8005d64:	9304      	str	r3, [sp, #16]
 8005d66:	4650      	mov	r0, sl
 8005d68:	4659      	mov	r1, fp
 8005d6a:	2300      	movs	r3, #0
 8005d6c:	f018 0f01 	tst.w	r8, #1
 8005d70:	d004      	beq.n	8005d7c <_strtod_l+0x5dc>
 8005d72:	e9d9 2300 	ldrd	r2, r3, [r9]
 8005d76:	f7fa fc3f 	bl	80005f8 <__aeabi_dmul>
 8005d7a:	2301      	movs	r3, #1
 8005d7c:	ea5f 0868 	movs.w	r8, r8, asr #1
 8005d80:	f109 0908 	add.w	r9, r9, #8
 8005d84:	d1f2      	bne.n	8005d6c <_strtod_l+0x5cc>
 8005d86:	b10b      	cbz	r3, 8005d8c <_strtod_l+0x5ec>
 8005d88:	4682      	mov	sl, r0
 8005d8a:	468b      	mov	fp, r1
 8005d8c:	9b04      	ldr	r3, [sp, #16]
 8005d8e:	b1c3      	cbz	r3, 8005dc2 <_strtod_l+0x622>
 8005d90:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8005d94:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	4659      	mov	r1, fp
 8005d9c:	dd11      	ble.n	8005dc2 <_strtod_l+0x622>
 8005d9e:	2b1f      	cmp	r3, #31
 8005da0:	f340 8124 	ble.w	8005fec <_strtod_l+0x84c>
 8005da4:	2b34      	cmp	r3, #52	; 0x34
 8005da6:	bfde      	ittt	le
 8005da8:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8005dac:	f04f 33ff 	movle.w	r3, #4294967295
 8005db0:	fa03 f202 	lslle.w	r2, r3, r2
 8005db4:	f04f 0a00 	mov.w	sl, #0
 8005db8:	bfcc      	ite	gt
 8005dba:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8005dbe:	ea02 0b01 	andle.w	fp, r2, r1
 8005dc2:	2200      	movs	r2, #0
 8005dc4:	2300      	movs	r3, #0
 8005dc6:	4650      	mov	r0, sl
 8005dc8:	4659      	mov	r1, fp
 8005dca:	f7fa fe7d 	bl	8000ac8 <__aeabi_dcmpeq>
 8005dce:	2800      	cmp	r0, #0
 8005dd0:	d1a2      	bne.n	8005d18 <_strtod_l+0x578>
 8005dd2:	9b07      	ldr	r3, [sp, #28]
 8005dd4:	9300      	str	r3, [sp, #0]
 8005dd6:	9908      	ldr	r1, [sp, #32]
 8005dd8:	462b      	mov	r3, r5
 8005dda:	463a      	mov	r2, r7
 8005ddc:	4620      	mov	r0, r4
 8005dde:	f002 f943 	bl	8008068 <__s2b>
 8005de2:	9007      	str	r0, [sp, #28]
 8005de4:	2800      	cmp	r0, #0
 8005de6:	f43f af1f 	beq.w	8005c28 <_strtod_l+0x488>
 8005dea:	9b05      	ldr	r3, [sp, #20]
 8005dec:	1b9e      	subs	r6, r3, r6
 8005dee:	9b06      	ldr	r3, [sp, #24]
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	bfb4      	ite	lt
 8005df4:	4633      	movlt	r3, r6
 8005df6:	2300      	movge	r3, #0
 8005df8:	930c      	str	r3, [sp, #48]	; 0x30
 8005dfa:	9b06      	ldr	r3, [sp, #24]
 8005dfc:	2500      	movs	r5, #0
 8005dfe:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8005e02:	9312      	str	r3, [sp, #72]	; 0x48
 8005e04:	462e      	mov	r6, r5
 8005e06:	9b07      	ldr	r3, [sp, #28]
 8005e08:	4620      	mov	r0, r4
 8005e0a:	6859      	ldr	r1, [r3, #4]
 8005e0c:	f002 f884 	bl	8007f18 <_Balloc>
 8005e10:	9005      	str	r0, [sp, #20]
 8005e12:	2800      	cmp	r0, #0
 8005e14:	f43f af0c 	beq.w	8005c30 <_strtod_l+0x490>
 8005e18:	9b07      	ldr	r3, [sp, #28]
 8005e1a:	691a      	ldr	r2, [r3, #16]
 8005e1c:	3202      	adds	r2, #2
 8005e1e:	f103 010c 	add.w	r1, r3, #12
 8005e22:	0092      	lsls	r2, r2, #2
 8005e24:	300c      	adds	r0, #12
 8005e26:	f002 f869 	bl	8007efc <memcpy>
 8005e2a:	ec4b ab10 	vmov	d0, sl, fp
 8005e2e:	aa1a      	add	r2, sp, #104	; 0x68
 8005e30:	a919      	add	r1, sp, #100	; 0x64
 8005e32:	4620      	mov	r0, r4
 8005e34:	f002 fc5e 	bl	80086f4 <__d2b>
 8005e38:	ec4b ab18 	vmov	d8, sl, fp
 8005e3c:	9018      	str	r0, [sp, #96]	; 0x60
 8005e3e:	2800      	cmp	r0, #0
 8005e40:	f43f aef6 	beq.w	8005c30 <_strtod_l+0x490>
 8005e44:	2101      	movs	r1, #1
 8005e46:	4620      	mov	r0, r4
 8005e48:	f002 f9a8 	bl	800819c <__i2b>
 8005e4c:	4606      	mov	r6, r0
 8005e4e:	2800      	cmp	r0, #0
 8005e50:	f43f aeee 	beq.w	8005c30 <_strtod_l+0x490>
 8005e54:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005e56:	9904      	ldr	r1, [sp, #16]
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	bfab      	itete	ge
 8005e5c:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 8005e5e:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8005e60:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8005e62:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 8005e66:	bfac      	ite	ge
 8005e68:	eb03 0902 	addge.w	r9, r3, r2
 8005e6c:	1ad7      	sublt	r7, r2, r3
 8005e6e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8005e70:	eba3 0801 	sub.w	r8, r3, r1
 8005e74:	4490      	add	r8, r2
 8005e76:	4ba1      	ldr	r3, [pc, #644]	; (80060fc <_strtod_l+0x95c>)
 8005e78:	f108 38ff 	add.w	r8, r8, #4294967295
 8005e7c:	4598      	cmp	r8, r3
 8005e7e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8005e82:	f280 80c7 	bge.w	8006014 <_strtod_l+0x874>
 8005e86:	eba3 0308 	sub.w	r3, r3, r8
 8005e8a:	2b1f      	cmp	r3, #31
 8005e8c:	eba2 0203 	sub.w	r2, r2, r3
 8005e90:	f04f 0101 	mov.w	r1, #1
 8005e94:	f300 80b1 	bgt.w	8005ffa <_strtod_l+0x85a>
 8005e98:	fa01 f303 	lsl.w	r3, r1, r3
 8005e9c:	930d      	str	r3, [sp, #52]	; 0x34
 8005e9e:	2300      	movs	r3, #0
 8005ea0:	9308      	str	r3, [sp, #32]
 8005ea2:	eb09 0802 	add.w	r8, r9, r2
 8005ea6:	9b04      	ldr	r3, [sp, #16]
 8005ea8:	45c1      	cmp	r9, r8
 8005eaa:	4417      	add	r7, r2
 8005eac:	441f      	add	r7, r3
 8005eae:	464b      	mov	r3, r9
 8005eb0:	bfa8      	it	ge
 8005eb2:	4643      	movge	r3, r8
 8005eb4:	42bb      	cmp	r3, r7
 8005eb6:	bfa8      	it	ge
 8005eb8:	463b      	movge	r3, r7
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	bfc2      	ittt	gt
 8005ebe:	eba8 0803 	subgt.w	r8, r8, r3
 8005ec2:	1aff      	subgt	r7, r7, r3
 8005ec4:	eba9 0903 	subgt.w	r9, r9, r3
 8005ec8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	dd17      	ble.n	8005efe <_strtod_l+0x75e>
 8005ece:	4631      	mov	r1, r6
 8005ed0:	461a      	mov	r2, r3
 8005ed2:	4620      	mov	r0, r4
 8005ed4:	f002 fa22 	bl	800831c <__pow5mult>
 8005ed8:	4606      	mov	r6, r0
 8005eda:	2800      	cmp	r0, #0
 8005edc:	f43f aea8 	beq.w	8005c30 <_strtod_l+0x490>
 8005ee0:	4601      	mov	r1, r0
 8005ee2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8005ee4:	4620      	mov	r0, r4
 8005ee6:	f002 f96f 	bl	80081c8 <__multiply>
 8005eea:	900b      	str	r0, [sp, #44]	; 0x2c
 8005eec:	2800      	cmp	r0, #0
 8005eee:	f43f ae9f 	beq.w	8005c30 <_strtod_l+0x490>
 8005ef2:	9918      	ldr	r1, [sp, #96]	; 0x60
 8005ef4:	4620      	mov	r0, r4
 8005ef6:	f002 f84f 	bl	8007f98 <_Bfree>
 8005efa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005efc:	9318      	str	r3, [sp, #96]	; 0x60
 8005efe:	f1b8 0f00 	cmp.w	r8, #0
 8005f02:	f300 808c 	bgt.w	800601e <_strtod_l+0x87e>
 8005f06:	9b06      	ldr	r3, [sp, #24]
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	dd08      	ble.n	8005f1e <_strtod_l+0x77e>
 8005f0c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005f0e:	9905      	ldr	r1, [sp, #20]
 8005f10:	4620      	mov	r0, r4
 8005f12:	f002 fa03 	bl	800831c <__pow5mult>
 8005f16:	9005      	str	r0, [sp, #20]
 8005f18:	2800      	cmp	r0, #0
 8005f1a:	f43f ae89 	beq.w	8005c30 <_strtod_l+0x490>
 8005f1e:	2f00      	cmp	r7, #0
 8005f20:	dd08      	ble.n	8005f34 <_strtod_l+0x794>
 8005f22:	9905      	ldr	r1, [sp, #20]
 8005f24:	463a      	mov	r2, r7
 8005f26:	4620      	mov	r0, r4
 8005f28:	f002 fa52 	bl	80083d0 <__lshift>
 8005f2c:	9005      	str	r0, [sp, #20]
 8005f2e:	2800      	cmp	r0, #0
 8005f30:	f43f ae7e 	beq.w	8005c30 <_strtod_l+0x490>
 8005f34:	f1b9 0f00 	cmp.w	r9, #0
 8005f38:	dd08      	ble.n	8005f4c <_strtod_l+0x7ac>
 8005f3a:	4631      	mov	r1, r6
 8005f3c:	464a      	mov	r2, r9
 8005f3e:	4620      	mov	r0, r4
 8005f40:	f002 fa46 	bl	80083d0 <__lshift>
 8005f44:	4606      	mov	r6, r0
 8005f46:	2800      	cmp	r0, #0
 8005f48:	f43f ae72 	beq.w	8005c30 <_strtod_l+0x490>
 8005f4c:	9a05      	ldr	r2, [sp, #20]
 8005f4e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8005f50:	4620      	mov	r0, r4
 8005f52:	f002 fac9 	bl	80084e8 <__mdiff>
 8005f56:	4605      	mov	r5, r0
 8005f58:	2800      	cmp	r0, #0
 8005f5a:	f43f ae69 	beq.w	8005c30 <_strtod_l+0x490>
 8005f5e:	68c3      	ldr	r3, [r0, #12]
 8005f60:	930b      	str	r3, [sp, #44]	; 0x2c
 8005f62:	2300      	movs	r3, #0
 8005f64:	60c3      	str	r3, [r0, #12]
 8005f66:	4631      	mov	r1, r6
 8005f68:	f002 faa2 	bl	80084b0 <__mcmp>
 8005f6c:	2800      	cmp	r0, #0
 8005f6e:	da60      	bge.n	8006032 <_strtod_l+0x892>
 8005f70:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005f72:	ea53 030a 	orrs.w	r3, r3, sl
 8005f76:	f040 8082 	bne.w	800607e <_strtod_l+0x8de>
 8005f7a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d17d      	bne.n	800607e <_strtod_l+0x8de>
 8005f82:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8005f86:	0d1b      	lsrs	r3, r3, #20
 8005f88:	051b      	lsls	r3, r3, #20
 8005f8a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8005f8e:	d976      	bls.n	800607e <_strtod_l+0x8de>
 8005f90:	696b      	ldr	r3, [r5, #20]
 8005f92:	b913      	cbnz	r3, 8005f9a <_strtod_l+0x7fa>
 8005f94:	692b      	ldr	r3, [r5, #16]
 8005f96:	2b01      	cmp	r3, #1
 8005f98:	dd71      	ble.n	800607e <_strtod_l+0x8de>
 8005f9a:	4629      	mov	r1, r5
 8005f9c:	2201      	movs	r2, #1
 8005f9e:	4620      	mov	r0, r4
 8005fa0:	f002 fa16 	bl	80083d0 <__lshift>
 8005fa4:	4631      	mov	r1, r6
 8005fa6:	4605      	mov	r5, r0
 8005fa8:	f002 fa82 	bl	80084b0 <__mcmp>
 8005fac:	2800      	cmp	r0, #0
 8005fae:	dd66      	ble.n	800607e <_strtod_l+0x8de>
 8005fb0:	9904      	ldr	r1, [sp, #16]
 8005fb2:	4a53      	ldr	r2, [pc, #332]	; (8006100 <_strtod_l+0x960>)
 8005fb4:	465b      	mov	r3, fp
 8005fb6:	2900      	cmp	r1, #0
 8005fb8:	f000 8081 	beq.w	80060be <_strtod_l+0x91e>
 8005fbc:	ea02 010b 	and.w	r1, r2, fp
 8005fc0:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8005fc4:	dc7b      	bgt.n	80060be <_strtod_l+0x91e>
 8005fc6:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8005fca:	f77f aea9 	ble.w	8005d20 <_strtod_l+0x580>
 8005fce:	4b4d      	ldr	r3, [pc, #308]	; (8006104 <_strtod_l+0x964>)
 8005fd0:	4650      	mov	r0, sl
 8005fd2:	4659      	mov	r1, fp
 8005fd4:	2200      	movs	r2, #0
 8005fd6:	f7fa fb0f 	bl	80005f8 <__aeabi_dmul>
 8005fda:	460b      	mov	r3, r1
 8005fdc:	4303      	orrs	r3, r0
 8005fde:	bf08      	it	eq
 8005fe0:	2322      	moveq	r3, #34	; 0x22
 8005fe2:	4682      	mov	sl, r0
 8005fe4:	468b      	mov	fp, r1
 8005fe6:	bf08      	it	eq
 8005fe8:	6023      	streq	r3, [r4, #0]
 8005fea:	e62b      	b.n	8005c44 <_strtod_l+0x4a4>
 8005fec:	f04f 32ff 	mov.w	r2, #4294967295
 8005ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8005ff4:	ea03 0a0a 	and.w	sl, r3, sl
 8005ff8:	e6e3      	b.n	8005dc2 <_strtod_l+0x622>
 8005ffa:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8005ffe:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8006002:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8006006:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800600a:	fa01 f308 	lsl.w	r3, r1, r8
 800600e:	9308      	str	r3, [sp, #32]
 8006010:	910d      	str	r1, [sp, #52]	; 0x34
 8006012:	e746      	b.n	8005ea2 <_strtod_l+0x702>
 8006014:	2300      	movs	r3, #0
 8006016:	9308      	str	r3, [sp, #32]
 8006018:	2301      	movs	r3, #1
 800601a:	930d      	str	r3, [sp, #52]	; 0x34
 800601c:	e741      	b.n	8005ea2 <_strtod_l+0x702>
 800601e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8006020:	4642      	mov	r2, r8
 8006022:	4620      	mov	r0, r4
 8006024:	f002 f9d4 	bl	80083d0 <__lshift>
 8006028:	9018      	str	r0, [sp, #96]	; 0x60
 800602a:	2800      	cmp	r0, #0
 800602c:	f47f af6b 	bne.w	8005f06 <_strtod_l+0x766>
 8006030:	e5fe      	b.n	8005c30 <_strtod_l+0x490>
 8006032:	465f      	mov	r7, fp
 8006034:	d16e      	bne.n	8006114 <_strtod_l+0x974>
 8006036:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006038:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800603c:	b342      	cbz	r2, 8006090 <_strtod_l+0x8f0>
 800603e:	4a32      	ldr	r2, [pc, #200]	; (8006108 <_strtod_l+0x968>)
 8006040:	4293      	cmp	r3, r2
 8006042:	d128      	bne.n	8006096 <_strtod_l+0x8f6>
 8006044:	9b04      	ldr	r3, [sp, #16]
 8006046:	4651      	mov	r1, sl
 8006048:	b1eb      	cbz	r3, 8006086 <_strtod_l+0x8e6>
 800604a:	4b2d      	ldr	r3, [pc, #180]	; (8006100 <_strtod_l+0x960>)
 800604c:	403b      	ands	r3, r7
 800604e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8006052:	f04f 32ff 	mov.w	r2, #4294967295
 8006056:	d819      	bhi.n	800608c <_strtod_l+0x8ec>
 8006058:	0d1b      	lsrs	r3, r3, #20
 800605a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800605e:	fa02 f303 	lsl.w	r3, r2, r3
 8006062:	4299      	cmp	r1, r3
 8006064:	d117      	bne.n	8006096 <_strtod_l+0x8f6>
 8006066:	4b29      	ldr	r3, [pc, #164]	; (800610c <_strtod_l+0x96c>)
 8006068:	429f      	cmp	r7, r3
 800606a:	d102      	bne.n	8006072 <_strtod_l+0x8d2>
 800606c:	3101      	adds	r1, #1
 800606e:	f43f addf 	beq.w	8005c30 <_strtod_l+0x490>
 8006072:	4b23      	ldr	r3, [pc, #140]	; (8006100 <_strtod_l+0x960>)
 8006074:	403b      	ands	r3, r7
 8006076:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800607a:	f04f 0a00 	mov.w	sl, #0
 800607e:	9b04      	ldr	r3, [sp, #16]
 8006080:	2b00      	cmp	r3, #0
 8006082:	d1a4      	bne.n	8005fce <_strtod_l+0x82e>
 8006084:	e5de      	b.n	8005c44 <_strtod_l+0x4a4>
 8006086:	f04f 33ff 	mov.w	r3, #4294967295
 800608a:	e7ea      	b.n	8006062 <_strtod_l+0x8c2>
 800608c:	4613      	mov	r3, r2
 800608e:	e7e8      	b.n	8006062 <_strtod_l+0x8c2>
 8006090:	ea53 030a 	orrs.w	r3, r3, sl
 8006094:	d08c      	beq.n	8005fb0 <_strtod_l+0x810>
 8006096:	9b08      	ldr	r3, [sp, #32]
 8006098:	b1db      	cbz	r3, 80060d2 <_strtod_l+0x932>
 800609a:	423b      	tst	r3, r7
 800609c:	d0ef      	beq.n	800607e <_strtod_l+0x8de>
 800609e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80060a0:	9a04      	ldr	r2, [sp, #16]
 80060a2:	4650      	mov	r0, sl
 80060a4:	4659      	mov	r1, fp
 80060a6:	b1c3      	cbz	r3, 80060da <_strtod_l+0x93a>
 80060a8:	f7ff fb5e 	bl	8005768 <sulp>
 80060ac:	4602      	mov	r2, r0
 80060ae:	460b      	mov	r3, r1
 80060b0:	ec51 0b18 	vmov	r0, r1, d8
 80060b4:	f7fa f8ea 	bl	800028c <__adddf3>
 80060b8:	4682      	mov	sl, r0
 80060ba:	468b      	mov	fp, r1
 80060bc:	e7df      	b.n	800607e <_strtod_l+0x8de>
 80060be:	4013      	ands	r3, r2
 80060c0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80060c4:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80060c8:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80060cc:	f04f 3aff 	mov.w	sl, #4294967295
 80060d0:	e7d5      	b.n	800607e <_strtod_l+0x8de>
 80060d2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80060d4:	ea13 0f0a 	tst.w	r3, sl
 80060d8:	e7e0      	b.n	800609c <_strtod_l+0x8fc>
 80060da:	f7ff fb45 	bl	8005768 <sulp>
 80060de:	4602      	mov	r2, r0
 80060e0:	460b      	mov	r3, r1
 80060e2:	ec51 0b18 	vmov	r0, r1, d8
 80060e6:	f7fa f8cf 	bl	8000288 <__aeabi_dsub>
 80060ea:	2200      	movs	r2, #0
 80060ec:	2300      	movs	r3, #0
 80060ee:	4682      	mov	sl, r0
 80060f0:	468b      	mov	fp, r1
 80060f2:	f7fa fce9 	bl	8000ac8 <__aeabi_dcmpeq>
 80060f6:	2800      	cmp	r0, #0
 80060f8:	d0c1      	beq.n	800607e <_strtod_l+0x8de>
 80060fa:	e611      	b.n	8005d20 <_strtod_l+0x580>
 80060fc:	fffffc02 	.word	0xfffffc02
 8006100:	7ff00000 	.word	0x7ff00000
 8006104:	39500000 	.word	0x39500000
 8006108:	000fffff 	.word	0x000fffff
 800610c:	7fefffff 	.word	0x7fefffff
 8006110:	08009d50 	.word	0x08009d50
 8006114:	4631      	mov	r1, r6
 8006116:	4628      	mov	r0, r5
 8006118:	f002 fb48 	bl	80087ac <__ratio>
 800611c:	ec59 8b10 	vmov	r8, r9, d0
 8006120:	ee10 0a10 	vmov	r0, s0
 8006124:	2200      	movs	r2, #0
 8006126:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800612a:	4649      	mov	r1, r9
 800612c:	f7fa fce0 	bl	8000af0 <__aeabi_dcmple>
 8006130:	2800      	cmp	r0, #0
 8006132:	d07a      	beq.n	800622a <_strtod_l+0xa8a>
 8006134:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006136:	2b00      	cmp	r3, #0
 8006138:	d04a      	beq.n	80061d0 <_strtod_l+0xa30>
 800613a:	4b95      	ldr	r3, [pc, #596]	; (8006390 <_strtod_l+0xbf0>)
 800613c:	2200      	movs	r2, #0
 800613e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8006142:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8006390 <_strtod_l+0xbf0>
 8006146:	f04f 0800 	mov.w	r8, #0
 800614a:	4b92      	ldr	r3, [pc, #584]	; (8006394 <_strtod_l+0xbf4>)
 800614c:	403b      	ands	r3, r7
 800614e:	930d      	str	r3, [sp, #52]	; 0x34
 8006150:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006152:	4b91      	ldr	r3, [pc, #580]	; (8006398 <_strtod_l+0xbf8>)
 8006154:	429a      	cmp	r2, r3
 8006156:	f040 80b0 	bne.w	80062ba <_strtod_l+0xb1a>
 800615a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800615e:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8006162:	ec4b ab10 	vmov	d0, sl, fp
 8006166:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800616a:	f002 fa47 	bl	80085fc <__ulp>
 800616e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006172:	ec53 2b10 	vmov	r2, r3, d0
 8006176:	f7fa fa3f 	bl	80005f8 <__aeabi_dmul>
 800617a:	4652      	mov	r2, sl
 800617c:	465b      	mov	r3, fp
 800617e:	f7fa f885 	bl	800028c <__adddf3>
 8006182:	460b      	mov	r3, r1
 8006184:	4983      	ldr	r1, [pc, #524]	; (8006394 <_strtod_l+0xbf4>)
 8006186:	4a85      	ldr	r2, [pc, #532]	; (800639c <_strtod_l+0xbfc>)
 8006188:	4019      	ands	r1, r3
 800618a:	4291      	cmp	r1, r2
 800618c:	4682      	mov	sl, r0
 800618e:	d960      	bls.n	8006252 <_strtod_l+0xab2>
 8006190:	ee18 3a90 	vmov	r3, s17
 8006194:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8006198:	4293      	cmp	r3, r2
 800619a:	d104      	bne.n	80061a6 <_strtod_l+0xa06>
 800619c:	ee18 3a10 	vmov	r3, s16
 80061a0:	3301      	adds	r3, #1
 80061a2:	f43f ad45 	beq.w	8005c30 <_strtod_l+0x490>
 80061a6:	f8df b200 	ldr.w	fp, [pc, #512]	; 80063a8 <_strtod_l+0xc08>
 80061aa:	f04f 3aff 	mov.w	sl, #4294967295
 80061ae:	9918      	ldr	r1, [sp, #96]	; 0x60
 80061b0:	4620      	mov	r0, r4
 80061b2:	f001 fef1 	bl	8007f98 <_Bfree>
 80061b6:	9905      	ldr	r1, [sp, #20]
 80061b8:	4620      	mov	r0, r4
 80061ba:	f001 feed 	bl	8007f98 <_Bfree>
 80061be:	4631      	mov	r1, r6
 80061c0:	4620      	mov	r0, r4
 80061c2:	f001 fee9 	bl	8007f98 <_Bfree>
 80061c6:	4629      	mov	r1, r5
 80061c8:	4620      	mov	r0, r4
 80061ca:	f001 fee5 	bl	8007f98 <_Bfree>
 80061ce:	e61a      	b.n	8005e06 <_strtod_l+0x666>
 80061d0:	f1ba 0f00 	cmp.w	sl, #0
 80061d4:	d11b      	bne.n	800620e <_strtod_l+0xa6e>
 80061d6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80061da:	b9f3      	cbnz	r3, 800621a <_strtod_l+0xa7a>
 80061dc:	4b6c      	ldr	r3, [pc, #432]	; (8006390 <_strtod_l+0xbf0>)
 80061de:	2200      	movs	r2, #0
 80061e0:	4640      	mov	r0, r8
 80061e2:	4649      	mov	r1, r9
 80061e4:	f7fa fc7a 	bl	8000adc <__aeabi_dcmplt>
 80061e8:	b9d0      	cbnz	r0, 8006220 <_strtod_l+0xa80>
 80061ea:	4640      	mov	r0, r8
 80061ec:	4649      	mov	r1, r9
 80061ee:	4b6c      	ldr	r3, [pc, #432]	; (80063a0 <_strtod_l+0xc00>)
 80061f0:	2200      	movs	r2, #0
 80061f2:	f7fa fa01 	bl	80005f8 <__aeabi_dmul>
 80061f6:	4680      	mov	r8, r0
 80061f8:	4689      	mov	r9, r1
 80061fa:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80061fe:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 8006202:	9315      	str	r3, [sp, #84]	; 0x54
 8006204:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8006208:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800620c:	e79d      	b.n	800614a <_strtod_l+0x9aa>
 800620e:	f1ba 0f01 	cmp.w	sl, #1
 8006212:	d102      	bne.n	800621a <_strtod_l+0xa7a>
 8006214:	2f00      	cmp	r7, #0
 8006216:	f43f ad83 	beq.w	8005d20 <_strtod_l+0x580>
 800621a:	4b62      	ldr	r3, [pc, #392]	; (80063a4 <_strtod_l+0xc04>)
 800621c:	2200      	movs	r2, #0
 800621e:	e78e      	b.n	800613e <_strtod_l+0x99e>
 8006220:	f8df 917c 	ldr.w	r9, [pc, #380]	; 80063a0 <_strtod_l+0xc00>
 8006224:	f04f 0800 	mov.w	r8, #0
 8006228:	e7e7      	b.n	80061fa <_strtod_l+0xa5a>
 800622a:	4b5d      	ldr	r3, [pc, #372]	; (80063a0 <_strtod_l+0xc00>)
 800622c:	4640      	mov	r0, r8
 800622e:	4649      	mov	r1, r9
 8006230:	2200      	movs	r2, #0
 8006232:	f7fa f9e1 	bl	80005f8 <__aeabi_dmul>
 8006236:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006238:	4680      	mov	r8, r0
 800623a:	4689      	mov	r9, r1
 800623c:	b933      	cbnz	r3, 800624c <_strtod_l+0xaac>
 800623e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006242:	900e      	str	r0, [sp, #56]	; 0x38
 8006244:	930f      	str	r3, [sp, #60]	; 0x3c
 8006246:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800624a:	e7dd      	b.n	8006208 <_strtod_l+0xa68>
 800624c:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8006250:	e7f9      	b.n	8006246 <_strtod_l+0xaa6>
 8006252:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8006256:	9b04      	ldr	r3, [sp, #16]
 8006258:	2b00      	cmp	r3, #0
 800625a:	d1a8      	bne.n	80061ae <_strtod_l+0xa0e>
 800625c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006260:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006262:	0d1b      	lsrs	r3, r3, #20
 8006264:	051b      	lsls	r3, r3, #20
 8006266:	429a      	cmp	r2, r3
 8006268:	d1a1      	bne.n	80061ae <_strtod_l+0xa0e>
 800626a:	4640      	mov	r0, r8
 800626c:	4649      	mov	r1, r9
 800626e:	f7fa fd23 	bl	8000cb8 <__aeabi_d2lz>
 8006272:	f7fa f993 	bl	800059c <__aeabi_l2d>
 8006276:	4602      	mov	r2, r0
 8006278:	460b      	mov	r3, r1
 800627a:	4640      	mov	r0, r8
 800627c:	4649      	mov	r1, r9
 800627e:	f7fa f803 	bl	8000288 <__aeabi_dsub>
 8006282:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006284:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006288:	ea43 030a 	orr.w	r3, r3, sl
 800628c:	4313      	orrs	r3, r2
 800628e:	4680      	mov	r8, r0
 8006290:	4689      	mov	r9, r1
 8006292:	d055      	beq.n	8006340 <_strtod_l+0xba0>
 8006294:	a336      	add	r3, pc, #216	; (adr r3, 8006370 <_strtod_l+0xbd0>)
 8006296:	e9d3 2300 	ldrd	r2, r3, [r3]
 800629a:	f7fa fc1f 	bl	8000adc <__aeabi_dcmplt>
 800629e:	2800      	cmp	r0, #0
 80062a0:	f47f acd0 	bne.w	8005c44 <_strtod_l+0x4a4>
 80062a4:	a334      	add	r3, pc, #208	; (adr r3, 8006378 <_strtod_l+0xbd8>)
 80062a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062aa:	4640      	mov	r0, r8
 80062ac:	4649      	mov	r1, r9
 80062ae:	f7fa fc33 	bl	8000b18 <__aeabi_dcmpgt>
 80062b2:	2800      	cmp	r0, #0
 80062b4:	f43f af7b 	beq.w	80061ae <_strtod_l+0xa0e>
 80062b8:	e4c4      	b.n	8005c44 <_strtod_l+0x4a4>
 80062ba:	9b04      	ldr	r3, [sp, #16]
 80062bc:	b333      	cbz	r3, 800630c <_strtod_l+0xb6c>
 80062be:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80062c0:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80062c4:	d822      	bhi.n	800630c <_strtod_l+0xb6c>
 80062c6:	a32e      	add	r3, pc, #184	; (adr r3, 8006380 <_strtod_l+0xbe0>)
 80062c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062cc:	4640      	mov	r0, r8
 80062ce:	4649      	mov	r1, r9
 80062d0:	f7fa fc0e 	bl	8000af0 <__aeabi_dcmple>
 80062d4:	b1a0      	cbz	r0, 8006300 <_strtod_l+0xb60>
 80062d6:	4649      	mov	r1, r9
 80062d8:	4640      	mov	r0, r8
 80062da:	f7fa fc65 	bl	8000ba8 <__aeabi_d2uiz>
 80062de:	2801      	cmp	r0, #1
 80062e0:	bf38      	it	cc
 80062e2:	2001      	movcc	r0, #1
 80062e4:	f7fa f90e 	bl	8000504 <__aeabi_ui2d>
 80062e8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80062ea:	4680      	mov	r8, r0
 80062ec:	4689      	mov	r9, r1
 80062ee:	bb23      	cbnz	r3, 800633a <_strtod_l+0xb9a>
 80062f0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80062f4:	9010      	str	r0, [sp, #64]	; 0x40
 80062f6:	9311      	str	r3, [sp, #68]	; 0x44
 80062f8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80062fc:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8006300:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006302:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006304:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8006308:	1a9b      	subs	r3, r3, r2
 800630a:	9309      	str	r3, [sp, #36]	; 0x24
 800630c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006310:	eeb0 0a48 	vmov.f32	s0, s16
 8006314:	eef0 0a68 	vmov.f32	s1, s17
 8006318:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800631c:	f002 f96e 	bl	80085fc <__ulp>
 8006320:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006324:	ec53 2b10 	vmov	r2, r3, d0
 8006328:	f7fa f966 	bl	80005f8 <__aeabi_dmul>
 800632c:	ec53 2b18 	vmov	r2, r3, d8
 8006330:	f7f9 ffac 	bl	800028c <__adddf3>
 8006334:	4682      	mov	sl, r0
 8006336:	468b      	mov	fp, r1
 8006338:	e78d      	b.n	8006256 <_strtod_l+0xab6>
 800633a:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800633e:	e7db      	b.n	80062f8 <_strtod_l+0xb58>
 8006340:	a311      	add	r3, pc, #68	; (adr r3, 8006388 <_strtod_l+0xbe8>)
 8006342:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006346:	f7fa fbc9 	bl	8000adc <__aeabi_dcmplt>
 800634a:	e7b2      	b.n	80062b2 <_strtod_l+0xb12>
 800634c:	2300      	movs	r3, #0
 800634e:	930a      	str	r3, [sp, #40]	; 0x28
 8006350:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8006352:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006354:	6013      	str	r3, [r2, #0]
 8006356:	f7ff ba6b 	b.w	8005830 <_strtod_l+0x90>
 800635a:	2a65      	cmp	r2, #101	; 0x65
 800635c:	f43f ab5f 	beq.w	8005a1e <_strtod_l+0x27e>
 8006360:	2a45      	cmp	r2, #69	; 0x45
 8006362:	f43f ab5c 	beq.w	8005a1e <_strtod_l+0x27e>
 8006366:	2301      	movs	r3, #1
 8006368:	f7ff bb94 	b.w	8005a94 <_strtod_l+0x2f4>
 800636c:	f3af 8000 	nop.w
 8006370:	94a03595 	.word	0x94a03595
 8006374:	3fdfffff 	.word	0x3fdfffff
 8006378:	35afe535 	.word	0x35afe535
 800637c:	3fe00000 	.word	0x3fe00000
 8006380:	ffc00000 	.word	0xffc00000
 8006384:	41dfffff 	.word	0x41dfffff
 8006388:	94a03595 	.word	0x94a03595
 800638c:	3fcfffff 	.word	0x3fcfffff
 8006390:	3ff00000 	.word	0x3ff00000
 8006394:	7ff00000 	.word	0x7ff00000
 8006398:	7fe00000 	.word	0x7fe00000
 800639c:	7c9fffff 	.word	0x7c9fffff
 80063a0:	3fe00000 	.word	0x3fe00000
 80063a4:	bff00000 	.word	0xbff00000
 80063a8:	7fefffff 	.word	0x7fefffff

080063ac <_strtod_r>:
 80063ac:	4b01      	ldr	r3, [pc, #4]	; (80063b4 <_strtod_r+0x8>)
 80063ae:	f7ff b9f7 	b.w	80057a0 <_strtod_l>
 80063b2:	bf00      	nop
 80063b4:	20000074 	.word	0x20000074

080063b8 <_strtol_l.constprop.0>:
 80063b8:	2b01      	cmp	r3, #1
 80063ba:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80063be:	d001      	beq.n	80063c4 <_strtol_l.constprop.0+0xc>
 80063c0:	2b24      	cmp	r3, #36	; 0x24
 80063c2:	d906      	bls.n	80063d2 <_strtol_l.constprop.0+0x1a>
 80063c4:	f7fe f9d8 	bl	8004778 <__errno>
 80063c8:	2316      	movs	r3, #22
 80063ca:	6003      	str	r3, [r0, #0]
 80063cc:	2000      	movs	r0, #0
 80063ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80063d2:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80064b8 <_strtol_l.constprop.0+0x100>
 80063d6:	460d      	mov	r5, r1
 80063d8:	462e      	mov	r6, r5
 80063da:	f815 4b01 	ldrb.w	r4, [r5], #1
 80063de:	f814 700c 	ldrb.w	r7, [r4, ip]
 80063e2:	f017 0708 	ands.w	r7, r7, #8
 80063e6:	d1f7      	bne.n	80063d8 <_strtol_l.constprop.0+0x20>
 80063e8:	2c2d      	cmp	r4, #45	; 0x2d
 80063ea:	d132      	bne.n	8006452 <_strtol_l.constprop.0+0x9a>
 80063ec:	782c      	ldrb	r4, [r5, #0]
 80063ee:	2701      	movs	r7, #1
 80063f0:	1cb5      	adds	r5, r6, #2
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d05b      	beq.n	80064ae <_strtol_l.constprop.0+0xf6>
 80063f6:	2b10      	cmp	r3, #16
 80063f8:	d109      	bne.n	800640e <_strtol_l.constprop.0+0x56>
 80063fa:	2c30      	cmp	r4, #48	; 0x30
 80063fc:	d107      	bne.n	800640e <_strtol_l.constprop.0+0x56>
 80063fe:	782c      	ldrb	r4, [r5, #0]
 8006400:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8006404:	2c58      	cmp	r4, #88	; 0x58
 8006406:	d14d      	bne.n	80064a4 <_strtol_l.constprop.0+0xec>
 8006408:	786c      	ldrb	r4, [r5, #1]
 800640a:	2310      	movs	r3, #16
 800640c:	3502      	adds	r5, #2
 800640e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8006412:	f108 38ff 	add.w	r8, r8, #4294967295
 8006416:	f04f 0c00 	mov.w	ip, #0
 800641a:	fbb8 f9f3 	udiv	r9, r8, r3
 800641e:	4666      	mov	r6, ip
 8006420:	fb03 8a19 	mls	sl, r3, r9, r8
 8006424:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8006428:	f1be 0f09 	cmp.w	lr, #9
 800642c:	d816      	bhi.n	800645c <_strtol_l.constprop.0+0xa4>
 800642e:	4674      	mov	r4, lr
 8006430:	42a3      	cmp	r3, r4
 8006432:	dd24      	ble.n	800647e <_strtol_l.constprop.0+0xc6>
 8006434:	f1bc 0f00 	cmp.w	ip, #0
 8006438:	db1e      	blt.n	8006478 <_strtol_l.constprop.0+0xc0>
 800643a:	45b1      	cmp	r9, r6
 800643c:	d31c      	bcc.n	8006478 <_strtol_l.constprop.0+0xc0>
 800643e:	d101      	bne.n	8006444 <_strtol_l.constprop.0+0x8c>
 8006440:	45a2      	cmp	sl, r4
 8006442:	db19      	blt.n	8006478 <_strtol_l.constprop.0+0xc0>
 8006444:	fb06 4603 	mla	r6, r6, r3, r4
 8006448:	f04f 0c01 	mov.w	ip, #1
 800644c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006450:	e7e8      	b.n	8006424 <_strtol_l.constprop.0+0x6c>
 8006452:	2c2b      	cmp	r4, #43	; 0x2b
 8006454:	bf04      	itt	eq
 8006456:	782c      	ldrbeq	r4, [r5, #0]
 8006458:	1cb5      	addeq	r5, r6, #2
 800645a:	e7ca      	b.n	80063f2 <_strtol_l.constprop.0+0x3a>
 800645c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8006460:	f1be 0f19 	cmp.w	lr, #25
 8006464:	d801      	bhi.n	800646a <_strtol_l.constprop.0+0xb2>
 8006466:	3c37      	subs	r4, #55	; 0x37
 8006468:	e7e2      	b.n	8006430 <_strtol_l.constprop.0+0x78>
 800646a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800646e:	f1be 0f19 	cmp.w	lr, #25
 8006472:	d804      	bhi.n	800647e <_strtol_l.constprop.0+0xc6>
 8006474:	3c57      	subs	r4, #87	; 0x57
 8006476:	e7db      	b.n	8006430 <_strtol_l.constprop.0+0x78>
 8006478:	f04f 3cff 	mov.w	ip, #4294967295
 800647c:	e7e6      	b.n	800644c <_strtol_l.constprop.0+0x94>
 800647e:	f1bc 0f00 	cmp.w	ip, #0
 8006482:	da05      	bge.n	8006490 <_strtol_l.constprop.0+0xd8>
 8006484:	2322      	movs	r3, #34	; 0x22
 8006486:	6003      	str	r3, [r0, #0]
 8006488:	4646      	mov	r6, r8
 800648a:	b942      	cbnz	r2, 800649e <_strtol_l.constprop.0+0xe6>
 800648c:	4630      	mov	r0, r6
 800648e:	e79e      	b.n	80063ce <_strtol_l.constprop.0+0x16>
 8006490:	b107      	cbz	r7, 8006494 <_strtol_l.constprop.0+0xdc>
 8006492:	4276      	negs	r6, r6
 8006494:	2a00      	cmp	r2, #0
 8006496:	d0f9      	beq.n	800648c <_strtol_l.constprop.0+0xd4>
 8006498:	f1bc 0f00 	cmp.w	ip, #0
 800649c:	d000      	beq.n	80064a0 <_strtol_l.constprop.0+0xe8>
 800649e:	1e69      	subs	r1, r5, #1
 80064a0:	6011      	str	r1, [r2, #0]
 80064a2:	e7f3      	b.n	800648c <_strtol_l.constprop.0+0xd4>
 80064a4:	2430      	movs	r4, #48	; 0x30
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d1b1      	bne.n	800640e <_strtol_l.constprop.0+0x56>
 80064aa:	2308      	movs	r3, #8
 80064ac:	e7af      	b.n	800640e <_strtol_l.constprop.0+0x56>
 80064ae:	2c30      	cmp	r4, #48	; 0x30
 80064b0:	d0a5      	beq.n	80063fe <_strtol_l.constprop.0+0x46>
 80064b2:	230a      	movs	r3, #10
 80064b4:	e7ab      	b.n	800640e <_strtol_l.constprop.0+0x56>
 80064b6:	bf00      	nop
 80064b8:	08009d79 	.word	0x08009d79

080064bc <_strtol_r>:
 80064bc:	f7ff bf7c 	b.w	80063b8 <_strtol_l.constprop.0>

080064c0 <__swbuf_r>:
 80064c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064c2:	460e      	mov	r6, r1
 80064c4:	4614      	mov	r4, r2
 80064c6:	4605      	mov	r5, r0
 80064c8:	b118      	cbz	r0, 80064d2 <__swbuf_r+0x12>
 80064ca:	6983      	ldr	r3, [r0, #24]
 80064cc:	b90b      	cbnz	r3, 80064d2 <__swbuf_r+0x12>
 80064ce:	f001 f86f 	bl	80075b0 <__sinit>
 80064d2:	4b21      	ldr	r3, [pc, #132]	; (8006558 <__swbuf_r+0x98>)
 80064d4:	429c      	cmp	r4, r3
 80064d6:	d12b      	bne.n	8006530 <__swbuf_r+0x70>
 80064d8:	686c      	ldr	r4, [r5, #4]
 80064da:	69a3      	ldr	r3, [r4, #24]
 80064dc:	60a3      	str	r3, [r4, #8]
 80064de:	89a3      	ldrh	r3, [r4, #12]
 80064e0:	071a      	lsls	r2, r3, #28
 80064e2:	d52f      	bpl.n	8006544 <__swbuf_r+0x84>
 80064e4:	6923      	ldr	r3, [r4, #16]
 80064e6:	b36b      	cbz	r3, 8006544 <__swbuf_r+0x84>
 80064e8:	6923      	ldr	r3, [r4, #16]
 80064ea:	6820      	ldr	r0, [r4, #0]
 80064ec:	1ac0      	subs	r0, r0, r3
 80064ee:	6963      	ldr	r3, [r4, #20]
 80064f0:	b2f6      	uxtb	r6, r6
 80064f2:	4283      	cmp	r3, r0
 80064f4:	4637      	mov	r7, r6
 80064f6:	dc04      	bgt.n	8006502 <__swbuf_r+0x42>
 80064f8:	4621      	mov	r1, r4
 80064fa:	4628      	mov	r0, r5
 80064fc:	f000 ffc4 	bl	8007488 <_fflush_r>
 8006500:	bb30      	cbnz	r0, 8006550 <__swbuf_r+0x90>
 8006502:	68a3      	ldr	r3, [r4, #8]
 8006504:	3b01      	subs	r3, #1
 8006506:	60a3      	str	r3, [r4, #8]
 8006508:	6823      	ldr	r3, [r4, #0]
 800650a:	1c5a      	adds	r2, r3, #1
 800650c:	6022      	str	r2, [r4, #0]
 800650e:	701e      	strb	r6, [r3, #0]
 8006510:	6963      	ldr	r3, [r4, #20]
 8006512:	3001      	adds	r0, #1
 8006514:	4283      	cmp	r3, r0
 8006516:	d004      	beq.n	8006522 <__swbuf_r+0x62>
 8006518:	89a3      	ldrh	r3, [r4, #12]
 800651a:	07db      	lsls	r3, r3, #31
 800651c:	d506      	bpl.n	800652c <__swbuf_r+0x6c>
 800651e:	2e0a      	cmp	r6, #10
 8006520:	d104      	bne.n	800652c <__swbuf_r+0x6c>
 8006522:	4621      	mov	r1, r4
 8006524:	4628      	mov	r0, r5
 8006526:	f000 ffaf 	bl	8007488 <_fflush_r>
 800652a:	b988      	cbnz	r0, 8006550 <__swbuf_r+0x90>
 800652c:	4638      	mov	r0, r7
 800652e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006530:	4b0a      	ldr	r3, [pc, #40]	; (800655c <__swbuf_r+0x9c>)
 8006532:	429c      	cmp	r4, r3
 8006534:	d101      	bne.n	800653a <__swbuf_r+0x7a>
 8006536:	68ac      	ldr	r4, [r5, #8]
 8006538:	e7cf      	b.n	80064da <__swbuf_r+0x1a>
 800653a:	4b09      	ldr	r3, [pc, #36]	; (8006560 <__swbuf_r+0xa0>)
 800653c:	429c      	cmp	r4, r3
 800653e:	bf08      	it	eq
 8006540:	68ec      	ldreq	r4, [r5, #12]
 8006542:	e7ca      	b.n	80064da <__swbuf_r+0x1a>
 8006544:	4621      	mov	r1, r4
 8006546:	4628      	mov	r0, r5
 8006548:	f000 f81e 	bl	8006588 <__swsetup_r>
 800654c:	2800      	cmp	r0, #0
 800654e:	d0cb      	beq.n	80064e8 <__swbuf_r+0x28>
 8006550:	f04f 37ff 	mov.w	r7, #4294967295
 8006554:	e7ea      	b.n	800652c <__swbuf_r+0x6c>
 8006556:	bf00      	nop
 8006558:	08009f2c 	.word	0x08009f2c
 800655c:	08009f4c 	.word	0x08009f4c
 8006560:	08009f0c 	.word	0x08009f0c

08006564 <_write_r>:
 8006564:	b538      	push	{r3, r4, r5, lr}
 8006566:	4d07      	ldr	r5, [pc, #28]	; (8006584 <_write_r+0x20>)
 8006568:	4604      	mov	r4, r0
 800656a:	4608      	mov	r0, r1
 800656c:	4611      	mov	r1, r2
 800656e:	2200      	movs	r2, #0
 8006570:	602a      	str	r2, [r5, #0]
 8006572:	461a      	mov	r2, r3
 8006574:	f7fb f869 	bl	800164a <_write>
 8006578:	1c43      	adds	r3, r0, #1
 800657a:	d102      	bne.n	8006582 <_write_r+0x1e>
 800657c:	682b      	ldr	r3, [r5, #0]
 800657e:	b103      	cbz	r3, 8006582 <_write_r+0x1e>
 8006580:	6023      	str	r3, [r4, #0]
 8006582:	bd38      	pop	{r3, r4, r5, pc}
 8006584:	20000318 	.word	0x20000318

08006588 <__swsetup_r>:
 8006588:	4b32      	ldr	r3, [pc, #200]	; (8006654 <__swsetup_r+0xcc>)
 800658a:	b570      	push	{r4, r5, r6, lr}
 800658c:	681d      	ldr	r5, [r3, #0]
 800658e:	4606      	mov	r6, r0
 8006590:	460c      	mov	r4, r1
 8006592:	b125      	cbz	r5, 800659e <__swsetup_r+0x16>
 8006594:	69ab      	ldr	r3, [r5, #24]
 8006596:	b913      	cbnz	r3, 800659e <__swsetup_r+0x16>
 8006598:	4628      	mov	r0, r5
 800659a:	f001 f809 	bl	80075b0 <__sinit>
 800659e:	4b2e      	ldr	r3, [pc, #184]	; (8006658 <__swsetup_r+0xd0>)
 80065a0:	429c      	cmp	r4, r3
 80065a2:	d10f      	bne.n	80065c4 <__swsetup_r+0x3c>
 80065a4:	686c      	ldr	r4, [r5, #4]
 80065a6:	89a3      	ldrh	r3, [r4, #12]
 80065a8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80065ac:	0719      	lsls	r1, r3, #28
 80065ae:	d42c      	bmi.n	800660a <__swsetup_r+0x82>
 80065b0:	06dd      	lsls	r5, r3, #27
 80065b2:	d411      	bmi.n	80065d8 <__swsetup_r+0x50>
 80065b4:	2309      	movs	r3, #9
 80065b6:	6033      	str	r3, [r6, #0]
 80065b8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80065bc:	81a3      	strh	r3, [r4, #12]
 80065be:	f04f 30ff 	mov.w	r0, #4294967295
 80065c2:	e03e      	b.n	8006642 <__swsetup_r+0xba>
 80065c4:	4b25      	ldr	r3, [pc, #148]	; (800665c <__swsetup_r+0xd4>)
 80065c6:	429c      	cmp	r4, r3
 80065c8:	d101      	bne.n	80065ce <__swsetup_r+0x46>
 80065ca:	68ac      	ldr	r4, [r5, #8]
 80065cc:	e7eb      	b.n	80065a6 <__swsetup_r+0x1e>
 80065ce:	4b24      	ldr	r3, [pc, #144]	; (8006660 <__swsetup_r+0xd8>)
 80065d0:	429c      	cmp	r4, r3
 80065d2:	bf08      	it	eq
 80065d4:	68ec      	ldreq	r4, [r5, #12]
 80065d6:	e7e6      	b.n	80065a6 <__swsetup_r+0x1e>
 80065d8:	0758      	lsls	r0, r3, #29
 80065da:	d512      	bpl.n	8006602 <__swsetup_r+0x7a>
 80065dc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80065de:	b141      	cbz	r1, 80065f2 <__swsetup_r+0x6a>
 80065e0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80065e4:	4299      	cmp	r1, r3
 80065e6:	d002      	beq.n	80065ee <__swsetup_r+0x66>
 80065e8:	4630      	mov	r0, r6
 80065ea:	f002 f96d 	bl	80088c8 <_free_r>
 80065ee:	2300      	movs	r3, #0
 80065f0:	6363      	str	r3, [r4, #52]	; 0x34
 80065f2:	89a3      	ldrh	r3, [r4, #12]
 80065f4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80065f8:	81a3      	strh	r3, [r4, #12]
 80065fa:	2300      	movs	r3, #0
 80065fc:	6063      	str	r3, [r4, #4]
 80065fe:	6923      	ldr	r3, [r4, #16]
 8006600:	6023      	str	r3, [r4, #0]
 8006602:	89a3      	ldrh	r3, [r4, #12]
 8006604:	f043 0308 	orr.w	r3, r3, #8
 8006608:	81a3      	strh	r3, [r4, #12]
 800660a:	6923      	ldr	r3, [r4, #16]
 800660c:	b94b      	cbnz	r3, 8006622 <__swsetup_r+0x9a>
 800660e:	89a3      	ldrh	r3, [r4, #12]
 8006610:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006614:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006618:	d003      	beq.n	8006622 <__swsetup_r+0x9a>
 800661a:	4621      	mov	r1, r4
 800661c:	4630      	mov	r0, r6
 800661e:	f001 fc13 	bl	8007e48 <__smakebuf_r>
 8006622:	89a0      	ldrh	r0, [r4, #12]
 8006624:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006628:	f010 0301 	ands.w	r3, r0, #1
 800662c:	d00a      	beq.n	8006644 <__swsetup_r+0xbc>
 800662e:	2300      	movs	r3, #0
 8006630:	60a3      	str	r3, [r4, #8]
 8006632:	6963      	ldr	r3, [r4, #20]
 8006634:	425b      	negs	r3, r3
 8006636:	61a3      	str	r3, [r4, #24]
 8006638:	6923      	ldr	r3, [r4, #16]
 800663a:	b943      	cbnz	r3, 800664e <__swsetup_r+0xc6>
 800663c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006640:	d1ba      	bne.n	80065b8 <__swsetup_r+0x30>
 8006642:	bd70      	pop	{r4, r5, r6, pc}
 8006644:	0781      	lsls	r1, r0, #30
 8006646:	bf58      	it	pl
 8006648:	6963      	ldrpl	r3, [r4, #20]
 800664a:	60a3      	str	r3, [r4, #8]
 800664c:	e7f4      	b.n	8006638 <__swsetup_r+0xb0>
 800664e:	2000      	movs	r0, #0
 8006650:	e7f7      	b.n	8006642 <__swsetup_r+0xba>
 8006652:	bf00      	nop
 8006654:	2000000c 	.word	0x2000000c
 8006658:	08009f2c 	.word	0x08009f2c
 800665c:	08009f4c 	.word	0x08009f4c
 8006660:	08009f0c 	.word	0x08009f0c

08006664 <_close_r>:
 8006664:	b538      	push	{r3, r4, r5, lr}
 8006666:	4d06      	ldr	r5, [pc, #24]	; (8006680 <_close_r+0x1c>)
 8006668:	2300      	movs	r3, #0
 800666a:	4604      	mov	r4, r0
 800666c:	4608      	mov	r0, r1
 800666e:	602b      	str	r3, [r5, #0]
 8006670:	f7fb f807 	bl	8001682 <_close>
 8006674:	1c43      	adds	r3, r0, #1
 8006676:	d102      	bne.n	800667e <_close_r+0x1a>
 8006678:	682b      	ldr	r3, [r5, #0]
 800667a:	b103      	cbz	r3, 800667e <_close_r+0x1a>
 800667c:	6023      	str	r3, [r4, #0]
 800667e:	bd38      	pop	{r3, r4, r5, pc}
 8006680:	20000318 	.word	0x20000318

08006684 <quorem>:
 8006684:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006688:	6903      	ldr	r3, [r0, #16]
 800668a:	690c      	ldr	r4, [r1, #16]
 800668c:	42a3      	cmp	r3, r4
 800668e:	4607      	mov	r7, r0
 8006690:	f2c0 8081 	blt.w	8006796 <quorem+0x112>
 8006694:	3c01      	subs	r4, #1
 8006696:	f101 0814 	add.w	r8, r1, #20
 800669a:	f100 0514 	add.w	r5, r0, #20
 800669e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80066a2:	9301      	str	r3, [sp, #4]
 80066a4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80066a8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80066ac:	3301      	adds	r3, #1
 80066ae:	429a      	cmp	r2, r3
 80066b0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80066b4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80066b8:	fbb2 f6f3 	udiv	r6, r2, r3
 80066bc:	d331      	bcc.n	8006722 <quorem+0x9e>
 80066be:	f04f 0e00 	mov.w	lr, #0
 80066c2:	4640      	mov	r0, r8
 80066c4:	46ac      	mov	ip, r5
 80066c6:	46f2      	mov	sl, lr
 80066c8:	f850 2b04 	ldr.w	r2, [r0], #4
 80066cc:	b293      	uxth	r3, r2
 80066ce:	fb06 e303 	mla	r3, r6, r3, lr
 80066d2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80066d6:	b29b      	uxth	r3, r3
 80066d8:	ebaa 0303 	sub.w	r3, sl, r3
 80066dc:	f8dc a000 	ldr.w	sl, [ip]
 80066e0:	0c12      	lsrs	r2, r2, #16
 80066e2:	fa13 f38a 	uxtah	r3, r3, sl
 80066e6:	fb06 e202 	mla	r2, r6, r2, lr
 80066ea:	9300      	str	r3, [sp, #0]
 80066ec:	9b00      	ldr	r3, [sp, #0]
 80066ee:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80066f2:	b292      	uxth	r2, r2
 80066f4:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80066f8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80066fc:	f8bd 3000 	ldrh.w	r3, [sp]
 8006700:	4581      	cmp	r9, r0
 8006702:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006706:	f84c 3b04 	str.w	r3, [ip], #4
 800670a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800670e:	d2db      	bcs.n	80066c8 <quorem+0x44>
 8006710:	f855 300b 	ldr.w	r3, [r5, fp]
 8006714:	b92b      	cbnz	r3, 8006722 <quorem+0x9e>
 8006716:	9b01      	ldr	r3, [sp, #4]
 8006718:	3b04      	subs	r3, #4
 800671a:	429d      	cmp	r5, r3
 800671c:	461a      	mov	r2, r3
 800671e:	d32e      	bcc.n	800677e <quorem+0xfa>
 8006720:	613c      	str	r4, [r7, #16]
 8006722:	4638      	mov	r0, r7
 8006724:	f001 fec4 	bl	80084b0 <__mcmp>
 8006728:	2800      	cmp	r0, #0
 800672a:	db24      	blt.n	8006776 <quorem+0xf2>
 800672c:	3601      	adds	r6, #1
 800672e:	4628      	mov	r0, r5
 8006730:	f04f 0c00 	mov.w	ip, #0
 8006734:	f858 2b04 	ldr.w	r2, [r8], #4
 8006738:	f8d0 e000 	ldr.w	lr, [r0]
 800673c:	b293      	uxth	r3, r2
 800673e:	ebac 0303 	sub.w	r3, ip, r3
 8006742:	0c12      	lsrs	r2, r2, #16
 8006744:	fa13 f38e 	uxtah	r3, r3, lr
 8006748:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800674c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006750:	b29b      	uxth	r3, r3
 8006752:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006756:	45c1      	cmp	r9, r8
 8006758:	f840 3b04 	str.w	r3, [r0], #4
 800675c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006760:	d2e8      	bcs.n	8006734 <quorem+0xb0>
 8006762:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006766:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800676a:	b922      	cbnz	r2, 8006776 <quorem+0xf2>
 800676c:	3b04      	subs	r3, #4
 800676e:	429d      	cmp	r5, r3
 8006770:	461a      	mov	r2, r3
 8006772:	d30a      	bcc.n	800678a <quorem+0x106>
 8006774:	613c      	str	r4, [r7, #16]
 8006776:	4630      	mov	r0, r6
 8006778:	b003      	add	sp, #12
 800677a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800677e:	6812      	ldr	r2, [r2, #0]
 8006780:	3b04      	subs	r3, #4
 8006782:	2a00      	cmp	r2, #0
 8006784:	d1cc      	bne.n	8006720 <quorem+0x9c>
 8006786:	3c01      	subs	r4, #1
 8006788:	e7c7      	b.n	800671a <quorem+0x96>
 800678a:	6812      	ldr	r2, [r2, #0]
 800678c:	3b04      	subs	r3, #4
 800678e:	2a00      	cmp	r2, #0
 8006790:	d1f0      	bne.n	8006774 <quorem+0xf0>
 8006792:	3c01      	subs	r4, #1
 8006794:	e7eb      	b.n	800676e <quorem+0xea>
 8006796:	2000      	movs	r0, #0
 8006798:	e7ee      	b.n	8006778 <quorem+0xf4>
 800679a:	0000      	movs	r0, r0
 800679c:	0000      	movs	r0, r0
	...

080067a0 <_dtoa_r>:
 80067a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067a4:	ed2d 8b04 	vpush	{d8-d9}
 80067a8:	ec57 6b10 	vmov	r6, r7, d0
 80067ac:	b093      	sub	sp, #76	; 0x4c
 80067ae:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80067b0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80067b4:	9106      	str	r1, [sp, #24]
 80067b6:	ee10 aa10 	vmov	sl, s0
 80067ba:	4604      	mov	r4, r0
 80067bc:	9209      	str	r2, [sp, #36]	; 0x24
 80067be:	930c      	str	r3, [sp, #48]	; 0x30
 80067c0:	46bb      	mov	fp, r7
 80067c2:	b975      	cbnz	r5, 80067e2 <_dtoa_r+0x42>
 80067c4:	2010      	movs	r0, #16
 80067c6:	f001 fb7f 	bl	8007ec8 <malloc>
 80067ca:	4602      	mov	r2, r0
 80067cc:	6260      	str	r0, [r4, #36]	; 0x24
 80067ce:	b920      	cbnz	r0, 80067da <_dtoa_r+0x3a>
 80067d0:	4ba7      	ldr	r3, [pc, #668]	; (8006a70 <_dtoa_r+0x2d0>)
 80067d2:	21ea      	movs	r1, #234	; 0xea
 80067d4:	48a7      	ldr	r0, [pc, #668]	; (8006a74 <_dtoa_r+0x2d4>)
 80067d6:	f003 f84f 	bl	8009878 <__assert_func>
 80067da:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80067de:	6005      	str	r5, [r0, #0]
 80067e0:	60c5      	str	r5, [r0, #12]
 80067e2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80067e4:	6819      	ldr	r1, [r3, #0]
 80067e6:	b151      	cbz	r1, 80067fe <_dtoa_r+0x5e>
 80067e8:	685a      	ldr	r2, [r3, #4]
 80067ea:	604a      	str	r2, [r1, #4]
 80067ec:	2301      	movs	r3, #1
 80067ee:	4093      	lsls	r3, r2
 80067f0:	608b      	str	r3, [r1, #8]
 80067f2:	4620      	mov	r0, r4
 80067f4:	f001 fbd0 	bl	8007f98 <_Bfree>
 80067f8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80067fa:	2200      	movs	r2, #0
 80067fc:	601a      	str	r2, [r3, #0]
 80067fe:	1e3b      	subs	r3, r7, #0
 8006800:	bfaa      	itet	ge
 8006802:	2300      	movge	r3, #0
 8006804:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8006808:	f8c8 3000 	strge.w	r3, [r8]
 800680c:	4b9a      	ldr	r3, [pc, #616]	; (8006a78 <_dtoa_r+0x2d8>)
 800680e:	bfbc      	itt	lt
 8006810:	2201      	movlt	r2, #1
 8006812:	f8c8 2000 	strlt.w	r2, [r8]
 8006816:	ea33 030b 	bics.w	r3, r3, fp
 800681a:	d11b      	bne.n	8006854 <_dtoa_r+0xb4>
 800681c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800681e:	f242 730f 	movw	r3, #9999	; 0x270f
 8006822:	6013      	str	r3, [r2, #0]
 8006824:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006828:	4333      	orrs	r3, r6
 800682a:	f000 8592 	beq.w	8007352 <_dtoa_r+0xbb2>
 800682e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006830:	b963      	cbnz	r3, 800684c <_dtoa_r+0xac>
 8006832:	4b92      	ldr	r3, [pc, #584]	; (8006a7c <_dtoa_r+0x2dc>)
 8006834:	e022      	b.n	800687c <_dtoa_r+0xdc>
 8006836:	4b92      	ldr	r3, [pc, #584]	; (8006a80 <_dtoa_r+0x2e0>)
 8006838:	9301      	str	r3, [sp, #4]
 800683a:	3308      	adds	r3, #8
 800683c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800683e:	6013      	str	r3, [r2, #0]
 8006840:	9801      	ldr	r0, [sp, #4]
 8006842:	b013      	add	sp, #76	; 0x4c
 8006844:	ecbd 8b04 	vpop	{d8-d9}
 8006848:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800684c:	4b8b      	ldr	r3, [pc, #556]	; (8006a7c <_dtoa_r+0x2dc>)
 800684e:	9301      	str	r3, [sp, #4]
 8006850:	3303      	adds	r3, #3
 8006852:	e7f3      	b.n	800683c <_dtoa_r+0x9c>
 8006854:	2200      	movs	r2, #0
 8006856:	2300      	movs	r3, #0
 8006858:	4650      	mov	r0, sl
 800685a:	4659      	mov	r1, fp
 800685c:	f7fa f934 	bl	8000ac8 <__aeabi_dcmpeq>
 8006860:	ec4b ab19 	vmov	d9, sl, fp
 8006864:	4680      	mov	r8, r0
 8006866:	b158      	cbz	r0, 8006880 <_dtoa_r+0xe0>
 8006868:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800686a:	2301      	movs	r3, #1
 800686c:	6013      	str	r3, [r2, #0]
 800686e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006870:	2b00      	cmp	r3, #0
 8006872:	f000 856b 	beq.w	800734c <_dtoa_r+0xbac>
 8006876:	4883      	ldr	r0, [pc, #524]	; (8006a84 <_dtoa_r+0x2e4>)
 8006878:	6018      	str	r0, [r3, #0]
 800687a:	1e43      	subs	r3, r0, #1
 800687c:	9301      	str	r3, [sp, #4]
 800687e:	e7df      	b.n	8006840 <_dtoa_r+0xa0>
 8006880:	ec4b ab10 	vmov	d0, sl, fp
 8006884:	aa10      	add	r2, sp, #64	; 0x40
 8006886:	a911      	add	r1, sp, #68	; 0x44
 8006888:	4620      	mov	r0, r4
 800688a:	f001 ff33 	bl	80086f4 <__d2b>
 800688e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8006892:	ee08 0a10 	vmov	s16, r0
 8006896:	2d00      	cmp	r5, #0
 8006898:	f000 8084 	beq.w	80069a4 <_dtoa_r+0x204>
 800689c:	ee19 3a90 	vmov	r3, s19
 80068a0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80068a4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80068a8:	4656      	mov	r6, sl
 80068aa:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80068ae:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80068b2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 80068b6:	4b74      	ldr	r3, [pc, #464]	; (8006a88 <_dtoa_r+0x2e8>)
 80068b8:	2200      	movs	r2, #0
 80068ba:	4630      	mov	r0, r6
 80068bc:	4639      	mov	r1, r7
 80068be:	f7f9 fce3 	bl	8000288 <__aeabi_dsub>
 80068c2:	a365      	add	r3, pc, #404	; (adr r3, 8006a58 <_dtoa_r+0x2b8>)
 80068c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068c8:	f7f9 fe96 	bl	80005f8 <__aeabi_dmul>
 80068cc:	a364      	add	r3, pc, #400	; (adr r3, 8006a60 <_dtoa_r+0x2c0>)
 80068ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068d2:	f7f9 fcdb 	bl	800028c <__adddf3>
 80068d6:	4606      	mov	r6, r0
 80068d8:	4628      	mov	r0, r5
 80068da:	460f      	mov	r7, r1
 80068dc:	f7f9 fe22 	bl	8000524 <__aeabi_i2d>
 80068e0:	a361      	add	r3, pc, #388	; (adr r3, 8006a68 <_dtoa_r+0x2c8>)
 80068e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068e6:	f7f9 fe87 	bl	80005f8 <__aeabi_dmul>
 80068ea:	4602      	mov	r2, r0
 80068ec:	460b      	mov	r3, r1
 80068ee:	4630      	mov	r0, r6
 80068f0:	4639      	mov	r1, r7
 80068f2:	f7f9 fccb 	bl	800028c <__adddf3>
 80068f6:	4606      	mov	r6, r0
 80068f8:	460f      	mov	r7, r1
 80068fa:	f7fa f92d 	bl	8000b58 <__aeabi_d2iz>
 80068fe:	2200      	movs	r2, #0
 8006900:	9000      	str	r0, [sp, #0]
 8006902:	2300      	movs	r3, #0
 8006904:	4630      	mov	r0, r6
 8006906:	4639      	mov	r1, r7
 8006908:	f7fa f8e8 	bl	8000adc <__aeabi_dcmplt>
 800690c:	b150      	cbz	r0, 8006924 <_dtoa_r+0x184>
 800690e:	9800      	ldr	r0, [sp, #0]
 8006910:	f7f9 fe08 	bl	8000524 <__aeabi_i2d>
 8006914:	4632      	mov	r2, r6
 8006916:	463b      	mov	r3, r7
 8006918:	f7fa f8d6 	bl	8000ac8 <__aeabi_dcmpeq>
 800691c:	b910      	cbnz	r0, 8006924 <_dtoa_r+0x184>
 800691e:	9b00      	ldr	r3, [sp, #0]
 8006920:	3b01      	subs	r3, #1
 8006922:	9300      	str	r3, [sp, #0]
 8006924:	9b00      	ldr	r3, [sp, #0]
 8006926:	2b16      	cmp	r3, #22
 8006928:	d85a      	bhi.n	80069e0 <_dtoa_r+0x240>
 800692a:	9a00      	ldr	r2, [sp, #0]
 800692c:	4b57      	ldr	r3, [pc, #348]	; (8006a8c <_dtoa_r+0x2ec>)
 800692e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006932:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006936:	ec51 0b19 	vmov	r0, r1, d9
 800693a:	f7fa f8cf 	bl	8000adc <__aeabi_dcmplt>
 800693e:	2800      	cmp	r0, #0
 8006940:	d050      	beq.n	80069e4 <_dtoa_r+0x244>
 8006942:	9b00      	ldr	r3, [sp, #0]
 8006944:	3b01      	subs	r3, #1
 8006946:	9300      	str	r3, [sp, #0]
 8006948:	2300      	movs	r3, #0
 800694a:	930b      	str	r3, [sp, #44]	; 0x2c
 800694c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800694e:	1b5d      	subs	r5, r3, r5
 8006950:	1e6b      	subs	r3, r5, #1
 8006952:	9305      	str	r3, [sp, #20]
 8006954:	bf45      	ittet	mi
 8006956:	f1c5 0301 	rsbmi	r3, r5, #1
 800695a:	9304      	strmi	r3, [sp, #16]
 800695c:	2300      	movpl	r3, #0
 800695e:	2300      	movmi	r3, #0
 8006960:	bf4c      	ite	mi
 8006962:	9305      	strmi	r3, [sp, #20]
 8006964:	9304      	strpl	r3, [sp, #16]
 8006966:	9b00      	ldr	r3, [sp, #0]
 8006968:	2b00      	cmp	r3, #0
 800696a:	db3d      	blt.n	80069e8 <_dtoa_r+0x248>
 800696c:	9b05      	ldr	r3, [sp, #20]
 800696e:	9a00      	ldr	r2, [sp, #0]
 8006970:	920a      	str	r2, [sp, #40]	; 0x28
 8006972:	4413      	add	r3, r2
 8006974:	9305      	str	r3, [sp, #20]
 8006976:	2300      	movs	r3, #0
 8006978:	9307      	str	r3, [sp, #28]
 800697a:	9b06      	ldr	r3, [sp, #24]
 800697c:	2b09      	cmp	r3, #9
 800697e:	f200 8089 	bhi.w	8006a94 <_dtoa_r+0x2f4>
 8006982:	2b05      	cmp	r3, #5
 8006984:	bfc4      	itt	gt
 8006986:	3b04      	subgt	r3, #4
 8006988:	9306      	strgt	r3, [sp, #24]
 800698a:	9b06      	ldr	r3, [sp, #24]
 800698c:	f1a3 0302 	sub.w	r3, r3, #2
 8006990:	bfcc      	ite	gt
 8006992:	2500      	movgt	r5, #0
 8006994:	2501      	movle	r5, #1
 8006996:	2b03      	cmp	r3, #3
 8006998:	f200 8087 	bhi.w	8006aaa <_dtoa_r+0x30a>
 800699c:	e8df f003 	tbb	[pc, r3]
 80069a0:	59383a2d 	.word	0x59383a2d
 80069a4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80069a8:	441d      	add	r5, r3
 80069aa:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80069ae:	2b20      	cmp	r3, #32
 80069b0:	bfc1      	itttt	gt
 80069b2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80069b6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80069ba:	fa0b f303 	lslgt.w	r3, fp, r3
 80069be:	fa26 f000 	lsrgt.w	r0, r6, r0
 80069c2:	bfda      	itte	le
 80069c4:	f1c3 0320 	rsble	r3, r3, #32
 80069c8:	fa06 f003 	lslle.w	r0, r6, r3
 80069cc:	4318      	orrgt	r0, r3
 80069ce:	f7f9 fd99 	bl	8000504 <__aeabi_ui2d>
 80069d2:	2301      	movs	r3, #1
 80069d4:	4606      	mov	r6, r0
 80069d6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80069da:	3d01      	subs	r5, #1
 80069dc:	930e      	str	r3, [sp, #56]	; 0x38
 80069de:	e76a      	b.n	80068b6 <_dtoa_r+0x116>
 80069e0:	2301      	movs	r3, #1
 80069e2:	e7b2      	b.n	800694a <_dtoa_r+0x1aa>
 80069e4:	900b      	str	r0, [sp, #44]	; 0x2c
 80069e6:	e7b1      	b.n	800694c <_dtoa_r+0x1ac>
 80069e8:	9b04      	ldr	r3, [sp, #16]
 80069ea:	9a00      	ldr	r2, [sp, #0]
 80069ec:	1a9b      	subs	r3, r3, r2
 80069ee:	9304      	str	r3, [sp, #16]
 80069f0:	4253      	negs	r3, r2
 80069f2:	9307      	str	r3, [sp, #28]
 80069f4:	2300      	movs	r3, #0
 80069f6:	930a      	str	r3, [sp, #40]	; 0x28
 80069f8:	e7bf      	b.n	800697a <_dtoa_r+0x1da>
 80069fa:	2300      	movs	r3, #0
 80069fc:	9308      	str	r3, [sp, #32]
 80069fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	dc55      	bgt.n	8006ab0 <_dtoa_r+0x310>
 8006a04:	2301      	movs	r3, #1
 8006a06:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8006a0a:	461a      	mov	r2, r3
 8006a0c:	9209      	str	r2, [sp, #36]	; 0x24
 8006a0e:	e00c      	b.n	8006a2a <_dtoa_r+0x28a>
 8006a10:	2301      	movs	r3, #1
 8006a12:	e7f3      	b.n	80069fc <_dtoa_r+0x25c>
 8006a14:	2300      	movs	r3, #0
 8006a16:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006a18:	9308      	str	r3, [sp, #32]
 8006a1a:	9b00      	ldr	r3, [sp, #0]
 8006a1c:	4413      	add	r3, r2
 8006a1e:	9302      	str	r3, [sp, #8]
 8006a20:	3301      	adds	r3, #1
 8006a22:	2b01      	cmp	r3, #1
 8006a24:	9303      	str	r3, [sp, #12]
 8006a26:	bfb8      	it	lt
 8006a28:	2301      	movlt	r3, #1
 8006a2a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8006a2c:	2200      	movs	r2, #0
 8006a2e:	6042      	str	r2, [r0, #4]
 8006a30:	2204      	movs	r2, #4
 8006a32:	f102 0614 	add.w	r6, r2, #20
 8006a36:	429e      	cmp	r6, r3
 8006a38:	6841      	ldr	r1, [r0, #4]
 8006a3a:	d93d      	bls.n	8006ab8 <_dtoa_r+0x318>
 8006a3c:	4620      	mov	r0, r4
 8006a3e:	f001 fa6b 	bl	8007f18 <_Balloc>
 8006a42:	9001      	str	r0, [sp, #4]
 8006a44:	2800      	cmp	r0, #0
 8006a46:	d13b      	bne.n	8006ac0 <_dtoa_r+0x320>
 8006a48:	4b11      	ldr	r3, [pc, #68]	; (8006a90 <_dtoa_r+0x2f0>)
 8006a4a:	4602      	mov	r2, r0
 8006a4c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8006a50:	e6c0      	b.n	80067d4 <_dtoa_r+0x34>
 8006a52:	2301      	movs	r3, #1
 8006a54:	e7df      	b.n	8006a16 <_dtoa_r+0x276>
 8006a56:	bf00      	nop
 8006a58:	636f4361 	.word	0x636f4361
 8006a5c:	3fd287a7 	.word	0x3fd287a7
 8006a60:	8b60c8b3 	.word	0x8b60c8b3
 8006a64:	3fc68a28 	.word	0x3fc68a28
 8006a68:	509f79fb 	.word	0x509f79fb
 8006a6c:	3fd34413 	.word	0x3fd34413
 8006a70:	08009e86 	.word	0x08009e86
 8006a74:	08009e9d 	.word	0x08009e9d
 8006a78:	7ff00000 	.word	0x7ff00000
 8006a7c:	08009e82 	.word	0x08009e82
 8006a80:	08009e79 	.word	0x08009e79
 8006a84:	0800a15a 	.word	0x0800a15a
 8006a88:	3ff80000 	.word	0x3ff80000
 8006a8c:	0800a070 	.word	0x0800a070
 8006a90:	08009ef8 	.word	0x08009ef8
 8006a94:	2501      	movs	r5, #1
 8006a96:	2300      	movs	r3, #0
 8006a98:	9306      	str	r3, [sp, #24]
 8006a9a:	9508      	str	r5, [sp, #32]
 8006a9c:	f04f 33ff 	mov.w	r3, #4294967295
 8006aa0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8006aa4:	2200      	movs	r2, #0
 8006aa6:	2312      	movs	r3, #18
 8006aa8:	e7b0      	b.n	8006a0c <_dtoa_r+0x26c>
 8006aaa:	2301      	movs	r3, #1
 8006aac:	9308      	str	r3, [sp, #32]
 8006aae:	e7f5      	b.n	8006a9c <_dtoa_r+0x2fc>
 8006ab0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ab2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8006ab6:	e7b8      	b.n	8006a2a <_dtoa_r+0x28a>
 8006ab8:	3101      	adds	r1, #1
 8006aba:	6041      	str	r1, [r0, #4]
 8006abc:	0052      	lsls	r2, r2, #1
 8006abe:	e7b8      	b.n	8006a32 <_dtoa_r+0x292>
 8006ac0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006ac2:	9a01      	ldr	r2, [sp, #4]
 8006ac4:	601a      	str	r2, [r3, #0]
 8006ac6:	9b03      	ldr	r3, [sp, #12]
 8006ac8:	2b0e      	cmp	r3, #14
 8006aca:	f200 809d 	bhi.w	8006c08 <_dtoa_r+0x468>
 8006ace:	2d00      	cmp	r5, #0
 8006ad0:	f000 809a 	beq.w	8006c08 <_dtoa_r+0x468>
 8006ad4:	9b00      	ldr	r3, [sp, #0]
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	dd32      	ble.n	8006b40 <_dtoa_r+0x3a0>
 8006ada:	4ab7      	ldr	r2, [pc, #732]	; (8006db8 <_dtoa_r+0x618>)
 8006adc:	f003 030f 	and.w	r3, r3, #15
 8006ae0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8006ae4:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006ae8:	9b00      	ldr	r3, [sp, #0]
 8006aea:	05d8      	lsls	r0, r3, #23
 8006aec:	ea4f 1723 	mov.w	r7, r3, asr #4
 8006af0:	d516      	bpl.n	8006b20 <_dtoa_r+0x380>
 8006af2:	4bb2      	ldr	r3, [pc, #712]	; (8006dbc <_dtoa_r+0x61c>)
 8006af4:	ec51 0b19 	vmov	r0, r1, d9
 8006af8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006afc:	f7f9 fea6 	bl	800084c <__aeabi_ddiv>
 8006b00:	f007 070f 	and.w	r7, r7, #15
 8006b04:	4682      	mov	sl, r0
 8006b06:	468b      	mov	fp, r1
 8006b08:	2503      	movs	r5, #3
 8006b0a:	4eac      	ldr	r6, [pc, #688]	; (8006dbc <_dtoa_r+0x61c>)
 8006b0c:	b957      	cbnz	r7, 8006b24 <_dtoa_r+0x384>
 8006b0e:	4642      	mov	r2, r8
 8006b10:	464b      	mov	r3, r9
 8006b12:	4650      	mov	r0, sl
 8006b14:	4659      	mov	r1, fp
 8006b16:	f7f9 fe99 	bl	800084c <__aeabi_ddiv>
 8006b1a:	4682      	mov	sl, r0
 8006b1c:	468b      	mov	fp, r1
 8006b1e:	e028      	b.n	8006b72 <_dtoa_r+0x3d2>
 8006b20:	2502      	movs	r5, #2
 8006b22:	e7f2      	b.n	8006b0a <_dtoa_r+0x36a>
 8006b24:	07f9      	lsls	r1, r7, #31
 8006b26:	d508      	bpl.n	8006b3a <_dtoa_r+0x39a>
 8006b28:	4640      	mov	r0, r8
 8006b2a:	4649      	mov	r1, r9
 8006b2c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006b30:	f7f9 fd62 	bl	80005f8 <__aeabi_dmul>
 8006b34:	3501      	adds	r5, #1
 8006b36:	4680      	mov	r8, r0
 8006b38:	4689      	mov	r9, r1
 8006b3a:	107f      	asrs	r7, r7, #1
 8006b3c:	3608      	adds	r6, #8
 8006b3e:	e7e5      	b.n	8006b0c <_dtoa_r+0x36c>
 8006b40:	f000 809b 	beq.w	8006c7a <_dtoa_r+0x4da>
 8006b44:	9b00      	ldr	r3, [sp, #0]
 8006b46:	4f9d      	ldr	r7, [pc, #628]	; (8006dbc <_dtoa_r+0x61c>)
 8006b48:	425e      	negs	r6, r3
 8006b4a:	4b9b      	ldr	r3, [pc, #620]	; (8006db8 <_dtoa_r+0x618>)
 8006b4c:	f006 020f 	and.w	r2, r6, #15
 8006b50:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006b54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b58:	ec51 0b19 	vmov	r0, r1, d9
 8006b5c:	f7f9 fd4c 	bl	80005f8 <__aeabi_dmul>
 8006b60:	1136      	asrs	r6, r6, #4
 8006b62:	4682      	mov	sl, r0
 8006b64:	468b      	mov	fp, r1
 8006b66:	2300      	movs	r3, #0
 8006b68:	2502      	movs	r5, #2
 8006b6a:	2e00      	cmp	r6, #0
 8006b6c:	d17a      	bne.n	8006c64 <_dtoa_r+0x4c4>
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d1d3      	bne.n	8006b1a <_dtoa_r+0x37a>
 8006b72:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	f000 8082 	beq.w	8006c7e <_dtoa_r+0x4de>
 8006b7a:	4b91      	ldr	r3, [pc, #580]	; (8006dc0 <_dtoa_r+0x620>)
 8006b7c:	2200      	movs	r2, #0
 8006b7e:	4650      	mov	r0, sl
 8006b80:	4659      	mov	r1, fp
 8006b82:	f7f9 ffab 	bl	8000adc <__aeabi_dcmplt>
 8006b86:	2800      	cmp	r0, #0
 8006b88:	d079      	beq.n	8006c7e <_dtoa_r+0x4de>
 8006b8a:	9b03      	ldr	r3, [sp, #12]
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d076      	beq.n	8006c7e <_dtoa_r+0x4de>
 8006b90:	9b02      	ldr	r3, [sp, #8]
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	dd36      	ble.n	8006c04 <_dtoa_r+0x464>
 8006b96:	9b00      	ldr	r3, [sp, #0]
 8006b98:	4650      	mov	r0, sl
 8006b9a:	4659      	mov	r1, fp
 8006b9c:	1e5f      	subs	r7, r3, #1
 8006b9e:	2200      	movs	r2, #0
 8006ba0:	4b88      	ldr	r3, [pc, #544]	; (8006dc4 <_dtoa_r+0x624>)
 8006ba2:	f7f9 fd29 	bl	80005f8 <__aeabi_dmul>
 8006ba6:	9e02      	ldr	r6, [sp, #8]
 8006ba8:	4682      	mov	sl, r0
 8006baa:	468b      	mov	fp, r1
 8006bac:	3501      	adds	r5, #1
 8006bae:	4628      	mov	r0, r5
 8006bb0:	f7f9 fcb8 	bl	8000524 <__aeabi_i2d>
 8006bb4:	4652      	mov	r2, sl
 8006bb6:	465b      	mov	r3, fp
 8006bb8:	f7f9 fd1e 	bl	80005f8 <__aeabi_dmul>
 8006bbc:	4b82      	ldr	r3, [pc, #520]	; (8006dc8 <_dtoa_r+0x628>)
 8006bbe:	2200      	movs	r2, #0
 8006bc0:	f7f9 fb64 	bl	800028c <__adddf3>
 8006bc4:	46d0      	mov	r8, sl
 8006bc6:	46d9      	mov	r9, fp
 8006bc8:	4682      	mov	sl, r0
 8006bca:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8006bce:	2e00      	cmp	r6, #0
 8006bd0:	d158      	bne.n	8006c84 <_dtoa_r+0x4e4>
 8006bd2:	4b7e      	ldr	r3, [pc, #504]	; (8006dcc <_dtoa_r+0x62c>)
 8006bd4:	2200      	movs	r2, #0
 8006bd6:	4640      	mov	r0, r8
 8006bd8:	4649      	mov	r1, r9
 8006bda:	f7f9 fb55 	bl	8000288 <__aeabi_dsub>
 8006bde:	4652      	mov	r2, sl
 8006be0:	465b      	mov	r3, fp
 8006be2:	4680      	mov	r8, r0
 8006be4:	4689      	mov	r9, r1
 8006be6:	f7f9 ff97 	bl	8000b18 <__aeabi_dcmpgt>
 8006bea:	2800      	cmp	r0, #0
 8006bec:	f040 8295 	bne.w	800711a <_dtoa_r+0x97a>
 8006bf0:	4652      	mov	r2, sl
 8006bf2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8006bf6:	4640      	mov	r0, r8
 8006bf8:	4649      	mov	r1, r9
 8006bfa:	f7f9 ff6f 	bl	8000adc <__aeabi_dcmplt>
 8006bfe:	2800      	cmp	r0, #0
 8006c00:	f040 8289 	bne.w	8007116 <_dtoa_r+0x976>
 8006c04:	ec5b ab19 	vmov	sl, fp, d9
 8006c08:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	f2c0 8148 	blt.w	8006ea0 <_dtoa_r+0x700>
 8006c10:	9a00      	ldr	r2, [sp, #0]
 8006c12:	2a0e      	cmp	r2, #14
 8006c14:	f300 8144 	bgt.w	8006ea0 <_dtoa_r+0x700>
 8006c18:	4b67      	ldr	r3, [pc, #412]	; (8006db8 <_dtoa_r+0x618>)
 8006c1a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006c1e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006c22:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	f280 80d5 	bge.w	8006dd4 <_dtoa_r+0x634>
 8006c2a:	9b03      	ldr	r3, [sp, #12]
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	f300 80d1 	bgt.w	8006dd4 <_dtoa_r+0x634>
 8006c32:	f040 826f 	bne.w	8007114 <_dtoa_r+0x974>
 8006c36:	4b65      	ldr	r3, [pc, #404]	; (8006dcc <_dtoa_r+0x62c>)
 8006c38:	2200      	movs	r2, #0
 8006c3a:	4640      	mov	r0, r8
 8006c3c:	4649      	mov	r1, r9
 8006c3e:	f7f9 fcdb 	bl	80005f8 <__aeabi_dmul>
 8006c42:	4652      	mov	r2, sl
 8006c44:	465b      	mov	r3, fp
 8006c46:	f7f9 ff5d 	bl	8000b04 <__aeabi_dcmpge>
 8006c4a:	9e03      	ldr	r6, [sp, #12]
 8006c4c:	4637      	mov	r7, r6
 8006c4e:	2800      	cmp	r0, #0
 8006c50:	f040 8245 	bne.w	80070de <_dtoa_r+0x93e>
 8006c54:	9d01      	ldr	r5, [sp, #4]
 8006c56:	2331      	movs	r3, #49	; 0x31
 8006c58:	f805 3b01 	strb.w	r3, [r5], #1
 8006c5c:	9b00      	ldr	r3, [sp, #0]
 8006c5e:	3301      	adds	r3, #1
 8006c60:	9300      	str	r3, [sp, #0]
 8006c62:	e240      	b.n	80070e6 <_dtoa_r+0x946>
 8006c64:	07f2      	lsls	r2, r6, #31
 8006c66:	d505      	bpl.n	8006c74 <_dtoa_r+0x4d4>
 8006c68:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006c6c:	f7f9 fcc4 	bl	80005f8 <__aeabi_dmul>
 8006c70:	3501      	adds	r5, #1
 8006c72:	2301      	movs	r3, #1
 8006c74:	1076      	asrs	r6, r6, #1
 8006c76:	3708      	adds	r7, #8
 8006c78:	e777      	b.n	8006b6a <_dtoa_r+0x3ca>
 8006c7a:	2502      	movs	r5, #2
 8006c7c:	e779      	b.n	8006b72 <_dtoa_r+0x3d2>
 8006c7e:	9f00      	ldr	r7, [sp, #0]
 8006c80:	9e03      	ldr	r6, [sp, #12]
 8006c82:	e794      	b.n	8006bae <_dtoa_r+0x40e>
 8006c84:	9901      	ldr	r1, [sp, #4]
 8006c86:	4b4c      	ldr	r3, [pc, #304]	; (8006db8 <_dtoa_r+0x618>)
 8006c88:	4431      	add	r1, r6
 8006c8a:	910d      	str	r1, [sp, #52]	; 0x34
 8006c8c:	9908      	ldr	r1, [sp, #32]
 8006c8e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8006c92:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006c96:	2900      	cmp	r1, #0
 8006c98:	d043      	beq.n	8006d22 <_dtoa_r+0x582>
 8006c9a:	494d      	ldr	r1, [pc, #308]	; (8006dd0 <_dtoa_r+0x630>)
 8006c9c:	2000      	movs	r0, #0
 8006c9e:	f7f9 fdd5 	bl	800084c <__aeabi_ddiv>
 8006ca2:	4652      	mov	r2, sl
 8006ca4:	465b      	mov	r3, fp
 8006ca6:	f7f9 faef 	bl	8000288 <__aeabi_dsub>
 8006caa:	9d01      	ldr	r5, [sp, #4]
 8006cac:	4682      	mov	sl, r0
 8006cae:	468b      	mov	fp, r1
 8006cb0:	4649      	mov	r1, r9
 8006cb2:	4640      	mov	r0, r8
 8006cb4:	f7f9 ff50 	bl	8000b58 <__aeabi_d2iz>
 8006cb8:	4606      	mov	r6, r0
 8006cba:	f7f9 fc33 	bl	8000524 <__aeabi_i2d>
 8006cbe:	4602      	mov	r2, r0
 8006cc0:	460b      	mov	r3, r1
 8006cc2:	4640      	mov	r0, r8
 8006cc4:	4649      	mov	r1, r9
 8006cc6:	f7f9 fadf 	bl	8000288 <__aeabi_dsub>
 8006cca:	3630      	adds	r6, #48	; 0x30
 8006ccc:	f805 6b01 	strb.w	r6, [r5], #1
 8006cd0:	4652      	mov	r2, sl
 8006cd2:	465b      	mov	r3, fp
 8006cd4:	4680      	mov	r8, r0
 8006cd6:	4689      	mov	r9, r1
 8006cd8:	f7f9 ff00 	bl	8000adc <__aeabi_dcmplt>
 8006cdc:	2800      	cmp	r0, #0
 8006cde:	d163      	bne.n	8006da8 <_dtoa_r+0x608>
 8006ce0:	4642      	mov	r2, r8
 8006ce2:	464b      	mov	r3, r9
 8006ce4:	4936      	ldr	r1, [pc, #216]	; (8006dc0 <_dtoa_r+0x620>)
 8006ce6:	2000      	movs	r0, #0
 8006ce8:	f7f9 face 	bl	8000288 <__aeabi_dsub>
 8006cec:	4652      	mov	r2, sl
 8006cee:	465b      	mov	r3, fp
 8006cf0:	f7f9 fef4 	bl	8000adc <__aeabi_dcmplt>
 8006cf4:	2800      	cmp	r0, #0
 8006cf6:	f040 80b5 	bne.w	8006e64 <_dtoa_r+0x6c4>
 8006cfa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006cfc:	429d      	cmp	r5, r3
 8006cfe:	d081      	beq.n	8006c04 <_dtoa_r+0x464>
 8006d00:	4b30      	ldr	r3, [pc, #192]	; (8006dc4 <_dtoa_r+0x624>)
 8006d02:	2200      	movs	r2, #0
 8006d04:	4650      	mov	r0, sl
 8006d06:	4659      	mov	r1, fp
 8006d08:	f7f9 fc76 	bl	80005f8 <__aeabi_dmul>
 8006d0c:	4b2d      	ldr	r3, [pc, #180]	; (8006dc4 <_dtoa_r+0x624>)
 8006d0e:	4682      	mov	sl, r0
 8006d10:	468b      	mov	fp, r1
 8006d12:	4640      	mov	r0, r8
 8006d14:	4649      	mov	r1, r9
 8006d16:	2200      	movs	r2, #0
 8006d18:	f7f9 fc6e 	bl	80005f8 <__aeabi_dmul>
 8006d1c:	4680      	mov	r8, r0
 8006d1e:	4689      	mov	r9, r1
 8006d20:	e7c6      	b.n	8006cb0 <_dtoa_r+0x510>
 8006d22:	4650      	mov	r0, sl
 8006d24:	4659      	mov	r1, fp
 8006d26:	f7f9 fc67 	bl	80005f8 <__aeabi_dmul>
 8006d2a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006d2c:	9d01      	ldr	r5, [sp, #4]
 8006d2e:	930f      	str	r3, [sp, #60]	; 0x3c
 8006d30:	4682      	mov	sl, r0
 8006d32:	468b      	mov	fp, r1
 8006d34:	4649      	mov	r1, r9
 8006d36:	4640      	mov	r0, r8
 8006d38:	f7f9 ff0e 	bl	8000b58 <__aeabi_d2iz>
 8006d3c:	4606      	mov	r6, r0
 8006d3e:	f7f9 fbf1 	bl	8000524 <__aeabi_i2d>
 8006d42:	3630      	adds	r6, #48	; 0x30
 8006d44:	4602      	mov	r2, r0
 8006d46:	460b      	mov	r3, r1
 8006d48:	4640      	mov	r0, r8
 8006d4a:	4649      	mov	r1, r9
 8006d4c:	f7f9 fa9c 	bl	8000288 <__aeabi_dsub>
 8006d50:	f805 6b01 	strb.w	r6, [r5], #1
 8006d54:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006d56:	429d      	cmp	r5, r3
 8006d58:	4680      	mov	r8, r0
 8006d5a:	4689      	mov	r9, r1
 8006d5c:	f04f 0200 	mov.w	r2, #0
 8006d60:	d124      	bne.n	8006dac <_dtoa_r+0x60c>
 8006d62:	4b1b      	ldr	r3, [pc, #108]	; (8006dd0 <_dtoa_r+0x630>)
 8006d64:	4650      	mov	r0, sl
 8006d66:	4659      	mov	r1, fp
 8006d68:	f7f9 fa90 	bl	800028c <__adddf3>
 8006d6c:	4602      	mov	r2, r0
 8006d6e:	460b      	mov	r3, r1
 8006d70:	4640      	mov	r0, r8
 8006d72:	4649      	mov	r1, r9
 8006d74:	f7f9 fed0 	bl	8000b18 <__aeabi_dcmpgt>
 8006d78:	2800      	cmp	r0, #0
 8006d7a:	d173      	bne.n	8006e64 <_dtoa_r+0x6c4>
 8006d7c:	4652      	mov	r2, sl
 8006d7e:	465b      	mov	r3, fp
 8006d80:	4913      	ldr	r1, [pc, #76]	; (8006dd0 <_dtoa_r+0x630>)
 8006d82:	2000      	movs	r0, #0
 8006d84:	f7f9 fa80 	bl	8000288 <__aeabi_dsub>
 8006d88:	4602      	mov	r2, r0
 8006d8a:	460b      	mov	r3, r1
 8006d8c:	4640      	mov	r0, r8
 8006d8e:	4649      	mov	r1, r9
 8006d90:	f7f9 fea4 	bl	8000adc <__aeabi_dcmplt>
 8006d94:	2800      	cmp	r0, #0
 8006d96:	f43f af35 	beq.w	8006c04 <_dtoa_r+0x464>
 8006d9a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8006d9c:	1e6b      	subs	r3, r5, #1
 8006d9e:	930f      	str	r3, [sp, #60]	; 0x3c
 8006da0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006da4:	2b30      	cmp	r3, #48	; 0x30
 8006da6:	d0f8      	beq.n	8006d9a <_dtoa_r+0x5fa>
 8006da8:	9700      	str	r7, [sp, #0]
 8006daa:	e049      	b.n	8006e40 <_dtoa_r+0x6a0>
 8006dac:	4b05      	ldr	r3, [pc, #20]	; (8006dc4 <_dtoa_r+0x624>)
 8006dae:	f7f9 fc23 	bl	80005f8 <__aeabi_dmul>
 8006db2:	4680      	mov	r8, r0
 8006db4:	4689      	mov	r9, r1
 8006db6:	e7bd      	b.n	8006d34 <_dtoa_r+0x594>
 8006db8:	0800a070 	.word	0x0800a070
 8006dbc:	0800a048 	.word	0x0800a048
 8006dc0:	3ff00000 	.word	0x3ff00000
 8006dc4:	40240000 	.word	0x40240000
 8006dc8:	401c0000 	.word	0x401c0000
 8006dcc:	40140000 	.word	0x40140000
 8006dd0:	3fe00000 	.word	0x3fe00000
 8006dd4:	9d01      	ldr	r5, [sp, #4]
 8006dd6:	4656      	mov	r6, sl
 8006dd8:	465f      	mov	r7, fp
 8006dda:	4642      	mov	r2, r8
 8006ddc:	464b      	mov	r3, r9
 8006dde:	4630      	mov	r0, r6
 8006de0:	4639      	mov	r1, r7
 8006de2:	f7f9 fd33 	bl	800084c <__aeabi_ddiv>
 8006de6:	f7f9 feb7 	bl	8000b58 <__aeabi_d2iz>
 8006dea:	4682      	mov	sl, r0
 8006dec:	f7f9 fb9a 	bl	8000524 <__aeabi_i2d>
 8006df0:	4642      	mov	r2, r8
 8006df2:	464b      	mov	r3, r9
 8006df4:	f7f9 fc00 	bl	80005f8 <__aeabi_dmul>
 8006df8:	4602      	mov	r2, r0
 8006dfa:	460b      	mov	r3, r1
 8006dfc:	4630      	mov	r0, r6
 8006dfe:	4639      	mov	r1, r7
 8006e00:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8006e04:	f7f9 fa40 	bl	8000288 <__aeabi_dsub>
 8006e08:	f805 6b01 	strb.w	r6, [r5], #1
 8006e0c:	9e01      	ldr	r6, [sp, #4]
 8006e0e:	9f03      	ldr	r7, [sp, #12]
 8006e10:	1bae      	subs	r6, r5, r6
 8006e12:	42b7      	cmp	r7, r6
 8006e14:	4602      	mov	r2, r0
 8006e16:	460b      	mov	r3, r1
 8006e18:	d135      	bne.n	8006e86 <_dtoa_r+0x6e6>
 8006e1a:	f7f9 fa37 	bl	800028c <__adddf3>
 8006e1e:	4642      	mov	r2, r8
 8006e20:	464b      	mov	r3, r9
 8006e22:	4606      	mov	r6, r0
 8006e24:	460f      	mov	r7, r1
 8006e26:	f7f9 fe77 	bl	8000b18 <__aeabi_dcmpgt>
 8006e2a:	b9d0      	cbnz	r0, 8006e62 <_dtoa_r+0x6c2>
 8006e2c:	4642      	mov	r2, r8
 8006e2e:	464b      	mov	r3, r9
 8006e30:	4630      	mov	r0, r6
 8006e32:	4639      	mov	r1, r7
 8006e34:	f7f9 fe48 	bl	8000ac8 <__aeabi_dcmpeq>
 8006e38:	b110      	cbz	r0, 8006e40 <_dtoa_r+0x6a0>
 8006e3a:	f01a 0f01 	tst.w	sl, #1
 8006e3e:	d110      	bne.n	8006e62 <_dtoa_r+0x6c2>
 8006e40:	4620      	mov	r0, r4
 8006e42:	ee18 1a10 	vmov	r1, s16
 8006e46:	f001 f8a7 	bl	8007f98 <_Bfree>
 8006e4a:	2300      	movs	r3, #0
 8006e4c:	9800      	ldr	r0, [sp, #0]
 8006e4e:	702b      	strb	r3, [r5, #0]
 8006e50:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006e52:	3001      	adds	r0, #1
 8006e54:	6018      	str	r0, [r3, #0]
 8006e56:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	f43f acf1 	beq.w	8006840 <_dtoa_r+0xa0>
 8006e5e:	601d      	str	r5, [r3, #0]
 8006e60:	e4ee      	b.n	8006840 <_dtoa_r+0xa0>
 8006e62:	9f00      	ldr	r7, [sp, #0]
 8006e64:	462b      	mov	r3, r5
 8006e66:	461d      	mov	r5, r3
 8006e68:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006e6c:	2a39      	cmp	r2, #57	; 0x39
 8006e6e:	d106      	bne.n	8006e7e <_dtoa_r+0x6de>
 8006e70:	9a01      	ldr	r2, [sp, #4]
 8006e72:	429a      	cmp	r2, r3
 8006e74:	d1f7      	bne.n	8006e66 <_dtoa_r+0x6c6>
 8006e76:	9901      	ldr	r1, [sp, #4]
 8006e78:	2230      	movs	r2, #48	; 0x30
 8006e7a:	3701      	adds	r7, #1
 8006e7c:	700a      	strb	r2, [r1, #0]
 8006e7e:	781a      	ldrb	r2, [r3, #0]
 8006e80:	3201      	adds	r2, #1
 8006e82:	701a      	strb	r2, [r3, #0]
 8006e84:	e790      	b.n	8006da8 <_dtoa_r+0x608>
 8006e86:	4ba6      	ldr	r3, [pc, #664]	; (8007120 <_dtoa_r+0x980>)
 8006e88:	2200      	movs	r2, #0
 8006e8a:	f7f9 fbb5 	bl	80005f8 <__aeabi_dmul>
 8006e8e:	2200      	movs	r2, #0
 8006e90:	2300      	movs	r3, #0
 8006e92:	4606      	mov	r6, r0
 8006e94:	460f      	mov	r7, r1
 8006e96:	f7f9 fe17 	bl	8000ac8 <__aeabi_dcmpeq>
 8006e9a:	2800      	cmp	r0, #0
 8006e9c:	d09d      	beq.n	8006dda <_dtoa_r+0x63a>
 8006e9e:	e7cf      	b.n	8006e40 <_dtoa_r+0x6a0>
 8006ea0:	9a08      	ldr	r2, [sp, #32]
 8006ea2:	2a00      	cmp	r2, #0
 8006ea4:	f000 80d7 	beq.w	8007056 <_dtoa_r+0x8b6>
 8006ea8:	9a06      	ldr	r2, [sp, #24]
 8006eaa:	2a01      	cmp	r2, #1
 8006eac:	f300 80ba 	bgt.w	8007024 <_dtoa_r+0x884>
 8006eb0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006eb2:	2a00      	cmp	r2, #0
 8006eb4:	f000 80b2 	beq.w	800701c <_dtoa_r+0x87c>
 8006eb8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006ebc:	9e07      	ldr	r6, [sp, #28]
 8006ebe:	9d04      	ldr	r5, [sp, #16]
 8006ec0:	9a04      	ldr	r2, [sp, #16]
 8006ec2:	441a      	add	r2, r3
 8006ec4:	9204      	str	r2, [sp, #16]
 8006ec6:	9a05      	ldr	r2, [sp, #20]
 8006ec8:	2101      	movs	r1, #1
 8006eca:	441a      	add	r2, r3
 8006ecc:	4620      	mov	r0, r4
 8006ece:	9205      	str	r2, [sp, #20]
 8006ed0:	f001 f964 	bl	800819c <__i2b>
 8006ed4:	4607      	mov	r7, r0
 8006ed6:	2d00      	cmp	r5, #0
 8006ed8:	dd0c      	ble.n	8006ef4 <_dtoa_r+0x754>
 8006eda:	9b05      	ldr	r3, [sp, #20]
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	dd09      	ble.n	8006ef4 <_dtoa_r+0x754>
 8006ee0:	42ab      	cmp	r3, r5
 8006ee2:	9a04      	ldr	r2, [sp, #16]
 8006ee4:	bfa8      	it	ge
 8006ee6:	462b      	movge	r3, r5
 8006ee8:	1ad2      	subs	r2, r2, r3
 8006eea:	9204      	str	r2, [sp, #16]
 8006eec:	9a05      	ldr	r2, [sp, #20]
 8006eee:	1aed      	subs	r5, r5, r3
 8006ef0:	1ad3      	subs	r3, r2, r3
 8006ef2:	9305      	str	r3, [sp, #20]
 8006ef4:	9b07      	ldr	r3, [sp, #28]
 8006ef6:	b31b      	cbz	r3, 8006f40 <_dtoa_r+0x7a0>
 8006ef8:	9b08      	ldr	r3, [sp, #32]
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	f000 80af 	beq.w	800705e <_dtoa_r+0x8be>
 8006f00:	2e00      	cmp	r6, #0
 8006f02:	dd13      	ble.n	8006f2c <_dtoa_r+0x78c>
 8006f04:	4639      	mov	r1, r7
 8006f06:	4632      	mov	r2, r6
 8006f08:	4620      	mov	r0, r4
 8006f0a:	f001 fa07 	bl	800831c <__pow5mult>
 8006f0e:	ee18 2a10 	vmov	r2, s16
 8006f12:	4601      	mov	r1, r0
 8006f14:	4607      	mov	r7, r0
 8006f16:	4620      	mov	r0, r4
 8006f18:	f001 f956 	bl	80081c8 <__multiply>
 8006f1c:	ee18 1a10 	vmov	r1, s16
 8006f20:	4680      	mov	r8, r0
 8006f22:	4620      	mov	r0, r4
 8006f24:	f001 f838 	bl	8007f98 <_Bfree>
 8006f28:	ee08 8a10 	vmov	s16, r8
 8006f2c:	9b07      	ldr	r3, [sp, #28]
 8006f2e:	1b9a      	subs	r2, r3, r6
 8006f30:	d006      	beq.n	8006f40 <_dtoa_r+0x7a0>
 8006f32:	ee18 1a10 	vmov	r1, s16
 8006f36:	4620      	mov	r0, r4
 8006f38:	f001 f9f0 	bl	800831c <__pow5mult>
 8006f3c:	ee08 0a10 	vmov	s16, r0
 8006f40:	2101      	movs	r1, #1
 8006f42:	4620      	mov	r0, r4
 8006f44:	f001 f92a 	bl	800819c <__i2b>
 8006f48:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	4606      	mov	r6, r0
 8006f4e:	f340 8088 	ble.w	8007062 <_dtoa_r+0x8c2>
 8006f52:	461a      	mov	r2, r3
 8006f54:	4601      	mov	r1, r0
 8006f56:	4620      	mov	r0, r4
 8006f58:	f001 f9e0 	bl	800831c <__pow5mult>
 8006f5c:	9b06      	ldr	r3, [sp, #24]
 8006f5e:	2b01      	cmp	r3, #1
 8006f60:	4606      	mov	r6, r0
 8006f62:	f340 8081 	ble.w	8007068 <_dtoa_r+0x8c8>
 8006f66:	f04f 0800 	mov.w	r8, #0
 8006f6a:	6933      	ldr	r3, [r6, #16]
 8006f6c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8006f70:	6918      	ldr	r0, [r3, #16]
 8006f72:	f001 f8c3 	bl	80080fc <__hi0bits>
 8006f76:	f1c0 0020 	rsb	r0, r0, #32
 8006f7a:	9b05      	ldr	r3, [sp, #20]
 8006f7c:	4418      	add	r0, r3
 8006f7e:	f010 001f 	ands.w	r0, r0, #31
 8006f82:	f000 8092 	beq.w	80070aa <_dtoa_r+0x90a>
 8006f86:	f1c0 0320 	rsb	r3, r0, #32
 8006f8a:	2b04      	cmp	r3, #4
 8006f8c:	f340 808a 	ble.w	80070a4 <_dtoa_r+0x904>
 8006f90:	f1c0 001c 	rsb	r0, r0, #28
 8006f94:	9b04      	ldr	r3, [sp, #16]
 8006f96:	4403      	add	r3, r0
 8006f98:	9304      	str	r3, [sp, #16]
 8006f9a:	9b05      	ldr	r3, [sp, #20]
 8006f9c:	4403      	add	r3, r0
 8006f9e:	4405      	add	r5, r0
 8006fa0:	9305      	str	r3, [sp, #20]
 8006fa2:	9b04      	ldr	r3, [sp, #16]
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	dd07      	ble.n	8006fb8 <_dtoa_r+0x818>
 8006fa8:	ee18 1a10 	vmov	r1, s16
 8006fac:	461a      	mov	r2, r3
 8006fae:	4620      	mov	r0, r4
 8006fb0:	f001 fa0e 	bl	80083d0 <__lshift>
 8006fb4:	ee08 0a10 	vmov	s16, r0
 8006fb8:	9b05      	ldr	r3, [sp, #20]
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	dd05      	ble.n	8006fca <_dtoa_r+0x82a>
 8006fbe:	4631      	mov	r1, r6
 8006fc0:	461a      	mov	r2, r3
 8006fc2:	4620      	mov	r0, r4
 8006fc4:	f001 fa04 	bl	80083d0 <__lshift>
 8006fc8:	4606      	mov	r6, r0
 8006fca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d06e      	beq.n	80070ae <_dtoa_r+0x90e>
 8006fd0:	ee18 0a10 	vmov	r0, s16
 8006fd4:	4631      	mov	r1, r6
 8006fd6:	f001 fa6b 	bl	80084b0 <__mcmp>
 8006fda:	2800      	cmp	r0, #0
 8006fdc:	da67      	bge.n	80070ae <_dtoa_r+0x90e>
 8006fde:	9b00      	ldr	r3, [sp, #0]
 8006fe0:	3b01      	subs	r3, #1
 8006fe2:	ee18 1a10 	vmov	r1, s16
 8006fe6:	9300      	str	r3, [sp, #0]
 8006fe8:	220a      	movs	r2, #10
 8006fea:	2300      	movs	r3, #0
 8006fec:	4620      	mov	r0, r4
 8006fee:	f000 fff5 	bl	8007fdc <__multadd>
 8006ff2:	9b08      	ldr	r3, [sp, #32]
 8006ff4:	ee08 0a10 	vmov	s16, r0
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	f000 81b1 	beq.w	8007360 <_dtoa_r+0xbc0>
 8006ffe:	2300      	movs	r3, #0
 8007000:	4639      	mov	r1, r7
 8007002:	220a      	movs	r2, #10
 8007004:	4620      	mov	r0, r4
 8007006:	f000 ffe9 	bl	8007fdc <__multadd>
 800700a:	9b02      	ldr	r3, [sp, #8]
 800700c:	2b00      	cmp	r3, #0
 800700e:	4607      	mov	r7, r0
 8007010:	f300 808e 	bgt.w	8007130 <_dtoa_r+0x990>
 8007014:	9b06      	ldr	r3, [sp, #24]
 8007016:	2b02      	cmp	r3, #2
 8007018:	dc51      	bgt.n	80070be <_dtoa_r+0x91e>
 800701a:	e089      	b.n	8007130 <_dtoa_r+0x990>
 800701c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800701e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007022:	e74b      	b.n	8006ebc <_dtoa_r+0x71c>
 8007024:	9b03      	ldr	r3, [sp, #12]
 8007026:	1e5e      	subs	r6, r3, #1
 8007028:	9b07      	ldr	r3, [sp, #28]
 800702a:	42b3      	cmp	r3, r6
 800702c:	bfbf      	itttt	lt
 800702e:	9b07      	ldrlt	r3, [sp, #28]
 8007030:	9607      	strlt	r6, [sp, #28]
 8007032:	1af2      	sublt	r2, r6, r3
 8007034:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8007036:	bfb6      	itet	lt
 8007038:	189b      	addlt	r3, r3, r2
 800703a:	1b9e      	subge	r6, r3, r6
 800703c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800703e:	9b03      	ldr	r3, [sp, #12]
 8007040:	bfb8      	it	lt
 8007042:	2600      	movlt	r6, #0
 8007044:	2b00      	cmp	r3, #0
 8007046:	bfb7      	itett	lt
 8007048:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800704c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8007050:	1a9d      	sublt	r5, r3, r2
 8007052:	2300      	movlt	r3, #0
 8007054:	e734      	b.n	8006ec0 <_dtoa_r+0x720>
 8007056:	9e07      	ldr	r6, [sp, #28]
 8007058:	9d04      	ldr	r5, [sp, #16]
 800705a:	9f08      	ldr	r7, [sp, #32]
 800705c:	e73b      	b.n	8006ed6 <_dtoa_r+0x736>
 800705e:	9a07      	ldr	r2, [sp, #28]
 8007060:	e767      	b.n	8006f32 <_dtoa_r+0x792>
 8007062:	9b06      	ldr	r3, [sp, #24]
 8007064:	2b01      	cmp	r3, #1
 8007066:	dc18      	bgt.n	800709a <_dtoa_r+0x8fa>
 8007068:	f1ba 0f00 	cmp.w	sl, #0
 800706c:	d115      	bne.n	800709a <_dtoa_r+0x8fa>
 800706e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007072:	b993      	cbnz	r3, 800709a <_dtoa_r+0x8fa>
 8007074:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007078:	0d1b      	lsrs	r3, r3, #20
 800707a:	051b      	lsls	r3, r3, #20
 800707c:	b183      	cbz	r3, 80070a0 <_dtoa_r+0x900>
 800707e:	9b04      	ldr	r3, [sp, #16]
 8007080:	3301      	adds	r3, #1
 8007082:	9304      	str	r3, [sp, #16]
 8007084:	9b05      	ldr	r3, [sp, #20]
 8007086:	3301      	adds	r3, #1
 8007088:	9305      	str	r3, [sp, #20]
 800708a:	f04f 0801 	mov.w	r8, #1
 800708e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007090:	2b00      	cmp	r3, #0
 8007092:	f47f af6a 	bne.w	8006f6a <_dtoa_r+0x7ca>
 8007096:	2001      	movs	r0, #1
 8007098:	e76f      	b.n	8006f7a <_dtoa_r+0x7da>
 800709a:	f04f 0800 	mov.w	r8, #0
 800709e:	e7f6      	b.n	800708e <_dtoa_r+0x8ee>
 80070a0:	4698      	mov	r8, r3
 80070a2:	e7f4      	b.n	800708e <_dtoa_r+0x8ee>
 80070a4:	f43f af7d 	beq.w	8006fa2 <_dtoa_r+0x802>
 80070a8:	4618      	mov	r0, r3
 80070aa:	301c      	adds	r0, #28
 80070ac:	e772      	b.n	8006f94 <_dtoa_r+0x7f4>
 80070ae:	9b03      	ldr	r3, [sp, #12]
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	dc37      	bgt.n	8007124 <_dtoa_r+0x984>
 80070b4:	9b06      	ldr	r3, [sp, #24]
 80070b6:	2b02      	cmp	r3, #2
 80070b8:	dd34      	ble.n	8007124 <_dtoa_r+0x984>
 80070ba:	9b03      	ldr	r3, [sp, #12]
 80070bc:	9302      	str	r3, [sp, #8]
 80070be:	9b02      	ldr	r3, [sp, #8]
 80070c0:	b96b      	cbnz	r3, 80070de <_dtoa_r+0x93e>
 80070c2:	4631      	mov	r1, r6
 80070c4:	2205      	movs	r2, #5
 80070c6:	4620      	mov	r0, r4
 80070c8:	f000 ff88 	bl	8007fdc <__multadd>
 80070cc:	4601      	mov	r1, r0
 80070ce:	4606      	mov	r6, r0
 80070d0:	ee18 0a10 	vmov	r0, s16
 80070d4:	f001 f9ec 	bl	80084b0 <__mcmp>
 80070d8:	2800      	cmp	r0, #0
 80070da:	f73f adbb 	bgt.w	8006c54 <_dtoa_r+0x4b4>
 80070de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80070e0:	9d01      	ldr	r5, [sp, #4]
 80070e2:	43db      	mvns	r3, r3
 80070e4:	9300      	str	r3, [sp, #0]
 80070e6:	f04f 0800 	mov.w	r8, #0
 80070ea:	4631      	mov	r1, r6
 80070ec:	4620      	mov	r0, r4
 80070ee:	f000 ff53 	bl	8007f98 <_Bfree>
 80070f2:	2f00      	cmp	r7, #0
 80070f4:	f43f aea4 	beq.w	8006e40 <_dtoa_r+0x6a0>
 80070f8:	f1b8 0f00 	cmp.w	r8, #0
 80070fc:	d005      	beq.n	800710a <_dtoa_r+0x96a>
 80070fe:	45b8      	cmp	r8, r7
 8007100:	d003      	beq.n	800710a <_dtoa_r+0x96a>
 8007102:	4641      	mov	r1, r8
 8007104:	4620      	mov	r0, r4
 8007106:	f000 ff47 	bl	8007f98 <_Bfree>
 800710a:	4639      	mov	r1, r7
 800710c:	4620      	mov	r0, r4
 800710e:	f000 ff43 	bl	8007f98 <_Bfree>
 8007112:	e695      	b.n	8006e40 <_dtoa_r+0x6a0>
 8007114:	2600      	movs	r6, #0
 8007116:	4637      	mov	r7, r6
 8007118:	e7e1      	b.n	80070de <_dtoa_r+0x93e>
 800711a:	9700      	str	r7, [sp, #0]
 800711c:	4637      	mov	r7, r6
 800711e:	e599      	b.n	8006c54 <_dtoa_r+0x4b4>
 8007120:	40240000 	.word	0x40240000
 8007124:	9b08      	ldr	r3, [sp, #32]
 8007126:	2b00      	cmp	r3, #0
 8007128:	f000 80ca 	beq.w	80072c0 <_dtoa_r+0xb20>
 800712c:	9b03      	ldr	r3, [sp, #12]
 800712e:	9302      	str	r3, [sp, #8]
 8007130:	2d00      	cmp	r5, #0
 8007132:	dd05      	ble.n	8007140 <_dtoa_r+0x9a0>
 8007134:	4639      	mov	r1, r7
 8007136:	462a      	mov	r2, r5
 8007138:	4620      	mov	r0, r4
 800713a:	f001 f949 	bl	80083d0 <__lshift>
 800713e:	4607      	mov	r7, r0
 8007140:	f1b8 0f00 	cmp.w	r8, #0
 8007144:	d05b      	beq.n	80071fe <_dtoa_r+0xa5e>
 8007146:	6879      	ldr	r1, [r7, #4]
 8007148:	4620      	mov	r0, r4
 800714a:	f000 fee5 	bl	8007f18 <_Balloc>
 800714e:	4605      	mov	r5, r0
 8007150:	b928      	cbnz	r0, 800715e <_dtoa_r+0x9be>
 8007152:	4b87      	ldr	r3, [pc, #540]	; (8007370 <_dtoa_r+0xbd0>)
 8007154:	4602      	mov	r2, r0
 8007156:	f240 21ea 	movw	r1, #746	; 0x2ea
 800715a:	f7ff bb3b 	b.w	80067d4 <_dtoa_r+0x34>
 800715e:	693a      	ldr	r2, [r7, #16]
 8007160:	3202      	adds	r2, #2
 8007162:	0092      	lsls	r2, r2, #2
 8007164:	f107 010c 	add.w	r1, r7, #12
 8007168:	300c      	adds	r0, #12
 800716a:	f000 fec7 	bl	8007efc <memcpy>
 800716e:	2201      	movs	r2, #1
 8007170:	4629      	mov	r1, r5
 8007172:	4620      	mov	r0, r4
 8007174:	f001 f92c 	bl	80083d0 <__lshift>
 8007178:	9b01      	ldr	r3, [sp, #4]
 800717a:	f103 0901 	add.w	r9, r3, #1
 800717e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8007182:	4413      	add	r3, r2
 8007184:	9305      	str	r3, [sp, #20]
 8007186:	f00a 0301 	and.w	r3, sl, #1
 800718a:	46b8      	mov	r8, r7
 800718c:	9304      	str	r3, [sp, #16]
 800718e:	4607      	mov	r7, r0
 8007190:	4631      	mov	r1, r6
 8007192:	ee18 0a10 	vmov	r0, s16
 8007196:	f7ff fa75 	bl	8006684 <quorem>
 800719a:	4641      	mov	r1, r8
 800719c:	9002      	str	r0, [sp, #8]
 800719e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80071a2:	ee18 0a10 	vmov	r0, s16
 80071a6:	f001 f983 	bl	80084b0 <__mcmp>
 80071aa:	463a      	mov	r2, r7
 80071ac:	9003      	str	r0, [sp, #12]
 80071ae:	4631      	mov	r1, r6
 80071b0:	4620      	mov	r0, r4
 80071b2:	f001 f999 	bl	80084e8 <__mdiff>
 80071b6:	68c2      	ldr	r2, [r0, #12]
 80071b8:	f109 3bff 	add.w	fp, r9, #4294967295
 80071bc:	4605      	mov	r5, r0
 80071be:	bb02      	cbnz	r2, 8007202 <_dtoa_r+0xa62>
 80071c0:	4601      	mov	r1, r0
 80071c2:	ee18 0a10 	vmov	r0, s16
 80071c6:	f001 f973 	bl	80084b0 <__mcmp>
 80071ca:	4602      	mov	r2, r0
 80071cc:	4629      	mov	r1, r5
 80071ce:	4620      	mov	r0, r4
 80071d0:	9207      	str	r2, [sp, #28]
 80071d2:	f000 fee1 	bl	8007f98 <_Bfree>
 80071d6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 80071da:	ea43 0102 	orr.w	r1, r3, r2
 80071de:	9b04      	ldr	r3, [sp, #16]
 80071e0:	430b      	orrs	r3, r1
 80071e2:	464d      	mov	r5, r9
 80071e4:	d10f      	bne.n	8007206 <_dtoa_r+0xa66>
 80071e6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80071ea:	d02a      	beq.n	8007242 <_dtoa_r+0xaa2>
 80071ec:	9b03      	ldr	r3, [sp, #12]
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	dd02      	ble.n	80071f8 <_dtoa_r+0xa58>
 80071f2:	9b02      	ldr	r3, [sp, #8]
 80071f4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 80071f8:	f88b a000 	strb.w	sl, [fp]
 80071fc:	e775      	b.n	80070ea <_dtoa_r+0x94a>
 80071fe:	4638      	mov	r0, r7
 8007200:	e7ba      	b.n	8007178 <_dtoa_r+0x9d8>
 8007202:	2201      	movs	r2, #1
 8007204:	e7e2      	b.n	80071cc <_dtoa_r+0xa2c>
 8007206:	9b03      	ldr	r3, [sp, #12]
 8007208:	2b00      	cmp	r3, #0
 800720a:	db04      	blt.n	8007216 <_dtoa_r+0xa76>
 800720c:	9906      	ldr	r1, [sp, #24]
 800720e:	430b      	orrs	r3, r1
 8007210:	9904      	ldr	r1, [sp, #16]
 8007212:	430b      	orrs	r3, r1
 8007214:	d122      	bne.n	800725c <_dtoa_r+0xabc>
 8007216:	2a00      	cmp	r2, #0
 8007218:	ddee      	ble.n	80071f8 <_dtoa_r+0xa58>
 800721a:	ee18 1a10 	vmov	r1, s16
 800721e:	2201      	movs	r2, #1
 8007220:	4620      	mov	r0, r4
 8007222:	f001 f8d5 	bl	80083d0 <__lshift>
 8007226:	4631      	mov	r1, r6
 8007228:	ee08 0a10 	vmov	s16, r0
 800722c:	f001 f940 	bl	80084b0 <__mcmp>
 8007230:	2800      	cmp	r0, #0
 8007232:	dc03      	bgt.n	800723c <_dtoa_r+0xa9c>
 8007234:	d1e0      	bne.n	80071f8 <_dtoa_r+0xa58>
 8007236:	f01a 0f01 	tst.w	sl, #1
 800723a:	d0dd      	beq.n	80071f8 <_dtoa_r+0xa58>
 800723c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007240:	d1d7      	bne.n	80071f2 <_dtoa_r+0xa52>
 8007242:	2339      	movs	r3, #57	; 0x39
 8007244:	f88b 3000 	strb.w	r3, [fp]
 8007248:	462b      	mov	r3, r5
 800724a:	461d      	mov	r5, r3
 800724c:	3b01      	subs	r3, #1
 800724e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8007252:	2a39      	cmp	r2, #57	; 0x39
 8007254:	d071      	beq.n	800733a <_dtoa_r+0xb9a>
 8007256:	3201      	adds	r2, #1
 8007258:	701a      	strb	r2, [r3, #0]
 800725a:	e746      	b.n	80070ea <_dtoa_r+0x94a>
 800725c:	2a00      	cmp	r2, #0
 800725e:	dd07      	ble.n	8007270 <_dtoa_r+0xad0>
 8007260:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007264:	d0ed      	beq.n	8007242 <_dtoa_r+0xaa2>
 8007266:	f10a 0301 	add.w	r3, sl, #1
 800726a:	f88b 3000 	strb.w	r3, [fp]
 800726e:	e73c      	b.n	80070ea <_dtoa_r+0x94a>
 8007270:	9b05      	ldr	r3, [sp, #20]
 8007272:	f809 ac01 	strb.w	sl, [r9, #-1]
 8007276:	4599      	cmp	r9, r3
 8007278:	d047      	beq.n	800730a <_dtoa_r+0xb6a>
 800727a:	ee18 1a10 	vmov	r1, s16
 800727e:	2300      	movs	r3, #0
 8007280:	220a      	movs	r2, #10
 8007282:	4620      	mov	r0, r4
 8007284:	f000 feaa 	bl	8007fdc <__multadd>
 8007288:	45b8      	cmp	r8, r7
 800728a:	ee08 0a10 	vmov	s16, r0
 800728e:	f04f 0300 	mov.w	r3, #0
 8007292:	f04f 020a 	mov.w	r2, #10
 8007296:	4641      	mov	r1, r8
 8007298:	4620      	mov	r0, r4
 800729a:	d106      	bne.n	80072aa <_dtoa_r+0xb0a>
 800729c:	f000 fe9e 	bl	8007fdc <__multadd>
 80072a0:	4680      	mov	r8, r0
 80072a2:	4607      	mov	r7, r0
 80072a4:	f109 0901 	add.w	r9, r9, #1
 80072a8:	e772      	b.n	8007190 <_dtoa_r+0x9f0>
 80072aa:	f000 fe97 	bl	8007fdc <__multadd>
 80072ae:	4639      	mov	r1, r7
 80072b0:	4680      	mov	r8, r0
 80072b2:	2300      	movs	r3, #0
 80072b4:	220a      	movs	r2, #10
 80072b6:	4620      	mov	r0, r4
 80072b8:	f000 fe90 	bl	8007fdc <__multadd>
 80072bc:	4607      	mov	r7, r0
 80072be:	e7f1      	b.n	80072a4 <_dtoa_r+0xb04>
 80072c0:	9b03      	ldr	r3, [sp, #12]
 80072c2:	9302      	str	r3, [sp, #8]
 80072c4:	9d01      	ldr	r5, [sp, #4]
 80072c6:	ee18 0a10 	vmov	r0, s16
 80072ca:	4631      	mov	r1, r6
 80072cc:	f7ff f9da 	bl	8006684 <quorem>
 80072d0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80072d4:	9b01      	ldr	r3, [sp, #4]
 80072d6:	f805 ab01 	strb.w	sl, [r5], #1
 80072da:	1aea      	subs	r2, r5, r3
 80072dc:	9b02      	ldr	r3, [sp, #8]
 80072de:	4293      	cmp	r3, r2
 80072e0:	dd09      	ble.n	80072f6 <_dtoa_r+0xb56>
 80072e2:	ee18 1a10 	vmov	r1, s16
 80072e6:	2300      	movs	r3, #0
 80072e8:	220a      	movs	r2, #10
 80072ea:	4620      	mov	r0, r4
 80072ec:	f000 fe76 	bl	8007fdc <__multadd>
 80072f0:	ee08 0a10 	vmov	s16, r0
 80072f4:	e7e7      	b.n	80072c6 <_dtoa_r+0xb26>
 80072f6:	9b02      	ldr	r3, [sp, #8]
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	bfc8      	it	gt
 80072fc:	461d      	movgt	r5, r3
 80072fe:	9b01      	ldr	r3, [sp, #4]
 8007300:	bfd8      	it	le
 8007302:	2501      	movle	r5, #1
 8007304:	441d      	add	r5, r3
 8007306:	f04f 0800 	mov.w	r8, #0
 800730a:	ee18 1a10 	vmov	r1, s16
 800730e:	2201      	movs	r2, #1
 8007310:	4620      	mov	r0, r4
 8007312:	f001 f85d 	bl	80083d0 <__lshift>
 8007316:	4631      	mov	r1, r6
 8007318:	ee08 0a10 	vmov	s16, r0
 800731c:	f001 f8c8 	bl	80084b0 <__mcmp>
 8007320:	2800      	cmp	r0, #0
 8007322:	dc91      	bgt.n	8007248 <_dtoa_r+0xaa8>
 8007324:	d102      	bne.n	800732c <_dtoa_r+0xb8c>
 8007326:	f01a 0f01 	tst.w	sl, #1
 800732a:	d18d      	bne.n	8007248 <_dtoa_r+0xaa8>
 800732c:	462b      	mov	r3, r5
 800732e:	461d      	mov	r5, r3
 8007330:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007334:	2a30      	cmp	r2, #48	; 0x30
 8007336:	d0fa      	beq.n	800732e <_dtoa_r+0xb8e>
 8007338:	e6d7      	b.n	80070ea <_dtoa_r+0x94a>
 800733a:	9a01      	ldr	r2, [sp, #4]
 800733c:	429a      	cmp	r2, r3
 800733e:	d184      	bne.n	800724a <_dtoa_r+0xaaa>
 8007340:	9b00      	ldr	r3, [sp, #0]
 8007342:	3301      	adds	r3, #1
 8007344:	9300      	str	r3, [sp, #0]
 8007346:	2331      	movs	r3, #49	; 0x31
 8007348:	7013      	strb	r3, [r2, #0]
 800734a:	e6ce      	b.n	80070ea <_dtoa_r+0x94a>
 800734c:	4b09      	ldr	r3, [pc, #36]	; (8007374 <_dtoa_r+0xbd4>)
 800734e:	f7ff ba95 	b.w	800687c <_dtoa_r+0xdc>
 8007352:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007354:	2b00      	cmp	r3, #0
 8007356:	f47f aa6e 	bne.w	8006836 <_dtoa_r+0x96>
 800735a:	4b07      	ldr	r3, [pc, #28]	; (8007378 <_dtoa_r+0xbd8>)
 800735c:	f7ff ba8e 	b.w	800687c <_dtoa_r+0xdc>
 8007360:	9b02      	ldr	r3, [sp, #8]
 8007362:	2b00      	cmp	r3, #0
 8007364:	dcae      	bgt.n	80072c4 <_dtoa_r+0xb24>
 8007366:	9b06      	ldr	r3, [sp, #24]
 8007368:	2b02      	cmp	r3, #2
 800736a:	f73f aea8 	bgt.w	80070be <_dtoa_r+0x91e>
 800736e:	e7a9      	b.n	80072c4 <_dtoa_r+0xb24>
 8007370:	08009ef8 	.word	0x08009ef8
 8007374:	0800a159 	.word	0x0800a159
 8007378:	08009e79 	.word	0x08009e79

0800737c <__sflush_r>:
 800737c:	898a      	ldrh	r2, [r1, #12]
 800737e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007382:	4605      	mov	r5, r0
 8007384:	0710      	lsls	r0, r2, #28
 8007386:	460c      	mov	r4, r1
 8007388:	d458      	bmi.n	800743c <__sflush_r+0xc0>
 800738a:	684b      	ldr	r3, [r1, #4]
 800738c:	2b00      	cmp	r3, #0
 800738e:	dc05      	bgt.n	800739c <__sflush_r+0x20>
 8007390:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007392:	2b00      	cmp	r3, #0
 8007394:	dc02      	bgt.n	800739c <__sflush_r+0x20>
 8007396:	2000      	movs	r0, #0
 8007398:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800739c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800739e:	2e00      	cmp	r6, #0
 80073a0:	d0f9      	beq.n	8007396 <__sflush_r+0x1a>
 80073a2:	2300      	movs	r3, #0
 80073a4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80073a8:	682f      	ldr	r7, [r5, #0]
 80073aa:	602b      	str	r3, [r5, #0]
 80073ac:	d032      	beq.n	8007414 <__sflush_r+0x98>
 80073ae:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80073b0:	89a3      	ldrh	r3, [r4, #12]
 80073b2:	075a      	lsls	r2, r3, #29
 80073b4:	d505      	bpl.n	80073c2 <__sflush_r+0x46>
 80073b6:	6863      	ldr	r3, [r4, #4]
 80073b8:	1ac0      	subs	r0, r0, r3
 80073ba:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80073bc:	b10b      	cbz	r3, 80073c2 <__sflush_r+0x46>
 80073be:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80073c0:	1ac0      	subs	r0, r0, r3
 80073c2:	2300      	movs	r3, #0
 80073c4:	4602      	mov	r2, r0
 80073c6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80073c8:	6a21      	ldr	r1, [r4, #32]
 80073ca:	4628      	mov	r0, r5
 80073cc:	47b0      	blx	r6
 80073ce:	1c43      	adds	r3, r0, #1
 80073d0:	89a3      	ldrh	r3, [r4, #12]
 80073d2:	d106      	bne.n	80073e2 <__sflush_r+0x66>
 80073d4:	6829      	ldr	r1, [r5, #0]
 80073d6:	291d      	cmp	r1, #29
 80073d8:	d82c      	bhi.n	8007434 <__sflush_r+0xb8>
 80073da:	4a2a      	ldr	r2, [pc, #168]	; (8007484 <__sflush_r+0x108>)
 80073dc:	40ca      	lsrs	r2, r1
 80073de:	07d6      	lsls	r6, r2, #31
 80073e0:	d528      	bpl.n	8007434 <__sflush_r+0xb8>
 80073e2:	2200      	movs	r2, #0
 80073e4:	6062      	str	r2, [r4, #4]
 80073e6:	04d9      	lsls	r1, r3, #19
 80073e8:	6922      	ldr	r2, [r4, #16]
 80073ea:	6022      	str	r2, [r4, #0]
 80073ec:	d504      	bpl.n	80073f8 <__sflush_r+0x7c>
 80073ee:	1c42      	adds	r2, r0, #1
 80073f0:	d101      	bne.n	80073f6 <__sflush_r+0x7a>
 80073f2:	682b      	ldr	r3, [r5, #0]
 80073f4:	b903      	cbnz	r3, 80073f8 <__sflush_r+0x7c>
 80073f6:	6560      	str	r0, [r4, #84]	; 0x54
 80073f8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80073fa:	602f      	str	r7, [r5, #0]
 80073fc:	2900      	cmp	r1, #0
 80073fe:	d0ca      	beq.n	8007396 <__sflush_r+0x1a>
 8007400:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007404:	4299      	cmp	r1, r3
 8007406:	d002      	beq.n	800740e <__sflush_r+0x92>
 8007408:	4628      	mov	r0, r5
 800740a:	f001 fa5d 	bl	80088c8 <_free_r>
 800740e:	2000      	movs	r0, #0
 8007410:	6360      	str	r0, [r4, #52]	; 0x34
 8007412:	e7c1      	b.n	8007398 <__sflush_r+0x1c>
 8007414:	6a21      	ldr	r1, [r4, #32]
 8007416:	2301      	movs	r3, #1
 8007418:	4628      	mov	r0, r5
 800741a:	47b0      	blx	r6
 800741c:	1c41      	adds	r1, r0, #1
 800741e:	d1c7      	bne.n	80073b0 <__sflush_r+0x34>
 8007420:	682b      	ldr	r3, [r5, #0]
 8007422:	2b00      	cmp	r3, #0
 8007424:	d0c4      	beq.n	80073b0 <__sflush_r+0x34>
 8007426:	2b1d      	cmp	r3, #29
 8007428:	d001      	beq.n	800742e <__sflush_r+0xb2>
 800742a:	2b16      	cmp	r3, #22
 800742c:	d101      	bne.n	8007432 <__sflush_r+0xb6>
 800742e:	602f      	str	r7, [r5, #0]
 8007430:	e7b1      	b.n	8007396 <__sflush_r+0x1a>
 8007432:	89a3      	ldrh	r3, [r4, #12]
 8007434:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007438:	81a3      	strh	r3, [r4, #12]
 800743a:	e7ad      	b.n	8007398 <__sflush_r+0x1c>
 800743c:	690f      	ldr	r7, [r1, #16]
 800743e:	2f00      	cmp	r7, #0
 8007440:	d0a9      	beq.n	8007396 <__sflush_r+0x1a>
 8007442:	0793      	lsls	r3, r2, #30
 8007444:	680e      	ldr	r6, [r1, #0]
 8007446:	bf08      	it	eq
 8007448:	694b      	ldreq	r3, [r1, #20]
 800744a:	600f      	str	r7, [r1, #0]
 800744c:	bf18      	it	ne
 800744e:	2300      	movne	r3, #0
 8007450:	eba6 0807 	sub.w	r8, r6, r7
 8007454:	608b      	str	r3, [r1, #8]
 8007456:	f1b8 0f00 	cmp.w	r8, #0
 800745a:	dd9c      	ble.n	8007396 <__sflush_r+0x1a>
 800745c:	6a21      	ldr	r1, [r4, #32]
 800745e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007460:	4643      	mov	r3, r8
 8007462:	463a      	mov	r2, r7
 8007464:	4628      	mov	r0, r5
 8007466:	47b0      	blx	r6
 8007468:	2800      	cmp	r0, #0
 800746a:	dc06      	bgt.n	800747a <__sflush_r+0xfe>
 800746c:	89a3      	ldrh	r3, [r4, #12]
 800746e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007472:	81a3      	strh	r3, [r4, #12]
 8007474:	f04f 30ff 	mov.w	r0, #4294967295
 8007478:	e78e      	b.n	8007398 <__sflush_r+0x1c>
 800747a:	4407      	add	r7, r0
 800747c:	eba8 0800 	sub.w	r8, r8, r0
 8007480:	e7e9      	b.n	8007456 <__sflush_r+0xda>
 8007482:	bf00      	nop
 8007484:	20400001 	.word	0x20400001

08007488 <_fflush_r>:
 8007488:	b538      	push	{r3, r4, r5, lr}
 800748a:	690b      	ldr	r3, [r1, #16]
 800748c:	4605      	mov	r5, r0
 800748e:	460c      	mov	r4, r1
 8007490:	b913      	cbnz	r3, 8007498 <_fflush_r+0x10>
 8007492:	2500      	movs	r5, #0
 8007494:	4628      	mov	r0, r5
 8007496:	bd38      	pop	{r3, r4, r5, pc}
 8007498:	b118      	cbz	r0, 80074a2 <_fflush_r+0x1a>
 800749a:	6983      	ldr	r3, [r0, #24]
 800749c:	b90b      	cbnz	r3, 80074a2 <_fflush_r+0x1a>
 800749e:	f000 f887 	bl	80075b0 <__sinit>
 80074a2:	4b14      	ldr	r3, [pc, #80]	; (80074f4 <_fflush_r+0x6c>)
 80074a4:	429c      	cmp	r4, r3
 80074a6:	d11b      	bne.n	80074e0 <_fflush_r+0x58>
 80074a8:	686c      	ldr	r4, [r5, #4]
 80074aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d0ef      	beq.n	8007492 <_fflush_r+0xa>
 80074b2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80074b4:	07d0      	lsls	r0, r2, #31
 80074b6:	d404      	bmi.n	80074c2 <_fflush_r+0x3a>
 80074b8:	0599      	lsls	r1, r3, #22
 80074ba:	d402      	bmi.n	80074c2 <_fflush_r+0x3a>
 80074bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80074be:	f000 fc88 	bl	8007dd2 <__retarget_lock_acquire_recursive>
 80074c2:	4628      	mov	r0, r5
 80074c4:	4621      	mov	r1, r4
 80074c6:	f7ff ff59 	bl	800737c <__sflush_r>
 80074ca:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80074cc:	07da      	lsls	r2, r3, #31
 80074ce:	4605      	mov	r5, r0
 80074d0:	d4e0      	bmi.n	8007494 <_fflush_r+0xc>
 80074d2:	89a3      	ldrh	r3, [r4, #12]
 80074d4:	059b      	lsls	r3, r3, #22
 80074d6:	d4dd      	bmi.n	8007494 <_fflush_r+0xc>
 80074d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80074da:	f000 fc7b 	bl	8007dd4 <__retarget_lock_release_recursive>
 80074de:	e7d9      	b.n	8007494 <_fflush_r+0xc>
 80074e0:	4b05      	ldr	r3, [pc, #20]	; (80074f8 <_fflush_r+0x70>)
 80074e2:	429c      	cmp	r4, r3
 80074e4:	d101      	bne.n	80074ea <_fflush_r+0x62>
 80074e6:	68ac      	ldr	r4, [r5, #8]
 80074e8:	e7df      	b.n	80074aa <_fflush_r+0x22>
 80074ea:	4b04      	ldr	r3, [pc, #16]	; (80074fc <_fflush_r+0x74>)
 80074ec:	429c      	cmp	r4, r3
 80074ee:	bf08      	it	eq
 80074f0:	68ec      	ldreq	r4, [r5, #12]
 80074f2:	e7da      	b.n	80074aa <_fflush_r+0x22>
 80074f4:	08009f2c 	.word	0x08009f2c
 80074f8:	08009f4c 	.word	0x08009f4c
 80074fc:	08009f0c 	.word	0x08009f0c

08007500 <std>:
 8007500:	2300      	movs	r3, #0
 8007502:	b510      	push	{r4, lr}
 8007504:	4604      	mov	r4, r0
 8007506:	e9c0 3300 	strd	r3, r3, [r0]
 800750a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800750e:	6083      	str	r3, [r0, #8]
 8007510:	8181      	strh	r1, [r0, #12]
 8007512:	6643      	str	r3, [r0, #100]	; 0x64
 8007514:	81c2      	strh	r2, [r0, #14]
 8007516:	6183      	str	r3, [r0, #24]
 8007518:	4619      	mov	r1, r3
 800751a:	2208      	movs	r2, #8
 800751c:	305c      	adds	r0, #92	; 0x5c
 800751e:	f7fd f955 	bl	80047cc <memset>
 8007522:	4b05      	ldr	r3, [pc, #20]	; (8007538 <std+0x38>)
 8007524:	6263      	str	r3, [r4, #36]	; 0x24
 8007526:	4b05      	ldr	r3, [pc, #20]	; (800753c <std+0x3c>)
 8007528:	62a3      	str	r3, [r4, #40]	; 0x28
 800752a:	4b05      	ldr	r3, [pc, #20]	; (8007540 <std+0x40>)
 800752c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800752e:	4b05      	ldr	r3, [pc, #20]	; (8007544 <std+0x44>)
 8007530:	6224      	str	r4, [r4, #32]
 8007532:	6323      	str	r3, [r4, #48]	; 0x30
 8007534:	bd10      	pop	{r4, pc}
 8007536:	bf00      	nop
 8007538:	08005691 	.word	0x08005691
 800753c:	080056b7 	.word	0x080056b7
 8007540:	080056ef 	.word	0x080056ef
 8007544:	08005713 	.word	0x08005713

08007548 <_cleanup_r>:
 8007548:	4901      	ldr	r1, [pc, #4]	; (8007550 <_cleanup_r+0x8>)
 800754a:	f000 b8af 	b.w	80076ac <_fwalk_reent>
 800754e:	bf00      	nop
 8007550:	08007489 	.word	0x08007489

08007554 <__sfmoreglue>:
 8007554:	b570      	push	{r4, r5, r6, lr}
 8007556:	2268      	movs	r2, #104	; 0x68
 8007558:	1e4d      	subs	r5, r1, #1
 800755a:	4355      	muls	r5, r2
 800755c:	460e      	mov	r6, r1
 800755e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007562:	f001 fa1d 	bl	80089a0 <_malloc_r>
 8007566:	4604      	mov	r4, r0
 8007568:	b140      	cbz	r0, 800757c <__sfmoreglue+0x28>
 800756a:	2100      	movs	r1, #0
 800756c:	e9c0 1600 	strd	r1, r6, [r0]
 8007570:	300c      	adds	r0, #12
 8007572:	60a0      	str	r0, [r4, #8]
 8007574:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007578:	f7fd f928 	bl	80047cc <memset>
 800757c:	4620      	mov	r0, r4
 800757e:	bd70      	pop	{r4, r5, r6, pc}

08007580 <__sfp_lock_acquire>:
 8007580:	4801      	ldr	r0, [pc, #4]	; (8007588 <__sfp_lock_acquire+0x8>)
 8007582:	f000 bc26 	b.w	8007dd2 <__retarget_lock_acquire_recursive>
 8007586:	bf00      	nop
 8007588:	2000030d 	.word	0x2000030d

0800758c <__sfp_lock_release>:
 800758c:	4801      	ldr	r0, [pc, #4]	; (8007594 <__sfp_lock_release+0x8>)
 800758e:	f000 bc21 	b.w	8007dd4 <__retarget_lock_release_recursive>
 8007592:	bf00      	nop
 8007594:	2000030d 	.word	0x2000030d

08007598 <__sinit_lock_acquire>:
 8007598:	4801      	ldr	r0, [pc, #4]	; (80075a0 <__sinit_lock_acquire+0x8>)
 800759a:	f000 bc1a 	b.w	8007dd2 <__retarget_lock_acquire_recursive>
 800759e:	bf00      	nop
 80075a0:	2000030e 	.word	0x2000030e

080075a4 <__sinit_lock_release>:
 80075a4:	4801      	ldr	r0, [pc, #4]	; (80075ac <__sinit_lock_release+0x8>)
 80075a6:	f000 bc15 	b.w	8007dd4 <__retarget_lock_release_recursive>
 80075aa:	bf00      	nop
 80075ac:	2000030e 	.word	0x2000030e

080075b0 <__sinit>:
 80075b0:	b510      	push	{r4, lr}
 80075b2:	4604      	mov	r4, r0
 80075b4:	f7ff fff0 	bl	8007598 <__sinit_lock_acquire>
 80075b8:	69a3      	ldr	r3, [r4, #24]
 80075ba:	b11b      	cbz	r3, 80075c4 <__sinit+0x14>
 80075bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80075c0:	f7ff bff0 	b.w	80075a4 <__sinit_lock_release>
 80075c4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80075c8:	6523      	str	r3, [r4, #80]	; 0x50
 80075ca:	4b13      	ldr	r3, [pc, #76]	; (8007618 <__sinit+0x68>)
 80075cc:	4a13      	ldr	r2, [pc, #76]	; (800761c <__sinit+0x6c>)
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	62a2      	str	r2, [r4, #40]	; 0x28
 80075d2:	42a3      	cmp	r3, r4
 80075d4:	bf04      	itt	eq
 80075d6:	2301      	moveq	r3, #1
 80075d8:	61a3      	streq	r3, [r4, #24]
 80075da:	4620      	mov	r0, r4
 80075dc:	f000 f820 	bl	8007620 <__sfp>
 80075e0:	6060      	str	r0, [r4, #4]
 80075e2:	4620      	mov	r0, r4
 80075e4:	f000 f81c 	bl	8007620 <__sfp>
 80075e8:	60a0      	str	r0, [r4, #8]
 80075ea:	4620      	mov	r0, r4
 80075ec:	f000 f818 	bl	8007620 <__sfp>
 80075f0:	2200      	movs	r2, #0
 80075f2:	60e0      	str	r0, [r4, #12]
 80075f4:	2104      	movs	r1, #4
 80075f6:	6860      	ldr	r0, [r4, #4]
 80075f8:	f7ff ff82 	bl	8007500 <std>
 80075fc:	68a0      	ldr	r0, [r4, #8]
 80075fe:	2201      	movs	r2, #1
 8007600:	2109      	movs	r1, #9
 8007602:	f7ff ff7d 	bl	8007500 <std>
 8007606:	68e0      	ldr	r0, [r4, #12]
 8007608:	2202      	movs	r2, #2
 800760a:	2112      	movs	r1, #18
 800760c:	f7ff ff78 	bl	8007500 <std>
 8007610:	2301      	movs	r3, #1
 8007612:	61a3      	str	r3, [r4, #24]
 8007614:	e7d2      	b.n	80075bc <__sinit+0xc>
 8007616:	bf00      	nop
 8007618:	08009ce8 	.word	0x08009ce8
 800761c:	08007549 	.word	0x08007549

08007620 <__sfp>:
 8007620:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007622:	4607      	mov	r7, r0
 8007624:	f7ff ffac 	bl	8007580 <__sfp_lock_acquire>
 8007628:	4b1e      	ldr	r3, [pc, #120]	; (80076a4 <__sfp+0x84>)
 800762a:	681e      	ldr	r6, [r3, #0]
 800762c:	69b3      	ldr	r3, [r6, #24]
 800762e:	b913      	cbnz	r3, 8007636 <__sfp+0x16>
 8007630:	4630      	mov	r0, r6
 8007632:	f7ff ffbd 	bl	80075b0 <__sinit>
 8007636:	3648      	adds	r6, #72	; 0x48
 8007638:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800763c:	3b01      	subs	r3, #1
 800763e:	d503      	bpl.n	8007648 <__sfp+0x28>
 8007640:	6833      	ldr	r3, [r6, #0]
 8007642:	b30b      	cbz	r3, 8007688 <__sfp+0x68>
 8007644:	6836      	ldr	r6, [r6, #0]
 8007646:	e7f7      	b.n	8007638 <__sfp+0x18>
 8007648:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800764c:	b9d5      	cbnz	r5, 8007684 <__sfp+0x64>
 800764e:	4b16      	ldr	r3, [pc, #88]	; (80076a8 <__sfp+0x88>)
 8007650:	60e3      	str	r3, [r4, #12]
 8007652:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007656:	6665      	str	r5, [r4, #100]	; 0x64
 8007658:	f000 fbba 	bl	8007dd0 <__retarget_lock_init_recursive>
 800765c:	f7ff ff96 	bl	800758c <__sfp_lock_release>
 8007660:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007664:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007668:	6025      	str	r5, [r4, #0]
 800766a:	61a5      	str	r5, [r4, #24]
 800766c:	2208      	movs	r2, #8
 800766e:	4629      	mov	r1, r5
 8007670:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007674:	f7fd f8aa 	bl	80047cc <memset>
 8007678:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800767c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007680:	4620      	mov	r0, r4
 8007682:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007684:	3468      	adds	r4, #104	; 0x68
 8007686:	e7d9      	b.n	800763c <__sfp+0x1c>
 8007688:	2104      	movs	r1, #4
 800768a:	4638      	mov	r0, r7
 800768c:	f7ff ff62 	bl	8007554 <__sfmoreglue>
 8007690:	4604      	mov	r4, r0
 8007692:	6030      	str	r0, [r6, #0]
 8007694:	2800      	cmp	r0, #0
 8007696:	d1d5      	bne.n	8007644 <__sfp+0x24>
 8007698:	f7ff ff78 	bl	800758c <__sfp_lock_release>
 800769c:	230c      	movs	r3, #12
 800769e:	603b      	str	r3, [r7, #0]
 80076a0:	e7ee      	b.n	8007680 <__sfp+0x60>
 80076a2:	bf00      	nop
 80076a4:	08009ce8 	.word	0x08009ce8
 80076a8:	ffff0001 	.word	0xffff0001

080076ac <_fwalk_reent>:
 80076ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80076b0:	4606      	mov	r6, r0
 80076b2:	4688      	mov	r8, r1
 80076b4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80076b8:	2700      	movs	r7, #0
 80076ba:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80076be:	f1b9 0901 	subs.w	r9, r9, #1
 80076c2:	d505      	bpl.n	80076d0 <_fwalk_reent+0x24>
 80076c4:	6824      	ldr	r4, [r4, #0]
 80076c6:	2c00      	cmp	r4, #0
 80076c8:	d1f7      	bne.n	80076ba <_fwalk_reent+0xe>
 80076ca:	4638      	mov	r0, r7
 80076cc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80076d0:	89ab      	ldrh	r3, [r5, #12]
 80076d2:	2b01      	cmp	r3, #1
 80076d4:	d907      	bls.n	80076e6 <_fwalk_reent+0x3a>
 80076d6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80076da:	3301      	adds	r3, #1
 80076dc:	d003      	beq.n	80076e6 <_fwalk_reent+0x3a>
 80076de:	4629      	mov	r1, r5
 80076e0:	4630      	mov	r0, r6
 80076e2:	47c0      	blx	r8
 80076e4:	4307      	orrs	r7, r0
 80076e6:	3568      	adds	r5, #104	; 0x68
 80076e8:	e7e9      	b.n	80076be <_fwalk_reent+0x12>

080076ea <rshift>:
 80076ea:	6903      	ldr	r3, [r0, #16]
 80076ec:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80076f0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80076f4:	ea4f 1261 	mov.w	r2, r1, asr #5
 80076f8:	f100 0414 	add.w	r4, r0, #20
 80076fc:	dd45      	ble.n	800778a <rshift+0xa0>
 80076fe:	f011 011f 	ands.w	r1, r1, #31
 8007702:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8007706:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800770a:	d10c      	bne.n	8007726 <rshift+0x3c>
 800770c:	f100 0710 	add.w	r7, r0, #16
 8007710:	4629      	mov	r1, r5
 8007712:	42b1      	cmp	r1, r6
 8007714:	d334      	bcc.n	8007780 <rshift+0x96>
 8007716:	1a9b      	subs	r3, r3, r2
 8007718:	009b      	lsls	r3, r3, #2
 800771a:	1eea      	subs	r2, r5, #3
 800771c:	4296      	cmp	r6, r2
 800771e:	bf38      	it	cc
 8007720:	2300      	movcc	r3, #0
 8007722:	4423      	add	r3, r4
 8007724:	e015      	b.n	8007752 <rshift+0x68>
 8007726:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800772a:	f1c1 0820 	rsb	r8, r1, #32
 800772e:	40cf      	lsrs	r7, r1
 8007730:	f105 0e04 	add.w	lr, r5, #4
 8007734:	46a1      	mov	r9, r4
 8007736:	4576      	cmp	r6, lr
 8007738:	46f4      	mov	ip, lr
 800773a:	d815      	bhi.n	8007768 <rshift+0x7e>
 800773c:	1a9a      	subs	r2, r3, r2
 800773e:	0092      	lsls	r2, r2, #2
 8007740:	3a04      	subs	r2, #4
 8007742:	3501      	adds	r5, #1
 8007744:	42ae      	cmp	r6, r5
 8007746:	bf38      	it	cc
 8007748:	2200      	movcc	r2, #0
 800774a:	18a3      	adds	r3, r4, r2
 800774c:	50a7      	str	r7, [r4, r2]
 800774e:	b107      	cbz	r7, 8007752 <rshift+0x68>
 8007750:	3304      	adds	r3, #4
 8007752:	1b1a      	subs	r2, r3, r4
 8007754:	42a3      	cmp	r3, r4
 8007756:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800775a:	bf08      	it	eq
 800775c:	2300      	moveq	r3, #0
 800775e:	6102      	str	r2, [r0, #16]
 8007760:	bf08      	it	eq
 8007762:	6143      	streq	r3, [r0, #20]
 8007764:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007768:	f8dc c000 	ldr.w	ip, [ip]
 800776c:	fa0c fc08 	lsl.w	ip, ip, r8
 8007770:	ea4c 0707 	orr.w	r7, ip, r7
 8007774:	f849 7b04 	str.w	r7, [r9], #4
 8007778:	f85e 7b04 	ldr.w	r7, [lr], #4
 800777c:	40cf      	lsrs	r7, r1
 800777e:	e7da      	b.n	8007736 <rshift+0x4c>
 8007780:	f851 cb04 	ldr.w	ip, [r1], #4
 8007784:	f847 cf04 	str.w	ip, [r7, #4]!
 8007788:	e7c3      	b.n	8007712 <rshift+0x28>
 800778a:	4623      	mov	r3, r4
 800778c:	e7e1      	b.n	8007752 <rshift+0x68>

0800778e <__hexdig_fun>:
 800778e:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8007792:	2b09      	cmp	r3, #9
 8007794:	d802      	bhi.n	800779c <__hexdig_fun+0xe>
 8007796:	3820      	subs	r0, #32
 8007798:	b2c0      	uxtb	r0, r0
 800779a:	4770      	bx	lr
 800779c:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80077a0:	2b05      	cmp	r3, #5
 80077a2:	d801      	bhi.n	80077a8 <__hexdig_fun+0x1a>
 80077a4:	3847      	subs	r0, #71	; 0x47
 80077a6:	e7f7      	b.n	8007798 <__hexdig_fun+0xa>
 80077a8:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80077ac:	2b05      	cmp	r3, #5
 80077ae:	d801      	bhi.n	80077b4 <__hexdig_fun+0x26>
 80077b0:	3827      	subs	r0, #39	; 0x27
 80077b2:	e7f1      	b.n	8007798 <__hexdig_fun+0xa>
 80077b4:	2000      	movs	r0, #0
 80077b6:	4770      	bx	lr

080077b8 <__gethex>:
 80077b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077bc:	ed2d 8b02 	vpush	{d8}
 80077c0:	b089      	sub	sp, #36	; 0x24
 80077c2:	ee08 0a10 	vmov	s16, r0
 80077c6:	9304      	str	r3, [sp, #16]
 80077c8:	4bb4      	ldr	r3, [pc, #720]	; (8007a9c <__gethex+0x2e4>)
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	9301      	str	r3, [sp, #4]
 80077ce:	4618      	mov	r0, r3
 80077d0:	468b      	mov	fp, r1
 80077d2:	4690      	mov	r8, r2
 80077d4:	f7f8 fcfc 	bl	80001d0 <strlen>
 80077d8:	9b01      	ldr	r3, [sp, #4]
 80077da:	f8db 2000 	ldr.w	r2, [fp]
 80077de:	4403      	add	r3, r0
 80077e0:	4682      	mov	sl, r0
 80077e2:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80077e6:	9305      	str	r3, [sp, #20]
 80077e8:	1c93      	adds	r3, r2, #2
 80077ea:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 80077ee:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 80077f2:	32fe      	adds	r2, #254	; 0xfe
 80077f4:	18d1      	adds	r1, r2, r3
 80077f6:	461f      	mov	r7, r3
 80077f8:	f813 0b01 	ldrb.w	r0, [r3], #1
 80077fc:	9100      	str	r1, [sp, #0]
 80077fe:	2830      	cmp	r0, #48	; 0x30
 8007800:	d0f8      	beq.n	80077f4 <__gethex+0x3c>
 8007802:	f7ff ffc4 	bl	800778e <__hexdig_fun>
 8007806:	4604      	mov	r4, r0
 8007808:	2800      	cmp	r0, #0
 800780a:	d13a      	bne.n	8007882 <__gethex+0xca>
 800780c:	9901      	ldr	r1, [sp, #4]
 800780e:	4652      	mov	r2, sl
 8007810:	4638      	mov	r0, r7
 8007812:	f7fd ff82 	bl	800571a <strncmp>
 8007816:	4605      	mov	r5, r0
 8007818:	2800      	cmp	r0, #0
 800781a:	d168      	bne.n	80078ee <__gethex+0x136>
 800781c:	f817 000a 	ldrb.w	r0, [r7, sl]
 8007820:	eb07 060a 	add.w	r6, r7, sl
 8007824:	f7ff ffb3 	bl	800778e <__hexdig_fun>
 8007828:	2800      	cmp	r0, #0
 800782a:	d062      	beq.n	80078f2 <__gethex+0x13a>
 800782c:	4633      	mov	r3, r6
 800782e:	7818      	ldrb	r0, [r3, #0]
 8007830:	2830      	cmp	r0, #48	; 0x30
 8007832:	461f      	mov	r7, r3
 8007834:	f103 0301 	add.w	r3, r3, #1
 8007838:	d0f9      	beq.n	800782e <__gethex+0x76>
 800783a:	f7ff ffa8 	bl	800778e <__hexdig_fun>
 800783e:	2301      	movs	r3, #1
 8007840:	fab0 f480 	clz	r4, r0
 8007844:	0964      	lsrs	r4, r4, #5
 8007846:	4635      	mov	r5, r6
 8007848:	9300      	str	r3, [sp, #0]
 800784a:	463a      	mov	r2, r7
 800784c:	4616      	mov	r6, r2
 800784e:	3201      	adds	r2, #1
 8007850:	7830      	ldrb	r0, [r6, #0]
 8007852:	f7ff ff9c 	bl	800778e <__hexdig_fun>
 8007856:	2800      	cmp	r0, #0
 8007858:	d1f8      	bne.n	800784c <__gethex+0x94>
 800785a:	9901      	ldr	r1, [sp, #4]
 800785c:	4652      	mov	r2, sl
 800785e:	4630      	mov	r0, r6
 8007860:	f7fd ff5b 	bl	800571a <strncmp>
 8007864:	b980      	cbnz	r0, 8007888 <__gethex+0xd0>
 8007866:	b94d      	cbnz	r5, 800787c <__gethex+0xc4>
 8007868:	eb06 050a 	add.w	r5, r6, sl
 800786c:	462a      	mov	r2, r5
 800786e:	4616      	mov	r6, r2
 8007870:	3201      	adds	r2, #1
 8007872:	7830      	ldrb	r0, [r6, #0]
 8007874:	f7ff ff8b 	bl	800778e <__hexdig_fun>
 8007878:	2800      	cmp	r0, #0
 800787a:	d1f8      	bne.n	800786e <__gethex+0xb6>
 800787c:	1bad      	subs	r5, r5, r6
 800787e:	00ad      	lsls	r5, r5, #2
 8007880:	e004      	b.n	800788c <__gethex+0xd4>
 8007882:	2400      	movs	r4, #0
 8007884:	4625      	mov	r5, r4
 8007886:	e7e0      	b.n	800784a <__gethex+0x92>
 8007888:	2d00      	cmp	r5, #0
 800788a:	d1f7      	bne.n	800787c <__gethex+0xc4>
 800788c:	7833      	ldrb	r3, [r6, #0]
 800788e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8007892:	2b50      	cmp	r3, #80	; 0x50
 8007894:	d13b      	bne.n	800790e <__gethex+0x156>
 8007896:	7873      	ldrb	r3, [r6, #1]
 8007898:	2b2b      	cmp	r3, #43	; 0x2b
 800789a:	d02c      	beq.n	80078f6 <__gethex+0x13e>
 800789c:	2b2d      	cmp	r3, #45	; 0x2d
 800789e:	d02e      	beq.n	80078fe <__gethex+0x146>
 80078a0:	1c71      	adds	r1, r6, #1
 80078a2:	f04f 0900 	mov.w	r9, #0
 80078a6:	7808      	ldrb	r0, [r1, #0]
 80078a8:	f7ff ff71 	bl	800778e <__hexdig_fun>
 80078ac:	1e43      	subs	r3, r0, #1
 80078ae:	b2db      	uxtb	r3, r3
 80078b0:	2b18      	cmp	r3, #24
 80078b2:	d82c      	bhi.n	800790e <__gethex+0x156>
 80078b4:	f1a0 0210 	sub.w	r2, r0, #16
 80078b8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80078bc:	f7ff ff67 	bl	800778e <__hexdig_fun>
 80078c0:	1e43      	subs	r3, r0, #1
 80078c2:	b2db      	uxtb	r3, r3
 80078c4:	2b18      	cmp	r3, #24
 80078c6:	d91d      	bls.n	8007904 <__gethex+0x14c>
 80078c8:	f1b9 0f00 	cmp.w	r9, #0
 80078cc:	d000      	beq.n	80078d0 <__gethex+0x118>
 80078ce:	4252      	negs	r2, r2
 80078d0:	4415      	add	r5, r2
 80078d2:	f8cb 1000 	str.w	r1, [fp]
 80078d6:	b1e4      	cbz	r4, 8007912 <__gethex+0x15a>
 80078d8:	9b00      	ldr	r3, [sp, #0]
 80078da:	2b00      	cmp	r3, #0
 80078dc:	bf14      	ite	ne
 80078de:	2700      	movne	r7, #0
 80078e0:	2706      	moveq	r7, #6
 80078e2:	4638      	mov	r0, r7
 80078e4:	b009      	add	sp, #36	; 0x24
 80078e6:	ecbd 8b02 	vpop	{d8}
 80078ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80078ee:	463e      	mov	r6, r7
 80078f0:	4625      	mov	r5, r4
 80078f2:	2401      	movs	r4, #1
 80078f4:	e7ca      	b.n	800788c <__gethex+0xd4>
 80078f6:	f04f 0900 	mov.w	r9, #0
 80078fa:	1cb1      	adds	r1, r6, #2
 80078fc:	e7d3      	b.n	80078a6 <__gethex+0xee>
 80078fe:	f04f 0901 	mov.w	r9, #1
 8007902:	e7fa      	b.n	80078fa <__gethex+0x142>
 8007904:	230a      	movs	r3, #10
 8007906:	fb03 0202 	mla	r2, r3, r2, r0
 800790a:	3a10      	subs	r2, #16
 800790c:	e7d4      	b.n	80078b8 <__gethex+0x100>
 800790e:	4631      	mov	r1, r6
 8007910:	e7df      	b.n	80078d2 <__gethex+0x11a>
 8007912:	1bf3      	subs	r3, r6, r7
 8007914:	3b01      	subs	r3, #1
 8007916:	4621      	mov	r1, r4
 8007918:	2b07      	cmp	r3, #7
 800791a:	dc0b      	bgt.n	8007934 <__gethex+0x17c>
 800791c:	ee18 0a10 	vmov	r0, s16
 8007920:	f000 fafa 	bl	8007f18 <_Balloc>
 8007924:	4604      	mov	r4, r0
 8007926:	b940      	cbnz	r0, 800793a <__gethex+0x182>
 8007928:	4b5d      	ldr	r3, [pc, #372]	; (8007aa0 <__gethex+0x2e8>)
 800792a:	4602      	mov	r2, r0
 800792c:	21de      	movs	r1, #222	; 0xde
 800792e:	485d      	ldr	r0, [pc, #372]	; (8007aa4 <__gethex+0x2ec>)
 8007930:	f001 ffa2 	bl	8009878 <__assert_func>
 8007934:	3101      	adds	r1, #1
 8007936:	105b      	asrs	r3, r3, #1
 8007938:	e7ee      	b.n	8007918 <__gethex+0x160>
 800793a:	f100 0914 	add.w	r9, r0, #20
 800793e:	f04f 0b00 	mov.w	fp, #0
 8007942:	f1ca 0301 	rsb	r3, sl, #1
 8007946:	f8cd 9008 	str.w	r9, [sp, #8]
 800794a:	f8cd b000 	str.w	fp, [sp]
 800794e:	9306      	str	r3, [sp, #24]
 8007950:	42b7      	cmp	r7, r6
 8007952:	d340      	bcc.n	80079d6 <__gethex+0x21e>
 8007954:	9802      	ldr	r0, [sp, #8]
 8007956:	9b00      	ldr	r3, [sp, #0]
 8007958:	f840 3b04 	str.w	r3, [r0], #4
 800795c:	eba0 0009 	sub.w	r0, r0, r9
 8007960:	1080      	asrs	r0, r0, #2
 8007962:	0146      	lsls	r6, r0, #5
 8007964:	6120      	str	r0, [r4, #16]
 8007966:	4618      	mov	r0, r3
 8007968:	f000 fbc8 	bl	80080fc <__hi0bits>
 800796c:	1a30      	subs	r0, r6, r0
 800796e:	f8d8 6000 	ldr.w	r6, [r8]
 8007972:	42b0      	cmp	r0, r6
 8007974:	dd63      	ble.n	8007a3e <__gethex+0x286>
 8007976:	1b87      	subs	r7, r0, r6
 8007978:	4639      	mov	r1, r7
 800797a:	4620      	mov	r0, r4
 800797c:	f000 ff6c 	bl	8008858 <__any_on>
 8007980:	4682      	mov	sl, r0
 8007982:	b1a8      	cbz	r0, 80079b0 <__gethex+0x1f8>
 8007984:	1e7b      	subs	r3, r7, #1
 8007986:	1159      	asrs	r1, r3, #5
 8007988:	f003 021f 	and.w	r2, r3, #31
 800798c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8007990:	f04f 0a01 	mov.w	sl, #1
 8007994:	fa0a f202 	lsl.w	r2, sl, r2
 8007998:	420a      	tst	r2, r1
 800799a:	d009      	beq.n	80079b0 <__gethex+0x1f8>
 800799c:	4553      	cmp	r3, sl
 800799e:	dd05      	ble.n	80079ac <__gethex+0x1f4>
 80079a0:	1eb9      	subs	r1, r7, #2
 80079a2:	4620      	mov	r0, r4
 80079a4:	f000 ff58 	bl	8008858 <__any_on>
 80079a8:	2800      	cmp	r0, #0
 80079aa:	d145      	bne.n	8007a38 <__gethex+0x280>
 80079ac:	f04f 0a02 	mov.w	sl, #2
 80079b0:	4639      	mov	r1, r7
 80079b2:	4620      	mov	r0, r4
 80079b4:	f7ff fe99 	bl	80076ea <rshift>
 80079b8:	443d      	add	r5, r7
 80079ba:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80079be:	42ab      	cmp	r3, r5
 80079c0:	da4c      	bge.n	8007a5c <__gethex+0x2a4>
 80079c2:	ee18 0a10 	vmov	r0, s16
 80079c6:	4621      	mov	r1, r4
 80079c8:	f000 fae6 	bl	8007f98 <_Bfree>
 80079cc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80079ce:	2300      	movs	r3, #0
 80079d0:	6013      	str	r3, [r2, #0]
 80079d2:	27a3      	movs	r7, #163	; 0xa3
 80079d4:	e785      	b.n	80078e2 <__gethex+0x12a>
 80079d6:	1e73      	subs	r3, r6, #1
 80079d8:	9a05      	ldr	r2, [sp, #20]
 80079da:	9303      	str	r3, [sp, #12]
 80079dc:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80079e0:	4293      	cmp	r3, r2
 80079e2:	d019      	beq.n	8007a18 <__gethex+0x260>
 80079e4:	f1bb 0f20 	cmp.w	fp, #32
 80079e8:	d107      	bne.n	80079fa <__gethex+0x242>
 80079ea:	9b02      	ldr	r3, [sp, #8]
 80079ec:	9a00      	ldr	r2, [sp, #0]
 80079ee:	f843 2b04 	str.w	r2, [r3], #4
 80079f2:	9302      	str	r3, [sp, #8]
 80079f4:	2300      	movs	r3, #0
 80079f6:	9300      	str	r3, [sp, #0]
 80079f8:	469b      	mov	fp, r3
 80079fa:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80079fe:	f7ff fec6 	bl	800778e <__hexdig_fun>
 8007a02:	9b00      	ldr	r3, [sp, #0]
 8007a04:	f000 000f 	and.w	r0, r0, #15
 8007a08:	fa00 f00b 	lsl.w	r0, r0, fp
 8007a0c:	4303      	orrs	r3, r0
 8007a0e:	9300      	str	r3, [sp, #0]
 8007a10:	f10b 0b04 	add.w	fp, fp, #4
 8007a14:	9b03      	ldr	r3, [sp, #12]
 8007a16:	e00d      	b.n	8007a34 <__gethex+0x27c>
 8007a18:	9b03      	ldr	r3, [sp, #12]
 8007a1a:	9a06      	ldr	r2, [sp, #24]
 8007a1c:	4413      	add	r3, r2
 8007a1e:	42bb      	cmp	r3, r7
 8007a20:	d3e0      	bcc.n	80079e4 <__gethex+0x22c>
 8007a22:	4618      	mov	r0, r3
 8007a24:	9901      	ldr	r1, [sp, #4]
 8007a26:	9307      	str	r3, [sp, #28]
 8007a28:	4652      	mov	r2, sl
 8007a2a:	f7fd fe76 	bl	800571a <strncmp>
 8007a2e:	9b07      	ldr	r3, [sp, #28]
 8007a30:	2800      	cmp	r0, #0
 8007a32:	d1d7      	bne.n	80079e4 <__gethex+0x22c>
 8007a34:	461e      	mov	r6, r3
 8007a36:	e78b      	b.n	8007950 <__gethex+0x198>
 8007a38:	f04f 0a03 	mov.w	sl, #3
 8007a3c:	e7b8      	b.n	80079b0 <__gethex+0x1f8>
 8007a3e:	da0a      	bge.n	8007a56 <__gethex+0x29e>
 8007a40:	1a37      	subs	r7, r6, r0
 8007a42:	4621      	mov	r1, r4
 8007a44:	ee18 0a10 	vmov	r0, s16
 8007a48:	463a      	mov	r2, r7
 8007a4a:	f000 fcc1 	bl	80083d0 <__lshift>
 8007a4e:	1bed      	subs	r5, r5, r7
 8007a50:	4604      	mov	r4, r0
 8007a52:	f100 0914 	add.w	r9, r0, #20
 8007a56:	f04f 0a00 	mov.w	sl, #0
 8007a5a:	e7ae      	b.n	80079ba <__gethex+0x202>
 8007a5c:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8007a60:	42a8      	cmp	r0, r5
 8007a62:	dd72      	ble.n	8007b4a <__gethex+0x392>
 8007a64:	1b45      	subs	r5, r0, r5
 8007a66:	42ae      	cmp	r6, r5
 8007a68:	dc36      	bgt.n	8007ad8 <__gethex+0x320>
 8007a6a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007a6e:	2b02      	cmp	r3, #2
 8007a70:	d02a      	beq.n	8007ac8 <__gethex+0x310>
 8007a72:	2b03      	cmp	r3, #3
 8007a74:	d02c      	beq.n	8007ad0 <__gethex+0x318>
 8007a76:	2b01      	cmp	r3, #1
 8007a78:	d11c      	bne.n	8007ab4 <__gethex+0x2fc>
 8007a7a:	42ae      	cmp	r6, r5
 8007a7c:	d11a      	bne.n	8007ab4 <__gethex+0x2fc>
 8007a7e:	2e01      	cmp	r6, #1
 8007a80:	d112      	bne.n	8007aa8 <__gethex+0x2f0>
 8007a82:	9a04      	ldr	r2, [sp, #16]
 8007a84:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8007a88:	6013      	str	r3, [r2, #0]
 8007a8a:	2301      	movs	r3, #1
 8007a8c:	6123      	str	r3, [r4, #16]
 8007a8e:	f8c9 3000 	str.w	r3, [r9]
 8007a92:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007a94:	2762      	movs	r7, #98	; 0x62
 8007a96:	601c      	str	r4, [r3, #0]
 8007a98:	e723      	b.n	80078e2 <__gethex+0x12a>
 8007a9a:	bf00      	nop
 8007a9c:	08009fd4 	.word	0x08009fd4
 8007aa0:	08009ef8 	.word	0x08009ef8
 8007aa4:	08009f6c 	.word	0x08009f6c
 8007aa8:	1e71      	subs	r1, r6, #1
 8007aaa:	4620      	mov	r0, r4
 8007aac:	f000 fed4 	bl	8008858 <__any_on>
 8007ab0:	2800      	cmp	r0, #0
 8007ab2:	d1e6      	bne.n	8007a82 <__gethex+0x2ca>
 8007ab4:	ee18 0a10 	vmov	r0, s16
 8007ab8:	4621      	mov	r1, r4
 8007aba:	f000 fa6d 	bl	8007f98 <_Bfree>
 8007abe:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007ac0:	2300      	movs	r3, #0
 8007ac2:	6013      	str	r3, [r2, #0]
 8007ac4:	2750      	movs	r7, #80	; 0x50
 8007ac6:	e70c      	b.n	80078e2 <__gethex+0x12a>
 8007ac8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d1f2      	bne.n	8007ab4 <__gethex+0x2fc>
 8007ace:	e7d8      	b.n	8007a82 <__gethex+0x2ca>
 8007ad0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d1d5      	bne.n	8007a82 <__gethex+0x2ca>
 8007ad6:	e7ed      	b.n	8007ab4 <__gethex+0x2fc>
 8007ad8:	1e6f      	subs	r7, r5, #1
 8007ada:	f1ba 0f00 	cmp.w	sl, #0
 8007ade:	d131      	bne.n	8007b44 <__gethex+0x38c>
 8007ae0:	b127      	cbz	r7, 8007aec <__gethex+0x334>
 8007ae2:	4639      	mov	r1, r7
 8007ae4:	4620      	mov	r0, r4
 8007ae6:	f000 feb7 	bl	8008858 <__any_on>
 8007aea:	4682      	mov	sl, r0
 8007aec:	117b      	asrs	r3, r7, #5
 8007aee:	2101      	movs	r1, #1
 8007af0:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8007af4:	f007 071f 	and.w	r7, r7, #31
 8007af8:	fa01 f707 	lsl.w	r7, r1, r7
 8007afc:	421f      	tst	r7, r3
 8007afe:	4629      	mov	r1, r5
 8007b00:	4620      	mov	r0, r4
 8007b02:	bf18      	it	ne
 8007b04:	f04a 0a02 	orrne.w	sl, sl, #2
 8007b08:	1b76      	subs	r6, r6, r5
 8007b0a:	f7ff fdee 	bl	80076ea <rshift>
 8007b0e:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8007b12:	2702      	movs	r7, #2
 8007b14:	f1ba 0f00 	cmp.w	sl, #0
 8007b18:	d048      	beq.n	8007bac <__gethex+0x3f4>
 8007b1a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007b1e:	2b02      	cmp	r3, #2
 8007b20:	d015      	beq.n	8007b4e <__gethex+0x396>
 8007b22:	2b03      	cmp	r3, #3
 8007b24:	d017      	beq.n	8007b56 <__gethex+0x39e>
 8007b26:	2b01      	cmp	r3, #1
 8007b28:	d109      	bne.n	8007b3e <__gethex+0x386>
 8007b2a:	f01a 0f02 	tst.w	sl, #2
 8007b2e:	d006      	beq.n	8007b3e <__gethex+0x386>
 8007b30:	f8d9 0000 	ldr.w	r0, [r9]
 8007b34:	ea4a 0a00 	orr.w	sl, sl, r0
 8007b38:	f01a 0f01 	tst.w	sl, #1
 8007b3c:	d10e      	bne.n	8007b5c <__gethex+0x3a4>
 8007b3e:	f047 0710 	orr.w	r7, r7, #16
 8007b42:	e033      	b.n	8007bac <__gethex+0x3f4>
 8007b44:	f04f 0a01 	mov.w	sl, #1
 8007b48:	e7d0      	b.n	8007aec <__gethex+0x334>
 8007b4a:	2701      	movs	r7, #1
 8007b4c:	e7e2      	b.n	8007b14 <__gethex+0x35c>
 8007b4e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007b50:	f1c3 0301 	rsb	r3, r3, #1
 8007b54:	9315      	str	r3, [sp, #84]	; 0x54
 8007b56:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d0f0      	beq.n	8007b3e <__gethex+0x386>
 8007b5c:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8007b60:	f104 0314 	add.w	r3, r4, #20
 8007b64:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8007b68:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8007b6c:	f04f 0c00 	mov.w	ip, #0
 8007b70:	4618      	mov	r0, r3
 8007b72:	f853 2b04 	ldr.w	r2, [r3], #4
 8007b76:	f1b2 3fff 	cmp.w	r2, #4294967295
 8007b7a:	d01c      	beq.n	8007bb6 <__gethex+0x3fe>
 8007b7c:	3201      	adds	r2, #1
 8007b7e:	6002      	str	r2, [r0, #0]
 8007b80:	2f02      	cmp	r7, #2
 8007b82:	f104 0314 	add.w	r3, r4, #20
 8007b86:	d13f      	bne.n	8007c08 <__gethex+0x450>
 8007b88:	f8d8 2000 	ldr.w	r2, [r8]
 8007b8c:	3a01      	subs	r2, #1
 8007b8e:	42b2      	cmp	r2, r6
 8007b90:	d10a      	bne.n	8007ba8 <__gethex+0x3f0>
 8007b92:	1171      	asrs	r1, r6, #5
 8007b94:	2201      	movs	r2, #1
 8007b96:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007b9a:	f006 061f 	and.w	r6, r6, #31
 8007b9e:	fa02 f606 	lsl.w	r6, r2, r6
 8007ba2:	421e      	tst	r6, r3
 8007ba4:	bf18      	it	ne
 8007ba6:	4617      	movne	r7, r2
 8007ba8:	f047 0720 	orr.w	r7, r7, #32
 8007bac:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007bae:	601c      	str	r4, [r3, #0]
 8007bb0:	9b04      	ldr	r3, [sp, #16]
 8007bb2:	601d      	str	r5, [r3, #0]
 8007bb4:	e695      	b.n	80078e2 <__gethex+0x12a>
 8007bb6:	4299      	cmp	r1, r3
 8007bb8:	f843 cc04 	str.w	ip, [r3, #-4]
 8007bbc:	d8d8      	bhi.n	8007b70 <__gethex+0x3b8>
 8007bbe:	68a3      	ldr	r3, [r4, #8]
 8007bc0:	459b      	cmp	fp, r3
 8007bc2:	db19      	blt.n	8007bf8 <__gethex+0x440>
 8007bc4:	6861      	ldr	r1, [r4, #4]
 8007bc6:	ee18 0a10 	vmov	r0, s16
 8007bca:	3101      	adds	r1, #1
 8007bcc:	f000 f9a4 	bl	8007f18 <_Balloc>
 8007bd0:	4681      	mov	r9, r0
 8007bd2:	b918      	cbnz	r0, 8007bdc <__gethex+0x424>
 8007bd4:	4b1a      	ldr	r3, [pc, #104]	; (8007c40 <__gethex+0x488>)
 8007bd6:	4602      	mov	r2, r0
 8007bd8:	2184      	movs	r1, #132	; 0x84
 8007bda:	e6a8      	b.n	800792e <__gethex+0x176>
 8007bdc:	6922      	ldr	r2, [r4, #16]
 8007bde:	3202      	adds	r2, #2
 8007be0:	f104 010c 	add.w	r1, r4, #12
 8007be4:	0092      	lsls	r2, r2, #2
 8007be6:	300c      	adds	r0, #12
 8007be8:	f000 f988 	bl	8007efc <memcpy>
 8007bec:	4621      	mov	r1, r4
 8007bee:	ee18 0a10 	vmov	r0, s16
 8007bf2:	f000 f9d1 	bl	8007f98 <_Bfree>
 8007bf6:	464c      	mov	r4, r9
 8007bf8:	6923      	ldr	r3, [r4, #16]
 8007bfa:	1c5a      	adds	r2, r3, #1
 8007bfc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007c00:	6122      	str	r2, [r4, #16]
 8007c02:	2201      	movs	r2, #1
 8007c04:	615a      	str	r2, [r3, #20]
 8007c06:	e7bb      	b.n	8007b80 <__gethex+0x3c8>
 8007c08:	6922      	ldr	r2, [r4, #16]
 8007c0a:	455a      	cmp	r2, fp
 8007c0c:	dd0b      	ble.n	8007c26 <__gethex+0x46e>
 8007c0e:	2101      	movs	r1, #1
 8007c10:	4620      	mov	r0, r4
 8007c12:	f7ff fd6a 	bl	80076ea <rshift>
 8007c16:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007c1a:	3501      	adds	r5, #1
 8007c1c:	42ab      	cmp	r3, r5
 8007c1e:	f6ff aed0 	blt.w	80079c2 <__gethex+0x20a>
 8007c22:	2701      	movs	r7, #1
 8007c24:	e7c0      	b.n	8007ba8 <__gethex+0x3f0>
 8007c26:	f016 061f 	ands.w	r6, r6, #31
 8007c2a:	d0fa      	beq.n	8007c22 <__gethex+0x46a>
 8007c2c:	4453      	add	r3, sl
 8007c2e:	f1c6 0620 	rsb	r6, r6, #32
 8007c32:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8007c36:	f000 fa61 	bl	80080fc <__hi0bits>
 8007c3a:	42b0      	cmp	r0, r6
 8007c3c:	dbe7      	blt.n	8007c0e <__gethex+0x456>
 8007c3e:	e7f0      	b.n	8007c22 <__gethex+0x46a>
 8007c40:	08009ef8 	.word	0x08009ef8

08007c44 <L_shift>:
 8007c44:	f1c2 0208 	rsb	r2, r2, #8
 8007c48:	0092      	lsls	r2, r2, #2
 8007c4a:	b570      	push	{r4, r5, r6, lr}
 8007c4c:	f1c2 0620 	rsb	r6, r2, #32
 8007c50:	6843      	ldr	r3, [r0, #4]
 8007c52:	6804      	ldr	r4, [r0, #0]
 8007c54:	fa03 f506 	lsl.w	r5, r3, r6
 8007c58:	432c      	orrs	r4, r5
 8007c5a:	40d3      	lsrs	r3, r2
 8007c5c:	6004      	str	r4, [r0, #0]
 8007c5e:	f840 3f04 	str.w	r3, [r0, #4]!
 8007c62:	4288      	cmp	r0, r1
 8007c64:	d3f4      	bcc.n	8007c50 <L_shift+0xc>
 8007c66:	bd70      	pop	{r4, r5, r6, pc}

08007c68 <__match>:
 8007c68:	b530      	push	{r4, r5, lr}
 8007c6a:	6803      	ldr	r3, [r0, #0]
 8007c6c:	3301      	adds	r3, #1
 8007c6e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007c72:	b914      	cbnz	r4, 8007c7a <__match+0x12>
 8007c74:	6003      	str	r3, [r0, #0]
 8007c76:	2001      	movs	r0, #1
 8007c78:	bd30      	pop	{r4, r5, pc}
 8007c7a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007c7e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8007c82:	2d19      	cmp	r5, #25
 8007c84:	bf98      	it	ls
 8007c86:	3220      	addls	r2, #32
 8007c88:	42a2      	cmp	r2, r4
 8007c8a:	d0f0      	beq.n	8007c6e <__match+0x6>
 8007c8c:	2000      	movs	r0, #0
 8007c8e:	e7f3      	b.n	8007c78 <__match+0x10>

08007c90 <__hexnan>:
 8007c90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c94:	680b      	ldr	r3, [r1, #0]
 8007c96:	115e      	asrs	r6, r3, #5
 8007c98:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8007c9c:	f013 031f 	ands.w	r3, r3, #31
 8007ca0:	b087      	sub	sp, #28
 8007ca2:	bf18      	it	ne
 8007ca4:	3604      	addne	r6, #4
 8007ca6:	2500      	movs	r5, #0
 8007ca8:	1f37      	subs	r7, r6, #4
 8007caa:	4690      	mov	r8, r2
 8007cac:	6802      	ldr	r2, [r0, #0]
 8007cae:	9301      	str	r3, [sp, #4]
 8007cb0:	4682      	mov	sl, r0
 8007cb2:	f846 5c04 	str.w	r5, [r6, #-4]
 8007cb6:	46b9      	mov	r9, r7
 8007cb8:	463c      	mov	r4, r7
 8007cba:	9502      	str	r5, [sp, #8]
 8007cbc:	46ab      	mov	fp, r5
 8007cbe:	7851      	ldrb	r1, [r2, #1]
 8007cc0:	1c53      	adds	r3, r2, #1
 8007cc2:	9303      	str	r3, [sp, #12]
 8007cc4:	b341      	cbz	r1, 8007d18 <__hexnan+0x88>
 8007cc6:	4608      	mov	r0, r1
 8007cc8:	9205      	str	r2, [sp, #20]
 8007cca:	9104      	str	r1, [sp, #16]
 8007ccc:	f7ff fd5f 	bl	800778e <__hexdig_fun>
 8007cd0:	2800      	cmp	r0, #0
 8007cd2:	d14f      	bne.n	8007d74 <__hexnan+0xe4>
 8007cd4:	9904      	ldr	r1, [sp, #16]
 8007cd6:	9a05      	ldr	r2, [sp, #20]
 8007cd8:	2920      	cmp	r1, #32
 8007cda:	d818      	bhi.n	8007d0e <__hexnan+0x7e>
 8007cdc:	9b02      	ldr	r3, [sp, #8]
 8007cde:	459b      	cmp	fp, r3
 8007ce0:	dd13      	ble.n	8007d0a <__hexnan+0x7a>
 8007ce2:	454c      	cmp	r4, r9
 8007ce4:	d206      	bcs.n	8007cf4 <__hexnan+0x64>
 8007ce6:	2d07      	cmp	r5, #7
 8007ce8:	dc04      	bgt.n	8007cf4 <__hexnan+0x64>
 8007cea:	462a      	mov	r2, r5
 8007cec:	4649      	mov	r1, r9
 8007cee:	4620      	mov	r0, r4
 8007cf0:	f7ff ffa8 	bl	8007c44 <L_shift>
 8007cf4:	4544      	cmp	r4, r8
 8007cf6:	d950      	bls.n	8007d9a <__hexnan+0x10a>
 8007cf8:	2300      	movs	r3, #0
 8007cfa:	f1a4 0904 	sub.w	r9, r4, #4
 8007cfe:	f844 3c04 	str.w	r3, [r4, #-4]
 8007d02:	f8cd b008 	str.w	fp, [sp, #8]
 8007d06:	464c      	mov	r4, r9
 8007d08:	461d      	mov	r5, r3
 8007d0a:	9a03      	ldr	r2, [sp, #12]
 8007d0c:	e7d7      	b.n	8007cbe <__hexnan+0x2e>
 8007d0e:	2929      	cmp	r1, #41	; 0x29
 8007d10:	d156      	bne.n	8007dc0 <__hexnan+0x130>
 8007d12:	3202      	adds	r2, #2
 8007d14:	f8ca 2000 	str.w	r2, [sl]
 8007d18:	f1bb 0f00 	cmp.w	fp, #0
 8007d1c:	d050      	beq.n	8007dc0 <__hexnan+0x130>
 8007d1e:	454c      	cmp	r4, r9
 8007d20:	d206      	bcs.n	8007d30 <__hexnan+0xa0>
 8007d22:	2d07      	cmp	r5, #7
 8007d24:	dc04      	bgt.n	8007d30 <__hexnan+0xa0>
 8007d26:	462a      	mov	r2, r5
 8007d28:	4649      	mov	r1, r9
 8007d2a:	4620      	mov	r0, r4
 8007d2c:	f7ff ff8a 	bl	8007c44 <L_shift>
 8007d30:	4544      	cmp	r4, r8
 8007d32:	d934      	bls.n	8007d9e <__hexnan+0x10e>
 8007d34:	f1a8 0204 	sub.w	r2, r8, #4
 8007d38:	4623      	mov	r3, r4
 8007d3a:	f853 1b04 	ldr.w	r1, [r3], #4
 8007d3e:	f842 1f04 	str.w	r1, [r2, #4]!
 8007d42:	429f      	cmp	r7, r3
 8007d44:	d2f9      	bcs.n	8007d3a <__hexnan+0xaa>
 8007d46:	1b3b      	subs	r3, r7, r4
 8007d48:	f023 0303 	bic.w	r3, r3, #3
 8007d4c:	3304      	adds	r3, #4
 8007d4e:	3401      	adds	r4, #1
 8007d50:	3e03      	subs	r6, #3
 8007d52:	42b4      	cmp	r4, r6
 8007d54:	bf88      	it	hi
 8007d56:	2304      	movhi	r3, #4
 8007d58:	4443      	add	r3, r8
 8007d5a:	2200      	movs	r2, #0
 8007d5c:	f843 2b04 	str.w	r2, [r3], #4
 8007d60:	429f      	cmp	r7, r3
 8007d62:	d2fb      	bcs.n	8007d5c <__hexnan+0xcc>
 8007d64:	683b      	ldr	r3, [r7, #0]
 8007d66:	b91b      	cbnz	r3, 8007d70 <__hexnan+0xe0>
 8007d68:	4547      	cmp	r7, r8
 8007d6a:	d127      	bne.n	8007dbc <__hexnan+0x12c>
 8007d6c:	2301      	movs	r3, #1
 8007d6e:	603b      	str	r3, [r7, #0]
 8007d70:	2005      	movs	r0, #5
 8007d72:	e026      	b.n	8007dc2 <__hexnan+0x132>
 8007d74:	3501      	adds	r5, #1
 8007d76:	2d08      	cmp	r5, #8
 8007d78:	f10b 0b01 	add.w	fp, fp, #1
 8007d7c:	dd06      	ble.n	8007d8c <__hexnan+0xfc>
 8007d7e:	4544      	cmp	r4, r8
 8007d80:	d9c3      	bls.n	8007d0a <__hexnan+0x7a>
 8007d82:	2300      	movs	r3, #0
 8007d84:	f844 3c04 	str.w	r3, [r4, #-4]
 8007d88:	2501      	movs	r5, #1
 8007d8a:	3c04      	subs	r4, #4
 8007d8c:	6822      	ldr	r2, [r4, #0]
 8007d8e:	f000 000f 	and.w	r0, r0, #15
 8007d92:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8007d96:	6022      	str	r2, [r4, #0]
 8007d98:	e7b7      	b.n	8007d0a <__hexnan+0x7a>
 8007d9a:	2508      	movs	r5, #8
 8007d9c:	e7b5      	b.n	8007d0a <__hexnan+0x7a>
 8007d9e:	9b01      	ldr	r3, [sp, #4]
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d0df      	beq.n	8007d64 <__hexnan+0xd4>
 8007da4:	f04f 32ff 	mov.w	r2, #4294967295
 8007da8:	f1c3 0320 	rsb	r3, r3, #32
 8007dac:	fa22 f303 	lsr.w	r3, r2, r3
 8007db0:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8007db4:	401a      	ands	r2, r3
 8007db6:	f846 2c04 	str.w	r2, [r6, #-4]
 8007dba:	e7d3      	b.n	8007d64 <__hexnan+0xd4>
 8007dbc:	3f04      	subs	r7, #4
 8007dbe:	e7d1      	b.n	8007d64 <__hexnan+0xd4>
 8007dc0:	2004      	movs	r0, #4
 8007dc2:	b007      	add	sp, #28
 8007dc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007dc8 <_localeconv_r>:
 8007dc8:	4800      	ldr	r0, [pc, #0]	; (8007dcc <_localeconv_r+0x4>)
 8007dca:	4770      	bx	lr
 8007dcc:	20000164 	.word	0x20000164

08007dd0 <__retarget_lock_init_recursive>:
 8007dd0:	4770      	bx	lr

08007dd2 <__retarget_lock_acquire_recursive>:
 8007dd2:	4770      	bx	lr

08007dd4 <__retarget_lock_release_recursive>:
 8007dd4:	4770      	bx	lr
	...

08007dd8 <_lseek_r>:
 8007dd8:	b538      	push	{r3, r4, r5, lr}
 8007dda:	4d07      	ldr	r5, [pc, #28]	; (8007df8 <_lseek_r+0x20>)
 8007ddc:	4604      	mov	r4, r0
 8007dde:	4608      	mov	r0, r1
 8007de0:	4611      	mov	r1, r2
 8007de2:	2200      	movs	r2, #0
 8007de4:	602a      	str	r2, [r5, #0]
 8007de6:	461a      	mov	r2, r3
 8007de8:	f7f9 fc72 	bl	80016d0 <_lseek>
 8007dec:	1c43      	adds	r3, r0, #1
 8007dee:	d102      	bne.n	8007df6 <_lseek_r+0x1e>
 8007df0:	682b      	ldr	r3, [r5, #0]
 8007df2:	b103      	cbz	r3, 8007df6 <_lseek_r+0x1e>
 8007df4:	6023      	str	r3, [r4, #0]
 8007df6:	bd38      	pop	{r3, r4, r5, pc}
 8007df8:	20000318 	.word	0x20000318

08007dfc <__swhatbuf_r>:
 8007dfc:	b570      	push	{r4, r5, r6, lr}
 8007dfe:	460e      	mov	r6, r1
 8007e00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007e04:	2900      	cmp	r1, #0
 8007e06:	b096      	sub	sp, #88	; 0x58
 8007e08:	4614      	mov	r4, r2
 8007e0a:	461d      	mov	r5, r3
 8007e0c:	da08      	bge.n	8007e20 <__swhatbuf_r+0x24>
 8007e0e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8007e12:	2200      	movs	r2, #0
 8007e14:	602a      	str	r2, [r5, #0]
 8007e16:	061a      	lsls	r2, r3, #24
 8007e18:	d410      	bmi.n	8007e3c <__swhatbuf_r+0x40>
 8007e1a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007e1e:	e00e      	b.n	8007e3e <__swhatbuf_r+0x42>
 8007e20:	466a      	mov	r2, sp
 8007e22:	f001 fd59 	bl	80098d8 <_fstat_r>
 8007e26:	2800      	cmp	r0, #0
 8007e28:	dbf1      	blt.n	8007e0e <__swhatbuf_r+0x12>
 8007e2a:	9a01      	ldr	r2, [sp, #4]
 8007e2c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007e30:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007e34:	425a      	negs	r2, r3
 8007e36:	415a      	adcs	r2, r3
 8007e38:	602a      	str	r2, [r5, #0]
 8007e3a:	e7ee      	b.n	8007e1a <__swhatbuf_r+0x1e>
 8007e3c:	2340      	movs	r3, #64	; 0x40
 8007e3e:	2000      	movs	r0, #0
 8007e40:	6023      	str	r3, [r4, #0]
 8007e42:	b016      	add	sp, #88	; 0x58
 8007e44:	bd70      	pop	{r4, r5, r6, pc}
	...

08007e48 <__smakebuf_r>:
 8007e48:	898b      	ldrh	r3, [r1, #12]
 8007e4a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007e4c:	079d      	lsls	r5, r3, #30
 8007e4e:	4606      	mov	r6, r0
 8007e50:	460c      	mov	r4, r1
 8007e52:	d507      	bpl.n	8007e64 <__smakebuf_r+0x1c>
 8007e54:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007e58:	6023      	str	r3, [r4, #0]
 8007e5a:	6123      	str	r3, [r4, #16]
 8007e5c:	2301      	movs	r3, #1
 8007e5e:	6163      	str	r3, [r4, #20]
 8007e60:	b002      	add	sp, #8
 8007e62:	bd70      	pop	{r4, r5, r6, pc}
 8007e64:	ab01      	add	r3, sp, #4
 8007e66:	466a      	mov	r2, sp
 8007e68:	f7ff ffc8 	bl	8007dfc <__swhatbuf_r>
 8007e6c:	9900      	ldr	r1, [sp, #0]
 8007e6e:	4605      	mov	r5, r0
 8007e70:	4630      	mov	r0, r6
 8007e72:	f000 fd95 	bl	80089a0 <_malloc_r>
 8007e76:	b948      	cbnz	r0, 8007e8c <__smakebuf_r+0x44>
 8007e78:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007e7c:	059a      	lsls	r2, r3, #22
 8007e7e:	d4ef      	bmi.n	8007e60 <__smakebuf_r+0x18>
 8007e80:	f023 0303 	bic.w	r3, r3, #3
 8007e84:	f043 0302 	orr.w	r3, r3, #2
 8007e88:	81a3      	strh	r3, [r4, #12]
 8007e8a:	e7e3      	b.n	8007e54 <__smakebuf_r+0xc>
 8007e8c:	4b0d      	ldr	r3, [pc, #52]	; (8007ec4 <__smakebuf_r+0x7c>)
 8007e8e:	62b3      	str	r3, [r6, #40]	; 0x28
 8007e90:	89a3      	ldrh	r3, [r4, #12]
 8007e92:	6020      	str	r0, [r4, #0]
 8007e94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007e98:	81a3      	strh	r3, [r4, #12]
 8007e9a:	9b00      	ldr	r3, [sp, #0]
 8007e9c:	6163      	str	r3, [r4, #20]
 8007e9e:	9b01      	ldr	r3, [sp, #4]
 8007ea0:	6120      	str	r0, [r4, #16]
 8007ea2:	b15b      	cbz	r3, 8007ebc <__smakebuf_r+0x74>
 8007ea4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007ea8:	4630      	mov	r0, r6
 8007eaa:	f001 fd27 	bl	80098fc <_isatty_r>
 8007eae:	b128      	cbz	r0, 8007ebc <__smakebuf_r+0x74>
 8007eb0:	89a3      	ldrh	r3, [r4, #12]
 8007eb2:	f023 0303 	bic.w	r3, r3, #3
 8007eb6:	f043 0301 	orr.w	r3, r3, #1
 8007eba:	81a3      	strh	r3, [r4, #12]
 8007ebc:	89a0      	ldrh	r0, [r4, #12]
 8007ebe:	4305      	orrs	r5, r0
 8007ec0:	81a5      	strh	r5, [r4, #12]
 8007ec2:	e7cd      	b.n	8007e60 <__smakebuf_r+0x18>
 8007ec4:	08007549 	.word	0x08007549

08007ec8 <malloc>:
 8007ec8:	4b02      	ldr	r3, [pc, #8]	; (8007ed4 <malloc+0xc>)
 8007eca:	4601      	mov	r1, r0
 8007ecc:	6818      	ldr	r0, [r3, #0]
 8007ece:	f000 bd67 	b.w	80089a0 <_malloc_r>
 8007ed2:	bf00      	nop
 8007ed4:	2000000c 	.word	0x2000000c

08007ed8 <__ascii_mbtowc>:
 8007ed8:	b082      	sub	sp, #8
 8007eda:	b901      	cbnz	r1, 8007ede <__ascii_mbtowc+0x6>
 8007edc:	a901      	add	r1, sp, #4
 8007ede:	b142      	cbz	r2, 8007ef2 <__ascii_mbtowc+0x1a>
 8007ee0:	b14b      	cbz	r3, 8007ef6 <__ascii_mbtowc+0x1e>
 8007ee2:	7813      	ldrb	r3, [r2, #0]
 8007ee4:	600b      	str	r3, [r1, #0]
 8007ee6:	7812      	ldrb	r2, [r2, #0]
 8007ee8:	1e10      	subs	r0, r2, #0
 8007eea:	bf18      	it	ne
 8007eec:	2001      	movne	r0, #1
 8007eee:	b002      	add	sp, #8
 8007ef0:	4770      	bx	lr
 8007ef2:	4610      	mov	r0, r2
 8007ef4:	e7fb      	b.n	8007eee <__ascii_mbtowc+0x16>
 8007ef6:	f06f 0001 	mvn.w	r0, #1
 8007efa:	e7f8      	b.n	8007eee <__ascii_mbtowc+0x16>

08007efc <memcpy>:
 8007efc:	440a      	add	r2, r1
 8007efe:	4291      	cmp	r1, r2
 8007f00:	f100 33ff 	add.w	r3, r0, #4294967295
 8007f04:	d100      	bne.n	8007f08 <memcpy+0xc>
 8007f06:	4770      	bx	lr
 8007f08:	b510      	push	{r4, lr}
 8007f0a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007f0e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007f12:	4291      	cmp	r1, r2
 8007f14:	d1f9      	bne.n	8007f0a <memcpy+0xe>
 8007f16:	bd10      	pop	{r4, pc}

08007f18 <_Balloc>:
 8007f18:	b570      	push	{r4, r5, r6, lr}
 8007f1a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007f1c:	4604      	mov	r4, r0
 8007f1e:	460d      	mov	r5, r1
 8007f20:	b976      	cbnz	r6, 8007f40 <_Balloc+0x28>
 8007f22:	2010      	movs	r0, #16
 8007f24:	f7ff ffd0 	bl	8007ec8 <malloc>
 8007f28:	4602      	mov	r2, r0
 8007f2a:	6260      	str	r0, [r4, #36]	; 0x24
 8007f2c:	b920      	cbnz	r0, 8007f38 <_Balloc+0x20>
 8007f2e:	4b18      	ldr	r3, [pc, #96]	; (8007f90 <_Balloc+0x78>)
 8007f30:	4818      	ldr	r0, [pc, #96]	; (8007f94 <_Balloc+0x7c>)
 8007f32:	2166      	movs	r1, #102	; 0x66
 8007f34:	f001 fca0 	bl	8009878 <__assert_func>
 8007f38:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007f3c:	6006      	str	r6, [r0, #0]
 8007f3e:	60c6      	str	r6, [r0, #12]
 8007f40:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007f42:	68f3      	ldr	r3, [r6, #12]
 8007f44:	b183      	cbz	r3, 8007f68 <_Balloc+0x50>
 8007f46:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007f48:	68db      	ldr	r3, [r3, #12]
 8007f4a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007f4e:	b9b8      	cbnz	r0, 8007f80 <_Balloc+0x68>
 8007f50:	2101      	movs	r1, #1
 8007f52:	fa01 f605 	lsl.w	r6, r1, r5
 8007f56:	1d72      	adds	r2, r6, #5
 8007f58:	0092      	lsls	r2, r2, #2
 8007f5a:	4620      	mov	r0, r4
 8007f5c:	f000 fc9d 	bl	800889a <_calloc_r>
 8007f60:	b160      	cbz	r0, 8007f7c <_Balloc+0x64>
 8007f62:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007f66:	e00e      	b.n	8007f86 <_Balloc+0x6e>
 8007f68:	2221      	movs	r2, #33	; 0x21
 8007f6a:	2104      	movs	r1, #4
 8007f6c:	4620      	mov	r0, r4
 8007f6e:	f000 fc94 	bl	800889a <_calloc_r>
 8007f72:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007f74:	60f0      	str	r0, [r6, #12]
 8007f76:	68db      	ldr	r3, [r3, #12]
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d1e4      	bne.n	8007f46 <_Balloc+0x2e>
 8007f7c:	2000      	movs	r0, #0
 8007f7e:	bd70      	pop	{r4, r5, r6, pc}
 8007f80:	6802      	ldr	r2, [r0, #0]
 8007f82:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007f86:	2300      	movs	r3, #0
 8007f88:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007f8c:	e7f7      	b.n	8007f7e <_Balloc+0x66>
 8007f8e:	bf00      	nop
 8007f90:	08009e86 	.word	0x08009e86
 8007f94:	08009fe8 	.word	0x08009fe8

08007f98 <_Bfree>:
 8007f98:	b570      	push	{r4, r5, r6, lr}
 8007f9a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007f9c:	4605      	mov	r5, r0
 8007f9e:	460c      	mov	r4, r1
 8007fa0:	b976      	cbnz	r6, 8007fc0 <_Bfree+0x28>
 8007fa2:	2010      	movs	r0, #16
 8007fa4:	f7ff ff90 	bl	8007ec8 <malloc>
 8007fa8:	4602      	mov	r2, r0
 8007faa:	6268      	str	r0, [r5, #36]	; 0x24
 8007fac:	b920      	cbnz	r0, 8007fb8 <_Bfree+0x20>
 8007fae:	4b09      	ldr	r3, [pc, #36]	; (8007fd4 <_Bfree+0x3c>)
 8007fb0:	4809      	ldr	r0, [pc, #36]	; (8007fd8 <_Bfree+0x40>)
 8007fb2:	218a      	movs	r1, #138	; 0x8a
 8007fb4:	f001 fc60 	bl	8009878 <__assert_func>
 8007fb8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007fbc:	6006      	str	r6, [r0, #0]
 8007fbe:	60c6      	str	r6, [r0, #12]
 8007fc0:	b13c      	cbz	r4, 8007fd2 <_Bfree+0x3a>
 8007fc2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007fc4:	6862      	ldr	r2, [r4, #4]
 8007fc6:	68db      	ldr	r3, [r3, #12]
 8007fc8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007fcc:	6021      	str	r1, [r4, #0]
 8007fce:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007fd2:	bd70      	pop	{r4, r5, r6, pc}
 8007fd4:	08009e86 	.word	0x08009e86
 8007fd8:	08009fe8 	.word	0x08009fe8

08007fdc <__multadd>:
 8007fdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007fe0:	690d      	ldr	r5, [r1, #16]
 8007fe2:	4607      	mov	r7, r0
 8007fe4:	460c      	mov	r4, r1
 8007fe6:	461e      	mov	r6, r3
 8007fe8:	f101 0c14 	add.w	ip, r1, #20
 8007fec:	2000      	movs	r0, #0
 8007fee:	f8dc 3000 	ldr.w	r3, [ip]
 8007ff2:	b299      	uxth	r1, r3
 8007ff4:	fb02 6101 	mla	r1, r2, r1, r6
 8007ff8:	0c1e      	lsrs	r6, r3, #16
 8007ffa:	0c0b      	lsrs	r3, r1, #16
 8007ffc:	fb02 3306 	mla	r3, r2, r6, r3
 8008000:	b289      	uxth	r1, r1
 8008002:	3001      	adds	r0, #1
 8008004:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008008:	4285      	cmp	r5, r0
 800800a:	f84c 1b04 	str.w	r1, [ip], #4
 800800e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008012:	dcec      	bgt.n	8007fee <__multadd+0x12>
 8008014:	b30e      	cbz	r6, 800805a <__multadd+0x7e>
 8008016:	68a3      	ldr	r3, [r4, #8]
 8008018:	42ab      	cmp	r3, r5
 800801a:	dc19      	bgt.n	8008050 <__multadd+0x74>
 800801c:	6861      	ldr	r1, [r4, #4]
 800801e:	4638      	mov	r0, r7
 8008020:	3101      	adds	r1, #1
 8008022:	f7ff ff79 	bl	8007f18 <_Balloc>
 8008026:	4680      	mov	r8, r0
 8008028:	b928      	cbnz	r0, 8008036 <__multadd+0x5a>
 800802a:	4602      	mov	r2, r0
 800802c:	4b0c      	ldr	r3, [pc, #48]	; (8008060 <__multadd+0x84>)
 800802e:	480d      	ldr	r0, [pc, #52]	; (8008064 <__multadd+0x88>)
 8008030:	21b5      	movs	r1, #181	; 0xb5
 8008032:	f001 fc21 	bl	8009878 <__assert_func>
 8008036:	6922      	ldr	r2, [r4, #16]
 8008038:	3202      	adds	r2, #2
 800803a:	f104 010c 	add.w	r1, r4, #12
 800803e:	0092      	lsls	r2, r2, #2
 8008040:	300c      	adds	r0, #12
 8008042:	f7ff ff5b 	bl	8007efc <memcpy>
 8008046:	4621      	mov	r1, r4
 8008048:	4638      	mov	r0, r7
 800804a:	f7ff ffa5 	bl	8007f98 <_Bfree>
 800804e:	4644      	mov	r4, r8
 8008050:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008054:	3501      	adds	r5, #1
 8008056:	615e      	str	r6, [r3, #20]
 8008058:	6125      	str	r5, [r4, #16]
 800805a:	4620      	mov	r0, r4
 800805c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008060:	08009ef8 	.word	0x08009ef8
 8008064:	08009fe8 	.word	0x08009fe8

08008068 <__s2b>:
 8008068:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800806c:	460c      	mov	r4, r1
 800806e:	4615      	mov	r5, r2
 8008070:	461f      	mov	r7, r3
 8008072:	2209      	movs	r2, #9
 8008074:	3308      	adds	r3, #8
 8008076:	4606      	mov	r6, r0
 8008078:	fb93 f3f2 	sdiv	r3, r3, r2
 800807c:	2100      	movs	r1, #0
 800807e:	2201      	movs	r2, #1
 8008080:	429a      	cmp	r2, r3
 8008082:	db09      	blt.n	8008098 <__s2b+0x30>
 8008084:	4630      	mov	r0, r6
 8008086:	f7ff ff47 	bl	8007f18 <_Balloc>
 800808a:	b940      	cbnz	r0, 800809e <__s2b+0x36>
 800808c:	4602      	mov	r2, r0
 800808e:	4b19      	ldr	r3, [pc, #100]	; (80080f4 <__s2b+0x8c>)
 8008090:	4819      	ldr	r0, [pc, #100]	; (80080f8 <__s2b+0x90>)
 8008092:	21ce      	movs	r1, #206	; 0xce
 8008094:	f001 fbf0 	bl	8009878 <__assert_func>
 8008098:	0052      	lsls	r2, r2, #1
 800809a:	3101      	adds	r1, #1
 800809c:	e7f0      	b.n	8008080 <__s2b+0x18>
 800809e:	9b08      	ldr	r3, [sp, #32]
 80080a0:	6143      	str	r3, [r0, #20]
 80080a2:	2d09      	cmp	r5, #9
 80080a4:	f04f 0301 	mov.w	r3, #1
 80080a8:	6103      	str	r3, [r0, #16]
 80080aa:	dd16      	ble.n	80080da <__s2b+0x72>
 80080ac:	f104 0909 	add.w	r9, r4, #9
 80080b0:	46c8      	mov	r8, r9
 80080b2:	442c      	add	r4, r5
 80080b4:	f818 3b01 	ldrb.w	r3, [r8], #1
 80080b8:	4601      	mov	r1, r0
 80080ba:	3b30      	subs	r3, #48	; 0x30
 80080bc:	220a      	movs	r2, #10
 80080be:	4630      	mov	r0, r6
 80080c0:	f7ff ff8c 	bl	8007fdc <__multadd>
 80080c4:	45a0      	cmp	r8, r4
 80080c6:	d1f5      	bne.n	80080b4 <__s2b+0x4c>
 80080c8:	f1a5 0408 	sub.w	r4, r5, #8
 80080cc:	444c      	add	r4, r9
 80080ce:	1b2d      	subs	r5, r5, r4
 80080d0:	1963      	adds	r3, r4, r5
 80080d2:	42bb      	cmp	r3, r7
 80080d4:	db04      	blt.n	80080e0 <__s2b+0x78>
 80080d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80080da:	340a      	adds	r4, #10
 80080dc:	2509      	movs	r5, #9
 80080de:	e7f6      	b.n	80080ce <__s2b+0x66>
 80080e0:	f814 3b01 	ldrb.w	r3, [r4], #1
 80080e4:	4601      	mov	r1, r0
 80080e6:	3b30      	subs	r3, #48	; 0x30
 80080e8:	220a      	movs	r2, #10
 80080ea:	4630      	mov	r0, r6
 80080ec:	f7ff ff76 	bl	8007fdc <__multadd>
 80080f0:	e7ee      	b.n	80080d0 <__s2b+0x68>
 80080f2:	bf00      	nop
 80080f4:	08009ef8 	.word	0x08009ef8
 80080f8:	08009fe8 	.word	0x08009fe8

080080fc <__hi0bits>:
 80080fc:	0c03      	lsrs	r3, r0, #16
 80080fe:	041b      	lsls	r3, r3, #16
 8008100:	b9d3      	cbnz	r3, 8008138 <__hi0bits+0x3c>
 8008102:	0400      	lsls	r0, r0, #16
 8008104:	2310      	movs	r3, #16
 8008106:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800810a:	bf04      	itt	eq
 800810c:	0200      	lsleq	r0, r0, #8
 800810e:	3308      	addeq	r3, #8
 8008110:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8008114:	bf04      	itt	eq
 8008116:	0100      	lsleq	r0, r0, #4
 8008118:	3304      	addeq	r3, #4
 800811a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800811e:	bf04      	itt	eq
 8008120:	0080      	lsleq	r0, r0, #2
 8008122:	3302      	addeq	r3, #2
 8008124:	2800      	cmp	r0, #0
 8008126:	db05      	blt.n	8008134 <__hi0bits+0x38>
 8008128:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800812c:	f103 0301 	add.w	r3, r3, #1
 8008130:	bf08      	it	eq
 8008132:	2320      	moveq	r3, #32
 8008134:	4618      	mov	r0, r3
 8008136:	4770      	bx	lr
 8008138:	2300      	movs	r3, #0
 800813a:	e7e4      	b.n	8008106 <__hi0bits+0xa>

0800813c <__lo0bits>:
 800813c:	6803      	ldr	r3, [r0, #0]
 800813e:	f013 0207 	ands.w	r2, r3, #7
 8008142:	4601      	mov	r1, r0
 8008144:	d00b      	beq.n	800815e <__lo0bits+0x22>
 8008146:	07da      	lsls	r2, r3, #31
 8008148:	d423      	bmi.n	8008192 <__lo0bits+0x56>
 800814a:	0798      	lsls	r0, r3, #30
 800814c:	bf49      	itett	mi
 800814e:	085b      	lsrmi	r3, r3, #1
 8008150:	089b      	lsrpl	r3, r3, #2
 8008152:	2001      	movmi	r0, #1
 8008154:	600b      	strmi	r3, [r1, #0]
 8008156:	bf5c      	itt	pl
 8008158:	600b      	strpl	r3, [r1, #0]
 800815a:	2002      	movpl	r0, #2
 800815c:	4770      	bx	lr
 800815e:	b298      	uxth	r0, r3
 8008160:	b9a8      	cbnz	r0, 800818e <__lo0bits+0x52>
 8008162:	0c1b      	lsrs	r3, r3, #16
 8008164:	2010      	movs	r0, #16
 8008166:	b2da      	uxtb	r2, r3
 8008168:	b90a      	cbnz	r2, 800816e <__lo0bits+0x32>
 800816a:	3008      	adds	r0, #8
 800816c:	0a1b      	lsrs	r3, r3, #8
 800816e:	071a      	lsls	r2, r3, #28
 8008170:	bf04      	itt	eq
 8008172:	091b      	lsreq	r3, r3, #4
 8008174:	3004      	addeq	r0, #4
 8008176:	079a      	lsls	r2, r3, #30
 8008178:	bf04      	itt	eq
 800817a:	089b      	lsreq	r3, r3, #2
 800817c:	3002      	addeq	r0, #2
 800817e:	07da      	lsls	r2, r3, #31
 8008180:	d403      	bmi.n	800818a <__lo0bits+0x4e>
 8008182:	085b      	lsrs	r3, r3, #1
 8008184:	f100 0001 	add.w	r0, r0, #1
 8008188:	d005      	beq.n	8008196 <__lo0bits+0x5a>
 800818a:	600b      	str	r3, [r1, #0]
 800818c:	4770      	bx	lr
 800818e:	4610      	mov	r0, r2
 8008190:	e7e9      	b.n	8008166 <__lo0bits+0x2a>
 8008192:	2000      	movs	r0, #0
 8008194:	4770      	bx	lr
 8008196:	2020      	movs	r0, #32
 8008198:	4770      	bx	lr
	...

0800819c <__i2b>:
 800819c:	b510      	push	{r4, lr}
 800819e:	460c      	mov	r4, r1
 80081a0:	2101      	movs	r1, #1
 80081a2:	f7ff feb9 	bl	8007f18 <_Balloc>
 80081a6:	4602      	mov	r2, r0
 80081a8:	b928      	cbnz	r0, 80081b6 <__i2b+0x1a>
 80081aa:	4b05      	ldr	r3, [pc, #20]	; (80081c0 <__i2b+0x24>)
 80081ac:	4805      	ldr	r0, [pc, #20]	; (80081c4 <__i2b+0x28>)
 80081ae:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80081b2:	f001 fb61 	bl	8009878 <__assert_func>
 80081b6:	2301      	movs	r3, #1
 80081b8:	6144      	str	r4, [r0, #20]
 80081ba:	6103      	str	r3, [r0, #16]
 80081bc:	bd10      	pop	{r4, pc}
 80081be:	bf00      	nop
 80081c0:	08009ef8 	.word	0x08009ef8
 80081c4:	08009fe8 	.word	0x08009fe8

080081c8 <__multiply>:
 80081c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081cc:	4691      	mov	r9, r2
 80081ce:	690a      	ldr	r2, [r1, #16]
 80081d0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80081d4:	429a      	cmp	r2, r3
 80081d6:	bfb8      	it	lt
 80081d8:	460b      	movlt	r3, r1
 80081da:	460c      	mov	r4, r1
 80081dc:	bfbc      	itt	lt
 80081de:	464c      	movlt	r4, r9
 80081e0:	4699      	movlt	r9, r3
 80081e2:	6927      	ldr	r7, [r4, #16]
 80081e4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80081e8:	68a3      	ldr	r3, [r4, #8]
 80081ea:	6861      	ldr	r1, [r4, #4]
 80081ec:	eb07 060a 	add.w	r6, r7, sl
 80081f0:	42b3      	cmp	r3, r6
 80081f2:	b085      	sub	sp, #20
 80081f4:	bfb8      	it	lt
 80081f6:	3101      	addlt	r1, #1
 80081f8:	f7ff fe8e 	bl	8007f18 <_Balloc>
 80081fc:	b930      	cbnz	r0, 800820c <__multiply+0x44>
 80081fe:	4602      	mov	r2, r0
 8008200:	4b44      	ldr	r3, [pc, #272]	; (8008314 <__multiply+0x14c>)
 8008202:	4845      	ldr	r0, [pc, #276]	; (8008318 <__multiply+0x150>)
 8008204:	f240 115d 	movw	r1, #349	; 0x15d
 8008208:	f001 fb36 	bl	8009878 <__assert_func>
 800820c:	f100 0514 	add.w	r5, r0, #20
 8008210:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008214:	462b      	mov	r3, r5
 8008216:	2200      	movs	r2, #0
 8008218:	4543      	cmp	r3, r8
 800821a:	d321      	bcc.n	8008260 <__multiply+0x98>
 800821c:	f104 0314 	add.w	r3, r4, #20
 8008220:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8008224:	f109 0314 	add.w	r3, r9, #20
 8008228:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800822c:	9202      	str	r2, [sp, #8]
 800822e:	1b3a      	subs	r2, r7, r4
 8008230:	3a15      	subs	r2, #21
 8008232:	f022 0203 	bic.w	r2, r2, #3
 8008236:	3204      	adds	r2, #4
 8008238:	f104 0115 	add.w	r1, r4, #21
 800823c:	428f      	cmp	r7, r1
 800823e:	bf38      	it	cc
 8008240:	2204      	movcc	r2, #4
 8008242:	9201      	str	r2, [sp, #4]
 8008244:	9a02      	ldr	r2, [sp, #8]
 8008246:	9303      	str	r3, [sp, #12]
 8008248:	429a      	cmp	r2, r3
 800824a:	d80c      	bhi.n	8008266 <__multiply+0x9e>
 800824c:	2e00      	cmp	r6, #0
 800824e:	dd03      	ble.n	8008258 <__multiply+0x90>
 8008250:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008254:	2b00      	cmp	r3, #0
 8008256:	d05a      	beq.n	800830e <__multiply+0x146>
 8008258:	6106      	str	r6, [r0, #16]
 800825a:	b005      	add	sp, #20
 800825c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008260:	f843 2b04 	str.w	r2, [r3], #4
 8008264:	e7d8      	b.n	8008218 <__multiply+0x50>
 8008266:	f8b3 a000 	ldrh.w	sl, [r3]
 800826a:	f1ba 0f00 	cmp.w	sl, #0
 800826e:	d024      	beq.n	80082ba <__multiply+0xf2>
 8008270:	f104 0e14 	add.w	lr, r4, #20
 8008274:	46a9      	mov	r9, r5
 8008276:	f04f 0c00 	mov.w	ip, #0
 800827a:	f85e 2b04 	ldr.w	r2, [lr], #4
 800827e:	f8d9 1000 	ldr.w	r1, [r9]
 8008282:	fa1f fb82 	uxth.w	fp, r2
 8008286:	b289      	uxth	r1, r1
 8008288:	fb0a 110b 	mla	r1, sl, fp, r1
 800828c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8008290:	f8d9 2000 	ldr.w	r2, [r9]
 8008294:	4461      	add	r1, ip
 8008296:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800829a:	fb0a c20b 	mla	r2, sl, fp, ip
 800829e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80082a2:	b289      	uxth	r1, r1
 80082a4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80082a8:	4577      	cmp	r7, lr
 80082aa:	f849 1b04 	str.w	r1, [r9], #4
 80082ae:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80082b2:	d8e2      	bhi.n	800827a <__multiply+0xb2>
 80082b4:	9a01      	ldr	r2, [sp, #4]
 80082b6:	f845 c002 	str.w	ip, [r5, r2]
 80082ba:	9a03      	ldr	r2, [sp, #12]
 80082bc:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80082c0:	3304      	adds	r3, #4
 80082c2:	f1b9 0f00 	cmp.w	r9, #0
 80082c6:	d020      	beq.n	800830a <__multiply+0x142>
 80082c8:	6829      	ldr	r1, [r5, #0]
 80082ca:	f104 0c14 	add.w	ip, r4, #20
 80082ce:	46ae      	mov	lr, r5
 80082d0:	f04f 0a00 	mov.w	sl, #0
 80082d4:	f8bc b000 	ldrh.w	fp, [ip]
 80082d8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80082dc:	fb09 220b 	mla	r2, r9, fp, r2
 80082e0:	4492      	add	sl, r2
 80082e2:	b289      	uxth	r1, r1
 80082e4:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80082e8:	f84e 1b04 	str.w	r1, [lr], #4
 80082ec:	f85c 2b04 	ldr.w	r2, [ip], #4
 80082f0:	f8be 1000 	ldrh.w	r1, [lr]
 80082f4:	0c12      	lsrs	r2, r2, #16
 80082f6:	fb09 1102 	mla	r1, r9, r2, r1
 80082fa:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80082fe:	4567      	cmp	r7, ip
 8008300:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008304:	d8e6      	bhi.n	80082d4 <__multiply+0x10c>
 8008306:	9a01      	ldr	r2, [sp, #4]
 8008308:	50a9      	str	r1, [r5, r2]
 800830a:	3504      	adds	r5, #4
 800830c:	e79a      	b.n	8008244 <__multiply+0x7c>
 800830e:	3e01      	subs	r6, #1
 8008310:	e79c      	b.n	800824c <__multiply+0x84>
 8008312:	bf00      	nop
 8008314:	08009ef8 	.word	0x08009ef8
 8008318:	08009fe8 	.word	0x08009fe8

0800831c <__pow5mult>:
 800831c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008320:	4615      	mov	r5, r2
 8008322:	f012 0203 	ands.w	r2, r2, #3
 8008326:	4606      	mov	r6, r0
 8008328:	460f      	mov	r7, r1
 800832a:	d007      	beq.n	800833c <__pow5mult+0x20>
 800832c:	4c25      	ldr	r4, [pc, #148]	; (80083c4 <__pow5mult+0xa8>)
 800832e:	3a01      	subs	r2, #1
 8008330:	2300      	movs	r3, #0
 8008332:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008336:	f7ff fe51 	bl	8007fdc <__multadd>
 800833a:	4607      	mov	r7, r0
 800833c:	10ad      	asrs	r5, r5, #2
 800833e:	d03d      	beq.n	80083bc <__pow5mult+0xa0>
 8008340:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8008342:	b97c      	cbnz	r4, 8008364 <__pow5mult+0x48>
 8008344:	2010      	movs	r0, #16
 8008346:	f7ff fdbf 	bl	8007ec8 <malloc>
 800834a:	4602      	mov	r2, r0
 800834c:	6270      	str	r0, [r6, #36]	; 0x24
 800834e:	b928      	cbnz	r0, 800835c <__pow5mult+0x40>
 8008350:	4b1d      	ldr	r3, [pc, #116]	; (80083c8 <__pow5mult+0xac>)
 8008352:	481e      	ldr	r0, [pc, #120]	; (80083cc <__pow5mult+0xb0>)
 8008354:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8008358:	f001 fa8e 	bl	8009878 <__assert_func>
 800835c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008360:	6004      	str	r4, [r0, #0]
 8008362:	60c4      	str	r4, [r0, #12]
 8008364:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008368:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800836c:	b94c      	cbnz	r4, 8008382 <__pow5mult+0x66>
 800836e:	f240 2171 	movw	r1, #625	; 0x271
 8008372:	4630      	mov	r0, r6
 8008374:	f7ff ff12 	bl	800819c <__i2b>
 8008378:	2300      	movs	r3, #0
 800837a:	f8c8 0008 	str.w	r0, [r8, #8]
 800837e:	4604      	mov	r4, r0
 8008380:	6003      	str	r3, [r0, #0]
 8008382:	f04f 0900 	mov.w	r9, #0
 8008386:	07eb      	lsls	r3, r5, #31
 8008388:	d50a      	bpl.n	80083a0 <__pow5mult+0x84>
 800838a:	4639      	mov	r1, r7
 800838c:	4622      	mov	r2, r4
 800838e:	4630      	mov	r0, r6
 8008390:	f7ff ff1a 	bl	80081c8 <__multiply>
 8008394:	4639      	mov	r1, r7
 8008396:	4680      	mov	r8, r0
 8008398:	4630      	mov	r0, r6
 800839a:	f7ff fdfd 	bl	8007f98 <_Bfree>
 800839e:	4647      	mov	r7, r8
 80083a0:	106d      	asrs	r5, r5, #1
 80083a2:	d00b      	beq.n	80083bc <__pow5mult+0xa0>
 80083a4:	6820      	ldr	r0, [r4, #0]
 80083a6:	b938      	cbnz	r0, 80083b8 <__pow5mult+0x9c>
 80083a8:	4622      	mov	r2, r4
 80083aa:	4621      	mov	r1, r4
 80083ac:	4630      	mov	r0, r6
 80083ae:	f7ff ff0b 	bl	80081c8 <__multiply>
 80083b2:	6020      	str	r0, [r4, #0]
 80083b4:	f8c0 9000 	str.w	r9, [r0]
 80083b8:	4604      	mov	r4, r0
 80083ba:	e7e4      	b.n	8008386 <__pow5mult+0x6a>
 80083bc:	4638      	mov	r0, r7
 80083be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80083c2:	bf00      	nop
 80083c4:	0800a138 	.word	0x0800a138
 80083c8:	08009e86 	.word	0x08009e86
 80083cc:	08009fe8 	.word	0x08009fe8

080083d0 <__lshift>:
 80083d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80083d4:	460c      	mov	r4, r1
 80083d6:	6849      	ldr	r1, [r1, #4]
 80083d8:	6923      	ldr	r3, [r4, #16]
 80083da:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80083de:	68a3      	ldr	r3, [r4, #8]
 80083e0:	4607      	mov	r7, r0
 80083e2:	4691      	mov	r9, r2
 80083e4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80083e8:	f108 0601 	add.w	r6, r8, #1
 80083ec:	42b3      	cmp	r3, r6
 80083ee:	db0b      	blt.n	8008408 <__lshift+0x38>
 80083f0:	4638      	mov	r0, r7
 80083f2:	f7ff fd91 	bl	8007f18 <_Balloc>
 80083f6:	4605      	mov	r5, r0
 80083f8:	b948      	cbnz	r0, 800840e <__lshift+0x3e>
 80083fa:	4602      	mov	r2, r0
 80083fc:	4b2a      	ldr	r3, [pc, #168]	; (80084a8 <__lshift+0xd8>)
 80083fe:	482b      	ldr	r0, [pc, #172]	; (80084ac <__lshift+0xdc>)
 8008400:	f240 11d9 	movw	r1, #473	; 0x1d9
 8008404:	f001 fa38 	bl	8009878 <__assert_func>
 8008408:	3101      	adds	r1, #1
 800840a:	005b      	lsls	r3, r3, #1
 800840c:	e7ee      	b.n	80083ec <__lshift+0x1c>
 800840e:	2300      	movs	r3, #0
 8008410:	f100 0114 	add.w	r1, r0, #20
 8008414:	f100 0210 	add.w	r2, r0, #16
 8008418:	4618      	mov	r0, r3
 800841a:	4553      	cmp	r3, sl
 800841c:	db37      	blt.n	800848e <__lshift+0xbe>
 800841e:	6920      	ldr	r0, [r4, #16]
 8008420:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008424:	f104 0314 	add.w	r3, r4, #20
 8008428:	f019 091f 	ands.w	r9, r9, #31
 800842c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008430:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8008434:	d02f      	beq.n	8008496 <__lshift+0xc6>
 8008436:	f1c9 0e20 	rsb	lr, r9, #32
 800843a:	468a      	mov	sl, r1
 800843c:	f04f 0c00 	mov.w	ip, #0
 8008440:	681a      	ldr	r2, [r3, #0]
 8008442:	fa02 f209 	lsl.w	r2, r2, r9
 8008446:	ea42 020c 	orr.w	r2, r2, ip
 800844a:	f84a 2b04 	str.w	r2, [sl], #4
 800844e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008452:	4298      	cmp	r0, r3
 8008454:	fa22 fc0e 	lsr.w	ip, r2, lr
 8008458:	d8f2      	bhi.n	8008440 <__lshift+0x70>
 800845a:	1b03      	subs	r3, r0, r4
 800845c:	3b15      	subs	r3, #21
 800845e:	f023 0303 	bic.w	r3, r3, #3
 8008462:	3304      	adds	r3, #4
 8008464:	f104 0215 	add.w	r2, r4, #21
 8008468:	4290      	cmp	r0, r2
 800846a:	bf38      	it	cc
 800846c:	2304      	movcc	r3, #4
 800846e:	f841 c003 	str.w	ip, [r1, r3]
 8008472:	f1bc 0f00 	cmp.w	ip, #0
 8008476:	d001      	beq.n	800847c <__lshift+0xac>
 8008478:	f108 0602 	add.w	r6, r8, #2
 800847c:	3e01      	subs	r6, #1
 800847e:	4638      	mov	r0, r7
 8008480:	612e      	str	r6, [r5, #16]
 8008482:	4621      	mov	r1, r4
 8008484:	f7ff fd88 	bl	8007f98 <_Bfree>
 8008488:	4628      	mov	r0, r5
 800848a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800848e:	f842 0f04 	str.w	r0, [r2, #4]!
 8008492:	3301      	adds	r3, #1
 8008494:	e7c1      	b.n	800841a <__lshift+0x4a>
 8008496:	3904      	subs	r1, #4
 8008498:	f853 2b04 	ldr.w	r2, [r3], #4
 800849c:	f841 2f04 	str.w	r2, [r1, #4]!
 80084a0:	4298      	cmp	r0, r3
 80084a2:	d8f9      	bhi.n	8008498 <__lshift+0xc8>
 80084a4:	e7ea      	b.n	800847c <__lshift+0xac>
 80084a6:	bf00      	nop
 80084a8:	08009ef8 	.word	0x08009ef8
 80084ac:	08009fe8 	.word	0x08009fe8

080084b0 <__mcmp>:
 80084b0:	b530      	push	{r4, r5, lr}
 80084b2:	6902      	ldr	r2, [r0, #16]
 80084b4:	690c      	ldr	r4, [r1, #16]
 80084b6:	1b12      	subs	r2, r2, r4
 80084b8:	d10e      	bne.n	80084d8 <__mcmp+0x28>
 80084ba:	f100 0314 	add.w	r3, r0, #20
 80084be:	3114      	adds	r1, #20
 80084c0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80084c4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80084c8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80084cc:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80084d0:	42a5      	cmp	r5, r4
 80084d2:	d003      	beq.n	80084dc <__mcmp+0x2c>
 80084d4:	d305      	bcc.n	80084e2 <__mcmp+0x32>
 80084d6:	2201      	movs	r2, #1
 80084d8:	4610      	mov	r0, r2
 80084da:	bd30      	pop	{r4, r5, pc}
 80084dc:	4283      	cmp	r3, r0
 80084de:	d3f3      	bcc.n	80084c8 <__mcmp+0x18>
 80084e0:	e7fa      	b.n	80084d8 <__mcmp+0x28>
 80084e2:	f04f 32ff 	mov.w	r2, #4294967295
 80084e6:	e7f7      	b.n	80084d8 <__mcmp+0x28>

080084e8 <__mdiff>:
 80084e8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084ec:	460c      	mov	r4, r1
 80084ee:	4606      	mov	r6, r0
 80084f0:	4611      	mov	r1, r2
 80084f2:	4620      	mov	r0, r4
 80084f4:	4690      	mov	r8, r2
 80084f6:	f7ff ffdb 	bl	80084b0 <__mcmp>
 80084fa:	1e05      	subs	r5, r0, #0
 80084fc:	d110      	bne.n	8008520 <__mdiff+0x38>
 80084fe:	4629      	mov	r1, r5
 8008500:	4630      	mov	r0, r6
 8008502:	f7ff fd09 	bl	8007f18 <_Balloc>
 8008506:	b930      	cbnz	r0, 8008516 <__mdiff+0x2e>
 8008508:	4b3a      	ldr	r3, [pc, #232]	; (80085f4 <__mdiff+0x10c>)
 800850a:	4602      	mov	r2, r0
 800850c:	f240 2132 	movw	r1, #562	; 0x232
 8008510:	4839      	ldr	r0, [pc, #228]	; (80085f8 <__mdiff+0x110>)
 8008512:	f001 f9b1 	bl	8009878 <__assert_func>
 8008516:	2301      	movs	r3, #1
 8008518:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800851c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008520:	bfa4      	itt	ge
 8008522:	4643      	movge	r3, r8
 8008524:	46a0      	movge	r8, r4
 8008526:	4630      	mov	r0, r6
 8008528:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800852c:	bfa6      	itte	ge
 800852e:	461c      	movge	r4, r3
 8008530:	2500      	movge	r5, #0
 8008532:	2501      	movlt	r5, #1
 8008534:	f7ff fcf0 	bl	8007f18 <_Balloc>
 8008538:	b920      	cbnz	r0, 8008544 <__mdiff+0x5c>
 800853a:	4b2e      	ldr	r3, [pc, #184]	; (80085f4 <__mdiff+0x10c>)
 800853c:	4602      	mov	r2, r0
 800853e:	f44f 7110 	mov.w	r1, #576	; 0x240
 8008542:	e7e5      	b.n	8008510 <__mdiff+0x28>
 8008544:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8008548:	6926      	ldr	r6, [r4, #16]
 800854a:	60c5      	str	r5, [r0, #12]
 800854c:	f104 0914 	add.w	r9, r4, #20
 8008550:	f108 0514 	add.w	r5, r8, #20
 8008554:	f100 0e14 	add.w	lr, r0, #20
 8008558:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800855c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8008560:	f108 0210 	add.w	r2, r8, #16
 8008564:	46f2      	mov	sl, lr
 8008566:	2100      	movs	r1, #0
 8008568:	f859 3b04 	ldr.w	r3, [r9], #4
 800856c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8008570:	fa1f f883 	uxth.w	r8, r3
 8008574:	fa11 f18b 	uxtah	r1, r1, fp
 8008578:	0c1b      	lsrs	r3, r3, #16
 800857a:	eba1 0808 	sub.w	r8, r1, r8
 800857e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008582:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8008586:	fa1f f888 	uxth.w	r8, r8
 800858a:	1419      	asrs	r1, r3, #16
 800858c:	454e      	cmp	r6, r9
 800858e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8008592:	f84a 3b04 	str.w	r3, [sl], #4
 8008596:	d8e7      	bhi.n	8008568 <__mdiff+0x80>
 8008598:	1b33      	subs	r3, r6, r4
 800859a:	3b15      	subs	r3, #21
 800859c:	f023 0303 	bic.w	r3, r3, #3
 80085a0:	3304      	adds	r3, #4
 80085a2:	3415      	adds	r4, #21
 80085a4:	42a6      	cmp	r6, r4
 80085a6:	bf38      	it	cc
 80085a8:	2304      	movcc	r3, #4
 80085aa:	441d      	add	r5, r3
 80085ac:	4473      	add	r3, lr
 80085ae:	469e      	mov	lr, r3
 80085b0:	462e      	mov	r6, r5
 80085b2:	4566      	cmp	r6, ip
 80085b4:	d30e      	bcc.n	80085d4 <__mdiff+0xec>
 80085b6:	f10c 0203 	add.w	r2, ip, #3
 80085ba:	1b52      	subs	r2, r2, r5
 80085bc:	f022 0203 	bic.w	r2, r2, #3
 80085c0:	3d03      	subs	r5, #3
 80085c2:	45ac      	cmp	ip, r5
 80085c4:	bf38      	it	cc
 80085c6:	2200      	movcc	r2, #0
 80085c8:	441a      	add	r2, r3
 80085ca:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80085ce:	b17b      	cbz	r3, 80085f0 <__mdiff+0x108>
 80085d0:	6107      	str	r7, [r0, #16]
 80085d2:	e7a3      	b.n	800851c <__mdiff+0x34>
 80085d4:	f856 8b04 	ldr.w	r8, [r6], #4
 80085d8:	fa11 f288 	uxtah	r2, r1, r8
 80085dc:	1414      	asrs	r4, r2, #16
 80085de:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80085e2:	b292      	uxth	r2, r2
 80085e4:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80085e8:	f84e 2b04 	str.w	r2, [lr], #4
 80085ec:	1421      	asrs	r1, r4, #16
 80085ee:	e7e0      	b.n	80085b2 <__mdiff+0xca>
 80085f0:	3f01      	subs	r7, #1
 80085f2:	e7ea      	b.n	80085ca <__mdiff+0xe2>
 80085f4:	08009ef8 	.word	0x08009ef8
 80085f8:	08009fe8 	.word	0x08009fe8

080085fc <__ulp>:
 80085fc:	b082      	sub	sp, #8
 80085fe:	ed8d 0b00 	vstr	d0, [sp]
 8008602:	9b01      	ldr	r3, [sp, #4]
 8008604:	4912      	ldr	r1, [pc, #72]	; (8008650 <__ulp+0x54>)
 8008606:	4019      	ands	r1, r3
 8008608:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800860c:	2900      	cmp	r1, #0
 800860e:	dd05      	ble.n	800861c <__ulp+0x20>
 8008610:	2200      	movs	r2, #0
 8008612:	460b      	mov	r3, r1
 8008614:	ec43 2b10 	vmov	d0, r2, r3
 8008618:	b002      	add	sp, #8
 800861a:	4770      	bx	lr
 800861c:	4249      	negs	r1, r1
 800861e:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8008622:	ea4f 5021 	mov.w	r0, r1, asr #20
 8008626:	f04f 0200 	mov.w	r2, #0
 800862a:	f04f 0300 	mov.w	r3, #0
 800862e:	da04      	bge.n	800863a <__ulp+0x3e>
 8008630:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8008634:	fa41 f300 	asr.w	r3, r1, r0
 8008638:	e7ec      	b.n	8008614 <__ulp+0x18>
 800863a:	f1a0 0114 	sub.w	r1, r0, #20
 800863e:	291e      	cmp	r1, #30
 8008640:	bfda      	itte	le
 8008642:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8008646:	fa20 f101 	lsrle.w	r1, r0, r1
 800864a:	2101      	movgt	r1, #1
 800864c:	460a      	mov	r2, r1
 800864e:	e7e1      	b.n	8008614 <__ulp+0x18>
 8008650:	7ff00000 	.word	0x7ff00000

08008654 <__b2d>:
 8008654:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008656:	6905      	ldr	r5, [r0, #16]
 8008658:	f100 0714 	add.w	r7, r0, #20
 800865c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8008660:	1f2e      	subs	r6, r5, #4
 8008662:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8008666:	4620      	mov	r0, r4
 8008668:	f7ff fd48 	bl	80080fc <__hi0bits>
 800866c:	f1c0 0320 	rsb	r3, r0, #32
 8008670:	280a      	cmp	r0, #10
 8008672:	f8df c07c 	ldr.w	ip, [pc, #124]	; 80086f0 <__b2d+0x9c>
 8008676:	600b      	str	r3, [r1, #0]
 8008678:	dc14      	bgt.n	80086a4 <__b2d+0x50>
 800867a:	f1c0 0e0b 	rsb	lr, r0, #11
 800867e:	fa24 f10e 	lsr.w	r1, r4, lr
 8008682:	42b7      	cmp	r7, r6
 8008684:	ea41 030c 	orr.w	r3, r1, ip
 8008688:	bf34      	ite	cc
 800868a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800868e:	2100      	movcs	r1, #0
 8008690:	3015      	adds	r0, #21
 8008692:	fa04 f000 	lsl.w	r0, r4, r0
 8008696:	fa21 f10e 	lsr.w	r1, r1, lr
 800869a:	ea40 0201 	orr.w	r2, r0, r1
 800869e:	ec43 2b10 	vmov	d0, r2, r3
 80086a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80086a4:	42b7      	cmp	r7, r6
 80086a6:	bf3a      	itte	cc
 80086a8:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80086ac:	f1a5 0608 	subcc.w	r6, r5, #8
 80086b0:	2100      	movcs	r1, #0
 80086b2:	380b      	subs	r0, #11
 80086b4:	d017      	beq.n	80086e6 <__b2d+0x92>
 80086b6:	f1c0 0c20 	rsb	ip, r0, #32
 80086ba:	fa04 f500 	lsl.w	r5, r4, r0
 80086be:	42be      	cmp	r6, r7
 80086c0:	fa21 f40c 	lsr.w	r4, r1, ip
 80086c4:	ea45 0504 	orr.w	r5, r5, r4
 80086c8:	bf8c      	ite	hi
 80086ca:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 80086ce:	2400      	movls	r4, #0
 80086d0:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 80086d4:	fa01 f000 	lsl.w	r0, r1, r0
 80086d8:	fa24 f40c 	lsr.w	r4, r4, ip
 80086dc:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80086e0:	ea40 0204 	orr.w	r2, r0, r4
 80086e4:	e7db      	b.n	800869e <__b2d+0x4a>
 80086e6:	ea44 030c 	orr.w	r3, r4, ip
 80086ea:	460a      	mov	r2, r1
 80086ec:	e7d7      	b.n	800869e <__b2d+0x4a>
 80086ee:	bf00      	nop
 80086f0:	3ff00000 	.word	0x3ff00000

080086f4 <__d2b>:
 80086f4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80086f8:	4689      	mov	r9, r1
 80086fa:	2101      	movs	r1, #1
 80086fc:	ec57 6b10 	vmov	r6, r7, d0
 8008700:	4690      	mov	r8, r2
 8008702:	f7ff fc09 	bl	8007f18 <_Balloc>
 8008706:	4604      	mov	r4, r0
 8008708:	b930      	cbnz	r0, 8008718 <__d2b+0x24>
 800870a:	4602      	mov	r2, r0
 800870c:	4b25      	ldr	r3, [pc, #148]	; (80087a4 <__d2b+0xb0>)
 800870e:	4826      	ldr	r0, [pc, #152]	; (80087a8 <__d2b+0xb4>)
 8008710:	f240 310a 	movw	r1, #778	; 0x30a
 8008714:	f001 f8b0 	bl	8009878 <__assert_func>
 8008718:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800871c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008720:	bb35      	cbnz	r5, 8008770 <__d2b+0x7c>
 8008722:	2e00      	cmp	r6, #0
 8008724:	9301      	str	r3, [sp, #4]
 8008726:	d028      	beq.n	800877a <__d2b+0x86>
 8008728:	4668      	mov	r0, sp
 800872a:	9600      	str	r6, [sp, #0]
 800872c:	f7ff fd06 	bl	800813c <__lo0bits>
 8008730:	9900      	ldr	r1, [sp, #0]
 8008732:	b300      	cbz	r0, 8008776 <__d2b+0x82>
 8008734:	9a01      	ldr	r2, [sp, #4]
 8008736:	f1c0 0320 	rsb	r3, r0, #32
 800873a:	fa02 f303 	lsl.w	r3, r2, r3
 800873e:	430b      	orrs	r3, r1
 8008740:	40c2      	lsrs	r2, r0
 8008742:	6163      	str	r3, [r4, #20]
 8008744:	9201      	str	r2, [sp, #4]
 8008746:	9b01      	ldr	r3, [sp, #4]
 8008748:	61a3      	str	r3, [r4, #24]
 800874a:	2b00      	cmp	r3, #0
 800874c:	bf14      	ite	ne
 800874e:	2202      	movne	r2, #2
 8008750:	2201      	moveq	r2, #1
 8008752:	6122      	str	r2, [r4, #16]
 8008754:	b1d5      	cbz	r5, 800878c <__d2b+0x98>
 8008756:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800875a:	4405      	add	r5, r0
 800875c:	f8c9 5000 	str.w	r5, [r9]
 8008760:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008764:	f8c8 0000 	str.w	r0, [r8]
 8008768:	4620      	mov	r0, r4
 800876a:	b003      	add	sp, #12
 800876c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008770:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008774:	e7d5      	b.n	8008722 <__d2b+0x2e>
 8008776:	6161      	str	r1, [r4, #20]
 8008778:	e7e5      	b.n	8008746 <__d2b+0x52>
 800877a:	a801      	add	r0, sp, #4
 800877c:	f7ff fcde 	bl	800813c <__lo0bits>
 8008780:	9b01      	ldr	r3, [sp, #4]
 8008782:	6163      	str	r3, [r4, #20]
 8008784:	2201      	movs	r2, #1
 8008786:	6122      	str	r2, [r4, #16]
 8008788:	3020      	adds	r0, #32
 800878a:	e7e3      	b.n	8008754 <__d2b+0x60>
 800878c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008790:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008794:	f8c9 0000 	str.w	r0, [r9]
 8008798:	6918      	ldr	r0, [r3, #16]
 800879a:	f7ff fcaf 	bl	80080fc <__hi0bits>
 800879e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80087a2:	e7df      	b.n	8008764 <__d2b+0x70>
 80087a4:	08009ef8 	.word	0x08009ef8
 80087a8:	08009fe8 	.word	0x08009fe8

080087ac <__ratio>:
 80087ac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087b0:	4688      	mov	r8, r1
 80087b2:	4669      	mov	r1, sp
 80087b4:	4681      	mov	r9, r0
 80087b6:	f7ff ff4d 	bl	8008654 <__b2d>
 80087ba:	a901      	add	r1, sp, #4
 80087bc:	4640      	mov	r0, r8
 80087be:	ec55 4b10 	vmov	r4, r5, d0
 80087c2:	f7ff ff47 	bl	8008654 <__b2d>
 80087c6:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80087ca:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80087ce:	eba3 0c02 	sub.w	ip, r3, r2
 80087d2:	e9dd 3200 	ldrd	r3, r2, [sp]
 80087d6:	1a9b      	subs	r3, r3, r2
 80087d8:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80087dc:	ec51 0b10 	vmov	r0, r1, d0
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	bfd6      	itet	le
 80087e4:	460a      	movle	r2, r1
 80087e6:	462a      	movgt	r2, r5
 80087e8:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80087ec:	468b      	mov	fp, r1
 80087ee:	462f      	mov	r7, r5
 80087f0:	bfd4      	ite	le
 80087f2:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 80087f6:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80087fa:	4620      	mov	r0, r4
 80087fc:	ee10 2a10 	vmov	r2, s0
 8008800:	465b      	mov	r3, fp
 8008802:	4639      	mov	r1, r7
 8008804:	f7f8 f822 	bl	800084c <__aeabi_ddiv>
 8008808:	ec41 0b10 	vmov	d0, r0, r1
 800880c:	b003      	add	sp, #12
 800880e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008812 <__copybits>:
 8008812:	3901      	subs	r1, #1
 8008814:	b570      	push	{r4, r5, r6, lr}
 8008816:	1149      	asrs	r1, r1, #5
 8008818:	6914      	ldr	r4, [r2, #16]
 800881a:	3101      	adds	r1, #1
 800881c:	f102 0314 	add.w	r3, r2, #20
 8008820:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8008824:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8008828:	1f05      	subs	r5, r0, #4
 800882a:	42a3      	cmp	r3, r4
 800882c:	d30c      	bcc.n	8008848 <__copybits+0x36>
 800882e:	1aa3      	subs	r3, r4, r2
 8008830:	3b11      	subs	r3, #17
 8008832:	f023 0303 	bic.w	r3, r3, #3
 8008836:	3211      	adds	r2, #17
 8008838:	42a2      	cmp	r2, r4
 800883a:	bf88      	it	hi
 800883c:	2300      	movhi	r3, #0
 800883e:	4418      	add	r0, r3
 8008840:	2300      	movs	r3, #0
 8008842:	4288      	cmp	r0, r1
 8008844:	d305      	bcc.n	8008852 <__copybits+0x40>
 8008846:	bd70      	pop	{r4, r5, r6, pc}
 8008848:	f853 6b04 	ldr.w	r6, [r3], #4
 800884c:	f845 6f04 	str.w	r6, [r5, #4]!
 8008850:	e7eb      	b.n	800882a <__copybits+0x18>
 8008852:	f840 3b04 	str.w	r3, [r0], #4
 8008856:	e7f4      	b.n	8008842 <__copybits+0x30>

08008858 <__any_on>:
 8008858:	f100 0214 	add.w	r2, r0, #20
 800885c:	6900      	ldr	r0, [r0, #16]
 800885e:	114b      	asrs	r3, r1, #5
 8008860:	4298      	cmp	r0, r3
 8008862:	b510      	push	{r4, lr}
 8008864:	db11      	blt.n	800888a <__any_on+0x32>
 8008866:	dd0a      	ble.n	800887e <__any_on+0x26>
 8008868:	f011 011f 	ands.w	r1, r1, #31
 800886c:	d007      	beq.n	800887e <__any_on+0x26>
 800886e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8008872:	fa24 f001 	lsr.w	r0, r4, r1
 8008876:	fa00 f101 	lsl.w	r1, r0, r1
 800887a:	428c      	cmp	r4, r1
 800887c:	d10b      	bne.n	8008896 <__any_on+0x3e>
 800887e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008882:	4293      	cmp	r3, r2
 8008884:	d803      	bhi.n	800888e <__any_on+0x36>
 8008886:	2000      	movs	r0, #0
 8008888:	bd10      	pop	{r4, pc}
 800888a:	4603      	mov	r3, r0
 800888c:	e7f7      	b.n	800887e <__any_on+0x26>
 800888e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008892:	2900      	cmp	r1, #0
 8008894:	d0f5      	beq.n	8008882 <__any_on+0x2a>
 8008896:	2001      	movs	r0, #1
 8008898:	e7f6      	b.n	8008888 <__any_on+0x30>

0800889a <_calloc_r>:
 800889a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800889c:	fba1 2402 	umull	r2, r4, r1, r2
 80088a0:	b94c      	cbnz	r4, 80088b6 <_calloc_r+0x1c>
 80088a2:	4611      	mov	r1, r2
 80088a4:	9201      	str	r2, [sp, #4]
 80088a6:	f000 f87b 	bl	80089a0 <_malloc_r>
 80088aa:	9a01      	ldr	r2, [sp, #4]
 80088ac:	4605      	mov	r5, r0
 80088ae:	b930      	cbnz	r0, 80088be <_calloc_r+0x24>
 80088b0:	4628      	mov	r0, r5
 80088b2:	b003      	add	sp, #12
 80088b4:	bd30      	pop	{r4, r5, pc}
 80088b6:	220c      	movs	r2, #12
 80088b8:	6002      	str	r2, [r0, #0]
 80088ba:	2500      	movs	r5, #0
 80088bc:	e7f8      	b.n	80088b0 <_calloc_r+0x16>
 80088be:	4621      	mov	r1, r4
 80088c0:	f7fb ff84 	bl	80047cc <memset>
 80088c4:	e7f4      	b.n	80088b0 <_calloc_r+0x16>
	...

080088c8 <_free_r>:
 80088c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80088ca:	2900      	cmp	r1, #0
 80088cc:	d044      	beq.n	8008958 <_free_r+0x90>
 80088ce:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80088d2:	9001      	str	r0, [sp, #4]
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	f1a1 0404 	sub.w	r4, r1, #4
 80088da:	bfb8      	it	lt
 80088dc:	18e4      	addlt	r4, r4, r3
 80088de:	f001 f837 	bl	8009950 <__malloc_lock>
 80088e2:	4a1e      	ldr	r2, [pc, #120]	; (800895c <_free_r+0x94>)
 80088e4:	9801      	ldr	r0, [sp, #4]
 80088e6:	6813      	ldr	r3, [r2, #0]
 80088e8:	b933      	cbnz	r3, 80088f8 <_free_r+0x30>
 80088ea:	6063      	str	r3, [r4, #4]
 80088ec:	6014      	str	r4, [r2, #0]
 80088ee:	b003      	add	sp, #12
 80088f0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80088f4:	f001 b832 	b.w	800995c <__malloc_unlock>
 80088f8:	42a3      	cmp	r3, r4
 80088fa:	d908      	bls.n	800890e <_free_r+0x46>
 80088fc:	6825      	ldr	r5, [r4, #0]
 80088fe:	1961      	adds	r1, r4, r5
 8008900:	428b      	cmp	r3, r1
 8008902:	bf01      	itttt	eq
 8008904:	6819      	ldreq	r1, [r3, #0]
 8008906:	685b      	ldreq	r3, [r3, #4]
 8008908:	1949      	addeq	r1, r1, r5
 800890a:	6021      	streq	r1, [r4, #0]
 800890c:	e7ed      	b.n	80088ea <_free_r+0x22>
 800890e:	461a      	mov	r2, r3
 8008910:	685b      	ldr	r3, [r3, #4]
 8008912:	b10b      	cbz	r3, 8008918 <_free_r+0x50>
 8008914:	42a3      	cmp	r3, r4
 8008916:	d9fa      	bls.n	800890e <_free_r+0x46>
 8008918:	6811      	ldr	r1, [r2, #0]
 800891a:	1855      	adds	r5, r2, r1
 800891c:	42a5      	cmp	r5, r4
 800891e:	d10b      	bne.n	8008938 <_free_r+0x70>
 8008920:	6824      	ldr	r4, [r4, #0]
 8008922:	4421      	add	r1, r4
 8008924:	1854      	adds	r4, r2, r1
 8008926:	42a3      	cmp	r3, r4
 8008928:	6011      	str	r1, [r2, #0]
 800892a:	d1e0      	bne.n	80088ee <_free_r+0x26>
 800892c:	681c      	ldr	r4, [r3, #0]
 800892e:	685b      	ldr	r3, [r3, #4]
 8008930:	6053      	str	r3, [r2, #4]
 8008932:	4421      	add	r1, r4
 8008934:	6011      	str	r1, [r2, #0]
 8008936:	e7da      	b.n	80088ee <_free_r+0x26>
 8008938:	d902      	bls.n	8008940 <_free_r+0x78>
 800893a:	230c      	movs	r3, #12
 800893c:	6003      	str	r3, [r0, #0]
 800893e:	e7d6      	b.n	80088ee <_free_r+0x26>
 8008940:	6825      	ldr	r5, [r4, #0]
 8008942:	1961      	adds	r1, r4, r5
 8008944:	428b      	cmp	r3, r1
 8008946:	bf04      	itt	eq
 8008948:	6819      	ldreq	r1, [r3, #0]
 800894a:	685b      	ldreq	r3, [r3, #4]
 800894c:	6063      	str	r3, [r4, #4]
 800894e:	bf04      	itt	eq
 8008950:	1949      	addeq	r1, r1, r5
 8008952:	6021      	streq	r1, [r4, #0]
 8008954:	6054      	str	r4, [r2, #4]
 8008956:	e7ca      	b.n	80088ee <_free_r+0x26>
 8008958:	b003      	add	sp, #12
 800895a:	bd30      	pop	{r4, r5, pc}
 800895c:	20000310 	.word	0x20000310

08008960 <sbrk_aligned>:
 8008960:	b570      	push	{r4, r5, r6, lr}
 8008962:	4e0e      	ldr	r6, [pc, #56]	; (800899c <sbrk_aligned+0x3c>)
 8008964:	460c      	mov	r4, r1
 8008966:	6831      	ldr	r1, [r6, #0]
 8008968:	4605      	mov	r5, r0
 800896a:	b911      	cbnz	r1, 8008972 <sbrk_aligned+0x12>
 800896c:	f000 fe80 	bl	8009670 <_sbrk_r>
 8008970:	6030      	str	r0, [r6, #0]
 8008972:	4621      	mov	r1, r4
 8008974:	4628      	mov	r0, r5
 8008976:	f000 fe7b 	bl	8009670 <_sbrk_r>
 800897a:	1c43      	adds	r3, r0, #1
 800897c:	d00a      	beq.n	8008994 <sbrk_aligned+0x34>
 800897e:	1cc4      	adds	r4, r0, #3
 8008980:	f024 0403 	bic.w	r4, r4, #3
 8008984:	42a0      	cmp	r0, r4
 8008986:	d007      	beq.n	8008998 <sbrk_aligned+0x38>
 8008988:	1a21      	subs	r1, r4, r0
 800898a:	4628      	mov	r0, r5
 800898c:	f000 fe70 	bl	8009670 <_sbrk_r>
 8008990:	3001      	adds	r0, #1
 8008992:	d101      	bne.n	8008998 <sbrk_aligned+0x38>
 8008994:	f04f 34ff 	mov.w	r4, #4294967295
 8008998:	4620      	mov	r0, r4
 800899a:	bd70      	pop	{r4, r5, r6, pc}
 800899c:	20000314 	.word	0x20000314

080089a0 <_malloc_r>:
 80089a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80089a4:	1ccd      	adds	r5, r1, #3
 80089a6:	f025 0503 	bic.w	r5, r5, #3
 80089aa:	3508      	adds	r5, #8
 80089ac:	2d0c      	cmp	r5, #12
 80089ae:	bf38      	it	cc
 80089b0:	250c      	movcc	r5, #12
 80089b2:	2d00      	cmp	r5, #0
 80089b4:	4607      	mov	r7, r0
 80089b6:	db01      	blt.n	80089bc <_malloc_r+0x1c>
 80089b8:	42a9      	cmp	r1, r5
 80089ba:	d905      	bls.n	80089c8 <_malloc_r+0x28>
 80089bc:	230c      	movs	r3, #12
 80089be:	603b      	str	r3, [r7, #0]
 80089c0:	2600      	movs	r6, #0
 80089c2:	4630      	mov	r0, r6
 80089c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80089c8:	4e2e      	ldr	r6, [pc, #184]	; (8008a84 <_malloc_r+0xe4>)
 80089ca:	f000 ffc1 	bl	8009950 <__malloc_lock>
 80089ce:	6833      	ldr	r3, [r6, #0]
 80089d0:	461c      	mov	r4, r3
 80089d2:	bb34      	cbnz	r4, 8008a22 <_malloc_r+0x82>
 80089d4:	4629      	mov	r1, r5
 80089d6:	4638      	mov	r0, r7
 80089d8:	f7ff ffc2 	bl	8008960 <sbrk_aligned>
 80089dc:	1c43      	adds	r3, r0, #1
 80089de:	4604      	mov	r4, r0
 80089e0:	d14d      	bne.n	8008a7e <_malloc_r+0xde>
 80089e2:	6834      	ldr	r4, [r6, #0]
 80089e4:	4626      	mov	r6, r4
 80089e6:	2e00      	cmp	r6, #0
 80089e8:	d140      	bne.n	8008a6c <_malloc_r+0xcc>
 80089ea:	6823      	ldr	r3, [r4, #0]
 80089ec:	4631      	mov	r1, r6
 80089ee:	4638      	mov	r0, r7
 80089f0:	eb04 0803 	add.w	r8, r4, r3
 80089f4:	f000 fe3c 	bl	8009670 <_sbrk_r>
 80089f8:	4580      	cmp	r8, r0
 80089fa:	d13a      	bne.n	8008a72 <_malloc_r+0xd2>
 80089fc:	6821      	ldr	r1, [r4, #0]
 80089fe:	3503      	adds	r5, #3
 8008a00:	1a6d      	subs	r5, r5, r1
 8008a02:	f025 0503 	bic.w	r5, r5, #3
 8008a06:	3508      	adds	r5, #8
 8008a08:	2d0c      	cmp	r5, #12
 8008a0a:	bf38      	it	cc
 8008a0c:	250c      	movcc	r5, #12
 8008a0e:	4629      	mov	r1, r5
 8008a10:	4638      	mov	r0, r7
 8008a12:	f7ff ffa5 	bl	8008960 <sbrk_aligned>
 8008a16:	3001      	adds	r0, #1
 8008a18:	d02b      	beq.n	8008a72 <_malloc_r+0xd2>
 8008a1a:	6823      	ldr	r3, [r4, #0]
 8008a1c:	442b      	add	r3, r5
 8008a1e:	6023      	str	r3, [r4, #0]
 8008a20:	e00e      	b.n	8008a40 <_malloc_r+0xa0>
 8008a22:	6822      	ldr	r2, [r4, #0]
 8008a24:	1b52      	subs	r2, r2, r5
 8008a26:	d41e      	bmi.n	8008a66 <_malloc_r+0xc6>
 8008a28:	2a0b      	cmp	r2, #11
 8008a2a:	d916      	bls.n	8008a5a <_malloc_r+0xba>
 8008a2c:	1961      	adds	r1, r4, r5
 8008a2e:	42a3      	cmp	r3, r4
 8008a30:	6025      	str	r5, [r4, #0]
 8008a32:	bf18      	it	ne
 8008a34:	6059      	strne	r1, [r3, #4]
 8008a36:	6863      	ldr	r3, [r4, #4]
 8008a38:	bf08      	it	eq
 8008a3a:	6031      	streq	r1, [r6, #0]
 8008a3c:	5162      	str	r2, [r4, r5]
 8008a3e:	604b      	str	r3, [r1, #4]
 8008a40:	4638      	mov	r0, r7
 8008a42:	f104 060b 	add.w	r6, r4, #11
 8008a46:	f000 ff89 	bl	800995c <__malloc_unlock>
 8008a4a:	f026 0607 	bic.w	r6, r6, #7
 8008a4e:	1d23      	adds	r3, r4, #4
 8008a50:	1af2      	subs	r2, r6, r3
 8008a52:	d0b6      	beq.n	80089c2 <_malloc_r+0x22>
 8008a54:	1b9b      	subs	r3, r3, r6
 8008a56:	50a3      	str	r3, [r4, r2]
 8008a58:	e7b3      	b.n	80089c2 <_malloc_r+0x22>
 8008a5a:	6862      	ldr	r2, [r4, #4]
 8008a5c:	42a3      	cmp	r3, r4
 8008a5e:	bf0c      	ite	eq
 8008a60:	6032      	streq	r2, [r6, #0]
 8008a62:	605a      	strne	r2, [r3, #4]
 8008a64:	e7ec      	b.n	8008a40 <_malloc_r+0xa0>
 8008a66:	4623      	mov	r3, r4
 8008a68:	6864      	ldr	r4, [r4, #4]
 8008a6a:	e7b2      	b.n	80089d2 <_malloc_r+0x32>
 8008a6c:	4634      	mov	r4, r6
 8008a6e:	6876      	ldr	r6, [r6, #4]
 8008a70:	e7b9      	b.n	80089e6 <_malloc_r+0x46>
 8008a72:	230c      	movs	r3, #12
 8008a74:	603b      	str	r3, [r7, #0]
 8008a76:	4638      	mov	r0, r7
 8008a78:	f000 ff70 	bl	800995c <__malloc_unlock>
 8008a7c:	e7a1      	b.n	80089c2 <_malloc_r+0x22>
 8008a7e:	6025      	str	r5, [r4, #0]
 8008a80:	e7de      	b.n	8008a40 <_malloc_r+0xa0>
 8008a82:	bf00      	nop
 8008a84:	20000310 	.word	0x20000310

08008a88 <__ssputs_r>:
 8008a88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008a8c:	688e      	ldr	r6, [r1, #8]
 8008a8e:	429e      	cmp	r6, r3
 8008a90:	4682      	mov	sl, r0
 8008a92:	460c      	mov	r4, r1
 8008a94:	4690      	mov	r8, r2
 8008a96:	461f      	mov	r7, r3
 8008a98:	d838      	bhi.n	8008b0c <__ssputs_r+0x84>
 8008a9a:	898a      	ldrh	r2, [r1, #12]
 8008a9c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008aa0:	d032      	beq.n	8008b08 <__ssputs_r+0x80>
 8008aa2:	6825      	ldr	r5, [r4, #0]
 8008aa4:	6909      	ldr	r1, [r1, #16]
 8008aa6:	eba5 0901 	sub.w	r9, r5, r1
 8008aaa:	6965      	ldr	r5, [r4, #20]
 8008aac:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008ab0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008ab4:	3301      	adds	r3, #1
 8008ab6:	444b      	add	r3, r9
 8008ab8:	106d      	asrs	r5, r5, #1
 8008aba:	429d      	cmp	r5, r3
 8008abc:	bf38      	it	cc
 8008abe:	461d      	movcc	r5, r3
 8008ac0:	0553      	lsls	r3, r2, #21
 8008ac2:	d531      	bpl.n	8008b28 <__ssputs_r+0xa0>
 8008ac4:	4629      	mov	r1, r5
 8008ac6:	f7ff ff6b 	bl	80089a0 <_malloc_r>
 8008aca:	4606      	mov	r6, r0
 8008acc:	b950      	cbnz	r0, 8008ae4 <__ssputs_r+0x5c>
 8008ace:	230c      	movs	r3, #12
 8008ad0:	f8ca 3000 	str.w	r3, [sl]
 8008ad4:	89a3      	ldrh	r3, [r4, #12]
 8008ad6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008ada:	81a3      	strh	r3, [r4, #12]
 8008adc:	f04f 30ff 	mov.w	r0, #4294967295
 8008ae0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ae4:	6921      	ldr	r1, [r4, #16]
 8008ae6:	464a      	mov	r2, r9
 8008ae8:	f7ff fa08 	bl	8007efc <memcpy>
 8008aec:	89a3      	ldrh	r3, [r4, #12]
 8008aee:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008af2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008af6:	81a3      	strh	r3, [r4, #12]
 8008af8:	6126      	str	r6, [r4, #16]
 8008afa:	6165      	str	r5, [r4, #20]
 8008afc:	444e      	add	r6, r9
 8008afe:	eba5 0509 	sub.w	r5, r5, r9
 8008b02:	6026      	str	r6, [r4, #0]
 8008b04:	60a5      	str	r5, [r4, #8]
 8008b06:	463e      	mov	r6, r7
 8008b08:	42be      	cmp	r6, r7
 8008b0a:	d900      	bls.n	8008b0e <__ssputs_r+0x86>
 8008b0c:	463e      	mov	r6, r7
 8008b0e:	6820      	ldr	r0, [r4, #0]
 8008b10:	4632      	mov	r2, r6
 8008b12:	4641      	mov	r1, r8
 8008b14:	f000 ff02 	bl	800991c <memmove>
 8008b18:	68a3      	ldr	r3, [r4, #8]
 8008b1a:	1b9b      	subs	r3, r3, r6
 8008b1c:	60a3      	str	r3, [r4, #8]
 8008b1e:	6823      	ldr	r3, [r4, #0]
 8008b20:	4433      	add	r3, r6
 8008b22:	6023      	str	r3, [r4, #0]
 8008b24:	2000      	movs	r0, #0
 8008b26:	e7db      	b.n	8008ae0 <__ssputs_r+0x58>
 8008b28:	462a      	mov	r2, r5
 8008b2a:	f000 ff1d 	bl	8009968 <_realloc_r>
 8008b2e:	4606      	mov	r6, r0
 8008b30:	2800      	cmp	r0, #0
 8008b32:	d1e1      	bne.n	8008af8 <__ssputs_r+0x70>
 8008b34:	6921      	ldr	r1, [r4, #16]
 8008b36:	4650      	mov	r0, sl
 8008b38:	f7ff fec6 	bl	80088c8 <_free_r>
 8008b3c:	e7c7      	b.n	8008ace <__ssputs_r+0x46>
	...

08008b40 <_svfiprintf_r>:
 8008b40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b44:	4698      	mov	r8, r3
 8008b46:	898b      	ldrh	r3, [r1, #12]
 8008b48:	061b      	lsls	r3, r3, #24
 8008b4a:	b09d      	sub	sp, #116	; 0x74
 8008b4c:	4607      	mov	r7, r0
 8008b4e:	460d      	mov	r5, r1
 8008b50:	4614      	mov	r4, r2
 8008b52:	d50e      	bpl.n	8008b72 <_svfiprintf_r+0x32>
 8008b54:	690b      	ldr	r3, [r1, #16]
 8008b56:	b963      	cbnz	r3, 8008b72 <_svfiprintf_r+0x32>
 8008b58:	2140      	movs	r1, #64	; 0x40
 8008b5a:	f7ff ff21 	bl	80089a0 <_malloc_r>
 8008b5e:	6028      	str	r0, [r5, #0]
 8008b60:	6128      	str	r0, [r5, #16]
 8008b62:	b920      	cbnz	r0, 8008b6e <_svfiprintf_r+0x2e>
 8008b64:	230c      	movs	r3, #12
 8008b66:	603b      	str	r3, [r7, #0]
 8008b68:	f04f 30ff 	mov.w	r0, #4294967295
 8008b6c:	e0d1      	b.n	8008d12 <_svfiprintf_r+0x1d2>
 8008b6e:	2340      	movs	r3, #64	; 0x40
 8008b70:	616b      	str	r3, [r5, #20]
 8008b72:	2300      	movs	r3, #0
 8008b74:	9309      	str	r3, [sp, #36]	; 0x24
 8008b76:	2320      	movs	r3, #32
 8008b78:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008b7c:	f8cd 800c 	str.w	r8, [sp, #12]
 8008b80:	2330      	movs	r3, #48	; 0x30
 8008b82:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008d2c <_svfiprintf_r+0x1ec>
 8008b86:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008b8a:	f04f 0901 	mov.w	r9, #1
 8008b8e:	4623      	mov	r3, r4
 8008b90:	469a      	mov	sl, r3
 8008b92:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008b96:	b10a      	cbz	r2, 8008b9c <_svfiprintf_r+0x5c>
 8008b98:	2a25      	cmp	r2, #37	; 0x25
 8008b9a:	d1f9      	bne.n	8008b90 <_svfiprintf_r+0x50>
 8008b9c:	ebba 0b04 	subs.w	fp, sl, r4
 8008ba0:	d00b      	beq.n	8008bba <_svfiprintf_r+0x7a>
 8008ba2:	465b      	mov	r3, fp
 8008ba4:	4622      	mov	r2, r4
 8008ba6:	4629      	mov	r1, r5
 8008ba8:	4638      	mov	r0, r7
 8008baa:	f7ff ff6d 	bl	8008a88 <__ssputs_r>
 8008bae:	3001      	adds	r0, #1
 8008bb0:	f000 80aa 	beq.w	8008d08 <_svfiprintf_r+0x1c8>
 8008bb4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008bb6:	445a      	add	r2, fp
 8008bb8:	9209      	str	r2, [sp, #36]	; 0x24
 8008bba:	f89a 3000 	ldrb.w	r3, [sl]
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	f000 80a2 	beq.w	8008d08 <_svfiprintf_r+0x1c8>
 8008bc4:	2300      	movs	r3, #0
 8008bc6:	f04f 32ff 	mov.w	r2, #4294967295
 8008bca:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008bce:	f10a 0a01 	add.w	sl, sl, #1
 8008bd2:	9304      	str	r3, [sp, #16]
 8008bd4:	9307      	str	r3, [sp, #28]
 8008bd6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008bda:	931a      	str	r3, [sp, #104]	; 0x68
 8008bdc:	4654      	mov	r4, sl
 8008bde:	2205      	movs	r2, #5
 8008be0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008be4:	4851      	ldr	r0, [pc, #324]	; (8008d2c <_svfiprintf_r+0x1ec>)
 8008be6:	f7f7 fafb 	bl	80001e0 <memchr>
 8008bea:	9a04      	ldr	r2, [sp, #16]
 8008bec:	b9d8      	cbnz	r0, 8008c26 <_svfiprintf_r+0xe6>
 8008bee:	06d0      	lsls	r0, r2, #27
 8008bf0:	bf44      	itt	mi
 8008bf2:	2320      	movmi	r3, #32
 8008bf4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008bf8:	0711      	lsls	r1, r2, #28
 8008bfa:	bf44      	itt	mi
 8008bfc:	232b      	movmi	r3, #43	; 0x2b
 8008bfe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008c02:	f89a 3000 	ldrb.w	r3, [sl]
 8008c06:	2b2a      	cmp	r3, #42	; 0x2a
 8008c08:	d015      	beq.n	8008c36 <_svfiprintf_r+0xf6>
 8008c0a:	9a07      	ldr	r2, [sp, #28]
 8008c0c:	4654      	mov	r4, sl
 8008c0e:	2000      	movs	r0, #0
 8008c10:	f04f 0c0a 	mov.w	ip, #10
 8008c14:	4621      	mov	r1, r4
 8008c16:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008c1a:	3b30      	subs	r3, #48	; 0x30
 8008c1c:	2b09      	cmp	r3, #9
 8008c1e:	d94e      	bls.n	8008cbe <_svfiprintf_r+0x17e>
 8008c20:	b1b0      	cbz	r0, 8008c50 <_svfiprintf_r+0x110>
 8008c22:	9207      	str	r2, [sp, #28]
 8008c24:	e014      	b.n	8008c50 <_svfiprintf_r+0x110>
 8008c26:	eba0 0308 	sub.w	r3, r0, r8
 8008c2a:	fa09 f303 	lsl.w	r3, r9, r3
 8008c2e:	4313      	orrs	r3, r2
 8008c30:	9304      	str	r3, [sp, #16]
 8008c32:	46a2      	mov	sl, r4
 8008c34:	e7d2      	b.n	8008bdc <_svfiprintf_r+0x9c>
 8008c36:	9b03      	ldr	r3, [sp, #12]
 8008c38:	1d19      	adds	r1, r3, #4
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	9103      	str	r1, [sp, #12]
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	bfbb      	ittet	lt
 8008c42:	425b      	neglt	r3, r3
 8008c44:	f042 0202 	orrlt.w	r2, r2, #2
 8008c48:	9307      	strge	r3, [sp, #28]
 8008c4a:	9307      	strlt	r3, [sp, #28]
 8008c4c:	bfb8      	it	lt
 8008c4e:	9204      	strlt	r2, [sp, #16]
 8008c50:	7823      	ldrb	r3, [r4, #0]
 8008c52:	2b2e      	cmp	r3, #46	; 0x2e
 8008c54:	d10c      	bne.n	8008c70 <_svfiprintf_r+0x130>
 8008c56:	7863      	ldrb	r3, [r4, #1]
 8008c58:	2b2a      	cmp	r3, #42	; 0x2a
 8008c5a:	d135      	bne.n	8008cc8 <_svfiprintf_r+0x188>
 8008c5c:	9b03      	ldr	r3, [sp, #12]
 8008c5e:	1d1a      	adds	r2, r3, #4
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	9203      	str	r2, [sp, #12]
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	bfb8      	it	lt
 8008c68:	f04f 33ff 	movlt.w	r3, #4294967295
 8008c6c:	3402      	adds	r4, #2
 8008c6e:	9305      	str	r3, [sp, #20]
 8008c70:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008d3c <_svfiprintf_r+0x1fc>
 8008c74:	7821      	ldrb	r1, [r4, #0]
 8008c76:	2203      	movs	r2, #3
 8008c78:	4650      	mov	r0, sl
 8008c7a:	f7f7 fab1 	bl	80001e0 <memchr>
 8008c7e:	b140      	cbz	r0, 8008c92 <_svfiprintf_r+0x152>
 8008c80:	2340      	movs	r3, #64	; 0x40
 8008c82:	eba0 000a 	sub.w	r0, r0, sl
 8008c86:	fa03 f000 	lsl.w	r0, r3, r0
 8008c8a:	9b04      	ldr	r3, [sp, #16]
 8008c8c:	4303      	orrs	r3, r0
 8008c8e:	3401      	adds	r4, #1
 8008c90:	9304      	str	r3, [sp, #16]
 8008c92:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008c96:	4826      	ldr	r0, [pc, #152]	; (8008d30 <_svfiprintf_r+0x1f0>)
 8008c98:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008c9c:	2206      	movs	r2, #6
 8008c9e:	f7f7 fa9f 	bl	80001e0 <memchr>
 8008ca2:	2800      	cmp	r0, #0
 8008ca4:	d038      	beq.n	8008d18 <_svfiprintf_r+0x1d8>
 8008ca6:	4b23      	ldr	r3, [pc, #140]	; (8008d34 <_svfiprintf_r+0x1f4>)
 8008ca8:	bb1b      	cbnz	r3, 8008cf2 <_svfiprintf_r+0x1b2>
 8008caa:	9b03      	ldr	r3, [sp, #12]
 8008cac:	3307      	adds	r3, #7
 8008cae:	f023 0307 	bic.w	r3, r3, #7
 8008cb2:	3308      	adds	r3, #8
 8008cb4:	9303      	str	r3, [sp, #12]
 8008cb6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008cb8:	4433      	add	r3, r6
 8008cba:	9309      	str	r3, [sp, #36]	; 0x24
 8008cbc:	e767      	b.n	8008b8e <_svfiprintf_r+0x4e>
 8008cbe:	fb0c 3202 	mla	r2, ip, r2, r3
 8008cc2:	460c      	mov	r4, r1
 8008cc4:	2001      	movs	r0, #1
 8008cc6:	e7a5      	b.n	8008c14 <_svfiprintf_r+0xd4>
 8008cc8:	2300      	movs	r3, #0
 8008cca:	3401      	adds	r4, #1
 8008ccc:	9305      	str	r3, [sp, #20]
 8008cce:	4619      	mov	r1, r3
 8008cd0:	f04f 0c0a 	mov.w	ip, #10
 8008cd4:	4620      	mov	r0, r4
 8008cd6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008cda:	3a30      	subs	r2, #48	; 0x30
 8008cdc:	2a09      	cmp	r2, #9
 8008cde:	d903      	bls.n	8008ce8 <_svfiprintf_r+0x1a8>
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d0c5      	beq.n	8008c70 <_svfiprintf_r+0x130>
 8008ce4:	9105      	str	r1, [sp, #20]
 8008ce6:	e7c3      	b.n	8008c70 <_svfiprintf_r+0x130>
 8008ce8:	fb0c 2101 	mla	r1, ip, r1, r2
 8008cec:	4604      	mov	r4, r0
 8008cee:	2301      	movs	r3, #1
 8008cf0:	e7f0      	b.n	8008cd4 <_svfiprintf_r+0x194>
 8008cf2:	ab03      	add	r3, sp, #12
 8008cf4:	9300      	str	r3, [sp, #0]
 8008cf6:	462a      	mov	r2, r5
 8008cf8:	4b0f      	ldr	r3, [pc, #60]	; (8008d38 <_svfiprintf_r+0x1f8>)
 8008cfa:	a904      	add	r1, sp, #16
 8008cfc:	4638      	mov	r0, r7
 8008cfe:	f7fb fe0d 	bl	800491c <_printf_float>
 8008d02:	1c42      	adds	r2, r0, #1
 8008d04:	4606      	mov	r6, r0
 8008d06:	d1d6      	bne.n	8008cb6 <_svfiprintf_r+0x176>
 8008d08:	89ab      	ldrh	r3, [r5, #12]
 8008d0a:	065b      	lsls	r3, r3, #25
 8008d0c:	f53f af2c 	bmi.w	8008b68 <_svfiprintf_r+0x28>
 8008d10:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008d12:	b01d      	add	sp, #116	; 0x74
 8008d14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d18:	ab03      	add	r3, sp, #12
 8008d1a:	9300      	str	r3, [sp, #0]
 8008d1c:	462a      	mov	r2, r5
 8008d1e:	4b06      	ldr	r3, [pc, #24]	; (8008d38 <_svfiprintf_r+0x1f8>)
 8008d20:	a904      	add	r1, sp, #16
 8008d22:	4638      	mov	r0, r7
 8008d24:	f7fc f89e 	bl	8004e64 <_printf_i>
 8008d28:	e7eb      	b.n	8008d02 <_svfiprintf_r+0x1c2>
 8008d2a:	bf00      	nop
 8008d2c:	0800a144 	.word	0x0800a144
 8008d30:	0800a14e 	.word	0x0800a14e
 8008d34:	0800491d 	.word	0x0800491d
 8008d38:	08008a89 	.word	0x08008a89
 8008d3c:	0800a14a 	.word	0x0800a14a

08008d40 <_sungetc_r>:
 8008d40:	b538      	push	{r3, r4, r5, lr}
 8008d42:	1c4b      	adds	r3, r1, #1
 8008d44:	4614      	mov	r4, r2
 8008d46:	d103      	bne.n	8008d50 <_sungetc_r+0x10>
 8008d48:	f04f 35ff 	mov.w	r5, #4294967295
 8008d4c:	4628      	mov	r0, r5
 8008d4e:	bd38      	pop	{r3, r4, r5, pc}
 8008d50:	8993      	ldrh	r3, [r2, #12]
 8008d52:	f023 0320 	bic.w	r3, r3, #32
 8008d56:	8193      	strh	r3, [r2, #12]
 8008d58:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008d5a:	6852      	ldr	r2, [r2, #4]
 8008d5c:	b2cd      	uxtb	r5, r1
 8008d5e:	b18b      	cbz	r3, 8008d84 <_sungetc_r+0x44>
 8008d60:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8008d62:	4293      	cmp	r3, r2
 8008d64:	dd08      	ble.n	8008d78 <_sungetc_r+0x38>
 8008d66:	6823      	ldr	r3, [r4, #0]
 8008d68:	1e5a      	subs	r2, r3, #1
 8008d6a:	6022      	str	r2, [r4, #0]
 8008d6c:	f803 5c01 	strb.w	r5, [r3, #-1]
 8008d70:	6863      	ldr	r3, [r4, #4]
 8008d72:	3301      	adds	r3, #1
 8008d74:	6063      	str	r3, [r4, #4]
 8008d76:	e7e9      	b.n	8008d4c <_sungetc_r+0xc>
 8008d78:	4621      	mov	r1, r4
 8008d7a:	f000 fd35 	bl	80097e8 <__submore>
 8008d7e:	2800      	cmp	r0, #0
 8008d80:	d0f1      	beq.n	8008d66 <_sungetc_r+0x26>
 8008d82:	e7e1      	b.n	8008d48 <_sungetc_r+0x8>
 8008d84:	6921      	ldr	r1, [r4, #16]
 8008d86:	6823      	ldr	r3, [r4, #0]
 8008d88:	b151      	cbz	r1, 8008da0 <_sungetc_r+0x60>
 8008d8a:	4299      	cmp	r1, r3
 8008d8c:	d208      	bcs.n	8008da0 <_sungetc_r+0x60>
 8008d8e:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8008d92:	42a9      	cmp	r1, r5
 8008d94:	d104      	bne.n	8008da0 <_sungetc_r+0x60>
 8008d96:	3b01      	subs	r3, #1
 8008d98:	3201      	adds	r2, #1
 8008d9a:	6023      	str	r3, [r4, #0]
 8008d9c:	6062      	str	r2, [r4, #4]
 8008d9e:	e7d5      	b.n	8008d4c <_sungetc_r+0xc>
 8008da0:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8008da4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008da8:	6363      	str	r3, [r4, #52]	; 0x34
 8008daa:	2303      	movs	r3, #3
 8008dac:	63a3      	str	r3, [r4, #56]	; 0x38
 8008dae:	4623      	mov	r3, r4
 8008db0:	f803 5f46 	strb.w	r5, [r3, #70]!
 8008db4:	6023      	str	r3, [r4, #0]
 8008db6:	2301      	movs	r3, #1
 8008db8:	e7dc      	b.n	8008d74 <_sungetc_r+0x34>

08008dba <__ssrefill_r>:
 8008dba:	b510      	push	{r4, lr}
 8008dbc:	460c      	mov	r4, r1
 8008dbe:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8008dc0:	b169      	cbz	r1, 8008dde <__ssrefill_r+0x24>
 8008dc2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008dc6:	4299      	cmp	r1, r3
 8008dc8:	d001      	beq.n	8008dce <__ssrefill_r+0x14>
 8008dca:	f7ff fd7d 	bl	80088c8 <_free_r>
 8008dce:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008dd0:	6063      	str	r3, [r4, #4]
 8008dd2:	2000      	movs	r0, #0
 8008dd4:	6360      	str	r0, [r4, #52]	; 0x34
 8008dd6:	b113      	cbz	r3, 8008dde <__ssrefill_r+0x24>
 8008dd8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8008dda:	6023      	str	r3, [r4, #0]
 8008ddc:	bd10      	pop	{r4, pc}
 8008dde:	6923      	ldr	r3, [r4, #16]
 8008de0:	6023      	str	r3, [r4, #0]
 8008de2:	2300      	movs	r3, #0
 8008de4:	6063      	str	r3, [r4, #4]
 8008de6:	89a3      	ldrh	r3, [r4, #12]
 8008de8:	f043 0320 	orr.w	r3, r3, #32
 8008dec:	81a3      	strh	r3, [r4, #12]
 8008dee:	f04f 30ff 	mov.w	r0, #4294967295
 8008df2:	e7f3      	b.n	8008ddc <__ssrefill_r+0x22>

08008df4 <__ssvfiscanf_r>:
 8008df4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008df8:	460c      	mov	r4, r1
 8008dfa:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 8008dfe:	2100      	movs	r1, #0
 8008e00:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8008e04:	49a6      	ldr	r1, [pc, #664]	; (80090a0 <__ssvfiscanf_r+0x2ac>)
 8008e06:	91a0      	str	r1, [sp, #640]	; 0x280
 8008e08:	f10d 0804 	add.w	r8, sp, #4
 8008e0c:	49a5      	ldr	r1, [pc, #660]	; (80090a4 <__ssvfiscanf_r+0x2b0>)
 8008e0e:	4fa6      	ldr	r7, [pc, #664]	; (80090a8 <__ssvfiscanf_r+0x2b4>)
 8008e10:	f8df 9298 	ldr.w	r9, [pc, #664]	; 80090ac <__ssvfiscanf_r+0x2b8>
 8008e14:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8008e18:	4606      	mov	r6, r0
 8008e1a:	91a1      	str	r1, [sp, #644]	; 0x284
 8008e1c:	9300      	str	r3, [sp, #0]
 8008e1e:	7813      	ldrb	r3, [r2, #0]
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	f000 815a 	beq.w	80090da <__ssvfiscanf_r+0x2e6>
 8008e26:	5dd9      	ldrb	r1, [r3, r7]
 8008e28:	f011 0108 	ands.w	r1, r1, #8
 8008e2c:	f102 0501 	add.w	r5, r2, #1
 8008e30:	d019      	beq.n	8008e66 <__ssvfiscanf_r+0x72>
 8008e32:	6863      	ldr	r3, [r4, #4]
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	dd0f      	ble.n	8008e58 <__ssvfiscanf_r+0x64>
 8008e38:	6823      	ldr	r3, [r4, #0]
 8008e3a:	781a      	ldrb	r2, [r3, #0]
 8008e3c:	5cba      	ldrb	r2, [r7, r2]
 8008e3e:	0712      	lsls	r2, r2, #28
 8008e40:	d401      	bmi.n	8008e46 <__ssvfiscanf_r+0x52>
 8008e42:	462a      	mov	r2, r5
 8008e44:	e7eb      	b.n	8008e1e <__ssvfiscanf_r+0x2a>
 8008e46:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8008e48:	3201      	adds	r2, #1
 8008e4a:	9245      	str	r2, [sp, #276]	; 0x114
 8008e4c:	6862      	ldr	r2, [r4, #4]
 8008e4e:	3301      	adds	r3, #1
 8008e50:	3a01      	subs	r2, #1
 8008e52:	6062      	str	r2, [r4, #4]
 8008e54:	6023      	str	r3, [r4, #0]
 8008e56:	e7ec      	b.n	8008e32 <__ssvfiscanf_r+0x3e>
 8008e58:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8008e5a:	4621      	mov	r1, r4
 8008e5c:	4630      	mov	r0, r6
 8008e5e:	4798      	blx	r3
 8008e60:	2800      	cmp	r0, #0
 8008e62:	d0e9      	beq.n	8008e38 <__ssvfiscanf_r+0x44>
 8008e64:	e7ed      	b.n	8008e42 <__ssvfiscanf_r+0x4e>
 8008e66:	2b25      	cmp	r3, #37	; 0x25
 8008e68:	d012      	beq.n	8008e90 <__ssvfiscanf_r+0x9c>
 8008e6a:	469a      	mov	sl, r3
 8008e6c:	6863      	ldr	r3, [r4, #4]
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	f340 8091 	ble.w	8008f96 <__ssvfiscanf_r+0x1a2>
 8008e74:	6822      	ldr	r2, [r4, #0]
 8008e76:	7813      	ldrb	r3, [r2, #0]
 8008e78:	4553      	cmp	r3, sl
 8008e7a:	f040 812e 	bne.w	80090da <__ssvfiscanf_r+0x2e6>
 8008e7e:	6863      	ldr	r3, [r4, #4]
 8008e80:	3b01      	subs	r3, #1
 8008e82:	6063      	str	r3, [r4, #4]
 8008e84:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8008e86:	3201      	adds	r2, #1
 8008e88:	3301      	adds	r3, #1
 8008e8a:	6022      	str	r2, [r4, #0]
 8008e8c:	9345      	str	r3, [sp, #276]	; 0x114
 8008e8e:	e7d8      	b.n	8008e42 <__ssvfiscanf_r+0x4e>
 8008e90:	9141      	str	r1, [sp, #260]	; 0x104
 8008e92:	9143      	str	r1, [sp, #268]	; 0x10c
 8008e94:	7853      	ldrb	r3, [r2, #1]
 8008e96:	2b2a      	cmp	r3, #42	; 0x2a
 8008e98:	bf02      	ittt	eq
 8008e9a:	2310      	moveq	r3, #16
 8008e9c:	1c95      	addeq	r5, r2, #2
 8008e9e:	9341      	streq	r3, [sp, #260]	; 0x104
 8008ea0:	220a      	movs	r2, #10
 8008ea2:	46aa      	mov	sl, r5
 8008ea4:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8008ea8:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8008eac:	2b09      	cmp	r3, #9
 8008eae:	d91d      	bls.n	8008eec <__ssvfiscanf_r+0xf8>
 8008eb0:	487e      	ldr	r0, [pc, #504]	; (80090ac <__ssvfiscanf_r+0x2b8>)
 8008eb2:	2203      	movs	r2, #3
 8008eb4:	f7f7 f994 	bl	80001e0 <memchr>
 8008eb8:	b140      	cbz	r0, 8008ecc <__ssvfiscanf_r+0xd8>
 8008eba:	2301      	movs	r3, #1
 8008ebc:	eba0 0009 	sub.w	r0, r0, r9
 8008ec0:	fa03 f000 	lsl.w	r0, r3, r0
 8008ec4:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8008ec6:	4318      	orrs	r0, r3
 8008ec8:	9041      	str	r0, [sp, #260]	; 0x104
 8008eca:	4655      	mov	r5, sl
 8008ecc:	f815 3b01 	ldrb.w	r3, [r5], #1
 8008ed0:	2b78      	cmp	r3, #120	; 0x78
 8008ed2:	d806      	bhi.n	8008ee2 <__ssvfiscanf_r+0xee>
 8008ed4:	2b57      	cmp	r3, #87	; 0x57
 8008ed6:	d810      	bhi.n	8008efa <__ssvfiscanf_r+0x106>
 8008ed8:	2b25      	cmp	r3, #37	; 0x25
 8008eda:	d0c6      	beq.n	8008e6a <__ssvfiscanf_r+0x76>
 8008edc:	d856      	bhi.n	8008f8c <__ssvfiscanf_r+0x198>
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d064      	beq.n	8008fac <__ssvfiscanf_r+0x1b8>
 8008ee2:	2303      	movs	r3, #3
 8008ee4:	9347      	str	r3, [sp, #284]	; 0x11c
 8008ee6:	230a      	movs	r3, #10
 8008ee8:	9342      	str	r3, [sp, #264]	; 0x108
 8008eea:	e071      	b.n	8008fd0 <__ssvfiscanf_r+0x1dc>
 8008eec:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8008eee:	fb02 1103 	mla	r1, r2, r3, r1
 8008ef2:	3930      	subs	r1, #48	; 0x30
 8008ef4:	9143      	str	r1, [sp, #268]	; 0x10c
 8008ef6:	4655      	mov	r5, sl
 8008ef8:	e7d3      	b.n	8008ea2 <__ssvfiscanf_r+0xae>
 8008efa:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8008efe:	2a20      	cmp	r2, #32
 8008f00:	d8ef      	bhi.n	8008ee2 <__ssvfiscanf_r+0xee>
 8008f02:	a101      	add	r1, pc, #4	; (adr r1, 8008f08 <__ssvfiscanf_r+0x114>)
 8008f04:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8008f08:	08008fbb 	.word	0x08008fbb
 8008f0c:	08008ee3 	.word	0x08008ee3
 8008f10:	08008ee3 	.word	0x08008ee3
 8008f14:	08009019 	.word	0x08009019
 8008f18:	08008ee3 	.word	0x08008ee3
 8008f1c:	08008ee3 	.word	0x08008ee3
 8008f20:	08008ee3 	.word	0x08008ee3
 8008f24:	08008ee3 	.word	0x08008ee3
 8008f28:	08008ee3 	.word	0x08008ee3
 8008f2c:	08008ee3 	.word	0x08008ee3
 8008f30:	08008ee3 	.word	0x08008ee3
 8008f34:	0800902f 	.word	0x0800902f
 8008f38:	08009005 	.word	0x08009005
 8008f3c:	08008f93 	.word	0x08008f93
 8008f40:	08008f93 	.word	0x08008f93
 8008f44:	08008f93 	.word	0x08008f93
 8008f48:	08008ee3 	.word	0x08008ee3
 8008f4c:	08009009 	.word	0x08009009
 8008f50:	08008ee3 	.word	0x08008ee3
 8008f54:	08008ee3 	.word	0x08008ee3
 8008f58:	08008ee3 	.word	0x08008ee3
 8008f5c:	08008ee3 	.word	0x08008ee3
 8008f60:	0800903f 	.word	0x0800903f
 8008f64:	08009011 	.word	0x08009011
 8008f68:	08008fb3 	.word	0x08008fb3
 8008f6c:	08008ee3 	.word	0x08008ee3
 8008f70:	08008ee3 	.word	0x08008ee3
 8008f74:	0800903b 	.word	0x0800903b
 8008f78:	08008ee3 	.word	0x08008ee3
 8008f7c:	08009005 	.word	0x08009005
 8008f80:	08008ee3 	.word	0x08008ee3
 8008f84:	08008ee3 	.word	0x08008ee3
 8008f88:	08008fbb 	.word	0x08008fbb
 8008f8c:	3b45      	subs	r3, #69	; 0x45
 8008f8e:	2b02      	cmp	r3, #2
 8008f90:	d8a7      	bhi.n	8008ee2 <__ssvfiscanf_r+0xee>
 8008f92:	2305      	movs	r3, #5
 8008f94:	e01b      	b.n	8008fce <__ssvfiscanf_r+0x1da>
 8008f96:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8008f98:	4621      	mov	r1, r4
 8008f9a:	4630      	mov	r0, r6
 8008f9c:	4798      	blx	r3
 8008f9e:	2800      	cmp	r0, #0
 8008fa0:	f43f af68 	beq.w	8008e74 <__ssvfiscanf_r+0x80>
 8008fa4:	9844      	ldr	r0, [sp, #272]	; 0x110
 8008fa6:	2800      	cmp	r0, #0
 8008fa8:	f040 808d 	bne.w	80090c6 <__ssvfiscanf_r+0x2d2>
 8008fac:	f04f 30ff 	mov.w	r0, #4294967295
 8008fb0:	e08f      	b.n	80090d2 <__ssvfiscanf_r+0x2de>
 8008fb2:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8008fb4:	f042 0220 	orr.w	r2, r2, #32
 8008fb8:	9241      	str	r2, [sp, #260]	; 0x104
 8008fba:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8008fbc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008fc0:	9241      	str	r2, [sp, #260]	; 0x104
 8008fc2:	2210      	movs	r2, #16
 8008fc4:	2b6f      	cmp	r3, #111	; 0x6f
 8008fc6:	9242      	str	r2, [sp, #264]	; 0x108
 8008fc8:	bf34      	ite	cc
 8008fca:	2303      	movcc	r3, #3
 8008fcc:	2304      	movcs	r3, #4
 8008fce:	9347      	str	r3, [sp, #284]	; 0x11c
 8008fd0:	6863      	ldr	r3, [r4, #4]
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	dd42      	ble.n	800905c <__ssvfiscanf_r+0x268>
 8008fd6:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8008fd8:	0659      	lsls	r1, r3, #25
 8008fda:	d404      	bmi.n	8008fe6 <__ssvfiscanf_r+0x1f2>
 8008fdc:	6823      	ldr	r3, [r4, #0]
 8008fde:	781a      	ldrb	r2, [r3, #0]
 8008fe0:	5cba      	ldrb	r2, [r7, r2]
 8008fe2:	0712      	lsls	r2, r2, #28
 8008fe4:	d441      	bmi.n	800906a <__ssvfiscanf_r+0x276>
 8008fe6:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8008fe8:	2b02      	cmp	r3, #2
 8008fea:	dc50      	bgt.n	800908e <__ssvfiscanf_r+0x29a>
 8008fec:	466b      	mov	r3, sp
 8008fee:	4622      	mov	r2, r4
 8008ff0:	a941      	add	r1, sp, #260	; 0x104
 8008ff2:	4630      	mov	r0, r6
 8008ff4:	f000 f9d0 	bl	8009398 <_scanf_chars>
 8008ff8:	2801      	cmp	r0, #1
 8008ffa:	d06e      	beq.n	80090da <__ssvfiscanf_r+0x2e6>
 8008ffc:	2802      	cmp	r0, #2
 8008ffe:	f47f af20 	bne.w	8008e42 <__ssvfiscanf_r+0x4e>
 8009002:	e7cf      	b.n	8008fa4 <__ssvfiscanf_r+0x1b0>
 8009004:	220a      	movs	r2, #10
 8009006:	e7dd      	b.n	8008fc4 <__ssvfiscanf_r+0x1d0>
 8009008:	2300      	movs	r3, #0
 800900a:	9342      	str	r3, [sp, #264]	; 0x108
 800900c:	2303      	movs	r3, #3
 800900e:	e7de      	b.n	8008fce <__ssvfiscanf_r+0x1da>
 8009010:	2308      	movs	r3, #8
 8009012:	9342      	str	r3, [sp, #264]	; 0x108
 8009014:	2304      	movs	r3, #4
 8009016:	e7da      	b.n	8008fce <__ssvfiscanf_r+0x1da>
 8009018:	4629      	mov	r1, r5
 800901a:	4640      	mov	r0, r8
 800901c:	f000 fb38 	bl	8009690 <__sccl>
 8009020:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8009022:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009026:	9341      	str	r3, [sp, #260]	; 0x104
 8009028:	4605      	mov	r5, r0
 800902a:	2301      	movs	r3, #1
 800902c:	e7cf      	b.n	8008fce <__ssvfiscanf_r+0x1da>
 800902e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8009030:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009034:	9341      	str	r3, [sp, #260]	; 0x104
 8009036:	2300      	movs	r3, #0
 8009038:	e7c9      	b.n	8008fce <__ssvfiscanf_r+0x1da>
 800903a:	2302      	movs	r3, #2
 800903c:	e7c7      	b.n	8008fce <__ssvfiscanf_r+0x1da>
 800903e:	9841      	ldr	r0, [sp, #260]	; 0x104
 8009040:	06c3      	lsls	r3, r0, #27
 8009042:	f53f aefe 	bmi.w	8008e42 <__ssvfiscanf_r+0x4e>
 8009046:	9b00      	ldr	r3, [sp, #0]
 8009048:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800904a:	1d19      	adds	r1, r3, #4
 800904c:	9100      	str	r1, [sp, #0]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	f010 0f01 	tst.w	r0, #1
 8009054:	bf14      	ite	ne
 8009056:	801a      	strhne	r2, [r3, #0]
 8009058:	601a      	streq	r2, [r3, #0]
 800905a:	e6f2      	b.n	8008e42 <__ssvfiscanf_r+0x4e>
 800905c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800905e:	4621      	mov	r1, r4
 8009060:	4630      	mov	r0, r6
 8009062:	4798      	blx	r3
 8009064:	2800      	cmp	r0, #0
 8009066:	d0b6      	beq.n	8008fd6 <__ssvfiscanf_r+0x1e2>
 8009068:	e79c      	b.n	8008fa4 <__ssvfiscanf_r+0x1b0>
 800906a:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800906c:	3201      	adds	r2, #1
 800906e:	9245      	str	r2, [sp, #276]	; 0x114
 8009070:	6862      	ldr	r2, [r4, #4]
 8009072:	3a01      	subs	r2, #1
 8009074:	2a00      	cmp	r2, #0
 8009076:	6062      	str	r2, [r4, #4]
 8009078:	dd02      	ble.n	8009080 <__ssvfiscanf_r+0x28c>
 800907a:	3301      	adds	r3, #1
 800907c:	6023      	str	r3, [r4, #0]
 800907e:	e7ad      	b.n	8008fdc <__ssvfiscanf_r+0x1e8>
 8009080:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8009082:	4621      	mov	r1, r4
 8009084:	4630      	mov	r0, r6
 8009086:	4798      	blx	r3
 8009088:	2800      	cmp	r0, #0
 800908a:	d0a7      	beq.n	8008fdc <__ssvfiscanf_r+0x1e8>
 800908c:	e78a      	b.n	8008fa4 <__ssvfiscanf_r+0x1b0>
 800908e:	2b04      	cmp	r3, #4
 8009090:	dc0e      	bgt.n	80090b0 <__ssvfiscanf_r+0x2bc>
 8009092:	466b      	mov	r3, sp
 8009094:	4622      	mov	r2, r4
 8009096:	a941      	add	r1, sp, #260	; 0x104
 8009098:	4630      	mov	r0, r6
 800909a:	f000 f9d7 	bl	800944c <_scanf_i>
 800909e:	e7ab      	b.n	8008ff8 <__ssvfiscanf_r+0x204>
 80090a0:	08008d41 	.word	0x08008d41
 80090a4:	08008dbb 	.word	0x08008dbb
 80090a8:	08009d79 	.word	0x08009d79
 80090ac:	0800a14a 	.word	0x0800a14a
 80090b0:	4b0b      	ldr	r3, [pc, #44]	; (80090e0 <__ssvfiscanf_r+0x2ec>)
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	f43f aec5 	beq.w	8008e42 <__ssvfiscanf_r+0x4e>
 80090b8:	466b      	mov	r3, sp
 80090ba:	4622      	mov	r2, r4
 80090bc:	a941      	add	r1, sp, #260	; 0x104
 80090be:	4630      	mov	r0, r6
 80090c0:	f7fb fff6 	bl	80050b0 <_scanf_float>
 80090c4:	e798      	b.n	8008ff8 <__ssvfiscanf_r+0x204>
 80090c6:	89a3      	ldrh	r3, [r4, #12]
 80090c8:	f013 0f40 	tst.w	r3, #64	; 0x40
 80090cc:	bf18      	it	ne
 80090ce:	f04f 30ff 	movne.w	r0, #4294967295
 80090d2:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 80090d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80090da:	9844      	ldr	r0, [sp, #272]	; 0x110
 80090dc:	e7f9      	b.n	80090d2 <__ssvfiscanf_r+0x2de>
 80090de:	bf00      	nop
 80090e0:	080050b1 	.word	0x080050b1

080090e4 <__sfputc_r>:
 80090e4:	6893      	ldr	r3, [r2, #8]
 80090e6:	3b01      	subs	r3, #1
 80090e8:	2b00      	cmp	r3, #0
 80090ea:	b410      	push	{r4}
 80090ec:	6093      	str	r3, [r2, #8]
 80090ee:	da08      	bge.n	8009102 <__sfputc_r+0x1e>
 80090f0:	6994      	ldr	r4, [r2, #24]
 80090f2:	42a3      	cmp	r3, r4
 80090f4:	db01      	blt.n	80090fa <__sfputc_r+0x16>
 80090f6:	290a      	cmp	r1, #10
 80090f8:	d103      	bne.n	8009102 <__sfputc_r+0x1e>
 80090fa:	f85d 4b04 	ldr.w	r4, [sp], #4
 80090fe:	f7fd b9df 	b.w	80064c0 <__swbuf_r>
 8009102:	6813      	ldr	r3, [r2, #0]
 8009104:	1c58      	adds	r0, r3, #1
 8009106:	6010      	str	r0, [r2, #0]
 8009108:	7019      	strb	r1, [r3, #0]
 800910a:	4608      	mov	r0, r1
 800910c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009110:	4770      	bx	lr

08009112 <__sfputs_r>:
 8009112:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009114:	4606      	mov	r6, r0
 8009116:	460f      	mov	r7, r1
 8009118:	4614      	mov	r4, r2
 800911a:	18d5      	adds	r5, r2, r3
 800911c:	42ac      	cmp	r4, r5
 800911e:	d101      	bne.n	8009124 <__sfputs_r+0x12>
 8009120:	2000      	movs	r0, #0
 8009122:	e007      	b.n	8009134 <__sfputs_r+0x22>
 8009124:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009128:	463a      	mov	r2, r7
 800912a:	4630      	mov	r0, r6
 800912c:	f7ff ffda 	bl	80090e4 <__sfputc_r>
 8009130:	1c43      	adds	r3, r0, #1
 8009132:	d1f3      	bne.n	800911c <__sfputs_r+0xa>
 8009134:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009138 <_vfiprintf_r>:
 8009138:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800913c:	460d      	mov	r5, r1
 800913e:	b09d      	sub	sp, #116	; 0x74
 8009140:	4614      	mov	r4, r2
 8009142:	4698      	mov	r8, r3
 8009144:	4606      	mov	r6, r0
 8009146:	b118      	cbz	r0, 8009150 <_vfiprintf_r+0x18>
 8009148:	6983      	ldr	r3, [r0, #24]
 800914a:	b90b      	cbnz	r3, 8009150 <_vfiprintf_r+0x18>
 800914c:	f7fe fa30 	bl	80075b0 <__sinit>
 8009150:	4b89      	ldr	r3, [pc, #548]	; (8009378 <_vfiprintf_r+0x240>)
 8009152:	429d      	cmp	r5, r3
 8009154:	d11b      	bne.n	800918e <_vfiprintf_r+0x56>
 8009156:	6875      	ldr	r5, [r6, #4]
 8009158:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800915a:	07d9      	lsls	r1, r3, #31
 800915c:	d405      	bmi.n	800916a <_vfiprintf_r+0x32>
 800915e:	89ab      	ldrh	r3, [r5, #12]
 8009160:	059a      	lsls	r2, r3, #22
 8009162:	d402      	bmi.n	800916a <_vfiprintf_r+0x32>
 8009164:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009166:	f7fe fe34 	bl	8007dd2 <__retarget_lock_acquire_recursive>
 800916a:	89ab      	ldrh	r3, [r5, #12]
 800916c:	071b      	lsls	r3, r3, #28
 800916e:	d501      	bpl.n	8009174 <_vfiprintf_r+0x3c>
 8009170:	692b      	ldr	r3, [r5, #16]
 8009172:	b9eb      	cbnz	r3, 80091b0 <_vfiprintf_r+0x78>
 8009174:	4629      	mov	r1, r5
 8009176:	4630      	mov	r0, r6
 8009178:	f7fd fa06 	bl	8006588 <__swsetup_r>
 800917c:	b1c0      	cbz	r0, 80091b0 <_vfiprintf_r+0x78>
 800917e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009180:	07dc      	lsls	r4, r3, #31
 8009182:	d50e      	bpl.n	80091a2 <_vfiprintf_r+0x6a>
 8009184:	f04f 30ff 	mov.w	r0, #4294967295
 8009188:	b01d      	add	sp, #116	; 0x74
 800918a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800918e:	4b7b      	ldr	r3, [pc, #492]	; (800937c <_vfiprintf_r+0x244>)
 8009190:	429d      	cmp	r5, r3
 8009192:	d101      	bne.n	8009198 <_vfiprintf_r+0x60>
 8009194:	68b5      	ldr	r5, [r6, #8]
 8009196:	e7df      	b.n	8009158 <_vfiprintf_r+0x20>
 8009198:	4b79      	ldr	r3, [pc, #484]	; (8009380 <_vfiprintf_r+0x248>)
 800919a:	429d      	cmp	r5, r3
 800919c:	bf08      	it	eq
 800919e:	68f5      	ldreq	r5, [r6, #12]
 80091a0:	e7da      	b.n	8009158 <_vfiprintf_r+0x20>
 80091a2:	89ab      	ldrh	r3, [r5, #12]
 80091a4:	0598      	lsls	r0, r3, #22
 80091a6:	d4ed      	bmi.n	8009184 <_vfiprintf_r+0x4c>
 80091a8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80091aa:	f7fe fe13 	bl	8007dd4 <__retarget_lock_release_recursive>
 80091ae:	e7e9      	b.n	8009184 <_vfiprintf_r+0x4c>
 80091b0:	2300      	movs	r3, #0
 80091b2:	9309      	str	r3, [sp, #36]	; 0x24
 80091b4:	2320      	movs	r3, #32
 80091b6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80091ba:	f8cd 800c 	str.w	r8, [sp, #12]
 80091be:	2330      	movs	r3, #48	; 0x30
 80091c0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009384 <_vfiprintf_r+0x24c>
 80091c4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80091c8:	f04f 0901 	mov.w	r9, #1
 80091cc:	4623      	mov	r3, r4
 80091ce:	469a      	mov	sl, r3
 80091d0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80091d4:	b10a      	cbz	r2, 80091da <_vfiprintf_r+0xa2>
 80091d6:	2a25      	cmp	r2, #37	; 0x25
 80091d8:	d1f9      	bne.n	80091ce <_vfiprintf_r+0x96>
 80091da:	ebba 0b04 	subs.w	fp, sl, r4
 80091de:	d00b      	beq.n	80091f8 <_vfiprintf_r+0xc0>
 80091e0:	465b      	mov	r3, fp
 80091e2:	4622      	mov	r2, r4
 80091e4:	4629      	mov	r1, r5
 80091e6:	4630      	mov	r0, r6
 80091e8:	f7ff ff93 	bl	8009112 <__sfputs_r>
 80091ec:	3001      	adds	r0, #1
 80091ee:	f000 80aa 	beq.w	8009346 <_vfiprintf_r+0x20e>
 80091f2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80091f4:	445a      	add	r2, fp
 80091f6:	9209      	str	r2, [sp, #36]	; 0x24
 80091f8:	f89a 3000 	ldrb.w	r3, [sl]
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	f000 80a2 	beq.w	8009346 <_vfiprintf_r+0x20e>
 8009202:	2300      	movs	r3, #0
 8009204:	f04f 32ff 	mov.w	r2, #4294967295
 8009208:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800920c:	f10a 0a01 	add.w	sl, sl, #1
 8009210:	9304      	str	r3, [sp, #16]
 8009212:	9307      	str	r3, [sp, #28]
 8009214:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009218:	931a      	str	r3, [sp, #104]	; 0x68
 800921a:	4654      	mov	r4, sl
 800921c:	2205      	movs	r2, #5
 800921e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009222:	4858      	ldr	r0, [pc, #352]	; (8009384 <_vfiprintf_r+0x24c>)
 8009224:	f7f6 ffdc 	bl	80001e0 <memchr>
 8009228:	9a04      	ldr	r2, [sp, #16]
 800922a:	b9d8      	cbnz	r0, 8009264 <_vfiprintf_r+0x12c>
 800922c:	06d1      	lsls	r1, r2, #27
 800922e:	bf44      	itt	mi
 8009230:	2320      	movmi	r3, #32
 8009232:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009236:	0713      	lsls	r3, r2, #28
 8009238:	bf44      	itt	mi
 800923a:	232b      	movmi	r3, #43	; 0x2b
 800923c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009240:	f89a 3000 	ldrb.w	r3, [sl]
 8009244:	2b2a      	cmp	r3, #42	; 0x2a
 8009246:	d015      	beq.n	8009274 <_vfiprintf_r+0x13c>
 8009248:	9a07      	ldr	r2, [sp, #28]
 800924a:	4654      	mov	r4, sl
 800924c:	2000      	movs	r0, #0
 800924e:	f04f 0c0a 	mov.w	ip, #10
 8009252:	4621      	mov	r1, r4
 8009254:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009258:	3b30      	subs	r3, #48	; 0x30
 800925a:	2b09      	cmp	r3, #9
 800925c:	d94e      	bls.n	80092fc <_vfiprintf_r+0x1c4>
 800925e:	b1b0      	cbz	r0, 800928e <_vfiprintf_r+0x156>
 8009260:	9207      	str	r2, [sp, #28]
 8009262:	e014      	b.n	800928e <_vfiprintf_r+0x156>
 8009264:	eba0 0308 	sub.w	r3, r0, r8
 8009268:	fa09 f303 	lsl.w	r3, r9, r3
 800926c:	4313      	orrs	r3, r2
 800926e:	9304      	str	r3, [sp, #16]
 8009270:	46a2      	mov	sl, r4
 8009272:	e7d2      	b.n	800921a <_vfiprintf_r+0xe2>
 8009274:	9b03      	ldr	r3, [sp, #12]
 8009276:	1d19      	adds	r1, r3, #4
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	9103      	str	r1, [sp, #12]
 800927c:	2b00      	cmp	r3, #0
 800927e:	bfbb      	ittet	lt
 8009280:	425b      	neglt	r3, r3
 8009282:	f042 0202 	orrlt.w	r2, r2, #2
 8009286:	9307      	strge	r3, [sp, #28]
 8009288:	9307      	strlt	r3, [sp, #28]
 800928a:	bfb8      	it	lt
 800928c:	9204      	strlt	r2, [sp, #16]
 800928e:	7823      	ldrb	r3, [r4, #0]
 8009290:	2b2e      	cmp	r3, #46	; 0x2e
 8009292:	d10c      	bne.n	80092ae <_vfiprintf_r+0x176>
 8009294:	7863      	ldrb	r3, [r4, #1]
 8009296:	2b2a      	cmp	r3, #42	; 0x2a
 8009298:	d135      	bne.n	8009306 <_vfiprintf_r+0x1ce>
 800929a:	9b03      	ldr	r3, [sp, #12]
 800929c:	1d1a      	adds	r2, r3, #4
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	9203      	str	r2, [sp, #12]
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	bfb8      	it	lt
 80092a6:	f04f 33ff 	movlt.w	r3, #4294967295
 80092aa:	3402      	adds	r4, #2
 80092ac:	9305      	str	r3, [sp, #20]
 80092ae:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009394 <_vfiprintf_r+0x25c>
 80092b2:	7821      	ldrb	r1, [r4, #0]
 80092b4:	2203      	movs	r2, #3
 80092b6:	4650      	mov	r0, sl
 80092b8:	f7f6 ff92 	bl	80001e0 <memchr>
 80092bc:	b140      	cbz	r0, 80092d0 <_vfiprintf_r+0x198>
 80092be:	2340      	movs	r3, #64	; 0x40
 80092c0:	eba0 000a 	sub.w	r0, r0, sl
 80092c4:	fa03 f000 	lsl.w	r0, r3, r0
 80092c8:	9b04      	ldr	r3, [sp, #16]
 80092ca:	4303      	orrs	r3, r0
 80092cc:	3401      	adds	r4, #1
 80092ce:	9304      	str	r3, [sp, #16]
 80092d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80092d4:	482c      	ldr	r0, [pc, #176]	; (8009388 <_vfiprintf_r+0x250>)
 80092d6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80092da:	2206      	movs	r2, #6
 80092dc:	f7f6 ff80 	bl	80001e0 <memchr>
 80092e0:	2800      	cmp	r0, #0
 80092e2:	d03f      	beq.n	8009364 <_vfiprintf_r+0x22c>
 80092e4:	4b29      	ldr	r3, [pc, #164]	; (800938c <_vfiprintf_r+0x254>)
 80092e6:	bb1b      	cbnz	r3, 8009330 <_vfiprintf_r+0x1f8>
 80092e8:	9b03      	ldr	r3, [sp, #12]
 80092ea:	3307      	adds	r3, #7
 80092ec:	f023 0307 	bic.w	r3, r3, #7
 80092f0:	3308      	adds	r3, #8
 80092f2:	9303      	str	r3, [sp, #12]
 80092f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80092f6:	443b      	add	r3, r7
 80092f8:	9309      	str	r3, [sp, #36]	; 0x24
 80092fa:	e767      	b.n	80091cc <_vfiprintf_r+0x94>
 80092fc:	fb0c 3202 	mla	r2, ip, r2, r3
 8009300:	460c      	mov	r4, r1
 8009302:	2001      	movs	r0, #1
 8009304:	e7a5      	b.n	8009252 <_vfiprintf_r+0x11a>
 8009306:	2300      	movs	r3, #0
 8009308:	3401      	adds	r4, #1
 800930a:	9305      	str	r3, [sp, #20]
 800930c:	4619      	mov	r1, r3
 800930e:	f04f 0c0a 	mov.w	ip, #10
 8009312:	4620      	mov	r0, r4
 8009314:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009318:	3a30      	subs	r2, #48	; 0x30
 800931a:	2a09      	cmp	r2, #9
 800931c:	d903      	bls.n	8009326 <_vfiprintf_r+0x1ee>
 800931e:	2b00      	cmp	r3, #0
 8009320:	d0c5      	beq.n	80092ae <_vfiprintf_r+0x176>
 8009322:	9105      	str	r1, [sp, #20]
 8009324:	e7c3      	b.n	80092ae <_vfiprintf_r+0x176>
 8009326:	fb0c 2101 	mla	r1, ip, r1, r2
 800932a:	4604      	mov	r4, r0
 800932c:	2301      	movs	r3, #1
 800932e:	e7f0      	b.n	8009312 <_vfiprintf_r+0x1da>
 8009330:	ab03      	add	r3, sp, #12
 8009332:	9300      	str	r3, [sp, #0]
 8009334:	462a      	mov	r2, r5
 8009336:	4b16      	ldr	r3, [pc, #88]	; (8009390 <_vfiprintf_r+0x258>)
 8009338:	a904      	add	r1, sp, #16
 800933a:	4630      	mov	r0, r6
 800933c:	f7fb faee 	bl	800491c <_printf_float>
 8009340:	4607      	mov	r7, r0
 8009342:	1c78      	adds	r0, r7, #1
 8009344:	d1d6      	bne.n	80092f4 <_vfiprintf_r+0x1bc>
 8009346:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009348:	07d9      	lsls	r1, r3, #31
 800934a:	d405      	bmi.n	8009358 <_vfiprintf_r+0x220>
 800934c:	89ab      	ldrh	r3, [r5, #12]
 800934e:	059a      	lsls	r2, r3, #22
 8009350:	d402      	bmi.n	8009358 <_vfiprintf_r+0x220>
 8009352:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009354:	f7fe fd3e 	bl	8007dd4 <__retarget_lock_release_recursive>
 8009358:	89ab      	ldrh	r3, [r5, #12]
 800935a:	065b      	lsls	r3, r3, #25
 800935c:	f53f af12 	bmi.w	8009184 <_vfiprintf_r+0x4c>
 8009360:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009362:	e711      	b.n	8009188 <_vfiprintf_r+0x50>
 8009364:	ab03      	add	r3, sp, #12
 8009366:	9300      	str	r3, [sp, #0]
 8009368:	462a      	mov	r2, r5
 800936a:	4b09      	ldr	r3, [pc, #36]	; (8009390 <_vfiprintf_r+0x258>)
 800936c:	a904      	add	r1, sp, #16
 800936e:	4630      	mov	r0, r6
 8009370:	f7fb fd78 	bl	8004e64 <_printf_i>
 8009374:	e7e4      	b.n	8009340 <_vfiprintf_r+0x208>
 8009376:	bf00      	nop
 8009378:	08009f2c 	.word	0x08009f2c
 800937c:	08009f4c 	.word	0x08009f4c
 8009380:	08009f0c 	.word	0x08009f0c
 8009384:	0800a144 	.word	0x0800a144
 8009388:	0800a14e 	.word	0x0800a14e
 800938c:	0800491d 	.word	0x0800491d
 8009390:	08009113 	.word	0x08009113
 8009394:	0800a14a 	.word	0x0800a14a

08009398 <_scanf_chars>:
 8009398:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800939c:	4615      	mov	r5, r2
 800939e:	688a      	ldr	r2, [r1, #8]
 80093a0:	4680      	mov	r8, r0
 80093a2:	460c      	mov	r4, r1
 80093a4:	b932      	cbnz	r2, 80093b4 <_scanf_chars+0x1c>
 80093a6:	698a      	ldr	r2, [r1, #24]
 80093a8:	2a00      	cmp	r2, #0
 80093aa:	bf0c      	ite	eq
 80093ac:	2201      	moveq	r2, #1
 80093ae:	f04f 32ff 	movne.w	r2, #4294967295
 80093b2:	608a      	str	r2, [r1, #8]
 80093b4:	6822      	ldr	r2, [r4, #0]
 80093b6:	f8df 9090 	ldr.w	r9, [pc, #144]	; 8009448 <_scanf_chars+0xb0>
 80093ba:	06d1      	lsls	r1, r2, #27
 80093bc:	bf5f      	itttt	pl
 80093be:	681a      	ldrpl	r2, [r3, #0]
 80093c0:	1d11      	addpl	r1, r2, #4
 80093c2:	6019      	strpl	r1, [r3, #0]
 80093c4:	6816      	ldrpl	r6, [r2, #0]
 80093c6:	2700      	movs	r7, #0
 80093c8:	69a0      	ldr	r0, [r4, #24]
 80093ca:	b188      	cbz	r0, 80093f0 <_scanf_chars+0x58>
 80093cc:	2801      	cmp	r0, #1
 80093ce:	d107      	bne.n	80093e0 <_scanf_chars+0x48>
 80093d0:	682a      	ldr	r2, [r5, #0]
 80093d2:	7811      	ldrb	r1, [r2, #0]
 80093d4:	6962      	ldr	r2, [r4, #20]
 80093d6:	5c52      	ldrb	r2, [r2, r1]
 80093d8:	b952      	cbnz	r2, 80093f0 <_scanf_chars+0x58>
 80093da:	2f00      	cmp	r7, #0
 80093dc:	d031      	beq.n	8009442 <_scanf_chars+0xaa>
 80093de:	e022      	b.n	8009426 <_scanf_chars+0x8e>
 80093e0:	2802      	cmp	r0, #2
 80093e2:	d120      	bne.n	8009426 <_scanf_chars+0x8e>
 80093e4:	682b      	ldr	r3, [r5, #0]
 80093e6:	781b      	ldrb	r3, [r3, #0]
 80093e8:	f813 3009 	ldrb.w	r3, [r3, r9]
 80093ec:	071b      	lsls	r3, r3, #28
 80093ee:	d41a      	bmi.n	8009426 <_scanf_chars+0x8e>
 80093f0:	6823      	ldr	r3, [r4, #0]
 80093f2:	06da      	lsls	r2, r3, #27
 80093f4:	bf5e      	ittt	pl
 80093f6:	682b      	ldrpl	r3, [r5, #0]
 80093f8:	781b      	ldrbpl	r3, [r3, #0]
 80093fa:	f806 3b01 	strbpl.w	r3, [r6], #1
 80093fe:	682a      	ldr	r2, [r5, #0]
 8009400:	686b      	ldr	r3, [r5, #4]
 8009402:	3201      	adds	r2, #1
 8009404:	602a      	str	r2, [r5, #0]
 8009406:	68a2      	ldr	r2, [r4, #8]
 8009408:	3b01      	subs	r3, #1
 800940a:	3a01      	subs	r2, #1
 800940c:	606b      	str	r3, [r5, #4]
 800940e:	3701      	adds	r7, #1
 8009410:	60a2      	str	r2, [r4, #8]
 8009412:	b142      	cbz	r2, 8009426 <_scanf_chars+0x8e>
 8009414:	2b00      	cmp	r3, #0
 8009416:	dcd7      	bgt.n	80093c8 <_scanf_chars+0x30>
 8009418:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800941c:	4629      	mov	r1, r5
 800941e:	4640      	mov	r0, r8
 8009420:	4798      	blx	r3
 8009422:	2800      	cmp	r0, #0
 8009424:	d0d0      	beq.n	80093c8 <_scanf_chars+0x30>
 8009426:	6823      	ldr	r3, [r4, #0]
 8009428:	f013 0310 	ands.w	r3, r3, #16
 800942c:	d105      	bne.n	800943a <_scanf_chars+0xa2>
 800942e:	68e2      	ldr	r2, [r4, #12]
 8009430:	3201      	adds	r2, #1
 8009432:	60e2      	str	r2, [r4, #12]
 8009434:	69a2      	ldr	r2, [r4, #24]
 8009436:	b102      	cbz	r2, 800943a <_scanf_chars+0xa2>
 8009438:	7033      	strb	r3, [r6, #0]
 800943a:	6923      	ldr	r3, [r4, #16]
 800943c:	443b      	add	r3, r7
 800943e:	6123      	str	r3, [r4, #16]
 8009440:	2000      	movs	r0, #0
 8009442:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009446:	bf00      	nop
 8009448:	08009d79 	.word	0x08009d79

0800944c <_scanf_i>:
 800944c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009450:	4698      	mov	r8, r3
 8009452:	4b76      	ldr	r3, [pc, #472]	; (800962c <_scanf_i+0x1e0>)
 8009454:	460c      	mov	r4, r1
 8009456:	4682      	mov	sl, r0
 8009458:	4616      	mov	r6, r2
 800945a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800945e:	b087      	sub	sp, #28
 8009460:	ab03      	add	r3, sp, #12
 8009462:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8009466:	4b72      	ldr	r3, [pc, #456]	; (8009630 <_scanf_i+0x1e4>)
 8009468:	69a1      	ldr	r1, [r4, #24]
 800946a:	4a72      	ldr	r2, [pc, #456]	; (8009634 <_scanf_i+0x1e8>)
 800946c:	2903      	cmp	r1, #3
 800946e:	bf18      	it	ne
 8009470:	461a      	movne	r2, r3
 8009472:	68a3      	ldr	r3, [r4, #8]
 8009474:	9201      	str	r2, [sp, #4]
 8009476:	1e5a      	subs	r2, r3, #1
 8009478:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800947c:	bf88      	it	hi
 800947e:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8009482:	4627      	mov	r7, r4
 8009484:	bf82      	ittt	hi
 8009486:	eb03 0905 	addhi.w	r9, r3, r5
 800948a:	f240 135d 	movwhi	r3, #349	; 0x15d
 800948e:	60a3      	strhi	r3, [r4, #8]
 8009490:	f857 3b1c 	ldr.w	r3, [r7], #28
 8009494:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8009498:	bf98      	it	ls
 800949a:	f04f 0900 	movls.w	r9, #0
 800949e:	6023      	str	r3, [r4, #0]
 80094a0:	463d      	mov	r5, r7
 80094a2:	f04f 0b00 	mov.w	fp, #0
 80094a6:	6831      	ldr	r1, [r6, #0]
 80094a8:	ab03      	add	r3, sp, #12
 80094aa:	7809      	ldrb	r1, [r1, #0]
 80094ac:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 80094b0:	2202      	movs	r2, #2
 80094b2:	f7f6 fe95 	bl	80001e0 <memchr>
 80094b6:	b328      	cbz	r0, 8009504 <_scanf_i+0xb8>
 80094b8:	f1bb 0f01 	cmp.w	fp, #1
 80094bc:	d159      	bne.n	8009572 <_scanf_i+0x126>
 80094be:	6862      	ldr	r2, [r4, #4]
 80094c0:	b92a      	cbnz	r2, 80094ce <_scanf_i+0x82>
 80094c2:	6822      	ldr	r2, [r4, #0]
 80094c4:	2308      	movs	r3, #8
 80094c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80094ca:	6063      	str	r3, [r4, #4]
 80094cc:	6022      	str	r2, [r4, #0]
 80094ce:	6822      	ldr	r2, [r4, #0]
 80094d0:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 80094d4:	6022      	str	r2, [r4, #0]
 80094d6:	68a2      	ldr	r2, [r4, #8]
 80094d8:	1e51      	subs	r1, r2, #1
 80094da:	60a1      	str	r1, [r4, #8]
 80094dc:	b192      	cbz	r2, 8009504 <_scanf_i+0xb8>
 80094de:	6832      	ldr	r2, [r6, #0]
 80094e0:	1c51      	adds	r1, r2, #1
 80094e2:	6031      	str	r1, [r6, #0]
 80094e4:	7812      	ldrb	r2, [r2, #0]
 80094e6:	f805 2b01 	strb.w	r2, [r5], #1
 80094ea:	6872      	ldr	r2, [r6, #4]
 80094ec:	3a01      	subs	r2, #1
 80094ee:	2a00      	cmp	r2, #0
 80094f0:	6072      	str	r2, [r6, #4]
 80094f2:	dc07      	bgt.n	8009504 <_scanf_i+0xb8>
 80094f4:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 80094f8:	4631      	mov	r1, r6
 80094fa:	4650      	mov	r0, sl
 80094fc:	4790      	blx	r2
 80094fe:	2800      	cmp	r0, #0
 8009500:	f040 8085 	bne.w	800960e <_scanf_i+0x1c2>
 8009504:	f10b 0b01 	add.w	fp, fp, #1
 8009508:	f1bb 0f03 	cmp.w	fp, #3
 800950c:	d1cb      	bne.n	80094a6 <_scanf_i+0x5a>
 800950e:	6863      	ldr	r3, [r4, #4]
 8009510:	b90b      	cbnz	r3, 8009516 <_scanf_i+0xca>
 8009512:	230a      	movs	r3, #10
 8009514:	6063      	str	r3, [r4, #4]
 8009516:	6863      	ldr	r3, [r4, #4]
 8009518:	4947      	ldr	r1, [pc, #284]	; (8009638 <_scanf_i+0x1ec>)
 800951a:	6960      	ldr	r0, [r4, #20]
 800951c:	1ac9      	subs	r1, r1, r3
 800951e:	f000 f8b7 	bl	8009690 <__sccl>
 8009522:	f04f 0b00 	mov.w	fp, #0
 8009526:	68a3      	ldr	r3, [r4, #8]
 8009528:	6822      	ldr	r2, [r4, #0]
 800952a:	2b00      	cmp	r3, #0
 800952c:	d03d      	beq.n	80095aa <_scanf_i+0x15e>
 800952e:	6831      	ldr	r1, [r6, #0]
 8009530:	6960      	ldr	r0, [r4, #20]
 8009532:	f891 c000 	ldrb.w	ip, [r1]
 8009536:	f810 000c 	ldrb.w	r0, [r0, ip]
 800953a:	2800      	cmp	r0, #0
 800953c:	d035      	beq.n	80095aa <_scanf_i+0x15e>
 800953e:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8009542:	d124      	bne.n	800958e <_scanf_i+0x142>
 8009544:	0510      	lsls	r0, r2, #20
 8009546:	d522      	bpl.n	800958e <_scanf_i+0x142>
 8009548:	f10b 0b01 	add.w	fp, fp, #1
 800954c:	f1b9 0f00 	cmp.w	r9, #0
 8009550:	d003      	beq.n	800955a <_scanf_i+0x10e>
 8009552:	3301      	adds	r3, #1
 8009554:	f109 39ff 	add.w	r9, r9, #4294967295
 8009558:	60a3      	str	r3, [r4, #8]
 800955a:	6873      	ldr	r3, [r6, #4]
 800955c:	3b01      	subs	r3, #1
 800955e:	2b00      	cmp	r3, #0
 8009560:	6073      	str	r3, [r6, #4]
 8009562:	dd1b      	ble.n	800959c <_scanf_i+0x150>
 8009564:	6833      	ldr	r3, [r6, #0]
 8009566:	3301      	adds	r3, #1
 8009568:	6033      	str	r3, [r6, #0]
 800956a:	68a3      	ldr	r3, [r4, #8]
 800956c:	3b01      	subs	r3, #1
 800956e:	60a3      	str	r3, [r4, #8]
 8009570:	e7d9      	b.n	8009526 <_scanf_i+0xda>
 8009572:	f1bb 0f02 	cmp.w	fp, #2
 8009576:	d1ae      	bne.n	80094d6 <_scanf_i+0x8a>
 8009578:	6822      	ldr	r2, [r4, #0]
 800957a:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800957e:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8009582:	d1bf      	bne.n	8009504 <_scanf_i+0xb8>
 8009584:	2310      	movs	r3, #16
 8009586:	6063      	str	r3, [r4, #4]
 8009588:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800958c:	e7a2      	b.n	80094d4 <_scanf_i+0x88>
 800958e:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8009592:	6022      	str	r2, [r4, #0]
 8009594:	780b      	ldrb	r3, [r1, #0]
 8009596:	f805 3b01 	strb.w	r3, [r5], #1
 800959a:	e7de      	b.n	800955a <_scanf_i+0x10e>
 800959c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80095a0:	4631      	mov	r1, r6
 80095a2:	4650      	mov	r0, sl
 80095a4:	4798      	blx	r3
 80095a6:	2800      	cmp	r0, #0
 80095a8:	d0df      	beq.n	800956a <_scanf_i+0x11e>
 80095aa:	6823      	ldr	r3, [r4, #0]
 80095ac:	05db      	lsls	r3, r3, #23
 80095ae:	d50d      	bpl.n	80095cc <_scanf_i+0x180>
 80095b0:	42bd      	cmp	r5, r7
 80095b2:	d909      	bls.n	80095c8 <_scanf_i+0x17c>
 80095b4:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80095b8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80095bc:	4632      	mov	r2, r6
 80095be:	4650      	mov	r0, sl
 80095c0:	4798      	blx	r3
 80095c2:	f105 39ff 	add.w	r9, r5, #4294967295
 80095c6:	464d      	mov	r5, r9
 80095c8:	42bd      	cmp	r5, r7
 80095ca:	d02d      	beq.n	8009628 <_scanf_i+0x1dc>
 80095cc:	6822      	ldr	r2, [r4, #0]
 80095ce:	f012 0210 	ands.w	r2, r2, #16
 80095d2:	d113      	bne.n	80095fc <_scanf_i+0x1b0>
 80095d4:	702a      	strb	r2, [r5, #0]
 80095d6:	6863      	ldr	r3, [r4, #4]
 80095d8:	9e01      	ldr	r6, [sp, #4]
 80095da:	4639      	mov	r1, r7
 80095dc:	4650      	mov	r0, sl
 80095de:	47b0      	blx	r6
 80095e0:	6821      	ldr	r1, [r4, #0]
 80095e2:	f8d8 3000 	ldr.w	r3, [r8]
 80095e6:	f011 0f20 	tst.w	r1, #32
 80095ea:	d013      	beq.n	8009614 <_scanf_i+0x1c8>
 80095ec:	1d1a      	adds	r2, r3, #4
 80095ee:	f8c8 2000 	str.w	r2, [r8]
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	6018      	str	r0, [r3, #0]
 80095f6:	68e3      	ldr	r3, [r4, #12]
 80095f8:	3301      	adds	r3, #1
 80095fa:	60e3      	str	r3, [r4, #12]
 80095fc:	1bed      	subs	r5, r5, r7
 80095fe:	44ab      	add	fp, r5
 8009600:	6925      	ldr	r5, [r4, #16]
 8009602:	445d      	add	r5, fp
 8009604:	6125      	str	r5, [r4, #16]
 8009606:	2000      	movs	r0, #0
 8009608:	b007      	add	sp, #28
 800960a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800960e:	f04f 0b00 	mov.w	fp, #0
 8009612:	e7ca      	b.n	80095aa <_scanf_i+0x15e>
 8009614:	1d1a      	adds	r2, r3, #4
 8009616:	f8c8 2000 	str.w	r2, [r8]
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	f011 0f01 	tst.w	r1, #1
 8009620:	bf14      	ite	ne
 8009622:	8018      	strhne	r0, [r3, #0]
 8009624:	6018      	streq	r0, [r3, #0]
 8009626:	e7e6      	b.n	80095f6 <_scanf_i+0x1aa>
 8009628:	2001      	movs	r0, #1
 800962a:	e7ed      	b.n	8009608 <_scanf_i+0x1bc>
 800962c:	08009c94 	.word	0x08009c94
 8009630:	080097e5 	.word	0x080097e5
 8009634:	080064bd 	.word	0x080064bd
 8009638:	0800a16e 	.word	0x0800a16e

0800963c <_read_r>:
 800963c:	b538      	push	{r3, r4, r5, lr}
 800963e:	4d07      	ldr	r5, [pc, #28]	; (800965c <_read_r+0x20>)
 8009640:	4604      	mov	r4, r0
 8009642:	4608      	mov	r0, r1
 8009644:	4611      	mov	r1, r2
 8009646:	2200      	movs	r2, #0
 8009648:	602a      	str	r2, [r5, #0]
 800964a:	461a      	mov	r2, r3
 800964c:	f7f7 ffe0 	bl	8001610 <_read>
 8009650:	1c43      	adds	r3, r0, #1
 8009652:	d102      	bne.n	800965a <_read_r+0x1e>
 8009654:	682b      	ldr	r3, [r5, #0]
 8009656:	b103      	cbz	r3, 800965a <_read_r+0x1e>
 8009658:	6023      	str	r3, [r4, #0]
 800965a:	bd38      	pop	{r3, r4, r5, pc}
 800965c:	20000318 	.word	0x20000318

08009660 <nan>:
 8009660:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8009668 <nan+0x8>
 8009664:	4770      	bx	lr
 8009666:	bf00      	nop
 8009668:	00000000 	.word	0x00000000
 800966c:	7ff80000 	.word	0x7ff80000

08009670 <_sbrk_r>:
 8009670:	b538      	push	{r3, r4, r5, lr}
 8009672:	4d06      	ldr	r5, [pc, #24]	; (800968c <_sbrk_r+0x1c>)
 8009674:	2300      	movs	r3, #0
 8009676:	4604      	mov	r4, r0
 8009678:	4608      	mov	r0, r1
 800967a:	602b      	str	r3, [r5, #0]
 800967c:	f7f8 f836 	bl	80016ec <_sbrk>
 8009680:	1c43      	adds	r3, r0, #1
 8009682:	d102      	bne.n	800968a <_sbrk_r+0x1a>
 8009684:	682b      	ldr	r3, [r5, #0]
 8009686:	b103      	cbz	r3, 800968a <_sbrk_r+0x1a>
 8009688:	6023      	str	r3, [r4, #0]
 800968a:	bd38      	pop	{r3, r4, r5, pc}
 800968c:	20000318 	.word	0x20000318

08009690 <__sccl>:
 8009690:	b570      	push	{r4, r5, r6, lr}
 8009692:	780b      	ldrb	r3, [r1, #0]
 8009694:	4604      	mov	r4, r0
 8009696:	2b5e      	cmp	r3, #94	; 0x5e
 8009698:	bf0b      	itete	eq
 800969a:	784b      	ldrbeq	r3, [r1, #1]
 800969c:	1c48      	addne	r0, r1, #1
 800969e:	1c88      	addeq	r0, r1, #2
 80096a0:	2200      	movne	r2, #0
 80096a2:	bf08      	it	eq
 80096a4:	2201      	moveq	r2, #1
 80096a6:	1e61      	subs	r1, r4, #1
 80096a8:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 80096ac:	f801 2f01 	strb.w	r2, [r1, #1]!
 80096b0:	42a9      	cmp	r1, r5
 80096b2:	d1fb      	bne.n	80096ac <__sccl+0x1c>
 80096b4:	b90b      	cbnz	r3, 80096ba <__sccl+0x2a>
 80096b6:	3801      	subs	r0, #1
 80096b8:	bd70      	pop	{r4, r5, r6, pc}
 80096ba:	f082 0201 	eor.w	r2, r2, #1
 80096be:	54e2      	strb	r2, [r4, r3]
 80096c0:	4605      	mov	r5, r0
 80096c2:	4628      	mov	r0, r5
 80096c4:	f810 1b01 	ldrb.w	r1, [r0], #1
 80096c8:	292d      	cmp	r1, #45	; 0x2d
 80096ca:	d006      	beq.n	80096da <__sccl+0x4a>
 80096cc:	295d      	cmp	r1, #93	; 0x5d
 80096ce:	d0f3      	beq.n	80096b8 <__sccl+0x28>
 80096d0:	b909      	cbnz	r1, 80096d6 <__sccl+0x46>
 80096d2:	4628      	mov	r0, r5
 80096d4:	e7f0      	b.n	80096b8 <__sccl+0x28>
 80096d6:	460b      	mov	r3, r1
 80096d8:	e7f1      	b.n	80096be <__sccl+0x2e>
 80096da:	786e      	ldrb	r6, [r5, #1]
 80096dc:	2e5d      	cmp	r6, #93	; 0x5d
 80096de:	d0fa      	beq.n	80096d6 <__sccl+0x46>
 80096e0:	42b3      	cmp	r3, r6
 80096e2:	dcf8      	bgt.n	80096d6 <__sccl+0x46>
 80096e4:	3502      	adds	r5, #2
 80096e6:	4619      	mov	r1, r3
 80096e8:	3101      	adds	r1, #1
 80096ea:	428e      	cmp	r6, r1
 80096ec:	5462      	strb	r2, [r4, r1]
 80096ee:	dcfb      	bgt.n	80096e8 <__sccl+0x58>
 80096f0:	1af1      	subs	r1, r6, r3
 80096f2:	3901      	subs	r1, #1
 80096f4:	1c58      	adds	r0, r3, #1
 80096f6:	42b3      	cmp	r3, r6
 80096f8:	bfa8      	it	ge
 80096fa:	2100      	movge	r1, #0
 80096fc:	1843      	adds	r3, r0, r1
 80096fe:	e7e0      	b.n	80096c2 <__sccl+0x32>

08009700 <_strtoul_l.constprop.0>:
 8009700:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009704:	4f36      	ldr	r7, [pc, #216]	; (80097e0 <_strtoul_l.constprop.0+0xe0>)
 8009706:	4686      	mov	lr, r0
 8009708:	460d      	mov	r5, r1
 800970a:	4628      	mov	r0, r5
 800970c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009710:	5de6      	ldrb	r6, [r4, r7]
 8009712:	f016 0608 	ands.w	r6, r6, #8
 8009716:	d1f8      	bne.n	800970a <_strtoul_l.constprop.0+0xa>
 8009718:	2c2d      	cmp	r4, #45	; 0x2d
 800971a:	d12f      	bne.n	800977c <_strtoul_l.constprop.0+0x7c>
 800971c:	782c      	ldrb	r4, [r5, #0]
 800971e:	2601      	movs	r6, #1
 8009720:	1c85      	adds	r5, r0, #2
 8009722:	2b00      	cmp	r3, #0
 8009724:	d057      	beq.n	80097d6 <_strtoul_l.constprop.0+0xd6>
 8009726:	2b10      	cmp	r3, #16
 8009728:	d109      	bne.n	800973e <_strtoul_l.constprop.0+0x3e>
 800972a:	2c30      	cmp	r4, #48	; 0x30
 800972c:	d107      	bne.n	800973e <_strtoul_l.constprop.0+0x3e>
 800972e:	7828      	ldrb	r0, [r5, #0]
 8009730:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8009734:	2858      	cmp	r0, #88	; 0x58
 8009736:	d149      	bne.n	80097cc <_strtoul_l.constprop.0+0xcc>
 8009738:	786c      	ldrb	r4, [r5, #1]
 800973a:	2310      	movs	r3, #16
 800973c:	3502      	adds	r5, #2
 800973e:	f04f 38ff 	mov.w	r8, #4294967295
 8009742:	2700      	movs	r7, #0
 8009744:	fbb8 f8f3 	udiv	r8, r8, r3
 8009748:	fb03 f908 	mul.w	r9, r3, r8
 800974c:	ea6f 0909 	mvn.w	r9, r9
 8009750:	4638      	mov	r0, r7
 8009752:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8009756:	f1bc 0f09 	cmp.w	ip, #9
 800975a:	d814      	bhi.n	8009786 <_strtoul_l.constprop.0+0x86>
 800975c:	4664      	mov	r4, ip
 800975e:	42a3      	cmp	r3, r4
 8009760:	dd22      	ble.n	80097a8 <_strtoul_l.constprop.0+0xa8>
 8009762:	2f00      	cmp	r7, #0
 8009764:	db1d      	blt.n	80097a2 <_strtoul_l.constprop.0+0xa2>
 8009766:	4580      	cmp	r8, r0
 8009768:	d31b      	bcc.n	80097a2 <_strtoul_l.constprop.0+0xa2>
 800976a:	d101      	bne.n	8009770 <_strtoul_l.constprop.0+0x70>
 800976c:	45a1      	cmp	r9, r4
 800976e:	db18      	blt.n	80097a2 <_strtoul_l.constprop.0+0xa2>
 8009770:	fb00 4003 	mla	r0, r0, r3, r4
 8009774:	2701      	movs	r7, #1
 8009776:	f815 4b01 	ldrb.w	r4, [r5], #1
 800977a:	e7ea      	b.n	8009752 <_strtoul_l.constprop.0+0x52>
 800977c:	2c2b      	cmp	r4, #43	; 0x2b
 800977e:	bf04      	itt	eq
 8009780:	782c      	ldrbeq	r4, [r5, #0]
 8009782:	1c85      	addeq	r5, r0, #2
 8009784:	e7cd      	b.n	8009722 <_strtoul_l.constprop.0+0x22>
 8009786:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800978a:	f1bc 0f19 	cmp.w	ip, #25
 800978e:	d801      	bhi.n	8009794 <_strtoul_l.constprop.0+0x94>
 8009790:	3c37      	subs	r4, #55	; 0x37
 8009792:	e7e4      	b.n	800975e <_strtoul_l.constprop.0+0x5e>
 8009794:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8009798:	f1bc 0f19 	cmp.w	ip, #25
 800979c:	d804      	bhi.n	80097a8 <_strtoul_l.constprop.0+0xa8>
 800979e:	3c57      	subs	r4, #87	; 0x57
 80097a0:	e7dd      	b.n	800975e <_strtoul_l.constprop.0+0x5e>
 80097a2:	f04f 37ff 	mov.w	r7, #4294967295
 80097a6:	e7e6      	b.n	8009776 <_strtoul_l.constprop.0+0x76>
 80097a8:	2f00      	cmp	r7, #0
 80097aa:	da07      	bge.n	80097bc <_strtoul_l.constprop.0+0xbc>
 80097ac:	2322      	movs	r3, #34	; 0x22
 80097ae:	f8ce 3000 	str.w	r3, [lr]
 80097b2:	f04f 30ff 	mov.w	r0, #4294967295
 80097b6:	b932      	cbnz	r2, 80097c6 <_strtoul_l.constprop.0+0xc6>
 80097b8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80097bc:	b106      	cbz	r6, 80097c0 <_strtoul_l.constprop.0+0xc0>
 80097be:	4240      	negs	r0, r0
 80097c0:	2a00      	cmp	r2, #0
 80097c2:	d0f9      	beq.n	80097b8 <_strtoul_l.constprop.0+0xb8>
 80097c4:	b107      	cbz	r7, 80097c8 <_strtoul_l.constprop.0+0xc8>
 80097c6:	1e69      	subs	r1, r5, #1
 80097c8:	6011      	str	r1, [r2, #0]
 80097ca:	e7f5      	b.n	80097b8 <_strtoul_l.constprop.0+0xb8>
 80097cc:	2430      	movs	r4, #48	; 0x30
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	d1b5      	bne.n	800973e <_strtoul_l.constprop.0+0x3e>
 80097d2:	2308      	movs	r3, #8
 80097d4:	e7b3      	b.n	800973e <_strtoul_l.constprop.0+0x3e>
 80097d6:	2c30      	cmp	r4, #48	; 0x30
 80097d8:	d0a9      	beq.n	800972e <_strtoul_l.constprop.0+0x2e>
 80097da:	230a      	movs	r3, #10
 80097dc:	e7af      	b.n	800973e <_strtoul_l.constprop.0+0x3e>
 80097de:	bf00      	nop
 80097e0:	08009d79 	.word	0x08009d79

080097e4 <_strtoul_r>:
 80097e4:	f7ff bf8c 	b.w	8009700 <_strtoul_l.constprop.0>

080097e8 <__submore>:
 80097e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80097ec:	460c      	mov	r4, r1
 80097ee:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80097f0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80097f4:	4299      	cmp	r1, r3
 80097f6:	d11d      	bne.n	8009834 <__submore+0x4c>
 80097f8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80097fc:	f7ff f8d0 	bl	80089a0 <_malloc_r>
 8009800:	b918      	cbnz	r0, 800980a <__submore+0x22>
 8009802:	f04f 30ff 	mov.w	r0, #4294967295
 8009806:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800980a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800980e:	63a3      	str	r3, [r4, #56]	; 0x38
 8009810:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8009814:	6360      	str	r0, [r4, #52]	; 0x34
 8009816:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800981a:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800981e:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8009822:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8009826:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800982a:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800982e:	6020      	str	r0, [r4, #0]
 8009830:	2000      	movs	r0, #0
 8009832:	e7e8      	b.n	8009806 <__submore+0x1e>
 8009834:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8009836:	0077      	lsls	r7, r6, #1
 8009838:	463a      	mov	r2, r7
 800983a:	f000 f895 	bl	8009968 <_realloc_r>
 800983e:	4605      	mov	r5, r0
 8009840:	2800      	cmp	r0, #0
 8009842:	d0de      	beq.n	8009802 <__submore+0x1a>
 8009844:	eb00 0806 	add.w	r8, r0, r6
 8009848:	4601      	mov	r1, r0
 800984a:	4632      	mov	r2, r6
 800984c:	4640      	mov	r0, r8
 800984e:	f7fe fb55 	bl	8007efc <memcpy>
 8009852:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8009856:	f8c4 8000 	str.w	r8, [r4]
 800985a:	e7e9      	b.n	8009830 <__submore+0x48>

0800985c <__ascii_wctomb>:
 800985c:	b149      	cbz	r1, 8009872 <__ascii_wctomb+0x16>
 800985e:	2aff      	cmp	r2, #255	; 0xff
 8009860:	bf85      	ittet	hi
 8009862:	238a      	movhi	r3, #138	; 0x8a
 8009864:	6003      	strhi	r3, [r0, #0]
 8009866:	700a      	strbls	r2, [r1, #0]
 8009868:	f04f 30ff 	movhi.w	r0, #4294967295
 800986c:	bf98      	it	ls
 800986e:	2001      	movls	r0, #1
 8009870:	4770      	bx	lr
 8009872:	4608      	mov	r0, r1
 8009874:	4770      	bx	lr
	...

08009878 <__assert_func>:
 8009878:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800987a:	4614      	mov	r4, r2
 800987c:	461a      	mov	r2, r3
 800987e:	4b09      	ldr	r3, [pc, #36]	; (80098a4 <__assert_func+0x2c>)
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	4605      	mov	r5, r0
 8009884:	68d8      	ldr	r0, [r3, #12]
 8009886:	b14c      	cbz	r4, 800989c <__assert_func+0x24>
 8009888:	4b07      	ldr	r3, [pc, #28]	; (80098a8 <__assert_func+0x30>)
 800988a:	9100      	str	r1, [sp, #0]
 800988c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009890:	4906      	ldr	r1, [pc, #24]	; (80098ac <__assert_func+0x34>)
 8009892:	462b      	mov	r3, r5
 8009894:	f000 f80e 	bl	80098b4 <fiprintf>
 8009898:	f000 f895 	bl	80099c6 <abort>
 800989c:	4b04      	ldr	r3, [pc, #16]	; (80098b0 <__assert_func+0x38>)
 800989e:	461c      	mov	r4, r3
 80098a0:	e7f3      	b.n	800988a <__assert_func+0x12>
 80098a2:	bf00      	nop
 80098a4:	2000000c 	.word	0x2000000c
 80098a8:	0800a170 	.word	0x0800a170
 80098ac:	0800a17d 	.word	0x0800a17d
 80098b0:	0800a1ab 	.word	0x0800a1ab

080098b4 <fiprintf>:
 80098b4:	b40e      	push	{r1, r2, r3}
 80098b6:	b503      	push	{r0, r1, lr}
 80098b8:	4601      	mov	r1, r0
 80098ba:	ab03      	add	r3, sp, #12
 80098bc:	4805      	ldr	r0, [pc, #20]	; (80098d4 <fiprintf+0x20>)
 80098be:	f853 2b04 	ldr.w	r2, [r3], #4
 80098c2:	6800      	ldr	r0, [r0, #0]
 80098c4:	9301      	str	r3, [sp, #4]
 80098c6:	f7ff fc37 	bl	8009138 <_vfiprintf_r>
 80098ca:	b002      	add	sp, #8
 80098cc:	f85d eb04 	ldr.w	lr, [sp], #4
 80098d0:	b003      	add	sp, #12
 80098d2:	4770      	bx	lr
 80098d4:	2000000c 	.word	0x2000000c

080098d8 <_fstat_r>:
 80098d8:	b538      	push	{r3, r4, r5, lr}
 80098da:	4d07      	ldr	r5, [pc, #28]	; (80098f8 <_fstat_r+0x20>)
 80098dc:	2300      	movs	r3, #0
 80098de:	4604      	mov	r4, r0
 80098e0:	4608      	mov	r0, r1
 80098e2:	4611      	mov	r1, r2
 80098e4:	602b      	str	r3, [r5, #0]
 80098e6:	f7f7 fed8 	bl	800169a <_fstat>
 80098ea:	1c43      	adds	r3, r0, #1
 80098ec:	d102      	bne.n	80098f4 <_fstat_r+0x1c>
 80098ee:	682b      	ldr	r3, [r5, #0]
 80098f0:	b103      	cbz	r3, 80098f4 <_fstat_r+0x1c>
 80098f2:	6023      	str	r3, [r4, #0]
 80098f4:	bd38      	pop	{r3, r4, r5, pc}
 80098f6:	bf00      	nop
 80098f8:	20000318 	.word	0x20000318

080098fc <_isatty_r>:
 80098fc:	b538      	push	{r3, r4, r5, lr}
 80098fe:	4d06      	ldr	r5, [pc, #24]	; (8009918 <_isatty_r+0x1c>)
 8009900:	2300      	movs	r3, #0
 8009902:	4604      	mov	r4, r0
 8009904:	4608      	mov	r0, r1
 8009906:	602b      	str	r3, [r5, #0]
 8009908:	f7f7 fed7 	bl	80016ba <_isatty>
 800990c:	1c43      	adds	r3, r0, #1
 800990e:	d102      	bne.n	8009916 <_isatty_r+0x1a>
 8009910:	682b      	ldr	r3, [r5, #0]
 8009912:	b103      	cbz	r3, 8009916 <_isatty_r+0x1a>
 8009914:	6023      	str	r3, [r4, #0]
 8009916:	bd38      	pop	{r3, r4, r5, pc}
 8009918:	20000318 	.word	0x20000318

0800991c <memmove>:
 800991c:	4288      	cmp	r0, r1
 800991e:	b510      	push	{r4, lr}
 8009920:	eb01 0402 	add.w	r4, r1, r2
 8009924:	d902      	bls.n	800992c <memmove+0x10>
 8009926:	4284      	cmp	r4, r0
 8009928:	4623      	mov	r3, r4
 800992a:	d807      	bhi.n	800993c <memmove+0x20>
 800992c:	1e43      	subs	r3, r0, #1
 800992e:	42a1      	cmp	r1, r4
 8009930:	d008      	beq.n	8009944 <memmove+0x28>
 8009932:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009936:	f803 2f01 	strb.w	r2, [r3, #1]!
 800993a:	e7f8      	b.n	800992e <memmove+0x12>
 800993c:	4402      	add	r2, r0
 800993e:	4601      	mov	r1, r0
 8009940:	428a      	cmp	r2, r1
 8009942:	d100      	bne.n	8009946 <memmove+0x2a>
 8009944:	bd10      	pop	{r4, pc}
 8009946:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800994a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800994e:	e7f7      	b.n	8009940 <memmove+0x24>

08009950 <__malloc_lock>:
 8009950:	4801      	ldr	r0, [pc, #4]	; (8009958 <__malloc_lock+0x8>)
 8009952:	f7fe ba3e 	b.w	8007dd2 <__retarget_lock_acquire_recursive>
 8009956:	bf00      	nop
 8009958:	2000030c 	.word	0x2000030c

0800995c <__malloc_unlock>:
 800995c:	4801      	ldr	r0, [pc, #4]	; (8009964 <__malloc_unlock+0x8>)
 800995e:	f7fe ba39 	b.w	8007dd4 <__retarget_lock_release_recursive>
 8009962:	bf00      	nop
 8009964:	2000030c 	.word	0x2000030c

08009968 <_realloc_r>:
 8009968:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800996c:	4680      	mov	r8, r0
 800996e:	4614      	mov	r4, r2
 8009970:	460e      	mov	r6, r1
 8009972:	b921      	cbnz	r1, 800997e <_realloc_r+0x16>
 8009974:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009978:	4611      	mov	r1, r2
 800997a:	f7ff b811 	b.w	80089a0 <_malloc_r>
 800997e:	b92a      	cbnz	r2, 800998c <_realloc_r+0x24>
 8009980:	f7fe ffa2 	bl	80088c8 <_free_r>
 8009984:	4625      	mov	r5, r4
 8009986:	4628      	mov	r0, r5
 8009988:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800998c:	f000 f822 	bl	80099d4 <_malloc_usable_size_r>
 8009990:	4284      	cmp	r4, r0
 8009992:	4607      	mov	r7, r0
 8009994:	d802      	bhi.n	800999c <_realloc_r+0x34>
 8009996:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800999a:	d812      	bhi.n	80099c2 <_realloc_r+0x5a>
 800999c:	4621      	mov	r1, r4
 800999e:	4640      	mov	r0, r8
 80099a0:	f7fe fffe 	bl	80089a0 <_malloc_r>
 80099a4:	4605      	mov	r5, r0
 80099a6:	2800      	cmp	r0, #0
 80099a8:	d0ed      	beq.n	8009986 <_realloc_r+0x1e>
 80099aa:	42bc      	cmp	r4, r7
 80099ac:	4622      	mov	r2, r4
 80099ae:	4631      	mov	r1, r6
 80099b0:	bf28      	it	cs
 80099b2:	463a      	movcs	r2, r7
 80099b4:	f7fe faa2 	bl	8007efc <memcpy>
 80099b8:	4631      	mov	r1, r6
 80099ba:	4640      	mov	r0, r8
 80099bc:	f7fe ff84 	bl	80088c8 <_free_r>
 80099c0:	e7e1      	b.n	8009986 <_realloc_r+0x1e>
 80099c2:	4635      	mov	r5, r6
 80099c4:	e7df      	b.n	8009986 <_realloc_r+0x1e>

080099c6 <abort>:
 80099c6:	b508      	push	{r3, lr}
 80099c8:	2006      	movs	r0, #6
 80099ca:	f000 f833 	bl	8009a34 <raise>
 80099ce:	2001      	movs	r0, #1
 80099d0:	f7f7 fe14 	bl	80015fc <_exit>

080099d4 <_malloc_usable_size_r>:
 80099d4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80099d8:	1f18      	subs	r0, r3, #4
 80099da:	2b00      	cmp	r3, #0
 80099dc:	bfbc      	itt	lt
 80099de:	580b      	ldrlt	r3, [r1, r0]
 80099e0:	18c0      	addlt	r0, r0, r3
 80099e2:	4770      	bx	lr

080099e4 <_raise_r>:
 80099e4:	291f      	cmp	r1, #31
 80099e6:	b538      	push	{r3, r4, r5, lr}
 80099e8:	4604      	mov	r4, r0
 80099ea:	460d      	mov	r5, r1
 80099ec:	d904      	bls.n	80099f8 <_raise_r+0x14>
 80099ee:	2316      	movs	r3, #22
 80099f0:	6003      	str	r3, [r0, #0]
 80099f2:	f04f 30ff 	mov.w	r0, #4294967295
 80099f6:	bd38      	pop	{r3, r4, r5, pc}
 80099f8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80099fa:	b112      	cbz	r2, 8009a02 <_raise_r+0x1e>
 80099fc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009a00:	b94b      	cbnz	r3, 8009a16 <_raise_r+0x32>
 8009a02:	4620      	mov	r0, r4
 8009a04:	f000 f830 	bl	8009a68 <_getpid_r>
 8009a08:	462a      	mov	r2, r5
 8009a0a:	4601      	mov	r1, r0
 8009a0c:	4620      	mov	r0, r4
 8009a0e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009a12:	f000 b817 	b.w	8009a44 <_kill_r>
 8009a16:	2b01      	cmp	r3, #1
 8009a18:	d00a      	beq.n	8009a30 <_raise_r+0x4c>
 8009a1a:	1c59      	adds	r1, r3, #1
 8009a1c:	d103      	bne.n	8009a26 <_raise_r+0x42>
 8009a1e:	2316      	movs	r3, #22
 8009a20:	6003      	str	r3, [r0, #0]
 8009a22:	2001      	movs	r0, #1
 8009a24:	e7e7      	b.n	80099f6 <_raise_r+0x12>
 8009a26:	2400      	movs	r4, #0
 8009a28:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009a2c:	4628      	mov	r0, r5
 8009a2e:	4798      	blx	r3
 8009a30:	2000      	movs	r0, #0
 8009a32:	e7e0      	b.n	80099f6 <_raise_r+0x12>

08009a34 <raise>:
 8009a34:	4b02      	ldr	r3, [pc, #8]	; (8009a40 <raise+0xc>)
 8009a36:	4601      	mov	r1, r0
 8009a38:	6818      	ldr	r0, [r3, #0]
 8009a3a:	f7ff bfd3 	b.w	80099e4 <_raise_r>
 8009a3e:	bf00      	nop
 8009a40:	2000000c 	.word	0x2000000c

08009a44 <_kill_r>:
 8009a44:	b538      	push	{r3, r4, r5, lr}
 8009a46:	4d07      	ldr	r5, [pc, #28]	; (8009a64 <_kill_r+0x20>)
 8009a48:	2300      	movs	r3, #0
 8009a4a:	4604      	mov	r4, r0
 8009a4c:	4608      	mov	r0, r1
 8009a4e:	4611      	mov	r1, r2
 8009a50:	602b      	str	r3, [r5, #0]
 8009a52:	f7f7 fdc3 	bl	80015dc <_kill>
 8009a56:	1c43      	adds	r3, r0, #1
 8009a58:	d102      	bne.n	8009a60 <_kill_r+0x1c>
 8009a5a:	682b      	ldr	r3, [r5, #0]
 8009a5c:	b103      	cbz	r3, 8009a60 <_kill_r+0x1c>
 8009a5e:	6023      	str	r3, [r4, #0]
 8009a60:	bd38      	pop	{r3, r4, r5, pc}
 8009a62:	bf00      	nop
 8009a64:	20000318 	.word	0x20000318

08009a68 <_getpid_r>:
 8009a68:	f7f7 bdb0 	b.w	80015cc <_getpid>

08009a6c <_init>:
 8009a6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a6e:	bf00      	nop
 8009a70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009a72:	bc08      	pop	{r3}
 8009a74:	469e      	mov	lr, r3
 8009a76:	4770      	bx	lr

08009a78 <_fini>:
 8009a78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a7a:	bf00      	nop
 8009a7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009a7e:	bc08      	pop	{r3}
 8009a80:	469e      	mov	lr, r3
 8009a82:	4770      	bx	lr
