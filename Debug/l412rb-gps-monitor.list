
l412rb-gps-monitor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000039b8  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ec  08003b44  08003b44  00013b44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003c30  08003c30  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08003c30  08003c30  00013c30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003c38  08003c38  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003c38  08003c38  00013c38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003c3c  08003c3c  00013c3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003c40  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000013c  20000070  08003cb0  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001ac  08003cb0  000201ac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b3e7  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001aeb  00000000  00000000  0002b487  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000960  00000000  00000000  0002cf78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000008a8  00000000  00000000  0002d8d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a38a  00000000  00000000  0002e180  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b33c  00000000  00000000  0004850a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a015a  00000000  00000000  00053846  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f39a0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002ba4  00000000  00000000  000f39f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	20000070 	.word	0x20000070
 80001a8:	00000000 	.word	0x00000000
 80001ac:	08003b2c 	.word	0x08003b2c

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000074 	.word	0x20000074
 80001c8:	08003b2c 	.word	0x08003b2c

080001cc <__aeabi_uldivmod>:
 80001cc:	b953      	cbnz	r3, 80001e4 <__aeabi_uldivmod+0x18>
 80001ce:	b94a      	cbnz	r2, 80001e4 <__aeabi_uldivmod+0x18>
 80001d0:	2900      	cmp	r1, #0
 80001d2:	bf08      	it	eq
 80001d4:	2800      	cmpeq	r0, #0
 80001d6:	bf1c      	itt	ne
 80001d8:	f04f 31ff 	movne.w	r1, #4294967295
 80001dc:	f04f 30ff 	movne.w	r0, #4294967295
 80001e0:	f000 b974 	b.w	80004cc <__aeabi_idiv0>
 80001e4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001ec:	f000 f806 	bl	80001fc <__udivmoddi4>
 80001f0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f8:	b004      	add	sp, #16
 80001fa:	4770      	bx	lr

080001fc <__udivmoddi4>:
 80001fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000200:	9d08      	ldr	r5, [sp, #32]
 8000202:	4604      	mov	r4, r0
 8000204:	468e      	mov	lr, r1
 8000206:	2b00      	cmp	r3, #0
 8000208:	d14d      	bne.n	80002a6 <__udivmoddi4+0xaa>
 800020a:	428a      	cmp	r2, r1
 800020c:	4694      	mov	ip, r2
 800020e:	d969      	bls.n	80002e4 <__udivmoddi4+0xe8>
 8000210:	fab2 f282 	clz	r2, r2
 8000214:	b152      	cbz	r2, 800022c <__udivmoddi4+0x30>
 8000216:	fa01 f302 	lsl.w	r3, r1, r2
 800021a:	f1c2 0120 	rsb	r1, r2, #32
 800021e:	fa20 f101 	lsr.w	r1, r0, r1
 8000222:	fa0c fc02 	lsl.w	ip, ip, r2
 8000226:	ea41 0e03 	orr.w	lr, r1, r3
 800022a:	4094      	lsls	r4, r2
 800022c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000230:	0c21      	lsrs	r1, r4, #16
 8000232:	fbbe f6f8 	udiv	r6, lr, r8
 8000236:	fa1f f78c 	uxth.w	r7, ip
 800023a:	fb08 e316 	mls	r3, r8, r6, lr
 800023e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000242:	fb06 f107 	mul.w	r1, r6, r7
 8000246:	4299      	cmp	r1, r3
 8000248:	d90a      	bls.n	8000260 <__udivmoddi4+0x64>
 800024a:	eb1c 0303 	adds.w	r3, ip, r3
 800024e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000252:	f080 811f 	bcs.w	8000494 <__udivmoddi4+0x298>
 8000256:	4299      	cmp	r1, r3
 8000258:	f240 811c 	bls.w	8000494 <__udivmoddi4+0x298>
 800025c:	3e02      	subs	r6, #2
 800025e:	4463      	add	r3, ip
 8000260:	1a5b      	subs	r3, r3, r1
 8000262:	b2a4      	uxth	r4, r4
 8000264:	fbb3 f0f8 	udiv	r0, r3, r8
 8000268:	fb08 3310 	mls	r3, r8, r0, r3
 800026c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000270:	fb00 f707 	mul.w	r7, r0, r7
 8000274:	42a7      	cmp	r7, r4
 8000276:	d90a      	bls.n	800028e <__udivmoddi4+0x92>
 8000278:	eb1c 0404 	adds.w	r4, ip, r4
 800027c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000280:	f080 810a 	bcs.w	8000498 <__udivmoddi4+0x29c>
 8000284:	42a7      	cmp	r7, r4
 8000286:	f240 8107 	bls.w	8000498 <__udivmoddi4+0x29c>
 800028a:	4464      	add	r4, ip
 800028c:	3802      	subs	r0, #2
 800028e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000292:	1be4      	subs	r4, r4, r7
 8000294:	2600      	movs	r6, #0
 8000296:	b11d      	cbz	r5, 80002a0 <__udivmoddi4+0xa4>
 8000298:	40d4      	lsrs	r4, r2
 800029a:	2300      	movs	r3, #0
 800029c:	e9c5 4300 	strd	r4, r3, [r5]
 80002a0:	4631      	mov	r1, r6
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	428b      	cmp	r3, r1
 80002a8:	d909      	bls.n	80002be <__udivmoddi4+0xc2>
 80002aa:	2d00      	cmp	r5, #0
 80002ac:	f000 80ef 	beq.w	800048e <__udivmoddi4+0x292>
 80002b0:	2600      	movs	r6, #0
 80002b2:	e9c5 0100 	strd	r0, r1, [r5]
 80002b6:	4630      	mov	r0, r6
 80002b8:	4631      	mov	r1, r6
 80002ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002be:	fab3 f683 	clz	r6, r3
 80002c2:	2e00      	cmp	r6, #0
 80002c4:	d14a      	bne.n	800035c <__udivmoddi4+0x160>
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d302      	bcc.n	80002d0 <__udivmoddi4+0xd4>
 80002ca:	4282      	cmp	r2, r0
 80002cc:	f200 80f9 	bhi.w	80004c2 <__udivmoddi4+0x2c6>
 80002d0:	1a84      	subs	r4, r0, r2
 80002d2:	eb61 0303 	sbc.w	r3, r1, r3
 80002d6:	2001      	movs	r0, #1
 80002d8:	469e      	mov	lr, r3
 80002da:	2d00      	cmp	r5, #0
 80002dc:	d0e0      	beq.n	80002a0 <__udivmoddi4+0xa4>
 80002de:	e9c5 4e00 	strd	r4, lr, [r5]
 80002e2:	e7dd      	b.n	80002a0 <__udivmoddi4+0xa4>
 80002e4:	b902      	cbnz	r2, 80002e8 <__udivmoddi4+0xec>
 80002e6:	deff      	udf	#255	; 0xff
 80002e8:	fab2 f282 	clz	r2, r2
 80002ec:	2a00      	cmp	r2, #0
 80002ee:	f040 8092 	bne.w	8000416 <__udivmoddi4+0x21a>
 80002f2:	eba1 010c 	sub.w	r1, r1, ip
 80002f6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fa:	fa1f fe8c 	uxth.w	lr, ip
 80002fe:	2601      	movs	r6, #1
 8000300:	0c20      	lsrs	r0, r4, #16
 8000302:	fbb1 f3f7 	udiv	r3, r1, r7
 8000306:	fb07 1113 	mls	r1, r7, r3, r1
 800030a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030e:	fb0e f003 	mul.w	r0, lr, r3
 8000312:	4288      	cmp	r0, r1
 8000314:	d908      	bls.n	8000328 <__udivmoddi4+0x12c>
 8000316:	eb1c 0101 	adds.w	r1, ip, r1
 800031a:	f103 38ff 	add.w	r8, r3, #4294967295
 800031e:	d202      	bcs.n	8000326 <__udivmoddi4+0x12a>
 8000320:	4288      	cmp	r0, r1
 8000322:	f200 80cb 	bhi.w	80004bc <__udivmoddi4+0x2c0>
 8000326:	4643      	mov	r3, r8
 8000328:	1a09      	subs	r1, r1, r0
 800032a:	b2a4      	uxth	r4, r4
 800032c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000330:	fb07 1110 	mls	r1, r7, r0, r1
 8000334:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000338:	fb0e fe00 	mul.w	lr, lr, r0
 800033c:	45a6      	cmp	lr, r4
 800033e:	d908      	bls.n	8000352 <__udivmoddi4+0x156>
 8000340:	eb1c 0404 	adds.w	r4, ip, r4
 8000344:	f100 31ff 	add.w	r1, r0, #4294967295
 8000348:	d202      	bcs.n	8000350 <__udivmoddi4+0x154>
 800034a:	45a6      	cmp	lr, r4
 800034c:	f200 80bb 	bhi.w	80004c6 <__udivmoddi4+0x2ca>
 8000350:	4608      	mov	r0, r1
 8000352:	eba4 040e 	sub.w	r4, r4, lr
 8000356:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800035a:	e79c      	b.n	8000296 <__udivmoddi4+0x9a>
 800035c:	f1c6 0720 	rsb	r7, r6, #32
 8000360:	40b3      	lsls	r3, r6
 8000362:	fa22 fc07 	lsr.w	ip, r2, r7
 8000366:	ea4c 0c03 	orr.w	ip, ip, r3
 800036a:	fa20 f407 	lsr.w	r4, r0, r7
 800036e:	fa01 f306 	lsl.w	r3, r1, r6
 8000372:	431c      	orrs	r4, r3
 8000374:	40f9      	lsrs	r1, r7
 8000376:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800037a:	fa00 f306 	lsl.w	r3, r0, r6
 800037e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000382:	0c20      	lsrs	r0, r4, #16
 8000384:	fa1f fe8c 	uxth.w	lr, ip
 8000388:	fb09 1118 	mls	r1, r9, r8, r1
 800038c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000390:	fb08 f00e 	mul.w	r0, r8, lr
 8000394:	4288      	cmp	r0, r1
 8000396:	fa02 f206 	lsl.w	r2, r2, r6
 800039a:	d90b      	bls.n	80003b4 <__udivmoddi4+0x1b8>
 800039c:	eb1c 0101 	adds.w	r1, ip, r1
 80003a0:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a4:	f080 8088 	bcs.w	80004b8 <__udivmoddi4+0x2bc>
 80003a8:	4288      	cmp	r0, r1
 80003aa:	f240 8085 	bls.w	80004b8 <__udivmoddi4+0x2bc>
 80003ae:	f1a8 0802 	sub.w	r8, r8, #2
 80003b2:	4461      	add	r1, ip
 80003b4:	1a09      	subs	r1, r1, r0
 80003b6:	b2a4      	uxth	r4, r4
 80003b8:	fbb1 f0f9 	udiv	r0, r1, r9
 80003bc:	fb09 1110 	mls	r1, r9, r0, r1
 80003c0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c4:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c8:	458e      	cmp	lr, r1
 80003ca:	d908      	bls.n	80003de <__udivmoddi4+0x1e2>
 80003cc:	eb1c 0101 	adds.w	r1, ip, r1
 80003d0:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d4:	d26c      	bcs.n	80004b0 <__udivmoddi4+0x2b4>
 80003d6:	458e      	cmp	lr, r1
 80003d8:	d96a      	bls.n	80004b0 <__udivmoddi4+0x2b4>
 80003da:	3802      	subs	r0, #2
 80003dc:	4461      	add	r1, ip
 80003de:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003e2:	fba0 9402 	umull	r9, r4, r0, r2
 80003e6:	eba1 010e 	sub.w	r1, r1, lr
 80003ea:	42a1      	cmp	r1, r4
 80003ec:	46c8      	mov	r8, r9
 80003ee:	46a6      	mov	lr, r4
 80003f0:	d356      	bcc.n	80004a0 <__udivmoddi4+0x2a4>
 80003f2:	d053      	beq.n	800049c <__udivmoddi4+0x2a0>
 80003f4:	b15d      	cbz	r5, 800040e <__udivmoddi4+0x212>
 80003f6:	ebb3 0208 	subs.w	r2, r3, r8
 80003fa:	eb61 010e 	sbc.w	r1, r1, lr
 80003fe:	fa01 f707 	lsl.w	r7, r1, r7
 8000402:	fa22 f306 	lsr.w	r3, r2, r6
 8000406:	40f1      	lsrs	r1, r6
 8000408:	431f      	orrs	r7, r3
 800040a:	e9c5 7100 	strd	r7, r1, [r5]
 800040e:	2600      	movs	r6, #0
 8000410:	4631      	mov	r1, r6
 8000412:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000416:	f1c2 0320 	rsb	r3, r2, #32
 800041a:	40d8      	lsrs	r0, r3
 800041c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000420:	fa21 f303 	lsr.w	r3, r1, r3
 8000424:	4091      	lsls	r1, r2
 8000426:	4301      	orrs	r1, r0
 8000428:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800042c:	fa1f fe8c 	uxth.w	lr, ip
 8000430:	fbb3 f0f7 	udiv	r0, r3, r7
 8000434:	fb07 3610 	mls	r6, r7, r0, r3
 8000438:	0c0b      	lsrs	r3, r1, #16
 800043a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043e:	fb00 f60e 	mul.w	r6, r0, lr
 8000442:	429e      	cmp	r6, r3
 8000444:	fa04 f402 	lsl.w	r4, r4, r2
 8000448:	d908      	bls.n	800045c <__udivmoddi4+0x260>
 800044a:	eb1c 0303 	adds.w	r3, ip, r3
 800044e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000452:	d22f      	bcs.n	80004b4 <__udivmoddi4+0x2b8>
 8000454:	429e      	cmp	r6, r3
 8000456:	d92d      	bls.n	80004b4 <__udivmoddi4+0x2b8>
 8000458:	3802      	subs	r0, #2
 800045a:	4463      	add	r3, ip
 800045c:	1b9b      	subs	r3, r3, r6
 800045e:	b289      	uxth	r1, r1
 8000460:	fbb3 f6f7 	udiv	r6, r3, r7
 8000464:	fb07 3316 	mls	r3, r7, r6, r3
 8000468:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046c:	fb06 f30e 	mul.w	r3, r6, lr
 8000470:	428b      	cmp	r3, r1
 8000472:	d908      	bls.n	8000486 <__udivmoddi4+0x28a>
 8000474:	eb1c 0101 	adds.w	r1, ip, r1
 8000478:	f106 38ff 	add.w	r8, r6, #4294967295
 800047c:	d216      	bcs.n	80004ac <__udivmoddi4+0x2b0>
 800047e:	428b      	cmp	r3, r1
 8000480:	d914      	bls.n	80004ac <__udivmoddi4+0x2b0>
 8000482:	3e02      	subs	r6, #2
 8000484:	4461      	add	r1, ip
 8000486:	1ac9      	subs	r1, r1, r3
 8000488:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 800048c:	e738      	b.n	8000300 <__udivmoddi4+0x104>
 800048e:	462e      	mov	r6, r5
 8000490:	4628      	mov	r0, r5
 8000492:	e705      	b.n	80002a0 <__udivmoddi4+0xa4>
 8000494:	4606      	mov	r6, r0
 8000496:	e6e3      	b.n	8000260 <__udivmoddi4+0x64>
 8000498:	4618      	mov	r0, r3
 800049a:	e6f8      	b.n	800028e <__udivmoddi4+0x92>
 800049c:	454b      	cmp	r3, r9
 800049e:	d2a9      	bcs.n	80003f4 <__udivmoddi4+0x1f8>
 80004a0:	ebb9 0802 	subs.w	r8, r9, r2
 80004a4:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a8:	3801      	subs	r0, #1
 80004aa:	e7a3      	b.n	80003f4 <__udivmoddi4+0x1f8>
 80004ac:	4646      	mov	r6, r8
 80004ae:	e7ea      	b.n	8000486 <__udivmoddi4+0x28a>
 80004b0:	4620      	mov	r0, r4
 80004b2:	e794      	b.n	80003de <__udivmoddi4+0x1e2>
 80004b4:	4640      	mov	r0, r8
 80004b6:	e7d1      	b.n	800045c <__udivmoddi4+0x260>
 80004b8:	46d0      	mov	r8, sl
 80004ba:	e77b      	b.n	80003b4 <__udivmoddi4+0x1b8>
 80004bc:	3b02      	subs	r3, #2
 80004be:	4461      	add	r1, ip
 80004c0:	e732      	b.n	8000328 <__udivmoddi4+0x12c>
 80004c2:	4630      	mov	r0, r6
 80004c4:	e709      	b.n	80002da <__udivmoddi4+0xde>
 80004c6:	4464      	add	r4, ip
 80004c8:	3802      	subs	r0, #2
 80004ca:	e742      	b.n	8000352 <__udivmoddi4+0x156>

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <__io_putchar>:
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE {
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b082      	sub	sp, #8
 80004d4:	af00      	add	r7, sp, #0
 80004d6:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*) &ch, 1, HAL_MAX_DELAY);
 80004d8:	1d39      	adds	r1, r7, #4
 80004da:	f04f 33ff 	mov.w	r3, #4294967295
 80004de:	2201      	movs	r2, #1
 80004e0:	4803      	ldr	r0, [pc, #12]	; (80004f0 <__io_putchar+0x20>)
 80004e2:	f002 f85b 	bl	800259c <HAL_UART_Transmit>
	return ch;
 80004e6:	687b      	ldr	r3, [r7, #4]
}
 80004e8:	4618      	mov	r0, r3
 80004ea:	3708      	adds	r7, #8
 80004ec:	46bd      	mov	sp, r7
 80004ee:	bd80      	pop	{r7, pc}
 80004f0:	20000110 	.word	0x20000110

080004f4 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b084      	sub	sp, #16
 80004f8:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80004fa:	f000 fc67 	bl	8000dcc <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80004fe:	f000 f82b 	bl	8000558 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000502:	f000 f8d9 	bl	80006b8 <MX_GPIO_Init>
	MX_USART2_UART_Init();
 8000506:	f000 f8a7 	bl	8000658 <MX_USART2_UART_Init>
	MX_USART1_UART_Init();
 800050a:	f000 f875 	bl	80005f8 <MX_USART1_UART_Init>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */

	printf("GPS-Monitor Startup\n");
 800050e:	480d      	ldr	r0, [pc, #52]	; (8000544 <main+0x50>)
 8000510:	f002 fe54 	bl	80031bc <puts>

	while (1) {

		ublox_neo6m_init(&huart1, &huart2);
 8000514:	463b      	mov	r3, r7
 8000516:	4a0c      	ldr	r2, [pc, #48]	; (8000548 <main+0x54>)
 8000518:	490c      	ldr	r1, [pc, #48]	; (800054c <main+0x58>)
 800051a:	4618      	mov	r0, r3
 800051c:	f000 faf8 	bl	8000b10 <ublox_neo6m_init>

		printf("Finished reading\n");
 8000520:	480b      	ldr	r0, [pc, #44]	; (8000550 <main+0x5c>)
 8000522:	f002 fe4b 	bl	80031bc <puts>

		// Blink an LED to indicate that new data has been received
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_13);
 8000526:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800052a:	480a      	ldr	r0, [pc, #40]	; (8000554 <main+0x60>)
 800052c:	f000 ff5e 	bl	80013ec <HAL_GPIO_TogglePin>
		HAL_Delay(500);
 8000530:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000534:	f000 fcc6 	bl	8000ec4 <HAL_Delay>
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_13);
 8000538:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800053c:	4805      	ldr	r0, [pc, #20]	; (8000554 <main+0x60>)
 800053e:	f000 ff55 	bl	80013ec <HAL_GPIO_TogglePin>
		ublox_neo6m_init(&huart1, &huart2);
 8000542:	e7e7      	b.n	8000514 <main+0x20>
 8000544:	08003b44 	.word	0x08003b44
 8000548:	20000110 	.word	0x20000110
 800054c:	2000008c 	.word	0x2000008c
 8000550:	08003b58 	.word	0x08003b58
 8000554:	48000400 	.word	0x48000400

08000558 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000558:	b580      	push	{r7, lr}
 800055a:	b096      	sub	sp, #88	; 0x58
 800055c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800055e:	f107 0314 	add.w	r3, r7, #20
 8000562:	2244      	movs	r2, #68	; 0x44
 8000564:	2100      	movs	r1, #0
 8000566:	4618      	mov	r0, r3
 8000568:	f002 fdb2 	bl	80030d0 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 800056c:	463b      	mov	r3, r7
 800056e:	2200      	movs	r2, #0
 8000570:	601a      	str	r2, [r3, #0]
 8000572:	605a      	str	r2, [r3, #4]
 8000574:	609a      	str	r2, [r3, #8]
 8000576:	60da      	str	r2, [r3, #12]
 8000578:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK) {
 800057a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800057e:	f000 ff5d 	bl	800143c <HAL_PWREx_ControlVoltageScaling>
 8000582:	4603      	mov	r3, r0
 8000584:	2b00      	cmp	r3, #0
 8000586:	d001      	beq.n	800058c <SystemClock_Config+0x34>
		Error_Handler();
 8000588:	f000 f920 	bl	80007cc <Error_Handler>
	}

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800058c:	2310      	movs	r3, #16
 800058e:	617b      	str	r3, [r7, #20]
	RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000590:	2301      	movs	r3, #1
 8000592:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.MSICalibrationValue = 0;
 8000594:	2300      	movs	r3, #0
 8000596:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000598:	2360      	movs	r3, #96	; 0x60
 800059a:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800059c:	2302      	movs	r3, #2
 800059e:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80005a0:	2301      	movs	r3, #1
 80005a2:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLM = 1;
 80005a4:	2301      	movs	r3, #1
 80005a6:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLN = 40;
 80005a8:	2328      	movs	r3, #40	; 0x28
 80005aa:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80005ac:	2302      	movs	r3, #2
 80005ae:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80005b0:	2302      	movs	r3, #2
 80005b2:	657b      	str	r3, [r7, #84]	; 0x54
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80005b4:	f107 0314 	add.w	r3, r7, #20
 80005b8:	4618      	mov	r0, r3
 80005ba:	f000 ff95 	bl	80014e8 <HAL_RCC_OscConfig>
 80005be:	4603      	mov	r3, r0
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d001      	beq.n	80005c8 <SystemClock_Config+0x70>
		Error_Handler();
 80005c4:	f000 f902 	bl	80007cc <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80005c8:	230f      	movs	r3, #15
 80005ca:	603b      	str	r3, [r7, #0]
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005cc:	2303      	movs	r3, #3
 80005ce:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005d0:	2300      	movs	r3, #0
 80005d2:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005d4:	2300      	movs	r3, #0
 80005d6:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005d8:	2300      	movs	r3, #0
 80005da:	613b      	str	r3, [r7, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK) {
 80005dc:	463b      	mov	r3, r7
 80005de:	2104      	movs	r1, #4
 80005e0:	4618      	mov	r0, r3
 80005e2:	f001 fbe3 	bl	8001dac <HAL_RCC_ClockConfig>
 80005e6:	4603      	mov	r3, r0
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d001      	beq.n	80005f0 <SystemClock_Config+0x98>
		Error_Handler();
 80005ec:	f000 f8ee 	bl	80007cc <Error_Handler>
	}
}
 80005f0:	bf00      	nop
 80005f2:	3758      	adds	r7, #88	; 0x58
 80005f4:	46bd      	mov	sp, r7
 80005f6:	bd80      	pop	{r7, pc}

080005f8 <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 80005f8:	b580      	push	{r7, lr}
 80005fa:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 80005fc:	4b14      	ldr	r3, [pc, #80]	; (8000650 <MX_USART1_UART_Init+0x58>)
 80005fe:	4a15      	ldr	r2, [pc, #84]	; (8000654 <MX_USART1_UART_Init+0x5c>)
 8000600:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 9600;
 8000602:	4b13      	ldr	r3, [pc, #76]	; (8000650 <MX_USART1_UART_Init+0x58>)
 8000604:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000608:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800060a:	4b11      	ldr	r3, [pc, #68]	; (8000650 <MX_USART1_UART_Init+0x58>)
 800060c:	2200      	movs	r2, #0
 800060e:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8000610:	4b0f      	ldr	r3, [pc, #60]	; (8000650 <MX_USART1_UART_Init+0x58>)
 8000612:	2200      	movs	r2, #0
 8000614:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8000616:	4b0e      	ldr	r3, [pc, #56]	; (8000650 <MX_USART1_UART_Init+0x58>)
 8000618:	2200      	movs	r2, #0
 800061a:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 800061c:	4b0c      	ldr	r3, [pc, #48]	; (8000650 <MX_USART1_UART_Init+0x58>)
 800061e:	220c      	movs	r2, #12
 8000620:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000622:	4b0b      	ldr	r3, [pc, #44]	; (8000650 <MX_USART1_UART_Init+0x58>)
 8000624:	2200      	movs	r2, #0
 8000626:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000628:	4b09      	ldr	r3, [pc, #36]	; (8000650 <MX_USART1_UART_Init+0x58>)
 800062a:	2200      	movs	r2, #0
 800062c:	61da      	str	r2, [r3, #28]
	huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800062e:	4b08      	ldr	r3, [pc, #32]	; (8000650 <MX_USART1_UART_Init+0x58>)
 8000630:	2200      	movs	r2, #0
 8000632:	621a      	str	r2, [r3, #32]
	huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000634:	4b06      	ldr	r3, [pc, #24]	; (8000650 <MX_USART1_UART_Init+0x58>)
 8000636:	2200      	movs	r2, #0
 8000638:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 800063a:	4805      	ldr	r0, [pc, #20]	; (8000650 <MX_USART1_UART_Init+0x58>)
 800063c:	f001 ff60 	bl	8002500 <HAL_UART_Init>
 8000640:	4603      	mov	r3, r0
 8000642:	2b00      	cmp	r3, #0
 8000644:	d001      	beq.n	800064a <MX_USART1_UART_Init+0x52>
		Error_Handler();
 8000646:	f000 f8c1 	bl	80007cc <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 800064a:	bf00      	nop
 800064c:	bd80      	pop	{r7, pc}
 800064e:	bf00      	nop
 8000650:	2000008c 	.word	0x2000008c
 8000654:	40013800 	.word	0x40013800

08000658 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 8000658:	b580      	push	{r7, lr}
 800065a:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 800065c:	4b14      	ldr	r3, [pc, #80]	; (80006b0 <MX_USART2_UART_Init+0x58>)
 800065e:	4a15      	ldr	r2, [pc, #84]	; (80006b4 <MX_USART2_UART_Init+0x5c>)
 8000660:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8000662:	4b13      	ldr	r3, [pc, #76]	; (80006b0 <MX_USART2_UART_Init+0x58>)
 8000664:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000668:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800066a:	4b11      	ldr	r3, [pc, #68]	; (80006b0 <MX_USART2_UART_Init+0x58>)
 800066c:	2200      	movs	r2, #0
 800066e:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8000670:	4b0f      	ldr	r3, [pc, #60]	; (80006b0 <MX_USART2_UART_Init+0x58>)
 8000672:	2200      	movs	r2, #0
 8000674:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8000676:	4b0e      	ldr	r3, [pc, #56]	; (80006b0 <MX_USART2_UART_Init+0x58>)
 8000678:	2200      	movs	r2, #0
 800067a:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 800067c:	4b0c      	ldr	r3, [pc, #48]	; (80006b0 <MX_USART2_UART_Init+0x58>)
 800067e:	220c      	movs	r2, #12
 8000680:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000682:	4b0b      	ldr	r3, [pc, #44]	; (80006b0 <MX_USART2_UART_Init+0x58>)
 8000684:	2200      	movs	r2, #0
 8000686:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000688:	4b09      	ldr	r3, [pc, #36]	; (80006b0 <MX_USART2_UART_Init+0x58>)
 800068a:	2200      	movs	r2, #0
 800068c:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800068e:	4b08      	ldr	r3, [pc, #32]	; (80006b0 <MX_USART2_UART_Init+0x58>)
 8000690:	2200      	movs	r2, #0
 8000692:	621a      	str	r2, [r3, #32]
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000694:	4b06      	ldr	r3, [pc, #24]	; (80006b0 <MX_USART2_UART_Init+0x58>)
 8000696:	2200      	movs	r2, #0
 8000698:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 800069a:	4805      	ldr	r0, [pc, #20]	; (80006b0 <MX_USART2_UART_Init+0x58>)
 800069c:	f001 ff30 	bl	8002500 <HAL_UART_Init>
 80006a0:	4603      	mov	r3, r0
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d001      	beq.n	80006aa <MX_USART2_UART_Init+0x52>
		Error_Handler();
 80006a6:	f000 f891 	bl	80007cc <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 80006aa:	bf00      	nop
 80006ac:	bd80      	pop	{r7, pc}
 80006ae:	bf00      	nop
 80006b0:	20000110 	.word	0x20000110
 80006b4:	40004400 	.word	0x40004400

080006b8 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b08a      	sub	sp, #40	; 0x28
 80006bc:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80006be:	f107 0314 	add.w	r3, r7, #20
 80006c2:	2200      	movs	r2, #0
 80006c4:	601a      	str	r2, [r3, #0]
 80006c6:	605a      	str	r2, [r3, #4]
 80006c8:	609a      	str	r2, [r3, #8]
 80006ca:	60da      	str	r2, [r3, #12]
 80006cc:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80006ce:	4b3c      	ldr	r3, [pc, #240]	; (80007c0 <MX_GPIO_Init+0x108>)
 80006d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006d2:	4a3b      	ldr	r2, [pc, #236]	; (80007c0 <MX_GPIO_Init+0x108>)
 80006d4:	f043 0304 	orr.w	r3, r3, #4
 80006d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006da:	4b39      	ldr	r3, [pc, #228]	; (80007c0 <MX_GPIO_Init+0x108>)
 80006dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006de:	f003 0304 	and.w	r3, r3, #4
 80006e2:	613b      	str	r3, [r7, #16]
 80006e4:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 80006e6:	4b36      	ldr	r3, [pc, #216]	; (80007c0 <MX_GPIO_Init+0x108>)
 80006e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006ea:	4a35      	ldr	r2, [pc, #212]	; (80007c0 <MX_GPIO_Init+0x108>)
 80006ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006f2:	4b33      	ldr	r3, [pc, #204]	; (80007c0 <MX_GPIO_Init+0x108>)
 80006f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006fa:	60fb      	str	r3, [r7, #12]
 80006fc:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80006fe:	4b30      	ldr	r3, [pc, #192]	; (80007c0 <MX_GPIO_Init+0x108>)
 8000700:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000702:	4a2f      	ldr	r2, [pc, #188]	; (80007c0 <MX_GPIO_Init+0x108>)
 8000704:	f043 0301 	orr.w	r3, r3, #1
 8000708:	64d3      	str	r3, [r2, #76]	; 0x4c
 800070a:	4b2d      	ldr	r3, [pc, #180]	; (80007c0 <MX_GPIO_Init+0x108>)
 800070c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800070e:	f003 0301 	and.w	r3, r3, #1
 8000712:	60bb      	str	r3, [r7, #8]
 8000714:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000716:	4b2a      	ldr	r3, [pc, #168]	; (80007c0 <MX_GPIO_Init+0x108>)
 8000718:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800071a:	4a29      	ldr	r2, [pc, #164]	; (80007c0 <MX_GPIO_Init+0x108>)
 800071c:	f043 0302 	orr.w	r3, r3, #2
 8000720:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000722:	4b27      	ldr	r3, [pc, #156]	; (80007c0 <MX_GPIO_Init+0x108>)
 8000724:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000726:	f003 0302 	and.w	r3, r3, #2
 800072a:	607b      	str	r3, [r7, #4]
 800072c:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, SMPS_EN_Pin | SMPS_V1_Pin | SMPS_SW_Pin, GPIO_PIN_RESET);
 800072e:	2200      	movs	r2, #0
 8000730:	21b0      	movs	r1, #176	; 0xb0
 8000732:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000736:	f000 fe41 	bl	80013bc <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_RESET);
 800073a:	2200      	movs	r2, #0
 800073c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000740:	4820      	ldr	r0, [pc, #128]	; (80007c4 <MX_GPIO_Init+0x10c>)
 8000742:	f000 fe3b 	bl	80013bc <HAL_GPIO_WritePin>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 8000746:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800074a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800074c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000750:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000752:	2300      	movs	r3, #0
 8000754:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000756:	f107 0314 	add.w	r3, r7, #20
 800075a:	4619      	mov	r1, r3
 800075c:	481a      	ldr	r0, [pc, #104]	; (80007c8 <MX_GPIO_Init+0x110>)
 800075e:	f000 fcbb 	bl	80010d8 <HAL_GPIO_Init>

	/*Configure GPIO pins : SMPS_EN_Pin SMPS_V1_Pin SMPS_SW_Pin */
	GPIO_InitStruct.Pin = SMPS_EN_Pin | SMPS_V1_Pin | SMPS_SW_Pin;
 8000762:	23b0      	movs	r3, #176	; 0xb0
 8000764:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000766:	2301      	movs	r3, #1
 8000768:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800076a:	2300      	movs	r3, #0
 800076c:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800076e:	2300      	movs	r3, #0
 8000770:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000772:	f107 0314 	add.w	r3, r7, #20
 8000776:	4619      	mov	r1, r3
 8000778:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800077c:	f000 fcac 	bl	80010d8 <HAL_GPIO_Init>

	/*Configure GPIO pin : SMPS_PG_Pin */
	GPIO_InitStruct.Pin = SMPS_PG_Pin;
 8000780:	2340      	movs	r3, #64	; 0x40
 8000782:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000784:	2300      	movs	r3, #0
 8000786:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000788:	2301      	movs	r3, #1
 800078a:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(SMPS_PG_GPIO_Port, &GPIO_InitStruct);
 800078c:	f107 0314 	add.w	r3, r7, #20
 8000790:	4619      	mov	r1, r3
 8000792:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000796:	f000 fc9f 	bl	80010d8 <HAL_GPIO_Init>

	/*Configure GPIO pin : LD4_Pin */
	GPIO_InitStruct.Pin = LD4_Pin;
 800079a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800079e:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007a0:	2301      	movs	r3, #1
 80007a2:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a4:	2300      	movs	r3, #0
 80007a6:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007a8:	2300      	movs	r3, #0
 80007aa:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(LD4_GPIO_Port, &GPIO_InitStruct);
 80007ac:	f107 0314 	add.w	r3, r7, #20
 80007b0:	4619      	mov	r1, r3
 80007b2:	4804      	ldr	r0, [pc, #16]	; (80007c4 <MX_GPIO_Init+0x10c>)
 80007b4:	f000 fc90 	bl	80010d8 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 80007b8:	bf00      	nop
 80007ba:	3728      	adds	r7, #40	; 0x28
 80007bc:	46bd      	mov	sp, r7
 80007be:	bd80      	pop	{r7, pc}
 80007c0:	40021000 	.word	0x40021000
 80007c4:	48000400 	.word	0x48000400
 80007c8:	48000800 	.word	0x48000800

080007cc <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80007cc:	b480      	push	{r7}
 80007ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007d0:	b672      	cpsid	i
}
 80007d2:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80007d4:	e7fe      	b.n	80007d4 <Error_Handler+0x8>
	...

080007d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007d8:	b480      	push	{r7}
 80007da:	b083      	sub	sp, #12
 80007dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007de:	4b0f      	ldr	r3, [pc, #60]	; (800081c <HAL_MspInit+0x44>)
 80007e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80007e2:	4a0e      	ldr	r2, [pc, #56]	; (800081c <HAL_MspInit+0x44>)
 80007e4:	f043 0301 	orr.w	r3, r3, #1
 80007e8:	6613      	str	r3, [r2, #96]	; 0x60
 80007ea:	4b0c      	ldr	r3, [pc, #48]	; (800081c <HAL_MspInit+0x44>)
 80007ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80007ee:	f003 0301 	and.w	r3, r3, #1
 80007f2:	607b      	str	r3, [r7, #4]
 80007f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007f6:	4b09      	ldr	r3, [pc, #36]	; (800081c <HAL_MspInit+0x44>)
 80007f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80007fa:	4a08      	ldr	r2, [pc, #32]	; (800081c <HAL_MspInit+0x44>)
 80007fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000800:	6593      	str	r3, [r2, #88]	; 0x58
 8000802:	4b06      	ldr	r3, [pc, #24]	; (800081c <HAL_MspInit+0x44>)
 8000804:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000806:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800080a:	603b      	str	r3, [r7, #0]
 800080c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800080e:	bf00      	nop
 8000810:	370c      	adds	r7, #12
 8000812:	46bd      	mov	sp, r7
 8000814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000818:	4770      	bx	lr
 800081a:	bf00      	nop
 800081c:	40021000 	.word	0x40021000

08000820 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b098      	sub	sp, #96	; 0x60
 8000824:	af00      	add	r7, sp, #0
 8000826:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000828:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800082c:	2200      	movs	r2, #0
 800082e:	601a      	str	r2, [r3, #0]
 8000830:	605a      	str	r2, [r3, #4]
 8000832:	609a      	str	r2, [r3, #8]
 8000834:	60da      	str	r2, [r3, #12]
 8000836:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000838:	f107 0318 	add.w	r3, r7, #24
 800083c:	2234      	movs	r2, #52	; 0x34
 800083e:	2100      	movs	r1, #0
 8000840:	4618      	mov	r0, r3
 8000842:	f002 fc45 	bl	80030d0 <memset>
  if(huart->Instance==USART1)
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	4a3e      	ldr	r2, [pc, #248]	; (8000944 <HAL_UART_MspInit+0x124>)
 800084c:	4293      	cmp	r3, r2
 800084e:	d138      	bne.n	80008c2 <HAL_UART_MspInit+0xa2>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000850:	2301      	movs	r3, #1
 8000852:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000854:	2300      	movs	r3, #0
 8000856:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000858:	f107 0318 	add.w	r3, r7, #24
 800085c:	4618      	mov	r0, r3
 800085e:	f001 fcc9 	bl	80021f4 <HAL_RCCEx_PeriphCLKConfig>
 8000862:	4603      	mov	r3, r0
 8000864:	2b00      	cmp	r3, #0
 8000866:	d001      	beq.n	800086c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000868:	f7ff ffb0 	bl	80007cc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800086c:	4b36      	ldr	r3, [pc, #216]	; (8000948 <HAL_UART_MspInit+0x128>)
 800086e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000870:	4a35      	ldr	r2, [pc, #212]	; (8000948 <HAL_UART_MspInit+0x128>)
 8000872:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000876:	6613      	str	r3, [r2, #96]	; 0x60
 8000878:	4b33      	ldr	r3, [pc, #204]	; (8000948 <HAL_UART_MspInit+0x128>)
 800087a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800087c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000880:	617b      	str	r3, [r7, #20]
 8000882:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000884:	4b30      	ldr	r3, [pc, #192]	; (8000948 <HAL_UART_MspInit+0x128>)
 8000886:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000888:	4a2f      	ldr	r2, [pc, #188]	; (8000948 <HAL_UART_MspInit+0x128>)
 800088a:	f043 0301 	orr.w	r3, r3, #1
 800088e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000890:	4b2d      	ldr	r3, [pc, #180]	; (8000948 <HAL_UART_MspInit+0x128>)
 8000892:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000894:	f003 0301 	and.w	r3, r3, #1
 8000898:	613b      	str	r3, [r7, #16]
 800089a:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800089c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80008a0:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008a2:	2302      	movs	r3, #2
 80008a4:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a6:	2300      	movs	r3, #0
 80008a8:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008aa:	2303      	movs	r3, #3
 80008ac:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80008ae:	2307      	movs	r3, #7
 80008b0:	65fb      	str	r3, [r7, #92]	; 0x5c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008b2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80008b6:	4619      	mov	r1, r3
 80008b8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008bc:	f000 fc0c 	bl	80010d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80008c0:	e03b      	b.n	800093a <HAL_UART_MspInit+0x11a>
  else if(huart->Instance==USART2)
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	681b      	ldr	r3, [r3, #0]
 80008c6:	4a21      	ldr	r2, [pc, #132]	; (800094c <HAL_UART_MspInit+0x12c>)
 80008c8:	4293      	cmp	r3, r2
 80008ca:	d136      	bne.n	800093a <HAL_UART_MspInit+0x11a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80008cc:	2302      	movs	r3, #2
 80008ce:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80008d0:	2300      	movs	r3, #0
 80008d2:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80008d4:	f107 0318 	add.w	r3, r7, #24
 80008d8:	4618      	mov	r0, r3
 80008da:	f001 fc8b 	bl	80021f4 <HAL_RCCEx_PeriphCLKConfig>
 80008de:	4603      	mov	r3, r0
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d001      	beq.n	80008e8 <HAL_UART_MspInit+0xc8>
      Error_Handler();
 80008e4:	f7ff ff72 	bl	80007cc <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 80008e8:	4b17      	ldr	r3, [pc, #92]	; (8000948 <HAL_UART_MspInit+0x128>)
 80008ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008ec:	4a16      	ldr	r2, [pc, #88]	; (8000948 <HAL_UART_MspInit+0x128>)
 80008ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008f2:	6593      	str	r3, [r2, #88]	; 0x58
 80008f4:	4b14      	ldr	r3, [pc, #80]	; (8000948 <HAL_UART_MspInit+0x128>)
 80008f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80008fc:	60fb      	str	r3, [r7, #12]
 80008fe:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000900:	4b11      	ldr	r3, [pc, #68]	; (8000948 <HAL_UART_MspInit+0x128>)
 8000902:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000904:	4a10      	ldr	r2, [pc, #64]	; (8000948 <HAL_UART_MspInit+0x128>)
 8000906:	f043 0301 	orr.w	r3, r3, #1
 800090a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800090c:	4b0e      	ldr	r3, [pc, #56]	; (8000948 <HAL_UART_MspInit+0x128>)
 800090e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000910:	f003 0301 	and.w	r3, r3, #1
 8000914:	60bb      	str	r3, [r7, #8]
 8000916:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000918:	230c      	movs	r3, #12
 800091a:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800091c:	2302      	movs	r3, #2
 800091e:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000920:	2300      	movs	r3, #0
 8000922:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000924:	2303      	movs	r3, #3
 8000926:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000928:	2307      	movs	r3, #7
 800092a:	65fb      	str	r3, [r7, #92]	; 0x5c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800092c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000930:	4619      	mov	r1, r3
 8000932:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000936:	f000 fbcf 	bl	80010d8 <HAL_GPIO_Init>
}
 800093a:	bf00      	nop
 800093c:	3760      	adds	r7, #96	; 0x60
 800093e:	46bd      	mov	sp, r7
 8000940:	bd80      	pop	{r7, pc}
 8000942:	bf00      	nop
 8000944:	40013800 	.word	0x40013800
 8000948:	40021000 	.word	0x40021000
 800094c:	40004400 	.word	0x40004400

08000950 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000950:	b480      	push	{r7}
 8000952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000954:	e7fe      	b.n	8000954 <NMI_Handler+0x4>

08000956 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000956:	b480      	push	{r7}
 8000958:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800095a:	e7fe      	b.n	800095a <HardFault_Handler+0x4>

0800095c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800095c:	b480      	push	{r7}
 800095e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000960:	e7fe      	b.n	8000960 <MemManage_Handler+0x4>

08000962 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000962:	b480      	push	{r7}
 8000964:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000966:	e7fe      	b.n	8000966 <BusFault_Handler+0x4>

08000968 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000968:	b480      	push	{r7}
 800096a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800096c:	e7fe      	b.n	800096c <UsageFault_Handler+0x4>

0800096e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800096e:	b480      	push	{r7}
 8000970:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000972:	bf00      	nop
 8000974:	46bd      	mov	sp, r7
 8000976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097a:	4770      	bx	lr

0800097c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800097c:	b480      	push	{r7}
 800097e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000980:	bf00      	nop
 8000982:	46bd      	mov	sp, r7
 8000984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000988:	4770      	bx	lr

0800098a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800098a:	b480      	push	{r7}
 800098c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800098e:	bf00      	nop
 8000990:	46bd      	mov	sp, r7
 8000992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000996:	4770      	bx	lr

08000998 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800099c:	f000 fa72 	bl	8000e84 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009a0:	bf00      	nop
 80009a2:	bd80      	pop	{r7, pc}

080009a4 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b086      	sub	sp, #24
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	60f8      	str	r0, [r7, #12]
 80009ac:	60b9      	str	r1, [r7, #8]
 80009ae:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009b0:	2300      	movs	r3, #0
 80009b2:	617b      	str	r3, [r7, #20]
 80009b4:	e00a      	b.n	80009cc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80009b6:	f3af 8000 	nop.w
 80009ba:	4601      	mov	r1, r0
 80009bc:	68bb      	ldr	r3, [r7, #8]
 80009be:	1c5a      	adds	r2, r3, #1
 80009c0:	60ba      	str	r2, [r7, #8]
 80009c2:	b2ca      	uxtb	r2, r1
 80009c4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009c6:	697b      	ldr	r3, [r7, #20]
 80009c8:	3301      	adds	r3, #1
 80009ca:	617b      	str	r3, [r7, #20]
 80009cc:	697a      	ldr	r2, [r7, #20]
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	429a      	cmp	r2, r3
 80009d2:	dbf0      	blt.n	80009b6 <_read+0x12>
  }

  return len;
 80009d4:	687b      	ldr	r3, [r7, #4]
}
 80009d6:	4618      	mov	r0, r3
 80009d8:	3718      	adds	r7, #24
 80009da:	46bd      	mov	sp, r7
 80009dc:	bd80      	pop	{r7, pc}

080009de <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80009de:	b580      	push	{r7, lr}
 80009e0:	b086      	sub	sp, #24
 80009e2:	af00      	add	r7, sp, #0
 80009e4:	60f8      	str	r0, [r7, #12]
 80009e6:	60b9      	str	r1, [r7, #8]
 80009e8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009ea:	2300      	movs	r3, #0
 80009ec:	617b      	str	r3, [r7, #20]
 80009ee:	e009      	b.n	8000a04 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80009f0:	68bb      	ldr	r3, [r7, #8]
 80009f2:	1c5a      	adds	r2, r3, #1
 80009f4:	60ba      	str	r2, [r7, #8]
 80009f6:	781b      	ldrb	r3, [r3, #0]
 80009f8:	4618      	mov	r0, r3
 80009fa:	f7ff fd69 	bl	80004d0 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009fe:	697b      	ldr	r3, [r7, #20]
 8000a00:	3301      	adds	r3, #1
 8000a02:	617b      	str	r3, [r7, #20]
 8000a04:	697a      	ldr	r2, [r7, #20]
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	429a      	cmp	r2, r3
 8000a0a:	dbf1      	blt.n	80009f0 <_write+0x12>
  }
  return len;
 8000a0c:	687b      	ldr	r3, [r7, #4]
}
 8000a0e:	4618      	mov	r0, r3
 8000a10:	3718      	adds	r7, #24
 8000a12:	46bd      	mov	sp, r7
 8000a14:	bd80      	pop	{r7, pc}

08000a16 <_close>:

int _close(int file)
{
 8000a16:	b480      	push	{r7}
 8000a18:	b083      	sub	sp, #12
 8000a1a:	af00      	add	r7, sp, #0
 8000a1c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000a1e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000a22:	4618      	mov	r0, r3
 8000a24:	370c      	adds	r7, #12
 8000a26:	46bd      	mov	sp, r7
 8000a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2c:	4770      	bx	lr

08000a2e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000a2e:	b480      	push	{r7}
 8000a30:	b083      	sub	sp, #12
 8000a32:	af00      	add	r7, sp, #0
 8000a34:	6078      	str	r0, [r7, #4]
 8000a36:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000a38:	683b      	ldr	r3, [r7, #0]
 8000a3a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000a3e:	605a      	str	r2, [r3, #4]
  return 0;
 8000a40:	2300      	movs	r3, #0
}
 8000a42:	4618      	mov	r0, r3
 8000a44:	370c      	adds	r7, #12
 8000a46:	46bd      	mov	sp, r7
 8000a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4c:	4770      	bx	lr

08000a4e <_isatty>:

int _isatty(int file)
{
 8000a4e:	b480      	push	{r7}
 8000a50:	b083      	sub	sp, #12
 8000a52:	af00      	add	r7, sp, #0
 8000a54:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000a56:	2301      	movs	r3, #1
}
 8000a58:	4618      	mov	r0, r3
 8000a5a:	370c      	adds	r7, #12
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a62:	4770      	bx	lr

08000a64 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000a64:	b480      	push	{r7}
 8000a66:	b085      	sub	sp, #20
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	60f8      	str	r0, [r7, #12]
 8000a6c:	60b9      	str	r1, [r7, #8]
 8000a6e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000a70:	2300      	movs	r3, #0
}
 8000a72:	4618      	mov	r0, r3
 8000a74:	3714      	adds	r7, #20
 8000a76:	46bd      	mov	sp, r7
 8000a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7c:	4770      	bx	lr
	...

08000a80 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b086      	sub	sp, #24
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a88:	4a14      	ldr	r2, [pc, #80]	; (8000adc <_sbrk+0x5c>)
 8000a8a:	4b15      	ldr	r3, [pc, #84]	; (8000ae0 <_sbrk+0x60>)
 8000a8c:	1ad3      	subs	r3, r2, r3
 8000a8e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a90:	697b      	ldr	r3, [r7, #20]
 8000a92:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a94:	4b13      	ldr	r3, [pc, #76]	; (8000ae4 <_sbrk+0x64>)
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d102      	bne.n	8000aa2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a9c:	4b11      	ldr	r3, [pc, #68]	; (8000ae4 <_sbrk+0x64>)
 8000a9e:	4a12      	ldr	r2, [pc, #72]	; (8000ae8 <_sbrk+0x68>)
 8000aa0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000aa2:	4b10      	ldr	r3, [pc, #64]	; (8000ae4 <_sbrk+0x64>)
 8000aa4:	681a      	ldr	r2, [r3, #0]
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	4413      	add	r3, r2
 8000aaa:	693a      	ldr	r2, [r7, #16]
 8000aac:	429a      	cmp	r2, r3
 8000aae:	d207      	bcs.n	8000ac0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ab0:	f002 fae4 	bl	800307c <__errno>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	220c      	movs	r2, #12
 8000ab8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000aba:	f04f 33ff 	mov.w	r3, #4294967295
 8000abe:	e009      	b.n	8000ad4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ac0:	4b08      	ldr	r3, [pc, #32]	; (8000ae4 <_sbrk+0x64>)
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ac6:	4b07      	ldr	r3, [pc, #28]	; (8000ae4 <_sbrk+0x64>)
 8000ac8:	681a      	ldr	r2, [r3, #0]
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	4413      	add	r3, r2
 8000ace:	4a05      	ldr	r2, [pc, #20]	; (8000ae4 <_sbrk+0x64>)
 8000ad0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ad2:	68fb      	ldr	r3, [r7, #12]
}
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	3718      	adds	r7, #24
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	bd80      	pop	{r7, pc}
 8000adc:	2000a000 	.word	0x2000a000
 8000ae0:	00000400 	.word	0x00000400
 8000ae4:	20000194 	.word	0x20000194
 8000ae8:	200001b0 	.word	0x200001b0

08000aec <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000aec:	b480      	push	{r7}
 8000aee:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000af0:	4b06      	ldr	r3, [pc, #24]	; (8000b0c <SystemInit+0x20>)
 8000af2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000af6:	4a05      	ldr	r2, [pc, #20]	; (8000b0c <SystemInit+0x20>)
 8000af8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000afc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000b00:	bf00      	nop
 8000b02:	46bd      	mov	sp, r7
 8000b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b08:	4770      	bx	lr
 8000b0a:	bf00      	nop
 8000b0c:	e000ed00 	.word	0xe000ed00

08000b10 <ublox_neo6m_init>:
 *      Author: wojsl
 */

#include "ublox_neo6m.h"

ublox_neo6m_DataTypeDef ublox_neo6m_init(UART_HandleTypeDef *huart, UART_HandleTypeDef *log_huart) {
 8000b10:	b590      	push	{r4, r7, lr}
 8000b12:	f5ad 7d4f 	sub.w	sp, sp, #828	; 0x33c
 8000b16:	af00      	add	r7, sp, #0
 8000b18:	f507 734e 	add.w	r3, r7, #824	; 0x338
 8000b1c:	f5a3 734b 	sub.w	r3, r3, #812	; 0x32c
 8000b20:	6018      	str	r0, [r3, #0]
 8000b22:	f507 734e 	add.w	r3, r7, #824	; 0x338
 8000b26:	f5a3 734c 	sub.w	r3, r3, #816	; 0x330
 8000b2a:	6019      	str	r1, [r3, #0]
 8000b2c:	f507 734e 	add.w	r3, r7, #824	; 0x338
 8000b30:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 8000b34:	601a      	str	r2, [r3, #0]
	ublox_neo6m_DataTypeDef data;

	uint8_t burstBuffer[NEO_6M_MAX_MESSAGES_PER_BURST][NMEA_0183_MAX_MESSAGE_LENGTH];
	size_t messageSize[NEO_6M_MAX_MESSAGES_PER_BURST];

	uint8_t messageCount = 0;
 8000b36:	2300      	movs	r3, #0
 8000b38:	f887 3337 	strb.w	r3, [r7, #823]	; 0x337
	uint8_t byteInMessage = 0;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	f887 3336 	strb.w	r3, [r7, #822]	; 0x336
	uint8_t burstBegan = 0;
 8000b42:	2300      	movs	r3, #0
 8000b44:	f887 3335 	strb.w	r3, [r7, #821]	; 0x335
	uint8_t byteRead = 0;
 8000b48:	f507 734e 	add.w	r3, r7, #824	; 0x338
 8000b4c:	f2a3 3321 	subw	r3, r3, #801	; 0x321
 8000b50:	2200      	movs	r2, #0
 8000b52:	701a      	strb	r2, [r3, #0]

	while (1) {
		// Read only one character from the UART buffer and store as the first element of the current message array
		HAL_UART_Receive(huart, (*(burstBuffer + messageCount)), 1, HAL_MAX_DELAY);
 8000b54:	f897 3337 	ldrb.w	r3, [r7, #823]	; 0x337
 8000b58:	2252      	movs	r2, #82	; 0x52
 8000b5a:	fb02 f303 	mul.w	r3, r2, r3
 8000b5e:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8000b62:	18d1      	adds	r1, r2, r3
 8000b64:	f507 734e 	add.w	r3, r7, #824	; 0x338
 8000b68:	f5a3 704c 	sub.w	r0, r3, #816	; 0x330
 8000b6c:	f04f 33ff 	mov.w	r3, #4294967295
 8000b70:	2201      	movs	r2, #1
 8000b72:	6800      	ldr	r0, [r0, #0]
 8000b74:	f001 fda6 	bl	80026c4 <HAL_UART_Receive>

		// Test if it is a start character ($)
		if (*(*(burstBuffer + messageCount)) == '$') {
 8000b78:	f897 3337 	ldrb.w	r3, [r7, #823]	; 0x337
 8000b7c:	2252      	movs	r2, #82	; 0x52
 8000b7e:	fb02 f303 	mul.w	r3, r2, r3
 8000b82:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8000b86:	4413      	add	r3, r2
 8000b88:	781b      	ldrb	r3, [r3, #0]
 8000b8a:	2b24      	cmp	r3, #36	; 0x24
 8000b8c:	d1e2      	bne.n	8000b54 <ublox_neo6m_init+0x44>
			// New sentence received
			// Read talker ID and sentence type (5 bytes) and store as 5 consecutive elements in the current message array
			HAL_UART_Receive(huart, (*(burstBuffer + messageCount) + 1), 5, HAL_MAX_DELAY);
 8000b8e:	f897 3337 	ldrb.w	r3, [r7, #823]	; 0x337
 8000b92:	2252      	movs	r2, #82	; 0x52
 8000b94:	fb02 f303 	mul.w	r3, r2, r3
 8000b98:	3301      	adds	r3, #1
 8000b9a:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8000b9e:	18d1      	adds	r1, r2, r3
 8000ba0:	f507 734e 	add.w	r3, r7, #824	; 0x338
 8000ba4:	f5a3 704c 	sub.w	r0, r3, #816	; 0x330
 8000ba8:	f04f 33ff 	mov.w	r3, #4294967295
 8000bac:	2205      	movs	r2, #5
 8000bae:	6800      	ldr	r0, [r0, #0]
 8000bb0:	f001 fd88 	bl	80026c4 <HAL_UART_Receive>

			// Test if it is an RMC sentence (which is first in every data burst of NEO-6M)
			uint8_t isSentenceRMC = !(strncmp((*(burstBuffer + messageCount) + 1), "GPRMC", 5));
 8000bb4:	f897 3337 	ldrb.w	r3, [r7, #823]	; 0x337
 8000bb8:	2252      	movs	r2, #82	; 0x52
 8000bba:	fb02 f303 	mul.w	r3, r2, r3
 8000bbe:	3301      	adds	r3, #1
 8000bc0:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8000bc4:	4413      	add	r3, r2
 8000bc6:	2205      	movs	r2, #5
 8000bc8:	4968      	ldr	r1, [pc, #416]	; (8000d6c <ublox_neo6m_init+0x25c>)
 8000bca:	4618      	mov	r0, r3
 8000bcc:	f002 fafe 	bl	80031cc <strncmp>
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	bf0c      	ite	eq
 8000bd6:	2301      	moveq	r3, #1
 8000bd8:	2300      	movne	r3, #0
 8000bda:	b2db      	uxtb	r3, r3
 8000bdc:	f887 332f 	strb.w	r3, [r7, #815]	; 0x32f
			if (isSentenceRMC == 1) {
 8000be0:	f897 332f 	ldrb.w	r3, [r7, #815]	; 0x32f
 8000be4:	2b01      	cmp	r3, #1
 8000be6:	d112      	bne.n	8000c0e <ublox_neo6m_init+0xfe>
				messageCount = 0; // Current message in a burst
 8000be8:	2300      	movs	r3, #0
 8000bea:	f887 3337 	strb.w	r3, [r7, #823]	; 0x337
				strncpy(*(burstBuffer + messageCount), "$GPRMC", 6);
 8000bee:	f897 3337 	ldrb.w	r3, [r7, #823]	; 0x337
 8000bf2:	2252      	movs	r2, #82	; 0x52
 8000bf4:	fb02 f303 	mul.w	r3, r2, r3
 8000bf8:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8000bfc:	4413      	add	r3, r2
 8000bfe:	4a5c      	ldr	r2, [pc, #368]	; (8000d70 <ublox_neo6m_init+0x260>)
 8000c00:	6810      	ldr	r0, [r2, #0]
 8000c02:	6018      	str	r0, [r3, #0]
 8000c04:	8892      	ldrh	r2, [r2, #4]
 8000c06:	809a      	strh	r2, [r3, #4]
				// RMC Sentence decoded
				burstBegan = 1;
 8000c08:	2301      	movs	r3, #1
 8000c0a:	f887 3335 	strb.w	r3, [r7, #821]	; 0x335
			}

			byteInMessage = 6; // Current byte in a message, counting from 0
 8000c0e:	2306      	movs	r3, #6
 8000c10:	f887 3336 	strb.w	r3, [r7, #822]	; 0x336

			do {
				if (byteInMessage >= NMEA_0183_MAX_MESSAGE_LENGTH) {
 8000c14:	f897 3336 	ldrb.w	r3, [r7, #822]	; 0x336
 8000c18:	2b51      	cmp	r3, #81	; 0x51
 8000c1a:	d829      	bhi.n	8000c70 <ublox_neo6m_init+0x160>
					break;
				}

				HAL_UART_Receive(huart, &byteRead, 1, HAL_MAX_DELAY); // Read only one character from the UART buffer
 8000c1c:	f107 0117 	add.w	r1, r7, #23
 8000c20:	f507 734e 	add.w	r3, r7, #824	; 0x338
 8000c24:	f5a3 704c 	sub.w	r0, r3, #816	; 0x330
 8000c28:	f04f 33ff 	mov.w	r3, #4294967295
 8000c2c:	2201      	movs	r2, #1
 8000c2e:	6800      	ldr	r0, [r0, #0]
 8000c30:	f001 fd48 	bl	80026c4 <HAL_UART_Receive>
				strncpy((*(burstBuffer + messageCount) + byteInMessage), &byteRead, 1);
 8000c34:	f897 3337 	ldrb.w	r3, [r7, #823]	; 0x337
 8000c38:	2252      	movs	r2, #82	; 0x52
 8000c3a:	fb03 f202 	mul.w	r2, r3, r2
 8000c3e:	f897 3336 	ldrb.w	r3, [r7, #822]	; 0x336
 8000c42:	4413      	add	r3, r2
 8000c44:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8000c48:	4413      	add	r3, r2
 8000c4a:	f107 0117 	add.w	r1, r7, #23
 8000c4e:	2201      	movs	r2, #1
 8000c50:	4618      	mov	r0, r3
 8000c52:	f002 facf 	bl	80031f4 <strncpy>
				byteInMessage++;
 8000c56:	f897 3336 	ldrb.w	r3, [r7, #822]	; 0x336
 8000c5a:	3301      	adds	r3, #1
 8000c5c:	f887 3336 	strb.w	r3, [r7, #822]	; 0x336
			} while (byteRead != 0x0a); // Continue until Line Feed (LF or 0x0a in ASCI) is encountered
 8000c60:	f507 734e 	add.w	r3, r7, #824	; 0x338
 8000c64:	f2a3 3321 	subw	r3, r3, #801	; 0x321
 8000c68:	781b      	ldrb	r3, [r3, #0]
 8000c6a:	2b0a      	cmp	r3, #10
 8000c6c:	d1d2      	bne.n	8000c14 <ublox_neo6m_init+0x104>
 8000c6e:	e000      	b.n	8000c72 <ublox_neo6m_init+0x162>
					break;
 8000c70:	bf00      	nop

			messageSize[messageCount] = (byteInMessage);
 8000c72:	f897 2337 	ldrb.w	r2, [r7, #823]	; 0x337
 8000c76:	f897 1336 	ldrb.w	r1, [r7, #822]	; 0x336
 8000c7a:	f507 734e 	add.w	r3, r7, #824	; 0x338
 8000c7e:	f5a3 7348 	sub.w	r3, r3, #800	; 0x320
 8000c82:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

			// Test if it is an GLL sentence (which is last in every data burst of NEO-6M)
			uint8_t isSentenceGLL = !(strncmp((*(burstBuffer + messageCount) + 1), "GPGLL", 5));
 8000c86:	f897 3337 	ldrb.w	r3, [r7, #823]	; 0x337
 8000c8a:	2252      	movs	r2, #82	; 0x52
 8000c8c:	fb02 f303 	mul.w	r3, r2, r3
 8000c90:	3301      	adds	r3, #1
 8000c92:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8000c96:	4413      	add	r3, r2
 8000c98:	2205      	movs	r2, #5
 8000c9a:	4936      	ldr	r1, [pc, #216]	; (8000d74 <ublox_neo6m_init+0x264>)
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	f002 fa95 	bl	80031cc <strncmp>
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	bf0c      	ite	eq
 8000ca8:	2301      	moveq	r3, #1
 8000caa:	2300      	movne	r3, #0
 8000cac:	b2db      	uxtb	r3, r3
 8000cae:	f887 332e 	strb.w	r3, [r7, #814]	; 0x32e

			messageCount++;
 8000cb2:	f897 3337 	ldrb.w	r3, [r7, #823]	; 0x337
 8000cb6:	3301      	adds	r3, #1
 8000cb8:	f887 3337 	strb.w	r3, [r7, #823]	; 0x337

			// Break if no. of messages limit was reached or last message in a burst was read
			if (messageCount >= NEO_6M_MAX_MESSAGES_PER_BURST || (isSentenceGLL == 1 && burstBegan == 1)) {
 8000cbc:	f897 3337 	ldrb.w	r3, [r7, #823]	; 0x337
 8000cc0:	2b08      	cmp	r3, #8
 8000cc2:	d809      	bhi.n	8000cd8 <ublox_neo6m_init+0x1c8>
 8000cc4:	f897 332e 	ldrb.w	r3, [r7, #814]	; 0x32e
 8000cc8:	2b01      	cmp	r3, #1
 8000cca:	f47f af43 	bne.w	8000b54 <ublox_neo6m_init+0x44>
 8000cce:	f897 3335 	ldrb.w	r3, [r7, #821]	; 0x335
 8000cd2:	2b01      	cmp	r3, #1
 8000cd4:	d000      	beq.n	8000cd8 <ublox_neo6m_init+0x1c8>
		HAL_UART_Receive(huart, (*(burstBuffer + messageCount)), 1, HAL_MAX_DELAY);
 8000cd6:	e73d      	b.n	8000b54 <ublox_neo6m_init+0x44>
				break;
			}
		}
	}

	for (int i = 0; i < messageCount; i++) {
 8000cd8:	2300      	movs	r3, #0
 8000cda:	f8c7 3330 	str.w	r3, [r7, #816]	; 0x330
 8000cde:	e01d      	b.n	8000d1c <ublox_neo6m_init+0x20c>
		HAL_UART_Transmit(log_huart, (*(burstBuffer + i)), *(messageSize + i), HAL_MAX_DELAY);
 8000ce0:	f8d7 3330 	ldr.w	r3, [r7, #816]	; 0x330
 8000ce4:	2252      	movs	r2, #82	; 0x52
 8000ce6:	fb02 f303 	mul.w	r3, r2, r3
 8000cea:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8000cee:	18d1      	adds	r1, r2, r3
 8000cf0:	f8d7 3330 	ldr.w	r3, [r7, #816]	; 0x330
 8000cf4:	009b      	lsls	r3, r3, #2
 8000cf6:	f107 0218 	add.w	r2, r7, #24
 8000cfa:	4413      	add	r3, r2
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	b29a      	uxth	r2, r3
 8000d00:	f507 734e 	add.w	r3, r7, #824	; 0x338
 8000d04:	f5a3 704d 	sub.w	r0, r3, #820	; 0x334
 8000d08:	f04f 33ff 	mov.w	r3, #4294967295
 8000d0c:	6800      	ldr	r0, [r0, #0]
 8000d0e:	f001 fc45 	bl	800259c <HAL_UART_Transmit>
	for (int i = 0; i < messageCount; i++) {
 8000d12:	f8d7 3330 	ldr.w	r3, [r7, #816]	; 0x330
 8000d16:	3301      	adds	r3, #1
 8000d18:	f8c7 3330 	str.w	r3, [r7, #816]	; 0x330
 8000d1c:	f897 3337 	ldrb.w	r3, [r7, #823]	; 0x337
 8000d20:	f8d7 2330 	ldr.w	r2, [r7, #816]	; 0x330
 8000d24:	429a      	cmp	r2, r3
 8000d26:	dbdb      	blt.n	8000ce0 <ublox_neo6m_init+0x1d0>
	}

	data.burstBufferPtr = burstBuffer;
 8000d28:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000d2c:	f8c7 3324 	str.w	r3, [r7, #804]	; 0x324
	data.messageSizePtr = messageSize;
 8000d30:	f107 0318 	add.w	r3, r7, #24
 8000d34:	f8c7 3328 	str.w	r3, [r7, #808]	; 0x328
	data.messagesCount = messageCount;
 8000d38:	f897 3337 	ldrb.w	r3, [r7, #823]	; 0x337
 8000d3c:	f887 3320 	strb.w	r3, [r7, #800]	; 0x320
	return (data);
 8000d40:	f507 734e 	add.w	r3, r7, #824	; 0x338
 8000d44:	f5a3 734b 	sub.w	r3, r3, #812	; 0x32c
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	461c      	mov	r4, r3
 8000d4c:	f507 7348 	add.w	r3, r7, #800	; 0x320
 8000d50:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000d54:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8000d58:	f507 734e 	add.w	r3, r7, #824	; 0x338
 8000d5c:	f5a3 734b 	sub.w	r3, r3, #812	; 0x32c
 8000d60:	6818      	ldr	r0, [r3, #0]
 8000d62:	f507 774f 	add.w	r7, r7, #828	; 0x33c
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd90      	pop	{r4, r7, pc}
 8000d6a:	bf00      	nop
 8000d6c:	08003b6c 	.word	0x08003b6c
 8000d70:	08003b74 	.word	0x08003b74
 8000d74:	08003b7c 	.word	0x08003b7c

08000d78 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000d78:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000db0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000d7c:	f7ff feb6 	bl	8000aec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d80:	480c      	ldr	r0, [pc, #48]	; (8000db4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000d82:	490d      	ldr	r1, [pc, #52]	; (8000db8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000d84:	4a0d      	ldr	r2, [pc, #52]	; (8000dbc <LoopForever+0xe>)
  movs r3, #0
 8000d86:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d88:	e002      	b.n	8000d90 <LoopCopyDataInit>

08000d8a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d8a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d8c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d8e:	3304      	adds	r3, #4

08000d90 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d90:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d92:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d94:	d3f9      	bcc.n	8000d8a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d96:	4a0a      	ldr	r2, [pc, #40]	; (8000dc0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000d98:	4c0a      	ldr	r4, [pc, #40]	; (8000dc4 <LoopForever+0x16>)
  movs r3, #0
 8000d9a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d9c:	e001      	b.n	8000da2 <LoopFillZerobss>

08000d9e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d9e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000da0:	3204      	adds	r2, #4

08000da2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000da2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000da4:	d3fb      	bcc.n	8000d9e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000da6:	f002 f96f 	bl	8003088 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000daa:	f7ff fba3 	bl	80004f4 <main>

08000dae <LoopForever>:

LoopForever:
    b LoopForever
 8000dae:	e7fe      	b.n	8000dae <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000db0:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8000db4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000db8:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000dbc:	08003c40 	.word	0x08003c40
  ldr r2, =_sbss
 8000dc0:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000dc4:	200001ac 	.word	0x200001ac

08000dc8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000dc8:	e7fe      	b.n	8000dc8 <ADC1_2_IRQHandler>
	...

08000dcc <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b082      	sub	sp, #8
 8000dd0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000dd6:	4b0c      	ldr	r3, [pc, #48]	; (8000e08 <HAL_Init+0x3c>)
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	4a0b      	ldr	r2, [pc, #44]	; (8000e08 <HAL_Init+0x3c>)
 8000ddc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000de0:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000de2:	2003      	movs	r0, #3
 8000de4:	f000 f944 	bl	8001070 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000de8:	2000      	movs	r0, #0
 8000dea:	f000 f80f 	bl	8000e0c <HAL_InitTick>
 8000dee:	4603      	mov	r3, r0
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d002      	beq.n	8000dfa <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000df4:	2301      	movs	r3, #1
 8000df6:	71fb      	strb	r3, [r7, #7]
 8000df8:	e001      	b.n	8000dfe <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000dfa:	f7ff fced 	bl	80007d8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000dfe:	79fb      	ldrb	r3, [r7, #7]
}
 8000e00:	4618      	mov	r0, r3
 8000e02:	3708      	adds	r7, #8
 8000e04:	46bd      	mov	sp, r7
 8000e06:	bd80      	pop	{r7, pc}
 8000e08:	40022000 	.word	0x40022000

08000e0c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b084      	sub	sp, #16
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000e14:	2300      	movs	r3, #0
 8000e16:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000e18:	4b17      	ldr	r3, [pc, #92]	; (8000e78 <HAL_InitTick+0x6c>)
 8000e1a:	781b      	ldrb	r3, [r3, #0]
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d023      	beq.n	8000e68 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000e20:	4b16      	ldr	r3, [pc, #88]	; (8000e7c <HAL_InitTick+0x70>)
 8000e22:	681a      	ldr	r2, [r3, #0]
 8000e24:	4b14      	ldr	r3, [pc, #80]	; (8000e78 <HAL_InitTick+0x6c>)
 8000e26:	781b      	ldrb	r3, [r3, #0]
 8000e28:	4619      	mov	r1, r3
 8000e2a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e2e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e32:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e36:	4618      	mov	r0, r3
 8000e38:	f000 f941 	bl	80010be <HAL_SYSTICK_Config>
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d10f      	bne.n	8000e62 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	2b0f      	cmp	r3, #15
 8000e46:	d809      	bhi.n	8000e5c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e48:	2200      	movs	r2, #0
 8000e4a:	6879      	ldr	r1, [r7, #4]
 8000e4c:	f04f 30ff 	mov.w	r0, #4294967295
 8000e50:	f000 f919 	bl	8001086 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000e54:	4a0a      	ldr	r2, [pc, #40]	; (8000e80 <HAL_InitTick+0x74>)
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	6013      	str	r3, [r2, #0]
 8000e5a:	e007      	b.n	8000e6c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000e5c:	2301      	movs	r3, #1
 8000e5e:	73fb      	strb	r3, [r7, #15]
 8000e60:	e004      	b.n	8000e6c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000e62:	2301      	movs	r3, #1
 8000e64:	73fb      	strb	r3, [r7, #15]
 8000e66:	e001      	b.n	8000e6c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000e68:	2301      	movs	r3, #1
 8000e6a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000e6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e6e:	4618      	mov	r0, r3
 8000e70:	3710      	adds	r7, #16
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}
 8000e76:	bf00      	nop
 8000e78:	20000008 	.word	0x20000008
 8000e7c:	20000000 	.word	0x20000000
 8000e80:	20000004 	.word	0x20000004

08000e84 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e84:	b480      	push	{r7}
 8000e86:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000e88:	4b06      	ldr	r3, [pc, #24]	; (8000ea4 <HAL_IncTick+0x20>)
 8000e8a:	781b      	ldrb	r3, [r3, #0]
 8000e8c:	461a      	mov	r2, r3
 8000e8e:	4b06      	ldr	r3, [pc, #24]	; (8000ea8 <HAL_IncTick+0x24>)
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	4413      	add	r3, r2
 8000e94:	4a04      	ldr	r2, [pc, #16]	; (8000ea8 <HAL_IncTick+0x24>)
 8000e96:	6013      	str	r3, [r2, #0]
}
 8000e98:	bf00      	nop
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea0:	4770      	bx	lr
 8000ea2:	bf00      	nop
 8000ea4:	20000008 	.word	0x20000008
 8000ea8:	20000198 	.word	0x20000198

08000eac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000eac:	b480      	push	{r7}
 8000eae:	af00      	add	r7, sp, #0
  return uwTick;
 8000eb0:	4b03      	ldr	r3, [pc, #12]	; (8000ec0 <HAL_GetTick+0x14>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
}
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebc:	4770      	bx	lr
 8000ebe:	bf00      	nop
 8000ec0:	20000198 	.word	0x20000198

08000ec4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b084      	sub	sp, #16
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ecc:	f7ff ffee 	bl	8000eac <HAL_GetTick>
 8000ed0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ed6:	68fb      	ldr	r3, [r7, #12]
 8000ed8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000edc:	d005      	beq.n	8000eea <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000ede:	4b0a      	ldr	r3, [pc, #40]	; (8000f08 <HAL_Delay+0x44>)
 8000ee0:	781b      	ldrb	r3, [r3, #0]
 8000ee2:	461a      	mov	r2, r3
 8000ee4:	68fb      	ldr	r3, [r7, #12]
 8000ee6:	4413      	add	r3, r2
 8000ee8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000eea:	bf00      	nop
 8000eec:	f7ff ffde 	bl	8000eac <HAL_GetTick>
 8000ef0:	4602      	mov	r2, r0
 8000ef2:	68bb      	ldr	r3, [r7, #8]
 8000ef4:	1ad3      	subs	r3, r2, r3
 8000ef6:	68fa      	ldr	r2, [r7, #12]
 8000ef8:	429a      	cmp	r2, r3
 8000efa:	d8f7      	bhi.n	8000eec <HAL_Delay+0x28>
  {
  }
}
 8000efc:	bf00      	nop
 8000efe:	bf00      	nop
 8000f00:	3710      	adds	r7, #16
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bd80      	pop	{r7, pc}
 8000f06:	bf00      	nop
 8000f08:	20000008 	.word	0x20000008

08000f0c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	b085      	sub	sp, #20
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	f003 0307 	and.w	r3, r3, #7
 8000f1a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f1c:	4b0c      	ldr	r3, [pc, #48]	; (8000f50 <__NVIC_SetPriorityGrouping+0x44>)
 8000f1e:	68db      	ldr	r3, [r3, #12]
 8000f20:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f22:	68ba      	ldr	r2, [r7, #8]
 8000f24:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f28:	4013      	ands	r3, r2
 8000f2a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f2c:	68fb      	ldr	r3, [r7, #12]
 8000f2e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f30:	68bb      	ldr	r3, [r7, #8]
 8000f32:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f34:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f3c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f3e:	4a04      	ldr	r2, [pc, #16]	; (8000f50 <__NVIC_SetPriorityGrouping+0x44>)
 8000f40:	68bb      	ldr	r3, [r7, #8]
 8000f42:	60d3      	str	r3, [r2, #12]
}
 8000f44:	bf00      	nop
 8000f46:	3714      	adds	r7, #20
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4e:	4770      	bx	lr
 8000f50:	e000ed00 	.word	0xe000ed00

08000f54 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f54:	b480      	push	{r7}
 8000f56:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f58:	4b04      	ldr	r3, [pc, #16]	; (8000f6c <__NVIC_GetPriorityGrouping+0x18>)
 8000f5a:	68db      	ldr	r3, [r3, #12]
 8000f5c:	0a1b      	lsrs	r3, r3, #8
 8000f5e:	f003 0307 	and.w	r3, r3, #7
}
 8000f62:	4618      	mov	r0, r3
 8000f64:	46bd      	mov	sp, r7
 8000f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6a:	4770      	bx	lr
 8000f6c:	e000ed00 	.word	0xe000ed00

08000f70 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f70:	b480      	push	{r7}
 8000f72:	b083      	sub	sp, #12
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	4603      	mov	r3, r0
 8000f78:	6039      	str	r1, [r7, #0]
 8000f7a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	db0a      	blt.n	8000f9a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f84:	683b      	ldr	r3, [r7, #0]
 8000f86:	b2da      	uxtb	r2, r3
 8000f88:	490c      	ldr	r1, [pc, #48]	; (8000fbc <__NVIC_SetPriority+0x4c>)
 8000f8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f8e:	0112      	lsls	r2, r2, #4
 8000f90:	b2d2      	uxtb	r2, r2
 8000f92:	440b      	add	r3, r1
 8000f94:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f98:	e00a      	b.n	8000fb0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f9a:	683b      	ldr	r3, [r7, #0]
 8000f9c:	b2da      	uxtb	r2, r3
 8000f9e:	4908      	ldr	r1, [pc, #32]	; (8000fc0 <__NVIC_SetPriority+0x50>)
 8000fa0:	79fb      	ldrb	r3, [r7, #7]
 8000fa2:	f003 030f 	and.w	r3, r3, #15
 8000fa6:	3b04      	subs	r3, #4
 8000fa8:	0112      	lsls	r2, r2, #4
 8000faa:	b2d2      	uxtb	r2, r2
 8000fac:	440b      	add	r3, r1
 8000fae:	761a      	strb	r2, [r3, #24]
}
 8000fb0:	bf00      	nop
 8000fb2:	370c      	adds	r7, #12
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fba:	4770      	bx	lr
 8000fbc:	e000e100 	.word	0xe000e100
 8000fc0:	e000ed00 	.word	0xe000ed00

08000fc4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	b089      	sub	sp, #36	; 0x24
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	60f8      	str	r0, [r7, #12]
 8000fcc:	60b9      	str	r1, [r7, #8]
 8000fce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	f003 0307 	and.w	r3, r3, #7
 8000fd6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fd8:	69fb      	ldr	r3, [r7, #28]
 8000fda:	f1c3 0307 	rsb	r3, r3, #7
 8000fde:	2b04      	cmp	r3, #4
 8000fe0:	bf28      	it	cs
 8000fe2:	2304      	movcs	r3, #4
 8000fe4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fe6:	69fb      	ldr	r3, [r7, #28]
 8000fe8:	3304      	adds	r3, #4
 8000fea:	2b06      	cmp	r3, #6
 8000fec:	d902      	bls.n	8000ff4 <NVIC_EncodePriority+0x30>
 8000fee:	69fb      	ldr	r3, [r7, #28]
 8000ff0:	3b03      	subs	r3, #3
 8000ff2:	e000      	b.n	8000ff6 <NVIC_EncodePriority+0x32>
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ff8:	f04f 32ff 	mov.w	r2, #4294967295
 8000ffc:	69bb      	ldr	r3, [r7, #24]
 8000ffe:	fa02 f303 	lsl.w	r3, r2, r3
 8001002:	43da      	mvns	r2, r3
 8001004:	68bb      	ldr	r3, [r7, #8]
 8001006:	401a      	ands	r2, r3
 8001008:	697b      	ldr	r3, [r7, #20]
 800100a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800100c:	f04f 31ff 	mov.w	r1, #4294967295
 8001010:	697b      	ldr	r3, [r7, #20]
 8001012:	fa01 f303 	lsl.w	r3, r1, r3
 8001016:	43d9      	mvns	r1, r3
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800101c:	4313      	orrs	r3, r2
         );
}
 800101e:	4618      	mov	r0, r3
 8001020:	3724      	adds	r7, #36	; 0x24
 8001022:	46bd      	mov	sp, r7
 8001024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001028:	4770      	bx	lr
	...

0800102c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b082      	sub	sp, #8
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	3b01      	subs	r3, #1
 8001038:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800103c:	d301      	bcc.n	8001042 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800103e:	2301      	movs	r3, #1
 8001040:	e00f      	b.n	8001062 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001042:	4a0a      	ldr	r2, [pc, #40]	; (800106c <SysTick_Config+0x40>)
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	3b01      	subs	r3, #1
 8001048:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800104a:	210f      	movs	r1, #15
 800104c:	f04f 30ff 	mov.w	r0, #4294967295
 8001050:	f7ff ff8e 	bl	8000f70 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001054:	4b05      	ldr	r3, [pc, #20]	; (800106c <SysTick_Config+0x40>)
 8001056:	2200      	movs	r2, #0
 8001058:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800105a:	4b04      	ldr	r3, [pc, #16]	; (800106c <SysTick_Config+0x40>)
 800105c:	2207      	movs	r2, #7
 800105e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001060:	2300      	movs	r3, #0
}
 8001062:	4618      	mov	r0, r3
 8001064:	3708      	adds	r7, #8
 8001066:	46bd      	mov	sp, r7
 8001068:	bd80      	pop	{r7, pc}
 800106a:	bf00      	nop
 800106c:	e000e010 	.word	0xe000e010

08001070 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b082      	sub	sp, #8
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001078:	6878      	ldr	r0, [r7, #4]
 800107a:	f7ff ff47 	bl	8000f0c <__NVIC_SetPriorityGrouping>
}
 800107e:	bf00      	nop
 8001080:	3708      	adds	r7, #8
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}

08001086 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001086:	b580      	push	{r7, lr}
 8001088:	b086      	sub	sp, #24
 800108a:	af00      	add	r7, sp, #0
 800108c:	4603      	mov	r3, r0
 800108e:	60b9      	str	r1, [r7, #8]
 8001090:	607a      	str	r2, [r7, #4]
 8001092:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001094:	2300      	movs	r3, #0
 8001096:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001098:	f7ff ff5c 	bl	8000f54 <__NVIC_GetPriorityGrouping>
 800109c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800109e:	687a      	ldr	r2, [r7, #4]
 80010a0:	68b9      	ldr	r1, [r7, #8]
 80010a2:	6978      	ldr	r0, [r7, #20]
 80010a4:	f7ff ff8e 	bl	8000fc4 <NVIC_EncodePriority>
 80010a8:	4602      	mov	r2, r0
 80010aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010ae:	4611      	mov	r1, r2
 80010b0:	4618      	mov	r0, r3
 80010b2:	f7ff ff5d 	bl	8000f70 <__NVIC_SetPriority>
}
 80010b6:	bf00      	nop
 80010b8:	3718      	adds	r7, #24
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}

080010be <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010be:	b580      	push	{r7, lr}
 80010c0:	b082      	sub	sp, #8
 80010c2:	af00      	add	r7, sp, #0
 80010c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010c6:	6878      	ldr	r0, [r7, #4]
 80010c8:	f7ff ffb0 	bl	800102c <SysTick_Config>
 80010cc:	4603      	mov	r3, r0
}
 80010ce:	4618      	mov	r0, r3
 80010d0:	3708      	adds	r7, #8
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}
	...

080010d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010d8:	b480      	push	{r7}
 80010da:	b087      	sub	sp, #28
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
 80010e0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80010e2:	2300      	movs	r3, #0
 80010e4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010e6:	e14e      	b.n	8001386 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80010e8:	683b      	ldr	r3, [r7, #0]
 80010ea:	681a      	ldr	r2, [r3, #0]
 80010ec:	2101      	movs	r1, #1
 80010ee:	697b      	ldr	r3, [r7, #20]
 80010f0:	fa01 f303 	lsl.w	r3, r1, r3
 80010f4:	4013      	ands	r3, r2
 80010f6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	f000 8140 	beq.w	8001380 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001100:	683b      	ldr	r3, [r7, #0]
 8001102:	685b      	ldr	r3, [r3, #4]
 8001104:	f003 0303 	and.w	r3, r3, #3
 8001108:	2b01      	cmp	r3, #1
 800110a:	d005      	beq.n	8001118 <HAL_GPIO_Init+0x40>
 800110c:	683b      	ldr	r3, [r7, #0]
 800110e:	685b      	ldr	r3, [r3, #4]
 8001110:	f003 0303 	and.w	r3, r3, #3
 8001114:	2b02      	cmp	r3, #2
 8001116:	d130      	bne.n	800117a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	689b      	ldr	r3, [r3, #8]
 800111c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800111e:	697b      	ldr	r3, [r7, #20]
 8001120:	005b      	lsls	r3, r3, #1
 8001122:	2203      	movs	r2, #3
 8001124:	fa02 f303 	lsl.w	r3, r2, r3
 8001128:	43db      	mvns	r3, r3
 800112a:	693a      	ldr	r2, [r7, #16]
 800112c:	4013      	ands	r3, r2
 800112e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001130:	683b      	ldr	r3, [r7, #0]
 8001132:	68da      	ldr	r2, [r3, #12]
 8001134:	697b      	ldr	r3, [r7, #20]
 8001136:	005b      	lsls	r3, r3, #1
 8001138:	fa02 f303 	lsl.w	r3, r2, r3
 800113c:	693a      	ldr	r2, [r7, #16]
 800113e:	4313      	orrs	r3, r2
 8001140:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	693a      	ldr	r2, [r7, #16]
 8001146:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	685b      	ldr	r3, [r3, #4]
 800114c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800114e:	2201      	movs	r2, #1
 8001150:	697b      	ldr	r3, [r7, #20]
 8001152:	fa02 f303 	lsl.w	r3, r2, r3
 8001156:	43db      	mvns	r3, r3
 8001158:	693a      	ldr	r2, [r7, #16]
 800115a:	4013      	ands	r3, r2
 800115c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800115e:	683b      	ldr	r3, [r7, #0]
 8001160:	685b      	ldr	r3, [r3, #4]
 8001162:	091b      	lsrs	r3, r3, #4
 8001164:	f003 0201 	and.w	r2, r3, #1
 8001168:	697b      	ldr	r3, [r7, #20]
 800116a:	fa02 f303 	lsl.w	r3, r2, r3
 800116e:	693a      	ldr	r2, [r7, #16]
 8001170:	4313      	orrs	r3, r2
 8001172:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	693a      	ldr	r2, [r7, #16]
 8001178:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800117a:	683b      	ldr	r3, [r7, #0]
 800117c:	685b      	ldr	r3, [r3, #4]
 800117e:	f003 0303 	and.w	r3, r3, #3
 8001182:	2b03      	cmp	r3, #3
 8001184:	d017      	beq.n	80011b6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	68db      	ldr	r3, [r3, #12]
 800118a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800118c:	697b      	ldr	r3, [r7, #20]
 800118e:	005b      	lsls	r3, r3, #1
 8001190:	2203      	movs	r2, #3
 8001192:	fa02 f303 	lsl.w	r3, r2, r3
 8001196:	43db      	mvns	r3, r3
 8001198:	693a      	ldr	r2, [r7, #16]
 800119a:	4013      	ands	r3, r2
 800119c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800119e:	683b      	ldr	r3, [r7, #0]
 80011a0:	689a      	ldr	r2, [r3, #8]
 80011a2:	697b      	ldr	r3, [r7, #20]
 80011a4:	005b      	lsls	r3, r3, #1
 80011a6:	fa02 f303 	lsl.w	r3, r2, r3
 80011aa:	693a      	ldr	r2, [r7, #16]
 80011ac:	4313      	orrs	r3, r2
 80011ae:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	693a      	ldr	r2, [r7, #16]
 80011b4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011b6:	683b      	ldr	r3, [r7, #0]
 80011b8:	685b      	ldr	r3, [r3, #4]
 80011ba:	f003 0303 	and.w	r3, r3, #3
 80011be:	2b02      	cmp	r3, #2
 80011c0:	d123      	bne.n	800120a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80011c2:	697b      	ldr	r3, [r7, #20]
 80011c4:	08da      	lsrs	r2, r3, #3
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	3208      	adds	r2, #8
 80011ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011ce:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80011d0:	697b      	ldr	r3, [r7, #20]
 80011d2:	f003 0307 	and.w	r3, r3, #7
 80011d6:	009b      	lsls	r3, r3, #2
 80011d8:	220f      	movs	r2, #15
 80011da:	fa02 f303 	lsl.w	r3, r2, r3
 80011de:	43db      	mvns	r3, r3
 80011e0:	693a      	ldr	r2, [r7, #16]
 80011e2:	4013      	ands	r3, r2
 80011e4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80011e6:	683b      	ldr	r3, [r7, #0]
 80011e8:	691a      	ldr	r2, [r3, #16]
 80011ea:	697b      	ldr	r3, [r7, #20]
 80011ec:	f003 0307 	and.w	r3, r3, #7
 80011f0:	009b      	lsls	r3, r3, #2
 80011f2:	fa02 f303 	lsl.w	r3, r2, r3
 80011f6:	693a      	ldr	r2, [r7, #16]
 80011f8:	4313      	orrs	r3, r2
 80011fa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80011fc:	697b      	ldr	r3, [r7, #20]
 80011fe:	08da      	lsrs	r2, r3, #3
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	3208      	adds	r2, #8
 8001204:	6939      	ldr	r1, [r7, #16]
 8001206:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001210:	697b      	ldr	r3, [r7, #20]
 8001212:	005b      	lsls	r3, r3, #1
 8001214:	2203      	movs	r2, #3
 8001216:	fa02 f303 	lsl.w	r3, r2, r3
 800121a:	43db      	mvns	r3, r3
 800121c:	693a      	ldr	r2, [r7, #16]
 800121e:	4013      	ands	r3, r2
 8001220:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001222:	683b      	ldr	r3, [r7, #0]
 8001224:	685b      	ldr	r3, [r3, #4]
 8001226:	f003 0203 	and.w	r2, r3, #3
 800122a:	697b      	ldr	r3, [r7, #20]
 800122c:	005b      	lsls	r3, r3, #1
 800122e:	fa02 f303 	lsl.w	r3, r2, r3
 8001232:	693a      	ldr	r2, [r7, #16]
 8001234:	4313      	orrs	r3, r2
 8001236:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	693a      	ldr	r2, [r7, #16]
 800123c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800123e:	683b      	ldr	r3, [r7, #0]
 8001240:	685b      	ldr	r3, [r3, #4]
 8001242:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001246:	2b00      	cmp	r3, #0
 8001248:	f000 809a 	beq.w	8001380 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800124c:	4b55      	ldr	r3, [pc, #340]	; (80013a4 <HAL_GPIO_Init+0x2cc>)
 800124e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001250:	4a54      	ldr	r2, [pc, #336]	; (80013a4 <HAL_GPIO_Init+0x2cc>)
 8001252:	f043 0301 	orr.w	r3, r3, #1
 8001256:	6613      	str	r3, [r2, #96]	; 0x60
 8001258:	4b52      	ldr	r3, [pc, #328]	; (80013a4 <HAL_GPIO_Init+0x2cc>)
 800125a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800125c:	f003 0301 	and.w	r3, r3, #1
 8001260:	60bb      	str	r3, [r7, #8]
 8001262:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001264:	4a50      	ldr	r2, [pc, #320]	; (80013a8 <HAL_GPIO_Init+0x2d0>)
 8001266:	697b      	ldr	r3, [r7, #20]
 8001268:	089b      	lsrs	r3, r3, #2
 800126a:	3302      	adds	r3, #2
 800126c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001270:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001272:	697b      	ldr	r3, [r7, #20]
 8001274:	f003 0303 	and.w	r3, r3, #3
 8001278:	009b      	lsls	r3, r3, #2
 800127a:	220f      	movs	r2, #15
 800127c:	fa02 f303 	lsl.w	r3, r2, r3
 8001280:	43db      	mvns	r3, r3
 8001282:	693a      	ldr	r2, [r7, #16]
 8001284:	4013      	ands	r3, r2
 8001286:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800128e:	d013      	beq.n	80012b8 <HAL_GPIO_Init+0x1e0>
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	4a46      	ldr	r2, [pc, #280]	; (80013ac <HAL_GPIO_Init+0x2d4>)
 8001294:	4293      	cmp	r3, r2
 8001296:	d00d      	beq.n	80012b4 <HAL_GPIO_Init+0x1dc>
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	4a45      	ldr	r2, [pc, #276]	; (80013b0 <HAL_GPIO_Init+0x2d8>)
 800129c:	4293      	cmp	r3, r2
 800129e:	d007      	beq.n	80012b0 <HAL_GPIO_Init+0x1d8>
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	4a44      	ldr	r2, [pc, #272]	; (80013b4 <HAL_GPIO_Init+0x2dc>)
 80012a4:	4293      	cmp	r3, r2
 80012a6:	d101      	bne.n	80012ac <HAL_GPIO_Init+0x1d4>
 80012a8:	2303      	movs	r3, #3
 80012aa:	e006      	b.n	80012ba <HAL_GPIO_Init+0x1e2>
 80012ac:	2307      	movs	r3, #7
 80012ae:	e004      	b.n	80012ba <HAL_GPIO_Init+0x1e2>
 80012b0:	2302      	movs	r3, #2
 80012b2:	e002      	b.n	80012ba <HAL_GPIO_Init+0x1e2>
 80012b4:	2301      	movs	r3, #1
 80012b6:	e000      	b.n	80012ba <HAL_GPIO_Init+0x1e2>
 80012b8:	2300      	movs	r3, #0
 80012ba:	697a      	ldr	r2, [r7, #20]
 80012bc:	f002 0203 	and.w	r2, r2, #3
 80012c0:	0092      	lsls	r2, r2, #2
 80012c2:	4093      	lsls	r3, r2
 80012c4:	693a      	ldr	r2, [r7, #16]
 80012c6:	4313      	orrs	r3, r2
 80012c8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80012ca:	4937      	ldr	r1, [pc, #220]	; (80013a8 <HAL_GPIO_Init+0x2d0>)
 80012cc:	697b      	ldr	r3, [r7, #20]
 80012ce:	089b      	lsrs	r3, r3, #2
 80012d0:	3302      	adds	r3, #2
 80012d2:	693a      	ldr	r2, [r7, #16]
 80012d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80012d8:	4b37      	ldr	r3, [pc, #220]	; (80013b8 <HAL_GPIO_Init+0x2e0>)
 80012da:	689b      	ldr	r3, [r3, #8]
 80012dc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	43db      	mvns	r3, r3
 80012e2:	693a      	ldr	r2, [r7, #16]
 80012e4:	4013      	ands	r3, r2
 80012e6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80012e8:	683b      	ldr	r3, [r7, #0]
 80012ea:	685b      	ldr	r3, [r3, #4]
 80012ec:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d003      	beq.n	80012fc <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 80012f4:	693a      	ldr	r2, [r7, #16]
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	4313      	orrs	r3, r2
 80012fa:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80012fc:	4a2e      	ldr	r2, [pc, #184]	; (80013b8 <HAL_GPIO_Init+0x2e0>)
 80012fe:	693b      	ldr	r3, [r7, #16]
 8001300:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001302:	4b2d      	ldr	r3, [pc, #180]	; (80013b8 <HAL_GPIO_Init+0x2e0>)
 8001304:	68db      	ldr	r3, [r3, #12]
 8001306:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	43db      	mvns	r3, r3
 800130c:	693a      	ldr	r2, [r7, #16]
 800130e:	4013      	ands	r3, r2
 8001310:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001312:	683b      	ldr	r3, [r7, #0]
 8001314:	685b      	ldr	r3, [r3, #4]
 8001316:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800131a:	2b00      	cmp	r3, #0
 800131c:	d003      	beq.n	8001326 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 800131e:	693a      	ldr	r2, [r7, #16]
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	4313      	orrs	r3, r2
 8001324:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001326:	4a24      	ldr	r2, [pc, #144]	; (80013b8 <HAL_GPIO_Init+0x2e0>)
 8001328:	693b      	ldr	r3, [r7, #16]
 800132a:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800132c:	4b22      	ldr	r3, [pc, #136]	; (80013b8 <HAL_GPIO_Init+0x2e0>)
 800132e:	685b      	ldr	r3, [r3, #4]
 8001330:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	43db      	mvns	r3, r3
 8001336:	693a      	ldr	r2, [r7, #16]
 8001338:	4013      	ands	r3, r2
 800133a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800133c:	683b      	ldr	r3, [r7, #0]
 800133e:	685b      	ldr	r3, [r3, #4]
 8001340:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001344:	2b00      	cmp	r3, #0
 8001346:	d003      	beq.n	8001350 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8001348:	693a      	ldr	r2, [r7, #16]
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	4313      	orrs	r3, r2
 800134e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001350:	4a19      	ldr	r2, [pc, #100]	; (80013b8 <HAL_GPIO_Init+0x2e0>)
 8001352:	693b      	ldr	r3, [r7, #16]
 8001354:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001356:	4b18      	ldr	r3, [pc, #96]	; (80013b8 <HAL_GPIO_Init+0x2e0>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	43db      	mvns	r3, r3
 8001360:	693a      	ldr	r2, [r7, #16]
 8001362:	4013      	ands	r3, r2
 8001364:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001366:	683b      	ldr	r3, [r7, #0]
 8001368:	685b      	ldr	r3, [r3, #4]
 800136a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800136e:	2b00      	cmp	r3, #0
 8001370:	d003      	beq.n	800137a <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8001372:	693a      	ldr	r2, [r7, #16]
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	4313      	orrs	r3, r2
 8001378:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800137a:	4a0f      	ldr	r2, [pc, #60]	; (80013b8 <HAL_GPIO_Init+0x2e0>)
 800137c:	693b      	ldr	r3, [r7, #16]
 800137e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001380:	697b      	ldr	r3, [r7, #20]
 8001382:	3301      	adds	r3, #1
 8001384:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001386:	683b      	ldr	r3, [r7, #0]
 8001388:	681a      	ldr	r2, [r3, #0]
 800138a:	697b      	ldr	r3, [r7, #20]
 800138c:	fa22 f303 	lsr.w	r3, r2, r3
 8001390:	2b00      	cmp	r3, #0
 8001392:	f47f aea9 	bne.w	80010e8 <HAL_GPIO_Init+0x10>
  }
}
 8001396:	bf00      	nop
 8001398:	bf00      	nop
 800139a:	371c      	adds	r7, #28
 800139c:	46bd      	mov	sp, r7
 800139e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a2:	4770      	bx	lr
 80013a4:	40021000 	.word	0x40021000
 80013a8:	40010000 	.word	0x40010000
 80013ac:	48000400 	.word	0x48000400
 80013b0:	48000800 	.word	0x48000800
 80013b4:	48000c00 	.word	0x48000c00
 80013b8:	40010400 	.word	0x40010400

080013bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013bc:	b480      	push	{r7}
 80013be:	b083      	sub	sp, #12
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
 80013c4:	460b      	mov	r3, r1
 80013c6:	807b      	strh	r3, [r7, #2]
 80013c8:	4613      	mov	r3, r2
 80013ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80013cc:	787b      	ldrb	r3, [r7, #1]
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d003      	beq.n	80013da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80013d2:	887a      	ldrh	r2, [r7, #2]
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80013d8:	e002      	b.n	80013e0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80013da:	887a      	ldrh	r2, [r7, #2]
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	629a      	str	r2, [r3, #40]	; 0x28
}
 80013e0:	bf00      	nop
 80013e2:	370c      	adds	r7, #12
 80013e4:	46bd      	mov	sp, r7
 80013e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ea:	4770      	bx	lr

080013ec <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80013ec:	b480      	push	{r7}
 80013ee:	b085      	sub	sp, #20
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
 80013f4:	460b      	mov	r3, r1
 80013f6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	695b      	ldr	r3, [r3, #20]
 80013fc:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80013fe:	887a      	ldrh	r2, [r7, #2]
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	4013      	ands	r3, r2
 8001404:	041a      	lsls	r2, r3, #16
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	43d9      	mvns	r1, r3
 800140a:	887b      	ldrh	r3, [r7, #2]
 800140c:	400b      	ands	r3, r1
 800140e:	431a      	orrs	r2, r3
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	619a      	str	r2, [r3, #24]
}
 8001414:	bf00      	nop
 8001416:	3714      	adds	r7, #20
 8001418:	46bd      	mov	sp, r7
 800141a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141e:	4770      	bx	lr

08001420 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001420:	b480      	push	{r7}
 8001422:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001424:	4b04      	ldr	r3, [pc, #16]	; (8001438 <HAL_PWREx_GetVoltageRange+0x18>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800142c:	4618      	mov	r0, r3
 800142e:	46bd      	mov	sp, r7
 8001430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001434:	4770      	bx	lr
 8001436:	bf00      	nop
 8001438:	40007000 	.word	0x40007000

0800143c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800143c:	b480      	push	{r7}
 800143e:	b085      	sub	sp, #20
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800144a:	d130      	bne.n	80014ae <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800144c:	4b23      	ldr	r3, [pc, #140]	; (80014dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001454:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001458:	d038      	beq.n	80014cc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800145a:	4b20      	ldr	r3, [pc, #128]	; (80014dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001462:	4a1e      	ldr	r2, [pc, #120]	; (80014dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001464:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001468:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800146a:	4b1d      	ldr	r3, [pc, #116]	; (80014e0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	2232      	movs	r2, #50	; 0x32
 8001470:	fb02 f303 	mul.w	r3, r2, r3
 8001474:	4a1b      	ldr	r2, [pc, #108]	; (80014e4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001476:	fba2 2303 	umull	r2, r3, r2, r3
 800147a:	0c9b      	lsrs	r3, r3, #18
 800147c:	3301      	adds	r3, #1
 800147e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001480:	e002      	b.n	8001488 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	3b01      	subs	r3, #1
 8001486:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001488:	4b14      	ldr	r3, [pc, #80]	; (80014dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800148a:	695b      	ldr	r3, [r3, #20]
 800148c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001490:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001494:	d102      	bne.n	800149c <HAL_PWREx_ControlVoltageScaling+0x60>
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	2b00      	cmp	r3, #0
 800149a:	d1f2      	bne.n	8001482 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800149c:	4b0f      	ldr	r3, [pc, #60]	; (80014dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800149e:	695b      	ldr	r3, [r3, #20]
 80014a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80014a8:	d110      	bne.n	80014cc <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80014aa:	2303      	movs	r3, #3
 80014ac:	e00f      	b.n	80014ce <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80014ae:	4b0b      	ldr	r3, [pc, #44]	; (80014dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80014b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80014ba:	d007      	beq.n	80014cc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80014bc:	4b07      	ldr	r3, [pc, #28]	; (80014dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80014c4:	4a05      	ldr	r2, [pc, #20]	; (80014dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80014c6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80014ca:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80014cc:	2300      	movs	r3, #0
}
 80014ce:	4618      	mov	r0, r3
 80014d0:	3714      	adds	r7, #20
 80014d2:	46bd      	mov	sp, r7
 80014d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d8:	4770      	bx	lr
 80014da:	bf00      	nop
 80014dc:	40007000 	.word	0x40007000
 80014e0:	20000000 	.word	0x20000000
 80014e4:	431bde83 	.word	0x431bde83

080014e8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b08a      	sub	sp, #40	; 0x28
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d102      	bne.n	80014fc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80014f6:	2301      	movs	r3, #1
 80014f8:	f000 bc4f 	b.w	8001d9a <HAL_RCC_OscConfig+0x8b2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80014fc:	4b97      	ldr	r3, [pc, #604]	; (800175c <HAL_RCC_OscConfig+0x274>)
 80014fe:	689b      	ldr	r3, [r3, #8]
 8001500:	f003 030c 	and.w	r3, r3, #12
 8001504:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001506:	4b95      	ldr	r3, [pc, #596]	; (800175c <HAL_RCC_OscConfig+0x274>)
 8001508:	68db      	ldr	r3, [r3, #12]
 800150a:	f003 0303 	and.w	r3, r3, #3
 800150e:	61fb      	str	r3, [r7, #28]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	f003 0310 	and.w	r3, r3, #16
 8001518:	2b00      	cmp	r3, #0
 800151a:	f000 80e6 	beq.w	80016ea <HAL_RCC_OscConfig+0x202>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800151e:	6a3b      	ldr	r3, [r7, #32]
 8001520:	2b00      	cmp	r3, #0
 8001522:	d007      	beq.n	8001534 <HAL_RCC_OscConfig+0x4c>
 8001524:	6a3b      	ldr	r3, [r7, #32]
 8001526:	2b0c      	cmp	r3, #12
 8001528:	f040 808d 	bne.w	8001646 <HAL_RCC_OscConfig+0x15e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800152c:	69fb      	ldr	r3, [r7, #28]
 800152e:	2b01      	cmp	r3, #1
 8001530:	f040 8089 	bne.w	8001646 <HAL_RCC_OscConfig+0x15e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001534:	4b89      	ldr	r3, [pc, #548]	; (800175c <HAL_RCC_OscConfig+0x274>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	f003 0302 	and.w	r3, r3, #2
 800153c:	2b00      	cmp	r3, #0
 800153e:	d006      	beq.n	800154e <HAL_RCC_OscConfig+0x66>
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	69db      	ldr	r3, [r3, #28]
 8001544:	2b00      	cmp	r3, #0
 8001546:	d102      	bne.n	800154e <HAL_RCC_OscConfig+0x66>
      {
        return HAL_ERROR;
 8001548:	2301      	movs	r3, #1
 800154a:	f000 bc26 	b.w	8001d9a <HAL_RCC_OscConfig+0x8b2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001552:	4b82      	ldr	r3, [pc, #520]	; (800175c <HAL_RCC_OscConfig+0x274>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f003 0308 	and.w	r3, r3, #8
 800155a:	2b00      	cmp	r3, #0
 800155c:	d004      	beq.n	8001568 <HAL_RCC_OscConfig+0x80>
 800155e:	4b7f      	ldr	r3, [pc, #508]	; (800175c <HAL_RCC_OscConfig+0x274>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001566:	e005      	b.n	8001574 <HAL_RCC_OscConfig+0x8c>
 8001568:	4b7c      	ldr	r3, [pc, #496]	; (800175c <HAL_RCC_OscConfig+0x274>)
 800156a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800156e:	091b      	lsrs	r3, r3, #4
 8001570:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001574:	4293      	cmp	r3, r2
 8001576:	d224      	bcs.n	80015c2 <HAL_RCC_OscConfig+0xda>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800157c:	4618      	mov	r0, r3
 800157e:	f000 fdd9 	bl	8002134 <RCC_SetFlashLatencyFromMSIRange>
 8001582:	4603      	mov	r3, r0
 8001584:	2b00      	cmp	r3, #0
 8001586:	d002      	beq.n	800158e <HAL_RCC_OscConfig+0xa6>
          {
            return HAL_ERROR;
 8001588:	2301      	movs	r3, #1
 800158a:	f000 bc06 	b.w	8001d9a <HAL_RCC_OscConfig+0x8b2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800158e:	4b73      	ldr	r3, [pc, #460]	; (800175c <HAL_RCC_OscConfig+0x274>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	4a72      	ldr	r2, [pc, #456]	; (800175c <HAL_RCC_OscConfig+0x274>)
 8001594:	f043 0308 	orr.w	r3, r3, #8
 8001598:	6013      	str	r3, [r2, #0]
 800159a:	4b70      	ldr	r3, [pc, #448]	; (800175c <HAL_RCC_OscConfig+0x274>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015a6:	496d      	ldr	r1, [pc, #436]	; (800175c <HAL_RCC_OscConfig+0x274>)
 80015a8:	4313      	orrs	r3, r2
 80015aa:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80015ac:	4b6b      	ldr	r3, [pc, #428]	; (800175c <HAL_RCC_OscConfig+0x274>)
 80015ae:	685b      	ldr	r3, [r3, #4]
 80015b0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	6a1b      	ldr	r3, [r3, #32]
 80015b8:	021b      	lsls	r3, r3, #8
 80015ba:	4968      	ldr	r1, [pc, #416]	; (800175c <HAL_RCC_OscConfig+0x274>)
 80015bc:	4313      	orrs	r3, r2
 80015be:	604b      	str	r3, [r1, #4]
 80015c0:	e025      	b.n	800160e <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80015c2:	4b66      	ldr	r3, [pc, #408]	; (800175c <HAL_RCC_OscConfig+0x274>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	4a65      	ldr	r2, [pc, #404]	; (800175c <HAL_RCC_OscConfig+0x274>)
 80015c8:	f043 0308 	orr.w	r3, r3, #8
 80015cc:	6013      	str	r3, [r2, #0]
 80015ce:	4b63      	ldr	r3, [pc, #396]	; (800175c <HAL_RCC_OscConfig+0x274>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015da:	4960      	ldr	r1, [pc, #384]	; (800175c <HAL_RCC_OscConfig+0x274>)
 80015dc:	4313      	orrs	r3, r2
 80015de:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80015e0:	4b5e      	ldr	r3, [pc, #376]	; (800175c <HAL_RCC_OscConfig+0x274>)
 80015e2:	685b      	ldr	r3, [r3, #4]
 80015e4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	6a1b      	ldr	r3, [r3, #32]
 80015ec:	021b      	lsls	r3, r3, #8
 80015ee:	495b      	ldr	r1, [pc, #364]	; (800175c <HAL_RCC_OscConfig+0x274>)
 80015f0:	4313      	orrs	r3, r2
 80015f2:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80015f4:	6a3b      	ldr	r3, [r7, #32]
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d109      	bne.n	800160e <HAL_RCC_OscConfig+0x126>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015fe:	4618      	mov	r0, r3
 8001600:	f000 fd98 	bl	8002134 <RCC_SetFlashLatencyFromMSIRange>
 8001604:	4603      	mov	r3, r0
 8001606:	2b00      	cmp	r3, #0
 8001608:	d001      	beq.n	800160e <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 800160a:	2301      	movs	r3, #1
 800160c:	e3c5      	b.n	8001d9a <HAL_RCC_OscConfig+0x8b2>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800160e:	f000 fccd 	bl	8001fac <HAL_RCC_GetSysClockFreq>
 8001612:	4602      	mov	r2, r0
 8001614:	4b51      	ldr	r3, [pc, #324]	; (800175c <HAL_RCC_OscConfig+0x274>)
 8001616:	689b      	ldr	r3, [r3, #8]
 8001618:	091b      	lsrs	r3, r3, #4
 800161a:	f003 030f 	and.w	r3, r3, #15
 800161e:	4950      	ldr	r1, [pc, #320]	; (8001760 <HAL_RCC_OscConfig+0x278>)
 8001620:	5ccb      	ldrb	r3, [r1, r3]
 8001622:	f003 031f 	and.w	r3, r3, #31
 8001626:	fa22 f303 	lsr.w	r3, r2, r3
 800162a:	4a4e      	ldr	r2, [pc, #312]	; (8001764 <HAL_RCC_OscConfig+0x27c>)
 800162c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800162e:	4b4e      	ldr	r3, [pc, #312]	; (8001768 <HAL_RCC_OscConfig+0x280>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	4618      	mov	r0, r3
 8001634:	f7ff fbea 	bl	8000e0c <HAL_InitTick>
 8001638:	4603      	mov	r3, r0
 800163a:	75fb      	strb	r3, [r7, #23]
        if(status != HAL_OK)
 800163c:	7dfb      	ldrb	r3, [r7, #23]
 800163e:	2b00      	cmp	r3, #0
 8001640:	d052      	beq.n	80016e8 <HAL_RCC_OscConfig+0x200>
        {
          return status;
 8001642:	7dfb      	ldrb	r3, [r7, #23]
 8001644:	e3a9      	b.n	8001d9a <HAL_RCC_OscConfig+0x8b2>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	69db      	ldr	r3, [r3, #28]
 800164a:	2b00      	cmp	r3, #0
 800164c:	d032      	beq.n	80016b4 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800164e:	4b43      	ldr	r3, [pc, #268]	; (800175c <HAL_RCC_OscConfig+0x274>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	4a42      	ldr	r2, [pc, #264]	; (800175c <HAL_RCC_OscConfig+0x274>)
 8001654:	f043 0301 	orr.w	r3, r3, #1
 8001658:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800165a:	f7ff fc27 	bl	8000eac <HAL_GetTick>
 800165e:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001660:	e008      	b.n	8001674 <HAL_RCC_OscConfig+0x18c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001662:	f7ff fc23 	bl	8000eac <HAL_GetTick>
 8001666:	4602      	mov	r2, r0
 8001668:	69bb      	ldr	r3, [r7, #24]
 800166a:	1ad3      	subs	r3, r2, r3
 800166c:	2b02      	cmp	r3, #2
 800166e:	d901      	bls.n	8001674 <HAL_RCC_OscConfig+0x18c>
          {
            return HAL_TIMEOUT;
 8001670:	2303      	movs	r3, #3
 8001672:	e392      	b.n	8001d9a <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001674:	4b39      	ldr	r3, [pc, #228]	; (800175c <HAL_RCC_OscConfig+0x274>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f003 0302 	and.w	r3, r3, #2
 800167c:	2b00      	cmp	r3, #0
 800167e:	d0f0      	beq.n	8001662 <HAL_RCC_OscConfig+0x17a>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001680:	4b36      	ldr	r3, [pc, #216]	; (800175c <HAL_RCC_OscConfig+0x274>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	4a35      	ldr	r2, [pc, #212]	; (800175c <HAL_RCC_OscConfig+0x274>)
 8001686:	f043 0308 	orr.w	r3, r3, #8
 800168a:	6013      	str	r3, [r2, #0]
 800168c:	4b33      	ldr	r3, [pc, #204]	; (800175c <HAL_RCC_OscConfig+0x274>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001698:	4930      	ldr	r1, [pc, #192]	; (800175c <HAL_RCC_OscConfig+0x274>)
 800169a:	4313      	orrs	r3, r2
 800169c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800169e:	4b2f      	ldr	r3, [pc, #188]	; (800175c <HAL_RCC_OscConfig+0x274>)
 80016a0:	685b      	ldr	r3, [r3, #4]
 80016a2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	6a1b      	ldr	r3, [r3, #32]
 80016aa:	021b      	lsls	r3, r3, #8
 80016ac:	492b      	ldr	r1, [pc, #172]	; (800175c <HAL_RCC_OscConfig+0x274>)
 80016ae:	4313      	orrs	r3, r2
 80016b0:	604b      	str	r3, [r1, #4]
 80016b2:	e01a      	b.n	80016ea <HAL_RCC_OscConfig+0x202>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80016b4:	4b29      	ldr	r3, [pc, #164]	; (800175c <HAL_RCC_OscConfig+0x274>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	4a28      	ldr	r2, [pc, #160]	; (800175c <HAL_RCC_OscConfig+0x274>)
 80016ba:	f023 0301 	bic.w	r3, r3, #1
 80016be:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80016c0:	f7ff fbf4 	bl	8000eac <HAL_GetTick>
 80016c4:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80016c6:	e008      	b.n	80016da <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80016c8:	f7ff fbf0 	bl	8000eac <HAL_GetTick>
 80016cc:	4602      	mov	r2, r0
 80016ce:	69bb      	ldr	r3, [r7, #24]
 80016d0:	1ad3      	subs	r3, r2, r3
 80016d2:	2b02      	cmp	r3, #2
 80016d4:	d901      	bls.n	80016da <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80016d6:	2303      	movs	r3, #3
 80016d8:	e35f      	b.n	8001d9a <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80016da:	4b20      	ldr	r3, [pc, #128]	; (800175c <HAL_RCC_OscConfig+0x274>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f003 0302 	and.w	r3, r3, #2
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d1f0      	bne.n	80016c8 <HAL_RCC_OscConfig+0x1e0>
 80016e6:	e000      	b.n	80016ea <HAL_RCC_OscConfig+0x202>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80016e8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f003 0301 	and.w	r3, r3, #1
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d073      	beq.n	80017de <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80016f6:	6a3b      	ldr	r3, [r7, #32]
 80016f8:	2b08      	cmp	r3, #8
 80016fa:	d005      	beq.n	8001708 <HAL_RCC_OscConfig+0x220>
 80016fc:	6a3b      	ldr	r3, [r7, #32]
 80016fe:	2b0c      	cmp	r3, #12
 8001700:	d10e      	bne.n	8001720 <HAL_RCC_OscConfig+0x238>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001702:	69fb      	ldr	r3, [r7, #28]
 8001704:	2b03      	cmp	r3, #3
 8001706:	d10b      	bne.n	8001720 <HAL_RCC_OscConfig+0x238>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001708:	4b14      	ldr	r3, [pc, #80]	; (800175c <HAL_RCC_OscConfig+0x274>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001710:	2b00      	cmp	r3, #0
 8001712:	d063      	beq.n	80017dc <HAL_RCC_OscConfig+0x2f4>
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	685b      	ldr	r3, [r3, #4]
 8001718:	2b00      	cmp	r3, #0
 800171a:	d15f      	bne.n	80017dc <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 800171c:	2301      	movs	r3, #1
 800171e:	e33c      	b.n	8001d9a <HAL_RCC_OscConfig+0x8b2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	685b      	ldr	r3, [r3, #4]
 8001724:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001728:	d106      	bne.n	8001738 <HAL_RCC_OscConfig+0x250>
 800172a:	4b0c      	ldr	r3, [pc, #48]	; (800175c <HAL_RCC_OscConfig+0x274>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	4a0b      	ldr	r2, [pc, #44]	; (800175c <HAL_RCC_OscConfig+0x274>)
 8001730:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001734:	6013      	str	r3, [r2, #0]
 8001736:	e025      	b.n	8001784 <HAL_RCC_OscConfig+0x29c>
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	685b      	ldr	r3, [r3, #4]
 800173c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001740:	d114      	bne.n	800176c <HAL_RCC_OscConfig+0x284>
 8001742:	4b06      	ldr	r3, [pc, #24]	; (800175c <HAL_RCC_OscConfig+0x274>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	4a05      	ldr	r2, [pc, #20]	; (800175c <HAL_RCC_OscConfig+0x274>)
 8001748:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800174c:	6013      	str	r3, [r2, #0]
 800174e:	4b03      	ldr	r3, [pc, #12]	; (800175c <HAL_RCC_OscConfig+0x274>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	4a02      	ldr	r2, [pc, #8]	; (800175c <HAL_RCC_OscConfig+0x274>)
 8001754:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001758:	6013      	str	r3, [r2, #0]
 800175a:	e013      	b.n	8001784 <HAL_RCC_OscConfig+0x29c>
 800175c:	40021000 	.word	0x40021000
 8001760:	08003b84 	.word	0x08003b84
 8001764:	20000000 	.word	0x20000000
 8001768:	20000004 	.word	0x20000004
 800176c:	4b8f      	ldr	r3, [pc, #572]	; (80019ac <HAL_RCC_OscConfig+0x4c4>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	4a8e      	ldr	r2, [pc, #568]	; (80019ac <HAL_RCC_OscConfig+0x4c4>)
 8001772:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001776:	6013      	str	r3, [r2, #0]
 8001778:	4b8c      	ldr	r3, [pc, #560]	; (80019ac <HAL_RCC_OscConfig+0x4c4>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	4a8b      	ldr	r2, [pc, #556]	; (80019ac <HAL_RCC_OscConfig+0x4c4>)
 800177e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001782:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	685b      	ldr	r3, [r3, #4]
 8001788:	2b00      	cmp	r3, #0
 800178a:	d013      	beq.n	80017b4 <HAL_RCC_OscConfig+0x2cc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800178c:	f7ff fb8e 	bl	8000eac <HAL_GetTick>
 8001790:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001792:	e008      	b.n	80017a6 <HAL_RCC_OscConfig+0x2be>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001794:	f7ff fb8a 	bl	8000eac <HAL_GetTick>
 8001798:	4602      	mov	r2, r0
 800179a:	69bb      	ldr	r3, [r7, #24]
 800179c:	1ad3      	subs	r3, r2, r3
 800179e:	2b64      	cmp	r3, #100	; 0x64
 80017a0:	d901      	bls.n	80017a6 <HAL_RCC_OscConfig+0x2be>
          {
            return HAL_TIMEOUT;
 80017a2:	2303      	movs	r3, #3
 80017a4:	e2f9      	b.n	8001d9a <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80017a6:	4b81      	ldr	r3, [pc, #516]	; (80019ac <HAL_RCC_OscConfig+0x4c4>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d0f0      	beq.n	8001794 <HAL_RCC_OscConfig+0x2ac>
 80017b2:	e014      	b.n	80017de <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017b4:	f7ff fb7a 	bl	8000eac <HAL_GetTick>
 80017b8:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80017ba:	e008      	b.n	80017ce <HAL_RCC_OscConfig+0x2e6>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017bc:	f7ff fb76 	bl	8000eac <HAL_GetTick>
 80017c0:	4602      	mov	r2, r0
 80017c2:	69bb      	ldr	r3, [r7, #24]
 80017c4:	1ad3      	subs	r3, r2, r3
 80017c6:	2b64      	cmp	r3, #100	; 0x64
 80017c8:	d901      	bls.n	80017ce <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 80017ca:	2303      	movs	r3, #3
 80017cc:	e2e5      	b.n	8001d9a <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80017ce:	4b77      	ldr	r3, [pc, #476]	; (80019ac <HAL_RCC_OscConfig+0x4c4>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d1f0      	bne.n	80017bc <HAL_RCC_OscConfig+0x2d4>
 80017da:	e000      	b.n	80017de <HAL_RCC_OscConfig+0x2f6>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f003 0302 	and.w	r3, r3, #2
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d060      	beq.n	80018ac <HAL_RCC_OscConfig+0x3c4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80017ea:	6a3b      	ldr	r3, [r7, #32]
 80017ec:	2b04      	cmp	r3, #4
 80017ee:	d005      	beq.n	80017fc <HAL_RCC_OscConfig+0x314>
 80017f0:	6a3b      	ldr	r3, [r7, #32]
 80017f2:	2b0c      	cmp	r3, #12
 80017f4:	d119      	bne.n	800182a <HAL_RCC_OscConfig+0x342>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80017f6:	69fb      	ldr	r3, [r7, #28]
 80017f8:	2b02      	cmp	r3, #2
 80017fa:	d116      	bne.n	800182a <HAL_RCC_OscConfig+0x342>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80017fc:	4b6b      	ldr	r3, [pc, #428]	; (80019ac <HAL_RCC_OscConfig+0x4c4>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001804:	2b00      	cmp	r3, #0
 8001806:	d005      	beq.n	8001814 <HAL_RCC_OscConfig+0x32c>
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	68db      	ldr	r3, [r3, #12]
 800180c:	2b00      	cmp	r3, #0
 800180e:	d101      	bne.n	8001814 <HAL_RCC_OscConfig+0x32c>
      {
        return HAL_ERROR;
 8001810:	2301      	movs	r3, #1
 8001812:	e2c2      	b.n	8001d9a <HAL_RCC_OscConfig+0x8b2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001814:	4b65      	ldr	r3, [pc, #404]	; (80019ac <HAL_RCC_OscConfig+0x4c4>)
 8001816:	685b      	ldr	r3, [r3, #4]
 8001818:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	691b      	ldr	r3, [r3, #16]
 8001820:	061b      	lsls	r3, r3, #24
 8001822:	4962      	ldr	r1, [pc, #392]	; (80019ac <HAL_RCC_OscConfig+0x4c4>)
 8001824:	4313      	orrs	r3, r2
 8001826:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001828:	e040      	b.n	80018ac <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	68db      	ldr	r3, [r3, #12]
 800182e:	2b00      	cmp	r3, #0
 8001830:	d023      	beq.n	800187a <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001832:	4b5e      	ldr	r3, [pc, #376]	; (80019ac <HAL_RCC_OscConfig+0x4c4>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	4a5d      	ldr	r2, [pc, #372]	; (80019ac <HAL_RCC_OscConfig+0x4c4>)
 8001838:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800183c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800183e:	f7ff fb35 	bl	8000eac <HAL_GetTick>
 8001842:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001844:	e008      	b.n	8001858 <HAL_RCC_OscConfig+0x370>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001846:	f7ff fb31 	bl	8000eac <HAL_GetTick>
 800184a:	4602      	mov	r2, r0
 800184c:	69bb      	ldr	r3, [r7, #24]
 800184e:	1ad3      	subs	r3, r2, r3
 8001850:	2b02      	cmp	r3, #2
 8001852:	d901      	bls.n	8001858 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8001854:	2303      	movs	r3, #3
 8001856:	e2a0      	b.n	8001d9a <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001858:	4b54      	ldr	r3, [pc, #336]	; (80019ac <HAL_RCC_OscConfig+0x4c4>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001860:	2b00      	cmp	r3, #0
 8001862:	d0f0      	beq.n	8001846 <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001864:	4b51      	ldr	r3, [pc, #324]	; (80019ac <HAL_RCC_OscConfig+0x4c4>)
 8001866:	685b      	ldr	r3, [r3, #4]
 8001868:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	691b      	ldr	r3, [r3, #16]
 8001870:	061b      	lsls	r3, r3, #24
 8001872:	494e      	ldr	r1, [pc, #312]	; (80019ac <HAL_RCC_OscConfig+0x4c4>)
 8001874:	4313      	orrs	r3, r2
 8001876:	604b      	str	r3, [r1, #4]
 8001878:	e018      	b.n	80018ac <HAL_RCC_OscConfig+0x3c4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800187a:	4b4c      	ldr	r3, [pc, #304]	; (80019ac <HAL_RCC_OscConfig+0x4c4>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	4a4b      	ldr	r2, [pc, #300]	; (80019ac <HAL_RCC_OscConfig+0x4c4>)
 8001880:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001884:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001886:	f7ff fb11 	bl	8000eac <HAL_GetTick>
 800188a:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800188c:	e008      	b.n	80018a0 <HAL_RCC_OscConfig+0x3b8>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800188e:	f7ff fb0d 	bl	8000eac <HAL_GetTick>
 8001892:	4602      	mov	r2, r0
 8001894:	69bb      	ldr	r3, [r7, #24]
 8001896:	1ad3      	subs	r3, r2, r3
 8001898:	2b02      	cmp	r3, #2
 800189a:	d901      	bls.n	80018a0 <HAL_RCC_OscConfig+0x3b8>
          {
            return HAL_TIMEOUT;
 800189c:	2303      	movs	r3, #3
 800189e:	e27c      	b.n	8001d9a <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80018a0:	4b42      	ldr	r3, [pc, #264]	; (80019ac <HAL_RCC_OscConfig+0x4c4>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d1f0      	bne.n	800188e <HAL_RCC_OscConfig+0x3a6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f003 0308 	and.w	r3, r3, #8
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	f000 8082 	beq.w	80019be <HAL_RCC_OscConfig+0x4d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	695b      	ldr	r3, [r3, #20]
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d05f      	beq.n	8001982 <HAL_RCC_OscConfig+0x49a>
    {
#if defined(RCC_CSR_LSIPREDIV)
      uint32_t csr_temp = RCC->CSR;
 80018c2:	4b3a      	ldr	r3, [pc, #232]	; (80019ac <HAL_RCC_OscConfig+0x4c4>)
 80018c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80018c8:	613b      	str	r3, [r7, #16]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPREDIV))
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	699a      	ldr	r2, [r3, #24]
 80018ce:	693b      	ldr	r3, [r7, #16]
 80018d0:	f003 0310 	and.w	r3, r3, #16
 80018d4:	429a      	cmp	r2, r3
 80018d6:	d037      	beq.n	8001948 <HAL_RCC_OscConfig+0x460>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80018d8:	693b      	ldr	r3, [r7, #16]
 80018da:	f003 0302 	and.w	r3, r3, #2
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d006      	beq.n	80018f0 <HAL_RCC_OscConfig+0x408>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 80018e2:	693b      	ldr	r3, [r7, #16]
 80018e4:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d101      	bne.n	80018f0 <HAL_RCC_OscConfig+0x408>
        {
           /* If LSIRDY is set while LSION is not enabled,
              LSIPREDIV can't be updated  */
          return HAL_ERROR;
 80018ec:	2301      	movs	r3, #1
 80018ee:	e254      	b.n	8001d9a <HAL_RCC_OscConfig+0x8b2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPREDIV */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 80018f0:	693b      	ldr	r3, [r7, #16]
 80018f2:	f003 0301 	and.w	r3, r3, #1
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d01b      	beq.n	8001932 <HAL_RCC_OscConfig+0x44a>
        {
          __HAL_RCC_LSI_DISABLE();
 80018fa:	4b2c      	ldr	r3, [pc, #176]	; (80019ac <HAL_RCC_OscConfig+0x4c4>)
 80018fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001900:	4a2a      	ldr	r2, [pc, #168]	; (80019ac <HAL_RCC_OscConfig+0x4c4>)
 8001902:	f023 0301 	bic.w	r3, r3, #1
 8001906:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800190a:	f7ff facf 	bl	8000eac <HAL_GetTick>
 800190e:	61b8      	str	r0, [r7, #24]

          /* Wait till LSI is disabled */
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001910:	e008      	b.n	8001924 <HAL_RCC_OscConfig+0x43c>
          {
            if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001912:	f7ff facb 	bl	8000eac <HAL_GetTick>
 8001916:	4602      	mov	r2, r0
 8001918:	69bb      	ldr	r3, [r7, #24]
 800191a:	1ad3      	subs	r3, r2, r3
 800191c:	2b11      	cmp	r3, #17
 800191e:	d901      	bls.n	8001924 <HAL_RCC_OscConfig+0x43c>
            {
              return HAL_TIMEOUT;
 8001920:	2303      	movs	r3, #3
 8001922:	e23a      	b.n	8001d9a <HAL_RCC_OscConfig+0x8b2>
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001924:	4b21      	ldr	r3, [pc, #132]	; (80019ac <HAL_RCC_OscConfig+0x4c4>)
 8001926:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800192a:	f003 0302 	and.w	r3, r3, #2
 800192e:	2b00      	cmp	r3, #0
 8001930:	d1ef      	bne.n	8001912 <HAL_RCC_OscConfig+0x42a>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
 8001932:	4b1e      	ldr	r3, [pc, #120]	; (80019ac <HAL_RCC_OscConfig+0x4c4>)
 8001934:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001938:	f023 0210 	bic.w	r2, r3, #16
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	699b      	ldr	r3, [r3, #24]
 8001940:	491a      	ldr	r1, [pc, #104]	; (80019ac <HAL_RCC_OscConfig+0x4c4>)
 8001942:	4313      	orrs	r3, r2
 8001944:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001948:	4b18      	ldr	r3, [pc, #96]	; (80019ac <HAL_RCC_OscConfig+0x4c4>)
 800194a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800194e:	4a17      	ldr	r2, [pc, #92]	; (80019ac <HAL_RCC_OscConfig+0x4c4>)
 8001950:	f043 0301 	orr.w	r3, r3, #1
 8001954:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001958:	f7ff faa8 	bl	8000eac <HAL_GetTick>
 800195c:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800195e:	e008      	b.n	8001972 <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001960:	f7ff faa4 	bl	8000eac <HAL_GetTick>
 8001964:	4602      	mov	r2, r0
 8001966:	69bb      	ldr	r3, [r7, #24]
 8001968:	1ad3      	subs	r3, r2, r3
 800196a:	2b11      	cmp	r3, #17
 800196c:	d901      	bls.n	8001972 <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 800196e:	2303      	movs	r3, #3
 8001970:	e213      	b.n	8001d9a <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001972:	4b0e      	ldr	r3, [pc, #56]	; (80019ac <HAL_RCC_OscConfig+0x4c4>)
 8001974:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001978:	f003 0302 	and.w	r3, r3, #2
 800197c:	2b00      	cmp	r3, #0
 800197e:	d0ef      	beq.n	8001960 <HAL_RCC_OscConfig+0x478>
 8001980:	e01d      	b.n	80019be <HAL_RCC_OscConfig+0x4d6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001982:	4b0a      	ldr	r3, [pc, #40]	; (80019ac <HAL_RCC_OscConfig+0x4c4>)
 8001984:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001988:	4a08      	ldr	r2, [pc, #32]	; (80019ac <HAL_RCC_OscConfig+0x4c4>)
 800198a:	f023 0301 	bic.w	r3, r3, #1
 800198e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001992:	f7ff fa8b 	bl	8000eac <HAL_GetTick>
 8001996:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001998:	e00a      	b.n	80019b0 <HAL_RCC_OscConfig+0x4c8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800199a:	f7ff fa87 	bl	8000eac <HAL_GetTick>
 800199e:	4602      	mov	r2, r0
 80019a0:	69bb      	ldr	r3, [r7, #24]
 80019a2:	1ad3      	subs	r3, r2, r3
 80019a4:	2b11      	cmp	r3, #17
 80019a6:	d903      	bls.n	80019b0 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_TIMEOUT;
 80019a8:	2303      	movs	r3, #3
 80019aa:	e1f6      	b.n	8001d9a <HAL_RCC_OscConfig+0x8b2>
 80019ac:	40021000 	.word	0x40021000
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80019b0:	4ba9      	ldr	r3, [pc, #676]	; (8001c58 <HAL_RCC_OscConfig+0x770>)
 80019b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80019b6:	f003 0302 	and.w	r3, r3, #2
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d1ed      	bne.n	800199a <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f003 0304 	and.w	r3, r3, #4
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	f000 80bd 	beq.w	8001b46 <HAL_RCC_OscConfig+0x65e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80019cc:	2300      	movs	r3, #0
 80019ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80019d2:	4ba1      	ldr	r3, [pc, #644]	; (8001c58 <HAL_RCC_OscConfig+0x770>)
 80019d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d10e      	bne.n	80019fc <HAL_RCC_OscConfig+0x514>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80019de:	4b9e      	ldr	r3, [pc, #632]	; (8001c58 <HAL_RCC_OscConfig+0x770>)
 80019e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019e2:	4a9d      	ldr	r2, [pc, #628]	; (8001c58 <HAL_RCC_OscConfig+0x770>)
 80019e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019e8:	6593      	str	r3, [r2, #88]	; 0x58
 80019ea:	4b9b      	ldr	r3, [pc, #620]	; (8001c58 <HAL_RCC_OscConfig+0x770>)
 80019ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019f2:	60fb      	str	r3, [r7, #12]
 80019f4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80019f6:	2301      	movs	r3, #1
 80019f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80019fc:	4b97      	ldr	r3, [pc, #604]	; (8001c5c <HAL_RCC_OscConfig+0x774>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d118      	bne.n	8001a3a <HAL_RCC_OscConfig+0x552>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001a08:	4b94      	ldr	r3, [pc, #592]	; (8001c5c <HAL_RCC_OscConfig+0x774>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	4a93      	ldr	r2, [pc, #588]	; (8001c5c <HAL_RCC_OscConfig+0x774>)
 8001a0e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a12:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a14:	f7ff fa4a 	bl	8000eac <HAL_GetTick>
 8001a18:	61b8      	str	r0, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a1a:	e008      	b.n	8001a2e <HAL_RCC_OscConfig+0x546>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a1c:	f7ff fa46 	bl	8000eac <HAL_GetTick>
 8001a20:	4602      	mov	r2, r0
 8001a22:	69bb      	ldr	r3, [r7, #24]
 8001a24:	1ad3      	subs	r3, r2, r3
 8001a26:	2b02      	cmp	r3, #2
 8001a28:	d901      	bls.n	8001a2e <HAL_RCC_OscConfig+0x546>
        {
          return HAL_TIMEOUT;
 8001a2a:	2303      	movs	r3, #3
 8001a2c:	e1b5      	b.n	8001d9a <HAL_RCC_OscConfig+0x8b2>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a2e:	4b8b      	ldr	r3, [pc, #556]	; (8001c5c <HAL_RCC_OscConfig+0x774>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d0f0      	beq.n	8001a1c <HAL_RCC_OscConfig+0x534>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
#if defined(RCC_BDCR_LSESYSDIS)
    if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	689b      	ldr	r3, [r3, #8]
 8001a3e:	f003 0301 	and.w	r3, r3, #1
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d02c      	beq.n	8001aa0 <HAL_RCC_OscConfig+0x5b8>
    {
      /* Set LSESYSDIS bit according to LSE propagation option (enabled or disabled) */
      MODIFY_REG(RCC->BDCR, RCC_BDCR_LSESYSDIS, (RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSDIS));
 8001a46:	4b84      	ldr	r3, [pc, #528]	; (8001c58 <HAL_RCC_OscConfig+0x770>)
 8001a48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a4c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	689b      	ldr	r3, [r3, #8]
 8001a54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a58:	497f      	ldr	r1, [pc, #508]	; (8001c58 <HAL_RCC_OscConfig+0x770>)
 8001a5a:	4313      	orrs	r3, r2
 8001a5c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

      if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	689b      	ldr	r3, [r3, #8]
 8001a64:	f003 0304 	and.w	r3, r3, #4
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d010      	beq.n	8001a8e <HAL_RCC_OscConfig+0x5a6>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001a6c:	4b7a      	ldr	r3, [pc, #488]	; (8001c58 <HAL_RCC_OscConfig+0x770>)
 8001a6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a72:	4a79      	ldr	r2, [pc, #484]	; (8001c58 <HAL_RCC_OscConfig+0x770>)
 8001a74:	f043 0304 	orr.w	r3, r3, #4
 8001a78:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001a7c:	4b76      	ldr	r3, [pc, #472]	; (8001c58 <HAL_RCC_OscConfig+0x770>)
 8001a7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a82:	4a75      	ldr	r2, [pc, #468]	; (8001c58 <HAL_RCC_OscConfig+0x770>)
 8001a84:	f043 0301 	orr.w	r3, r3, #1
 8001a88:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001a8c:	e018      	b.n	8001ac0 <HAL_RCC_OscConfig+0x5d8>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001a8e:	4b72      	ldr	r3, [pc, #456]	; (8001c58 <HAL_RCC_OscConfig+0x770>)
 8001a90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a94:	4a70      	ldr	r2, [pc, #448]	; (8001c58 <HAL_RCC_OscConfig+0x770>)
 8001a96:	f043 0301 	orr.w	r3, r3, #1
 8001a9a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001a9e:	e00f      	b.n	8001ac0 <HAL_RCC_OscConfig+0x5d8>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001aa0:	4b6d      	ldr	r3, [pc, #436]	; (8001c58 <HAL_RCC_OscConfig+0x770>)
 8001aa2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001aa6:	4a6c      	ldr	r2, [pc, #432]	; (8001c58 <HAL_RCC_OscConfig+0x770>)
 8001aa8:	f023 0301 	bic.w	r3, r3, #1
 8001aac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001ab0:	4b69      	ldr	r3, [pc, #420]	; (8001c58 <HAL_RCC_OscConfig+0x770>)
 8001ab2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ab6:	4a68      	ldr	r2, [pc, #416]	; (8001c58 <HAL_RCC_OscConfig+0x770>)
 8001ab8:	f023 0304 	bic.w	r3, r3, #4
 8001abc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	689b      	ldr	r3, [r3, #8]
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d016      	beq.n	8001af6 <HAL_RCC_OscConfig+0x60e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ac8:	f7ff f9f0 	bl	8000eac <HAL_GetTick>
 8001acc:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001ace:	e00a      	b.n	8001ae6 <HAL_RCC_OscConfig+0x5fe>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ad0:	f7ff f9ec 	bl	8000eac <HAL_GetTick>
 8001ad4:	4602      	mov	r2, r0
 8001ad6:	69bb      	ldr	r3, [r7, #24]
 8001ad8:	1ad3      	subs	r3, r2, r3
 8001ada:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ade:	4293      	cmp	r3, r2
 8001ae0:	d901      	bls.n	8001ae6 <HAL_RCC_OscConfig+0x5fe>
        {
          return HAL_TIMEOUT;
 8001ae2:	2303      	movs	r3, #3
 8001ae4:	e159      	b.n	8001d9a <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001ae6:	4b5c      	ldr	r3, [pc, #368]	; (8001c58 <HAL_RCC_OscConfig+0x770>)
 8001ae8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001aec:	f003 0302 	and.w	r3, r3, #2
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d0ed      	beq.n	8001ad0 <HAL_RCC_OscConfig+0x5e8>
 8001af4:	e01d      	b.n	8001b32 <HAL_RCC_OscConfig+0x64a>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001af6:	f7ff f9d9 	bl	8000eac <HAL_GetTick>
 8001afa:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001afc:	e00a      	b.n	8001b14 <HAL_RCC_OscConfig+0x62c>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001afe:	f7ff f9d5 	bl	8000eac <HAL_GetTick>
 8001b02:	4602      	mov	r2, r0
 8001b04:	69bb      	ldr	r3, [r7, #24]
 8001b06:	1ad3      	subs	r3, r2, r3
 8001b08:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b0c:	4293      	cmp	r3, r2
 8001b0e:	d901      	bls.n	8001b14 <HAL_RCC_OscConfig+0x62c>
        {
          return HAL_TIMEOUT;
 8001b10:	2303      	movs	r3, #3
 8001b12:	e142      	b.n	8001d9a <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001b14:	4b50      	ldr	r3, [pc, #320]	; (8001c58 <HAL_RCC_OscConfig+0x770>)
 8001b16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b1a:	f003 0302 	and.w	r3, r3, #2
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d1ed      	bne.n	8001afe <HAL_RCC_OscConfig+0x616>
        }
      }

#if defined(RCC_BDCR_LSESYSDIS)
      /* By default, stop disabling LSE propagation */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
 8001b22:	4b4d      	ldr	r3, [pc, #308]	; (8001c58 <HAL_RCC_OscConfig+0x770>)
 8001b24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b28:	4a4b      	ldr	r2, [pc, #300]	; (8001c58 <HAL_RCC_OscConfig+0x770>)
 8001b2a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001b2e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001b32:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001b36:	2b01      	cmp	r3, #1
 8001b38:	d105      	bne.n	8001b46 <HAL_RCC_OscConfig+0x65e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b3a:	4b47      	ldr	r3, [pc, #284]	; (8001c58 <HAL_RCC_OscConfig+0x770>)
 8001b3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b3e:	4a46      	ldr	r2, [pc, #280]	; (8001c58 <HAL_RCC_OscConfig+0x770>)
 8001b40:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b44:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f003 0320 	and.w	r3, r3, #32
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d03c      	beq.n	8001bcc <HAL_RCC_OscConfig+0x6e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d01c      	beq.n	8001b94 <HAL_RCC_OscConfig+0x6ac>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001b5a:	4b3f      	ldr	r3, [pc, #252]	; (8001c58 <HAL_RCC_OscConfig+0x770>)
 8001b5c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001b60:	4a3d      	ldr	r2, [pc, #244]	; (8001c58 <HAL_RCC_OscConfig+0x770>)
 8001b62:	f043 0301 	orr.w	r3, r3, #1
 8001b66:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b6a:	f7ff f99f 	bl	8000eac <HAL_GetTick>
 8001b6e:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001b70:	e008      	b.n	8001b84 <HAL_RCC_OscConfig+0x69c>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001b72:	f7ff f99b 	bl	8000eac <HAL_GetTick>
 8001b76:	4602      	mov	r2, r0
 8001b78:	69bb      	ldr	r3, [r7, #24]
 8001b7a:	1ad3      	subs	r3, r2, r3
 8001b7c:	2b02      	cmp	r3, #2
 8001b7e:	d901      	bls.n	8001b84 <HAL_RCC_OscConfig+0x69c>
        {
          return HAL_TIMEOUT;
 8001b80:	2303      	movs	r3, #3
 8001b82:	e10a      	b.n	8001d9a <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001b84:	4b34      	ldr	r3, [pc, #208]	; (8001c58 <HAL_RCC_OscConfig+0x770>)
 8001b86:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001b8a:	f003 0302 	and.w	r3, r3, #2
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d0ef      	beq.n	8001b72 <HAL_RCC_OscConfig+0x68a>
 8001b92:	e01b      	b.n	8001bcc <HAL_RCC_OscConfig+0x6e4>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001b94:	4b30      	ldr	r3, [pc, #192]	; (8001c58 <HAL_RCC_OscConfig+0x770>)
 8001b96:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001b9a:	4a2f      	ldr	r2, [pc, #188]	; (8001c58 <HAL_RCC_OscConfig+0x770>)
 8001b9c:	f023 0301 	bic.w	r3, r3, #1
 8001ba0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ba4:	f7ff f982 	bl	8000eac <HAL_GetTick>
 8001ba8:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001baa:	e008      	b.n	8001bbe <HAL_RCC_OscConfig+0x6d6>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001bac:	f7ff f97e 	bl	8000eac <HAL_GetTick>
 8001bb0:	4602      	mov	r2, r0
 8001bb2:	69bb      	ldr	r3, [r7, #24]
 8001bb4:	1ad3      	subs	r3, r2, r3
 8001bb6:	2b02      	cmp	r3, #2
 8001bb8:	d901      	bls.n	8001bbe <HAL_RCC_OscConfig+0x6d6>
        {
          return HAL_TIMEOUT;
 8001bba:	2303      	movs	r3, #3
 8001bbc:	e0ed      	b.n	8001d9a <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001bbe:	4b26      	ldr	r3, [pc, #152]	; (8001c58 <HAL_RCC_OscConfig+0x770>)
 8001bc0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001bc4:	f003 0302 	and.w	r3, r3, #2
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d1ef      	bne.n	8001bac <HAL_RCC_OscConfig+0x6c4>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	f000 80e1 	beq.w	8001d98 <HAL_RCC_OscConfig+0x8b0>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bda:	2b02      	cmp	r3, #2
 8001bdc:	f040 80b5 	bne.w	8001d4a <HAL_RCC_OscConfig+0x862>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001be0:	4b1d      	ldr	r3, [pc, #116]	; (8001c58 <HAL_RCC_OscConfig+0x770>)
 8001be2:	68db      	ldr	r3, [r3, #12]
 8001be4:	61fb      	str	r3, [r7, #28]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001be6:	69fb      	ldr	r3, [r7, #28]
 8001be8:	f003 0203 	and.w	r2, r3, #3
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bf0:	429a      	cmp	r2, r3
 8001bf2:	d124      	bne.n	8001c3e <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001bf4:	69fb      	ldr	r3, [r7, #28]
 8001bf6:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001bfe:	3b01      	subs	r3, #1
 8001c00:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c02:	429a      	cmp	r2, r3
 8001c04:	d11b      	bne.n	8001c3e <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001c06:	69fb      	ldr	r3, [r7, #28]
 8001c08:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c10:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001c12:	429a      	cmp	r2, r3
 8001c14:	d113      	bne.n	8001c3e <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001c16:	69fb      	ldr	r3, [r7, #28]
 8001c18:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c20:	085b      	lsrs	r3, r3, #1
 8001c22:	3b01      	subs	r3, #1
 8001c24:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001c26:	429a      	cmp	r2, r3
 8001c28:	d109      	bne.n	8001c3e <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001c2a:	69fb      	ldr	r3, [r7, #28]
 8001c2c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c34:	085b      	lsrs	r3, r3, #1
 8001c36:	3b01      	subs	r3, #1
 8001c38:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001c3a:	429a      	cmp	r2, r3
 8001c3c:	d05f      	beq.n	8001cfe <HAL_RCC_OscConfig+0x816>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001c3e:	6a3b      	ldr	r3, [r7, #32]
 8001c40:	2b0c      	cmp	r3, #12
 8001c42:	d05a      	beq.n	8001cfa <HAL_RCC_OscConfig+0x812>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001c44:	4b04      	ldr	r3, [pc, #16]	; (8001c58 <HAL_RCC_OscConfig+0x770>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	4a03      	ldr	r2, [pc, #12]	; (8001c58 <HAL_RCC_OscConfig+0x770>)
 8001c4a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001c4e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001c50:	f7ff f92c 	bl	8000eac <HAL_GetTick>
 8001c54:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c56:	e00c      	b.n	8001c72 <HAL_RCC_OscConfig+0x78a>
 8001c58:	40021000 	.word	0x40021000
 8001c5c:	40007000 	.word	0x40007000
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c60:	f7ff f924 	bl	8000eac <HAL_GetTick>
 8001c64:	4602      	mov	r2, r0
 8001c66:	69bb      	ldr	r3, [r7, #24]
 8001c68:	1ad3      	subs	r3, r2, r3
 8001c6a:	2b02      	cmp	r3, #2
 8001c6c:	d901      	bls.n	8001c72 <HAL_RCC_OscConfig+0x78a>
              {
                return HAL_TIMEOUT;
 8001c6e:	2303      	movs	r3, #3
 8001c70:	e093      	b.n	8001d9a <HAL_RCC_OscConfig+0x8b2>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c72:	4b4c      	ldr	r3, [pc, #304]	; (8001da4 <HAL_RCC_OscConfig+0x8bc>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d1f0      	bne.n	8001c60 <HAL_RCC_OscConfig+0x778>
                                 RCC_OscInitStruct->PLL.PLLN,
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#else
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c7e:	4b49      	ldr	r3, [pc, #292]	; (8001da4 <HAL_RCC_OscConfig+0x8bc>)
 8001c80:	68da      	ldr	r2, [r3, #12]
 8001c82:	4b49      	ldr	r3, [pc, #292]	; (8001da8 <HAL_RCC_OscConfig+0x8c0>)
 8001c84:	4013      	ands	r3, r2
 8001c86:	687a      	ldr	r2, [r7, #4]
 8001c88:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8001c8a:	687a      	ldr	r2, [r7, #4]
 8001c8c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001c8e:	3a01      	subs	r2, #1
 8001c90:	0112      	lsls	r2, r2, #4
 8001c92:	4311      	orrs	r1, r2
 8001c94:	687a      	ldr	r2, [r7, #4]
 8001c96:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001c98:	0212      	lsls	r2, r2, #8
 8001c9a:	4311      	orrs	r1, r2
 8001c9c:	687a      	ldr	r2, [r7, #4]
 8001c9e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001ca0:	0852      	lsrs	r2, r2, #1
 8001ca2:	3a01      	subs	r2, #1
 8001ca4:	0552      	lsls	r2, r2, #21
 8001ca6:	4311      	orrs	r1, r2
 8001ca8:	687a      	ldr	r2, [r7, #4]
 8001caa:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001cac:	0852      	lsrs	r2, r2, #1
 8001cae:	3a01      	subs	r2, #1
 8001cb0:	0652      	lsls	r2, r2, #25
 8001cb2:	430a      	orrs	r2, r1
 8001cb4:	493b      	ldr	r1, [pc, #236]	; (8001da4 <HAL_RCC_OscConfig+0x8bc>)
 8001cb6:	4313      	orrs	r3, r2
 8001cb8:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001cba:	4b3a      	ldr	r3, [pc, #232]	; (8001da4 <HAL_RCC_OscConfig+0x8bc>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	4a39      	ldr	r2, [pc, #228]	; (8001da4 <HAL_RCC_OscConfig+0x8bc>)
 8001cc0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001cc4:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001cc6:	4b37      	ldr	r3, [pc, #220]	; (8001da4 <HAL_RCC_OscConfig+0x8bc>)
 8001cc8:	68db      	ldr	r3, [r3, #12]
 8001cca:	4a36      	ldr	r2, [pc, #216]	; (8001da4 <HAL_RCC_OscConfig+0x8bc>)
 8001ccc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001cd0:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001cd2:	f7ff f8eb 	bl	8000eac <HAL_GetTick>
 8001cd6:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001cd8:	e008      	b.n	8001cec <HAL_RCC_OscConfig+0x804>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cda:	f7ff f8e7 	bl	8000eac <HAL_GetTick>
 8001cde:	4602      	mov	r2, r0
 8001ce0:	69bb      	ldr	r3, [r7, #24]
 8001ce2:	1ad3      	subs	r3, r2, r3
 8001ce4:	2b02      	cmp	r3, #2
 8001ce6:	d901      	bls.n	8001cec <HAL_RCC_OscConfig+0x804>
              {
                return HAL_TIMEOUT;
 8001ce8:	2303      	movs	r3, #3
 8001cea:	e056      	b.n	8001d9a <HAL_RCC_OscConfig+0x8b2>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001cec:	4b2d      	ldr	r3, [pc, #180]	; (8001da4 <HAL_RCC_OscConfig+0x8bc>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d0f0      	beq.n	8001cda <HAL_RCC_OscConfig+0x7f2>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001cf8:	e04e      	b.n	8001d98 <HAL_RCC_OscConfig+0x8b0>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	e04d      	b.n	8001d9a <HAL_RCC_OscConfig+0x8b2>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001cfe:	4b29      	ldr	r3, [pc, #164]	; (8001da4 <HAL_RCC_OscConfig+0x8bc>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d146      	bne.n	8001d98 <HAL_RCC_OscConfig+0x8b0>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001d0a:	4b26      	ldr	r3, [pc, #152]	; (8001da4 <HAL_RCC_OscConfig+0x8bc>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	4a25      	ldr	r2, [pc, #148]	; (8001da4 <HAL_RCC_OscConfig+0x8bc>)
 8001d10:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d14:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001d16:	4b23      	ldr	r3, [pc, #140]	; (8001da4 <HAL_RCC_OscConfig+0x8bc>)
 8001d18:	68db      	ldr	r3, [r3, #12]
 8001d1a:	4a22      	ldr	r2, [pc, #136]	; (8001da4 <HAL_RCC_OscConfig+0x8bc>)
 8001d1c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d20:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001d22:	f7ff f8c3 	bl	8000eac <HAL_GetTick>
 8001d26:	61b8      	str	r0, [r7, #24]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d28:	e008      	b.n	8001d3c <HAL_RCC_OscConfig+0x854>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d2a:	f7ff f8bf 	bl	8000eac <HAL_GetTick>
 8001d2e:	4602      	mov	r2, r0
 8001d30:	69bb      	ldr	r3, [r7, #24]
 8001d32:	1ad3      	subs	r3, r2, r3
 8001d34:	2b02      	cmp	r3, #2
 8001d36:	d901      	bls.n	8001d3c <HAL_RCC_OscConfig+0x854>
            {
              return HAL_TIMEOUT;
 8001d38:	2303      	movs	r3, #3
 8001d3a:	e02e      	b.n	8001d9a <HAL_RCC_OscConfig+0x8b2>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d3c:	4b19      	ldr	r3, [pc, #100]	; (8001da4 <HAL_RCC_OscConfig+0x8bc>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d0f0      	beq.n	8001d2a <HAL_RCC_OscConfig+0x842>
 8001d48:	e026      	b.n	8001d98 <HAL_RCC_OscConfig+0x8b0>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001d4a:	6a3b      	ldr	r3, [r7, #32]
 8001d4c:	2b0c      	cmp	r3, #12
 8001d4e:	d021      	beq.n	8001d94 <HAL_RCC_OscConfig+0x8ac>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d50:	4b14      	ldr	r3, [pc, #80]	; (8001da4 <HAL_RCC_OscConfig+0x8bc>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	4a13      	ldr	r2, [pc, #76]	; (8001da4 <HAL_RCC_OscConfig+0x8bc>)
 8001d56:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001d5a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d5c:	f7ff f8a6 	bl	8000eac <HAL_GetTick>
 8001d60:	61b8      	str	r0, [r7, #24]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d62:	e008      	b.n	8001d76 <HAL_RCC_OscConfig+0x88e>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d64:	f7ff f8a2 	bl	8000eac <HAL_GetTick>
 8001d68:	4602      	mov	r2, r0
 8001d6a:	69bb      	ldr	r3, [r7, #24]
 8001d6c:	1ad3      	subs	r3, r2, r3
 8001d6e:	2b02      	cmp	r3, #2
 8001d70:	d901      	bls.n	8001d76 <HAL_RCC_OscConfig+0x88e>
          {
            return HAL_TIMEOUT;
 8001d72:	2303      	movs	r3, #3
 8001d74:	e011      	b.n	8001d9a <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d76:	4b0b      	ldr	r3, [pc, #44]	; (8001da4 <HAL_RCC_OscConfig+0x8bc>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d1f0      	bne.n	8001d64 <HAL_RCC_OscConfig+0x87c>
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
 8001d82:	4b08      	ldr	r3, [pc, #32]	; (8001da4 <HAL_RCC_OscConfig+0x8bc>)
 8001d84:	68db      	ldr	r3, [r3, #12]
 8001d86:	4a07      	ldr	r2, [pc, #28]	; (8001da4 <HAL_RCC_OscConfig+0x8bc>)
 8001d88:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001d8c:	f023 0303 	bic.w	r3, r3, #3
 8001d90:	60d3      	str	r3, [r2, #12]
 8001d92:	e001      	b.n	8001d98 <HAL_RCC_OscConfig+0x8b0>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001d94:	2301      	movs	r3, #1
 8001d96:	e000      	b.n	8001d9a <HAL_RCC_OscConfig+0x8b2>
      }
    }
  }
  return HAL_OK;
 8001d98:	2300      	movs	r3, #0
}
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	3728      	adds	r7, #40	; 0x28
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bd80      	pop	{r7, pc}
 8001da2:	bf00      	nop
 8001da4:	40021000 	.word	0x40021000
 8001da8:	f99f808c 	.word	0xf99f808c

08001dac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b084      	sub	sp, #16
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
 8001db4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d101      	bne.n	8001dc0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001dbc:	2301      	movs	r3, #1
 8001dbe:	e0e7      	b.n	8001f90 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001dc0:	4b75      	ldr	r3, [pc, #468]	; (8001f98 <HAL_RCC_ClockConfig+0x1ec>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f003 0307 	and.w	r3, r3, #7
 8001dc8:	683a      	ldr	r2, [r7, #0]
 8001dca:	429a      	cmp	r2, r3
 8001dcc:	d910      	bls.n	8001df0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001dce:	4b72      	ldr	r3, [pc, #456]	; (8001f98 <HAL_RCC_ClockConfig+0x1ec>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f023 0207 	bic.w	r2, r3, #7
 8001dd6:	4970      	ldr	r1, [pc, #448]	; (8001f98 <HAL_RCC_ClockConfig+0x1ec>)
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	4313      	orrs	r3, r2
 8001ddc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001dde:	4b6e      	ldr	r3, [pc, #440]	; (8001f98 <HAL_RCC_ClockConfig+0x1ec>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f003 0307 	and.w	r3, r3, #7
 8001de6:	683a      	ldr	r2, [r7, #0]
 8001de8:	429a      	cmp	r2, r3
 8001dea:	d001      	beq.n	8001df0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001dec:	2301      	movs	r3, #1
 8001dee:	e0cf      	b.n	8001f90 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f003 0302 	and.w	r3, r3, #2
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d010      	beq.n	8001e1e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	689a      	ldr	r2, [r3, #8]
 8001e00:	4b66      	ldr	r3, [pc, #408]	; (8001f9c <HAL_RCC_ClockConfig+0x1f0>)
 8001e02:	689b      	ldr	r3, [r3, #8]
 8001e04:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001e08:	429a      	cmp	r2, r3
 8001e0a:	d908      	bls.n	8001e1e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e0c:	4b63      	ldr	r3, [pc, #396]	; (8001f9c <HAL_RCC_ClockConfig+0x1f0>)
 8001e0e:	689b      	ldr	r3, [r3, #8]
 8001e10:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	689b      	ldr	r3, [r3, #8]
 8001e18:	4960      	ldr	r1, [pc, #384]	; (8001f9c <HAL_RCC_ClockConfig+0x1f0>)
 8001e1a:	4313      	orrs	r3, r2
 8001e1c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f003 0301 	and.w	r3, r3, #1
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d04c      	beq.n	8001ec4 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	685b      	ldr	r3, [r3, #4]
 8001e2e:	2b03      	cmp	r3, #3
 8001e30:	d107      	bne.n	8001e42 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e32:	4b5a      	ldr	r3, [pc, #360]	; (8001f9c <HAL_RCC_ClockConfig+0x1f0>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d121      	bne.n	8001e82 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001e3e:	2301      	movs	r3, #1
 8001e40:	e0a6      	b.n	8001f90 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	685b      	ldr	r3, [r3, #4]
 8001e46:	2b02      	cmp	r3, #2
 8001e48:	d107      	bne.n	8001e5a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001e4a:	4b54      	ldr	r3, [pc, #336]	; (8001f9c <HAL_RCC_ClockConfig+0x1f0>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d115      	bne.n	8001e82 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001e56:	2301      	movs	r3, #1
 8001e58:	e09a      	b.n	8001f90 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	685b      	ldr	r3, [r3, #4]
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d107      	bne.n	8001e72 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001e62:	4b4e      	ldr	r3, [pc, #312]	; (8001f9c <HAL_RCC_ClockConfig+0x1f0>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f003 0302 	and.w	r3, r3, #2
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d109      	bne.n	8001e82 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001e6e:	2301      	movs	r3, #1
 8001e70:	e08e      	b.n	8001f90 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e72:	4b4a      	ldr	r3, [pc, #296]	; (8001f9c <HAL_RCC_ClockConfig+0x1f0>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d101      	bne.n	8001e82 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001e7e:	2301      	movs	r3, #1
 8001e80:	e086      	b.n	8001f90 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001e82:	4b46      	ldr	r3, [pc, #280]	; (8001f9c <HAL_RCC_ClockConfig+0x1f0>)
 8001e84:	689b      	ldr	r3, [r3, #8]
 8001e86:	f023 0203 	bic.w	r2, r3, #3
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	685b      	ldr	r3, [r3, #4]
 8001e8e:	4943      	ldr	r1, [pc, #268]	; (8001f9c <HAL_RCC_ClockConfig+0x1f0>)
 8001e90:	4313      	orrs	r3, r2
 8001e92:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001e94:	f7ff f80a 	bl	8000eac <HAL_GetTick>
 8001e98:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e9a:	e00a      	b.n	8001eb2 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e9c:	f7ff f806 	bl	8000eac <HAL_GetTick>
 8001ea0:	4602      	mov	r2, r0
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	1ad3      	subs	r3, r2, r3
 8001ea6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001eaa:	4293      	cmp	r3, r2
 8001eac:	d901      	bls.n	8001eb2 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001eae:	2303      	movs	r3, #3
 8001eb0:	e06e      	b.n	8001f90 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001eb2:	4b3a      	ldr	r3, [pc, #232]	; (8001f9c <HAL_RCC_ClockConfig+0x1f0>)
 8001eb4:	689b      	ldr	r3, [r3, #8]
 8001eb6:	f003 020c 	and.w	r2, r3, #12
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	685b      	ldr	r3, [r3, #4]
 8001ebe:	009b      	lsls	r3, r3, #2
 8001ec0:	429a      	cmp	r2, r3
 8001ec2:	d1eb      	bne.n	8001e9c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f003 0302 	and.w	r3, r3, #2
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d010      	beq.n	8001ef2 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	689a      	ldr	r2, [r3, #8]
 8001ed4:	4b31      	ldr	r3, [pc, #196]	; (8001f9c <HAL_RCC_ClockConfig+0x1f0>)
 8001ed6:	689b      	ldr	r3, [r3, #8]
 8001ed8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001edc:	429a      	cmp	r2, r3
 8001ede:	d208      	bcs.n	8001ef2 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ee0:	4b2e      	ldr	r3, [pc, #184]	; (8001f9c <HAL_RCC_ClockConfig+0x1f0>)
 8001ee2:	689b      	ldr	r3, [r3, #8]
 8001ee4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	689b      	ldr	r3, [r3, #8]
 8001eec:	492b      	ldr	r1, [pc, #172]	; (8001f9c <HAL_RCC_ClockConfig+0x1f0>)
 8001eee:	4313      	orrs	r3, r2
 8001ef0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001ef2:	4b29      	ldr	r3, [pc, #164]	; (8001f98 <HAL_RCC_ClockConfig+0x1ec>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f003 0307 	and.w	r3, r3, #7
 8001efa:	683a      	ldr	r2, [r7, #0]
 8001efc:	429a      	cmp	r2, r3
 8001efe:	d210      	bcs.n	8001f22 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f00:	4b25      	ldr	r3, [pc, #148]	; (8001f98 <HAL_RCC_ClockConfig+0x1ec>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f023 0207 	bic.w	r2, r3, #7
 8001f08:	4923      	ldr	r1, [pc, #140]	; (8001f98 <HAL_RCC_ClockConfig+0x1ec>)
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	4313      	orrs	r3, r2
 8001f0e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f10:	4b21      	ldr	r3, [pc, #132]	; (8001f98 <HAL_RCC_ClockConfig+0x1ec>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f003 0307 	and.w	r3, r3, #7
 8001f18:	683a      	ldr	r2, [r7, #0]
 8001f1a:	429a      	cmp	r2, r3
 8001f1c:	d001      	beq.n	8001f22 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001f1e:	2301      	movs	r3, #1
 8001f20:	e036      	b.n	8001f90 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f003 0304 	and.w	r3, r3, #4
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d008      	beq.n	8001f40 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f2e:	4b1b      	ldr	r3, [pc, #108]	; (8001f9c <HAL_RCC_ClockConfig+0x1f0>)
 8001f30:	689b      	ldr	r3, [r3, #8]
 8001f32:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	68db      	ldr	r3, [r3, #12]
 8001f3a:	4918      	ldr	r1, [pc, #96]	; (8001f9c <HAL_RCC_ClockConfig+0x1f0>)
 8001f3c:	4313      	orrs	r3, r2
 8001f3e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f003 0308 	and.w	r3, r3, #8
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d009      	beq.n	8001f60 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001f4c:	4b13      	ldr	r3, [pc, #76]	; (8001f9c <HAL_RCC_ClockConfig+0x1f0>)
 8001f4e:	689b      	ldr	r3, [r3, #8]
 8001f50:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	691b      	ldr	r3, [r3, #16]
 8001f58:	00db      	lsls	r3, r3, #3
 8001f5a:	4910      	ldr	r1, [pc, #64]	; (8001f9c <HAL_RCC_ClockConfig+0x1f0>)
 8001f5c:	4313      	orrs	r3, r2
 8001f5e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001f60:	f000 f824 	bl	8001fac <HAL_RCC_GetSysClockFreq>
 8001f64:	4602      	mov	r2, r0
 8001f66:	4b0d      	ldr	r3, [pc, #52]	; (8001f9c <HAL_RCC_ClockConfig+0x1f0>)
 8001f68:	689b      	ldr	r3, [r3, #8]
 8001f6a:	091b      	lsrs	r3, r3, #4
 8001f6c:	f003 030f 	and.w	r3, r3, #15
 8001f70:	490b      	ldr	r1, [pc, #44]	; (8001fa0 <HAL_RCC_ClockConfig+0x1f4>)
 8001f72:	5ccb      	ldrb	r3, [r1, r3]
 8001f74:	f003 031f 	and.w	r3, r3, #31
 8001f78:	fa22 f303 	lsr.w	r3, r2, r3
 8001f7c:	4a09      	ldr	r2, [pc, #36]	; (8001fa4 <HAL_RCC_ClockConfig+0x1f8>)
 8001f7e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001f80:	4b09      	ldr	r3, [pc, #36]	; (8001fa8 <HAL_RCC_ClockConfig+0x1fc>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	4618      	mov	r0, r3
 8001f86:	f7fe ff41 	bl	8000e0c <HAL_InitTick>
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	72fb      	strb	r3, [r7, #11]

  return status;
 8001f8e:	7afb      	ldrb	r3, [r7, #11]
}
 8001f90:	4618      	mov	r0, r3
 8001f92:	3710      	adds	r7, #16
 8001f94:	46bd      	mov	sp, r7
 8001f96:	bd80      	pop	{r7, pc}
 8001f98:	40022000 	.word	0x40022000
 8001f9c:	40021000 	.word	0x40021000
 8001fa0:	08003b84 	.word	0x08003b84
 8001fa4:	20000000 	.word	0x20000000
 8001fa8:	20000004 	.word	0x20000004

08001fac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001fac:	b480      	push	{r7}
 8001fae:	b089      	sub	sp, #36	; 0x24
 8001fb0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	61fb      	str	r3, [r7, #28]
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001fba:	4b3e      	ldr	r3, [pc, #248]	; (80020b4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001fbc:	689b      	ldr	r3, [r3, #8]
 8001fbe:	f003 030c 	and.w	r3, r3, #12
 8001fc2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001fc4:	4b3b      	ldr	r3, [pc, #236]	; (80020b4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001fc6:	68db      	ldr	r3, [r3, #12]
 8001fc8:	f003 0303 	and.w	r3, r3, #3
 8001fcc:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001fce:	693b      	ldr	r3, [r7, #16]
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d005      	beq.n	8001fe0 <HAL_RCC_GetSysClockFreq+0x34>
 8001fd4:	693b      	ldr	r3, [r7, #16]
 8001fd6:	2b0c      	cmp	r3, #12
 8001fd8:	d121      	bne.n	800201e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	2b01      	cmp	r3, #1
 8001fde:	d11e      	bne.n	800201e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001fe0:	4b34      	ldr	r3, [pc, #208]	; (80020b4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f003 0308 	and.w	r3, r3, #8
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d107      	bne.n	8001ffc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001fec:	4b31      	ldr	r3, [pc, #196]	; (80020b4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001fee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ff2:	0a1b      	lsrs	r3, r3, #8
 8001ff4:	f003 030f 	and.w	r3, r3, #15
 8001ff8:	61fb      	str	r3, [r7, #28]
 8001ffa:	e005      	b.n	8002008 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001ffc:	4b2d      	ldr	r3, [pc, #180]	; (80020b4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	091b      	lsrs	r3, r3, #4
 8002002:	f003 030f 	and.w	r3, r3, #15
 8002006:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002008:	4a2b      	ldr	r2, [pc, #172]	; (80020b8 <HAL_RCC_GetSysClockFreq+0x10c>)
 800200a:	69fb      	ldr	r3, [r7, #28]
 800200c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002010:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002012:	693b      	ldr	r3, [r7, #16]
 8002014:	2b00      	cmp	r3, #0
 8002016:	d10d      	bne.n	8002034 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002018:	69fb      	ldr	r3, [r7, #28]
 800201a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800201c:	e00a      	b.n	8002034 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800201e:	693b      	ldr	r3, [r7, #16]
 8002020:	2b04      	cmp	r3, #4
 8002022:	d102      	bne.n	800202a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002024:	4b25      	ldr	r3, [pc, #148]	; (80020bc <HAL_RCC_GetSysClockFreq+0x110>)
 8002026:	61bb      	str	r3, [r7, #24]
 8002028:	e004      	b.n	8002034 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800202a:	693b      	ldr	r3, [r7, #16]
 800202c:	2b08      	cmp	r3, #8
 800202e:	d101      	bne.n	8002034 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002030:	4b23      	ldr	r3, [pc, #140]	; (80020c0 <HAL_RCC_GetSysClockFreq+0x114>)
 8002032:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002034:	693b      	ldr	r3, [r7, #16]
 8002036:	2b0c      	cmp	r3, #12
 8002038:	d134      	bne.n	80020a4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800203a:	4b1e      	ldr	r3, [pc, #120]	; (80020b4 <HAL_RCC_GetSysClockFreq+0x108>)
 800203c:	68db      	ldr	r3, [r3, #12]
 800203e:	f003 0303 	and.w	r3, r3, #3
 8002042:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002044:	68bb      	ldr	r3, [r7, #8]
 8002046:	2b02      	cmp	r3, #2
 8002048:	d003      	beq.n	8002052 <HAL_RCC_GetSysClockFreq+0xa6>
 800204a:	68bb      	ldr	r3, [r7, #8]
 800204c:	2b03      	cmp	r3, #3
 800204e:	d003      	beq.n	8002058 <HAL_RCC_GetSysClockFreq+0xac>
 8002050:	e005      	b.n	800205e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002052:	4b1a      	ldr	r3, [pc, #104]	; (80020bc <HAL_RCC_GetSysClockFreq+0x110>)
 8002054:	617b      	str	r3, [r7, #20]
      break;
 8002056:	e005      	b.n	8002064 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002058:	4b19      	ldr	r3, [pc, #100]	; (80020c0 <HAL_RCC_GetSysClockFreq+0x114>)
 800205a:	617b      	str	r3, [r7, #20]
      break;
 800205c:	e002      	b.n	8002064 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800205e:	69fb      	ldr	r3, [r7, #28]
 8002060:	617b      	str	r3, [r7, #20]
      break;
 8002062:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002064:	4b13      	ldr	r3, [pc, #76]	; (80020b4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002066:	68db      	ldr	r3, [r3, #12]
 8002068:	091b      	lsrs	r3, r3, #4
 800206a:	f003 0307 	and.w	r3, r3, #7
 800206e:	3301      	adds	r3, #1
 8002070:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002072:	4b10      	ldr	r3, [pc, #64]	; (80020b4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002074:	68db      	ldr	r3, [r3, #12]
 8002076:	0a1b      	lsrs	r3, r3, #8
 8002078:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800207c:	697a      	ldr	r2, [r7, #20]
 800207e:	fb03 f202 	mul.w	r2, r3, r2
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	fbb2 f3f3 	udiv	r3, r2, r3
 8002088:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800208a:	4b0a      	ldr	r3, [pc, #40]	; (80020b4 <HAL_RCC_GetSysClockFreq+0x108>)
 800208c:	68db      	ldr	r3, [r3, #12]
 800208e:	0e5b      	lsrs	r3, r3, #25
 8002090:	f003 0303 	and.w	r3, r3, #3
 8002094:	3301      	adds	r3, #1
 8002096:	005b      	lsls	r3, r3, #1
 8002098:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800209a:	697a      	ldr	r2, [r7, #20]
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	fbb2 f3f3 	udiv	r3, r2, r3
 80020a2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80020a4:	69bb      	ldr	r3, [r7, #24]
}
 80020a6:	4618      	mov	r0, r3
 80020a8:	3724      	adds	r7, #36	; 0x24
 80020aa:	46bd      	mov	sp, r7
 80020ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b0:	4770      	bx	lr
 80020b2:	bf00      	nop
 80020b4:	40021000 	.word	0x40021000
 80020b8:	08003b9c 	.word	0x08003b9c
 80020bc:	00f42400 	.word	0x00f42400
 80020c0:	007a1200 	.word	0x007a1200

080020c4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80020c4:	b480      	push	{r7}
 80020c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80020c8:	4b03      	ldr	r3, [pc, #12]	; (80020d8 <HAL_RCC_GetHCLKFreq+0x14>)
 80020ca:	681b      	ldr	r3, [r3, #0]
}
 80020cc:	4618      	mov	r0, r3
 80020ce:	46bd      	mov	sp, r7
 80020d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d4:	4770      	bx	lr
 80020d6:	bf00      	nop
 80020d8:	20000000 	.word	0x20000000

080020dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80020e0:	f7ff fff0 	bl	80020c4 <HAL_RCC_GetHCLKFreq>
 80020e4:	4602      	mov	r2, r0
 80020e6:	4b06      	ldr	r3, [pc, #24]	; (8002100 <HAL_RCC_GetPCLK1Freq+0x24>)
 80020e8:	689b      	ldr	r3, [r3, #8]
 80020ea:	0a1b      	lsrs	r3, r3, #8
 80020ec:	f003 0307 	and.w	r3, r3, #7
 80020f0:	4904      	ldr	r1, [pc, #16]	; (8002104 <HAL_RCC_GetPCLK1Freq+0x28>)
 80020f2:	5ccb      	ldrb	r3, [r1, r3]
 80020f4:	f003 031f 	and.w	r3, r3, #31
 80020f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80020fc:	4618      	mov	r0, r3
 80020fe:	bd80      	pop	{r7, pc}
 8002100:	40021000 	.word	0x40021000
 8002104:	08003b94 	.word	0x08003b94

08002108 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800210c:	f7ff ffda 	bl	80020c4 <HAL_RCC_GetHCLKFreq>
 8002110:	4602      	mov	r2, r0
 8002112:	4b06      	ldr	r3, [pc, #24]	; (800212c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002114:	689b      	ldr	r3, [r3, #8]
 8002116:	0adb      	lsrs	r3, r3, #11
 8002118:	f003 0307 	and.w	r3, r3, #7
 800211c:	4904      	ldr	r1, [pc, #16]	; (8002130 <HAL_RCC_GetPCLK2Freq+0x28>)
 800211e:	5ccb      	ldrb	r3, [r1, r3]
 8002120:	f003 031f 	and.w	r3, r3, #31
 8002124:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002128:	4618      	mov	r0, r3
 800212a:	bd80      	pop	{r7, pc}
 800212c:	40021000 	.word	0x40021000
 8002130:	08003b94 	.word	0x08003b94

08002134 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b086      	sub	sp, #24
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800213c:	2300      	movs	r3, #0
 800213e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002140:	4b2a      	ldr	r3, [pc, #168]	; (80021ec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002142:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002144:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002148:	2b00      	cmp	r3, #0
 800214a:	d003      	beq.n	8002154 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800214c:	f7ff f968 	bl	8001420 <HAL_PWREx_GetVoltageRange>
 8002150:	6178      	str	r0, [r7, #20]
 8002152:	e014      	b.n	800217e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002154:	4b25      	ldr	r3, [pc, #148]	; (80021ec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002156:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002158:	4a24      	ldr	r2, [pc, #144]	; (80021ec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800215a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800215e:	6593      	str	r3, [r2, #88]	; 0x58
 8002160:	4b22      	ldr	r3, [pc, #136]	; (80021ec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002162:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002164:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002168:	60fb      	str	r3, [r7, #12]
 800216a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800216c:	f7ff f958 	bl	8001420 <HAL_PWREx_GetVoltageRange>
 8002170:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002172:	4b1e      	ldr	r3, [pc, #120]	; (80021ec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002174:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002176:	4a1d      	ldr	r2, [pc, #116]	; (80021ec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002178:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800217c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800217e:	697b      	ldr	r3, [r7, #20]
 8002180:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002184:	d10b      	bne.n	800219e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	2b80      	cmp	r3, #128	; 0x80
 800218a:	d919      	bls.n	80021c0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	2ba0      	cmp	r3, #160	; 0xa0
 8002190:	d902      	bls.n	8002198 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002192:	2302      	movs	r3, #2
 8002194:	613b      	str	r3, [r7, #16]
 8002196:	e013      	b.n	80021c0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002198:	2301      	movs	r3, #1
 800219a:	613b      	str	r3, [r7, #16]
 800219c:	e010      	b.n	80021c0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	2b80      	cmp	r3, #128	; 0x80
 80021a2:	d902      	bls.n	80021aa <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80021a4:	2303      	movs	r3, #3
 80021a6:	613b      	str	r3, [r7, #16]
 80021a8:	e00a      	b.n	80021c0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	2b80      	cmp	r3, #128	; 0x80
 80021ae:	d102      	bne.n	80021b6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80021b0:	2302      	movs	r3, #2
 80021b2:	613b      	str	r3, [r7, #16]
 80021b4:	e004      	b.n	80021c0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	2b70      	cmp	r3, #112	; 0x70
 80021ba:	d101      	bne.n	80021c0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80021bc:	2301      	movs	r3, #1
 80021be:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80021c0:	4b0b      	ldr	r3, [pc, #44]	; (80021f0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f023 0207 	bic.w	r2, r3, #7
 80021c8:	4909      	ldr	r1, [pc, #36]	; (80021f0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80021ca:	693b      	ldr	r3, [r7, #16]
 80021cc:	4313      	orrs	r3, r2
 80021ce:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80021d0:	4b07      	ldr	r3, [pc, #28]	; (80021f0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f003 0307 	and.w	r3, r3, #7
 80021d8:	693a      	ldr	r2, [r7, #16]
 80021da:	429a      	cmp	r2, r3
 80021dc:	d001      	beq.n	80021e2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80021de:	2301      	movs	r3, #1
 80021e0:	e000      	b.n	80021e4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80021e2:	2300      	movs	r3, #0
}
 80021e4:	4618      	mov	r0, r3
 80021e6:	3718      	adds	r7, #24
 80021e8:	46bd      	mov	sp, r7
 80021ea:	bd80      	pop	{r7, pc}
 80021ec:	40021000 	.word	0x40021000
 80021f0:	40022000 	.word	0x40022000

080021f4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b086      	sub	sp, #24
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80021fc:	2300      	movs	r3, #0
 80021fe:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002200:	2300      	movs	r3, #0
 8002202:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800220c:	2b00      	cmp	r3, #0
 800220e:	f000 809e 	beq.w	800234e <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002212:	2300      	movs	r3, #0
 8002214:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002216:	4b46      	ldr	r3, [pc, #280]	; (8002330 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002218:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800221a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800221e:	2b00      	cmp	r3, #0
 8002220:	d101      	bne.n	8002226 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8002222:	2301      	movs	r3, #1
 8002224:	e000      	b.n	8002228 <HAL_RCCEx_PeriphCLKConfig+0x34>
 8002226:	2300      	movs	r3, #0
 8002228:	2b00      	cmp	r3, #0
 800222a:	d00d      	beq.n	8002248 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800222c:	4b40      	ldr	r3, [pc, #256]	; (8002330 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800222e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002230:	4a3f      	ldr	r2, [pc, #252]	; (8002330 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002232:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002236:	6593      	str	r3, [r2, #88]	; 0x58
 8002238:	4b3d      	ldr	r3, [pc, #244]	; (8002330 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800223a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800223c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002240:	60bb      	str	r3, [r7, #8]
 8002242:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002244:	2301      	movs	r3, #1
 8002246:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002248:	4b3a      	ldr	r3, [pc, #232]	; (8002334 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	4a39      	ldr	r2, [pc, #228]	; (8002334 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 800224e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002252:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002254:	f7fe fe2a 	bl	8000eac <HAL_GetTick>
 8002258:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800225a:	e009      	b.n	8002270 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800225c:	f7fe fe26 	bl	8000eac <HAL_GetTick>
 8002260:	4602      	mov	r2, r0
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	1ad3      	subs	r3, r2, r3
 8002266:	2b02      	cmp	r3, #2
 8002268:	d902      	bls.n	8002270 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      {
        ret = HAL_TIMEOUT;
 800226a:	2303      	movs	r3, #3
 800226c:	74fb      	strb	r3, [r7, #19]
        break;
 800226e:	e005      	b.n	800227c <HAL_RCCEx_PeriphCLKConfig+0x88>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002270:	4b30      	ldr	r3, [pc, #192]	; (8002334 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002278:	2b00      	cmp	r3, #0
 800227a:	d0ef      	beq.n	800225c <HAL_RCCEx_PeriphCLKConfig+0x68>
      }
    }

    if(ret == HAL_OK)
 800227c:	7cfb      	ldrb	r3, [r7, #19]
 800227e:	2b00      	cmp	r3, #0
 8002280:	d15a      	bne.n	8002338 <HAL_RCCEx_PeriphCLKConfig+0x144>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002282:	4b2b      	ldr	r3, [pc, #172]	; (8002330 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002284:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002288:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800228c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800228e:	697b      	ldr	r3, [r7, #20]
 8002290:	2b00      	cmp	r3, #0
 8002292:	d01e      	beq.n	80022d2 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002298:	697a      	ldr	r2, [r7, #20]
 800229a:	429a      	cmp	r2, r3
 800229c:	d019      	beq.n	80022d2 <HAL_RCCEx_PeriphCLKConfig+0xde>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800229e:	4b24      	ldr	r3, [pc, #144]	; (8002330 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80022a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80022a8:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80022aa:	4b21      	ldr	r3, [pc, #132]	; (8002330 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80022ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022b0:	4a1f      	ldr	r2, [pc, #124]	; (8002330 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80022b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022b6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80022ba:	4b1d      	ldr	r3, [pc, #116]	; (8002330 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80022bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022c0:	4a1b      	ldr	r2, [pc, #108]	; (8002330 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80022c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022c6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80022ca:	4a19      	ldr	r2, [pc, #100]	; (8002330 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80022cc:	697b      	ldr	r3, [r7, #20]
 80022ce:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80022d2:	697b      	ldr	r3, [r7, #20]
 80022d4:	f003 0301 	and.w	r3, r3, #1
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d016      	beq.n	800230a <HAL_RCCEx_PeriphCLKConfig+0x116>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022dc:	f7fe fde6 	bl	8000eac <HAL_GetTick>
 80022e0:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80022e2:	e00b      	b.n	80022fc <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022e4:	f7fe fde2 	bl	8000eac <HAL_GetTick>
 80022e8:	4602      	mov	r2, r0
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	1ad3      	subs	r3, r2, r3
 80022ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80022f2:	4293      	cmp	r3, r2
 80022f4:	d902      	bls.n	80022fc <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            ret = HAL_TIMEOUT;
 80022f6:	2303      	movs	r3, #3
 80022f8:	74fb      	strb	r3, [r7, #19]
            break;
 80022fa:	e006      	b.n	800230a <HAL_RCCEx_PeriphCLKConfig+0x116>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80022fc:	4b0c      	ldr	r3, [pc, #48]	; (8002330 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80022fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002302:	f003 0302 	and.w	r3, r3, #2
 8002306:	2b00      	cmp	r3, #0
 8002308:	d0ec      	beq.n	80022e4 <HAL_RCCEx_PeriphCLKConfig+0xf0>
          }
        }
      }

      if(ret == HAL_OK)
 800230a:	7cfb      	ldrb	r3, [r7, #19]
 800230c:	2b00      	cmp	r3, #0
 800230e:	d10b      	bne.n	8002328 <HAL_RCCEx_PeriphCLKConfig+0x134>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002310:	4b07      	ldr	r3, [pc, #28]	; (8002330 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002312:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002316:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800231e:	4904      	ldr	r1, [pc, #16]	; (8002330 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002320:	4313      	orrs	r3, r2
 8002322:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002326:	e009      	b.n	800233c <HAL_RCCEx_PeriphCLKConfig+0x148>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002328:	7cfb      	ldrb	r3, [r7, #19]
 800232a:	74bb      	strb	r3, [r7, #18]
 800232c:	e006      	b.n	800233c <HAL_RCCEx_PeriphCLKConfig+0x148>
 800232e:	bf00      	nop
 8002330:	40021000 	.word	0x40021000
 8002334:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002338:	7cfb      	ldrb	r3, [r7, #19]
 800233a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800233c:	7c7b      	ldrb	r3, [r7, #17]
 800233e:	2b01      	cmp	r3, #1
 8002340:	d105      	bne.n	800234e <HAL_RCCEx_PeriphCLKConfig+0x15a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002342:	4b6e      	ldr	r3, [pc, #440]	; (80024fc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002344:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002346:	4a6d      	ldr	r2, [pc, #436]	; (80024fc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002348:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800234c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f003 0301 	and.w	r3, r3, #1
 8002356:	2b00      	cmp	r3, #0
 8002358:	d00a      	beq.n	8002370 <HAL_RCCEx_PeriphCLKConfig+0x17c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800235a:	4b68      	ldr	r3, [pc, #416]	; (80024fc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800235c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002360:	f023 0203 	bic.w	r2, r3, #3
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	685b      	ldr	r3, [r3, #4]
 8002368:	4964      	ldr	r1, [pc, #400]	; (80024fc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800236a:	4313      	orrs	r3, r2
 800236c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f003 0302 	and.w	r3, r3, #2
 8002378:	2b00      	cmp	r3, #0
 800237a:	d00a      	beq.n	8002392 <HAL_RCCEx_PeriphCLKConfig+0x19e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800237c:	4b5f      	ldr	r3, [pc, #380]	; (80024fc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800237e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002382:	f023 020c 	bic.w	r2, r3, #12
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	689b      	ldr	r3, [r3, #8]
 800238a:	495c      	ldr	r1, [pc, #368]	; (80024fc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800238c:	4313      	orrs	r3, r2
 800238e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f003 0304 	and.w	r3, r3, #4
 800239a:	2b00      	cmp	r3, #0
 800239c:	d00a      	beq.n	80023b4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800239e:	4b57      	ldr	r3, [pc, #348]	; (80024fc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80023a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023a4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	68db      	ldr	r3, [r3, #12]
 80023ac:	4953      	ldr	r1, [pc, #332]	; (80024fc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80023ae:	4313      	orrs	r3, r2
 80023b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f003 0320 	and.w	r3, r3, #32
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d00a      	beq.n	80023d6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80023c0:	4b4e      	ldr	r3, [pc, #312]	; (80024fc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80023c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023c6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	691b      	ldr	r3, [r3, #16]
 80023ce:	494b      	ldr	r1, [pc, #300]	; (80024fc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80023d0:	4313      	orrs	r3, r2
 80023d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d00a      	beq.n	80023f8 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80023e2:	4b46      	ldr	r3, [pc, #280]	; (80024fc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80023e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023e8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	6a1b      	ldr	r3, [r3, #32]
 80023f0:	4942      	ldr	r1, [pc, #264]	; (80024fc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80023f2:	4313      	orrs	r3, r2
 80023f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002400:	2b00      	cmp	r3, #0
 8002402:	d00a      	beq.n	800241a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002404:	4b3d      	ldr	r3, [pc, #244]	; (80024fc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002406:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800240a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002412:	493a      	ldr	r1, [pc, #232]	; (80024fc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002414:	4313      	orrs	r3, r2
 8002416:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002422:	2b00      	cmp	r3, #0
 8002424:	d00a      	beq.n	800243c <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002426:	4b35      	ldr	r3, [pc, #212]	; (80024fc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002428:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800242c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	695b      	ldr	r3, [r3, #20]
 8002434:	4931      	ldr	r1, [pc, #196]	; (80024fc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002436:	4313      	orrs	r3, r2
 8002438:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002444:	2b00      	cmp	r3, #0
 8002446:	d00a      	beq.n	800245e <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002448:	4b2c      	ldr	r3, [pc, #176]	; (80024fc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800244a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800244e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	699b      	ldr	r3, [r3, #24]
 8002456:	4929      	ldr	r1, [pc, #164]	; (80024fc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002458:	4313      	orrs	r3, r2
 800245a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002466:	2b00      	cmp	r3, #0
 8002468:	d00a      	beq.n	8002480 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800246a:	4b24      	ldr	r3, [pc, #144]	; (80024fc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800246c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002470:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	69db      	ldr	r3, [r3, #28]
 8002478:	4920      	ldr	r1, [pc, #128]	; (80024fc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800247a:	4313      	orrs	r3, r2
 800247c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002488:	2b00      	cmp	r3, #0
 800248a:	d015      	beq.n	80024b8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800248c:	4b1b      	ldr	r3, [pc, #108]	; (80024fc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800248e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002492:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800249a:	4918      	ldr	r1, [pc, #96]	; (80024fc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800249c:	4313      	orrs	r3, r2
 800249e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024a6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80024aa:	d105      	bne.n	80024b8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80024ac:	4b13      	ldr	r3, [pc, #76]	; (80024fc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80024ae:	68db      	ldr	r3, [r3, #12]
 80024b0:	4a12      	ldr	r2, [pc, #72]	; (80024fc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80024b2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80024b6:	60d3      	str	r3, [r2, #12]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d015      	beq.n	80024f0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80024c4:	4b0d      	ldr	r3, [pc, #52]	; (80024fc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80024c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024ca:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024d2:	490a      	ldr	r1, [pc, #40]	; (80024fc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80024d4:	4313      	orrs	r3, r2
 80024d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024de:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80024e2:	d105      	bne.n	80024f0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80024e4:	4b05      	ldr	r3, [pc, #20]	; (80024fc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80024e6:	68db      	ldr	r3, [r3, #12]
 80024e8:	4a04      	ldr	r2, [pc, #16]	; (80024fc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80024ea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80024ee:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80024f0:	7cbb      	ldrb	r3, [r7, #18]
}
 80024f2:	4618      	mov	r0, r3
 80024f4:	3718      	adds	r7, #24
 80024f6:	46bd      	mov	sp, r7
 80024f8:	bd80      	pop	{r7, pc}
 80024fa:	bf00      	nop
 80024fc:	40021000 	.word	0x40021000

08002500 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	b082      	sub	sp, #8
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	2b00      	cmp	r3, #0
 800250c:	d101      	bne.n	8002512 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800250e:	2301      	movs	r3, #1
 8002510:	e040      	b.n	8002594 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002516:	2b00      	cmp	r3, #0
 8002518:	d106      	bne.n	8002528 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	2200      	movs	r2, #0
 800251e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002522:	6878      	ldr	r0, [r7, #4]
 8002524:	f7fe f97c 	bl	8000820 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	2224      	movs	r2, #36	; 0x24
 800252c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	681a      	ldr	r2, [r3, #0]
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f022 0201 	bic.w	r2, r2, #1
 800253c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800253e:	6878      	ldr	r0, [r7, #4]
 8002540:	f000 f992 	bl	8002868 <UART_SetConfig>
 8002544:	4603      	mov	r3, r0
 8002546:	2b01      	cmp	r3, #1
 8002548:	d101      	bne.n	800254e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800254a:	2301      	movs	r3, #1
 800254c:	e022      	b.n	8002594 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002552:	2b00      	cmp	r3, #0
 8002554:	d002      	beq.n	800255c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002556:	6878      	ldr	r0, [r7, #4]
 8002558:	f000 fbe0 	bl	8002d1c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	685a      	ldr	r2, [r3, #4]
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800256a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	689a      	ldr	r2, [r3, #8]
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800257a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	681a      	ldr	r2, [r3, #0]
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f042 0201 	orr.w	r2, r2, #1
 800258a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800258c:	6878      	ldr	r0, [r7, #4]
 800258e:	f000 fc67 	bl	8002e60 <UART_CheckIdleState>
 8002592:	4603      	mov	r3, r0
}
 8002594:	4618      	mov	r0, r3
 8002596:	3708      	adds	r7, #8
 8002598:	46bd      	mov	sp, r7
 800259a:	bd80      	pop	{r7, pc}

0800259c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b08a      	sub	sp, #40	; 0x28
 80025a0:	af02      	add	r7, sp, #8
 80025a2:	60f8      	str	r0, [r7, #12]
 80025a4:	60b9      	str	r1, [r7, #8]
 80025a6:	603b      	str	r3, [r7, #0]
 80025a8:	4613      	mov	r3, r2
 80025aa:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80025b0:	2b20      	cmp	r3, #32
 80025b2:	f040 8082 	bne.w	80026ba <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 80025b6:	68bb      	ldr	r3, [r7, #8]
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d002      	beq.n	80025c2 <HAL_UART_Transmit+0x26>
 80025bc:	88fb      	ldrh	r3, [r7, #6]
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d101      	bne.n	80025c6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80025c2:	2301      	movs	r3, #1
 80025c4:	e07a      	b.n	80026bc <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80025cc:	2b01      	cmp	r3, #1
 80025ce:	d101      	bne.n	80025d4 <HAL_UART_Transmit+0x38>
 80025d0:	2302      	movs	r3, #2
 80025d2:	e073      	b.n	80026bc <HAL_UART_Transmit+0x120>
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	2201      	movs	r2, #1
 80025d8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	2200      	movs	r2, #0
 80025e0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	2221      	movs	r2, #33	; 0x21
 80025e8:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80025ea:	f7fe fc5f 	bl	8000eac <HAL_GetTick>
 80025ee:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	88fa      	ldrh	r2, [r7, #6]
 80025f4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	88fa      	ldrh	r2, [r7, #6]
 80025fc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	689b      	ldr	r3, [r3, #8]
 8002604:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002608:	d108      	bne.n	800261c <HAL_UART_Transmit+0x80>
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	691b      	ldr	r3, [r3, #16]
 800260e:	2b00      	cmp	r3, #0
 8002610:	d104      	bne.n	800261c <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8002612:	2300      	movs	r3, #0
 8002614:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002616:	68bb      	ldr	r3, [r7, #8]
 8002618:	61bb      	str	r3, [r7, #24]
 800261a:	e003      	b.n	8002624 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 800261c:	68bb      	ldr	r3, [r7, #8]
 800261e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002620:	2300      	movs	r3, #0
 8002622:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	2200      	movs	r2, #0
 8002628:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 800262c:	e02d      	b.n	800268a <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	9300      	str	r3, [sp, #0]
 8002632:	697b      	ldr	r3, [r7, #20]
 8002634:	2200      	movs	r2, #0
 8002636:	2180      	movs	r1, #128	; 0x80
 8002638:	68f8      	ldr	r0, [r7, #12]
 800263a:	f000 fc5a 	bl	8002ef2 <UART_WaitOnFlagUntilTimeout>
 800263e:	4603      	mov	r3, r0
 8002640:	2b00      	cmp	r3, #0
 8002642:	d001      	beq.n	8002648 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8002644:	2303      	movs	r3, #3
 8002646:	e039      	b.n	80026bc <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8002648:	69fb      	ldr	r3, [r7, #28]
 800264a:	2b00      	cmp	r3, #0
 800264c:	d10b      	bne.n	8002666 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800264e:	69bb      	ldr	r3, [r7, #24]
 8002650:	881a      	ldrh	r2, [r3, #0]
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800265a:	b292      	uxth	r2, r2
 800265c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800265e:	69bb      	ldr	r3, [r7, #24]
 8002660:	3302      	adds	r3, #2
 8002662:	61bb      	str	r3, [r7, #24]
 8002664:	e008      	b.n	8002678 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002666:	69fb      	ldr	r3, [r7, #28]
 8002668:	781a      	ldrb	r2, [r3, #0]
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	b292      	uxth	r2, r2
 8002670:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002672:	69fb      	ldr	r3, [r7, #28]
 8002674:	3301      	adds	r3, #1
 8002676:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800267e:	b29b      	uxth	r3, r3
 8002680:	3b01      	subs	r3, #1
 8002682:	b29a      	uxth	r2, r3
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002690:	b29b      	uxth	r3, r3
 8002692:	2b00      	cmp	r3, #0
 8002694:	d1cb      	bne.n	800262e <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	9300      	str	r3, [sp, #0]
 800269a:	697b      	ldr	r3, [r7, #20]
 800269c:	2200      	movs	r2, #0
 800269e:	2140      	movs	r1, #64	; 0x40
 80026a0:	68f8      	ldr	r0, [r7, #12]
 80026a2:	f000 fc26 	bl	8002ef2 <UART_WaitOnFlagUntilTimeout>
 80026a6:	4603      	mov	r3, r0
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d001      	beq.n	80026b0 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80026ac:	2303      	movs	r3, #3
 80026ae:	e005      	b.n	80026bc <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	2220      	movs	r2, #32
 80026b4:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80026b6:	2300      	movs	r3, #0
 80026b8:	e000      	b.n	80026bc <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 80026ba:	2302      	movs	r3, #2
  }
}
 80026bc:	4618      	mov	r0, r3
 80026be:	3720      	adds	r7, #32
 80026c0:	46bd      	mov	sp, r7
 80026c2:	bd80      	pop	{r7, pc}

080026c4 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b08a      	sub	sp, #40	; 0x28
 80026c8:	af02      	add	r7, sp, #8
 80026ca:	60f8      	str	r0, [r7, #12]
 80026cc:	60b9      	str	r1, [r7, #8]
 80026ce:	603b      	str	r3, [r7, #0]
 80026d0:	4613      	mov	r3, r2
 80026d2:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80026d8:	2b20      	cmp	r3, #32
 80026da:	f040 80bf 	bne.w	800285c <HAL_UART_Receive+0x198>
  {
    if ((pData == NULL) || (Size == 0U))
 80026de:	68bb      	ldr	r3, [r7, #8]
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d002      	beq.n	80026ea <HAL_UART_Receive+0x26>
 80026e4:	88fb      	ldrh	r3, [r7, #6]
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d101      	bne.n	80026ee <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 80026ea:	2301      	movs	r3, #1
 80026ec:	e0b7      	b.n	800285e <HAL_UART_Receive+0x19a>
    }

    __HAL_LOCK(huart);
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80026f4:	2b01      	cmp	r3, #1
 80026f6:	d101      	bne.n	80026fc <HAL_UART_Receive+0x38>
 80026f8:	2302      	movs	r3, #2
 80026fa:	e0b0      	b.n	800285e <HAL_UART_Receive+0x19a>
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	2201      	movs	r2, #1
 8002700:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	2200      	movs	r2, #0
 8002708:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	2222      	movs	r2, #34	; 0x22
 8002710:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	2200      	movs	r2, #0
 8002716:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002718:	f7fe fbc8 	bl	8000eac <HAL_GetTick>
 800271c:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	88fa      	ldrh	r2, [r7, #6]
 8002722:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	88fa      	ldrh	r2, [r7, #6]
 800272a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	689b      	ldr	r3, [r3, #8]
 8002732:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002736:	d10e      	bne.n	8002756 <HAL_UART_Receive+0x92>
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	691b      	ldr	r3, [r3, #16]
 800273c:	2b00      	cmp	r3, #0
 800273e:	d105      	bne.n	800274c <HAL_UART_Receive+0x88>
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	f240 12ff 	movw	r2, #511	; 0x1ff
 8002746:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800274a:	e02d      	b.n	80027a8 <HAL_UART_Receive+0xe4>
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	22ff      	movs	r2, #255	; 0xff
 8002750:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002754:	e028      	b.n	80027a8 <HAL_UART_Receive+0xe4>
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	689b      	ldr	r3, [r3, #8]
 800275a:	2b00      	cmp	r3, #0
 800275c:	d10d      	bne.n	800277a <HAL_UART_Receive+0xb6>
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	691b      	ldr	r3, [r3, #16]
 8002762:	2b00      	cmp	r3, #0
 8002764:	d104      	bne.n	8002770 <HAL_UART_Receive+0xac>
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	22ff      	movs	r2, #255	; 0xff
 800276a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800276e:	e01b      	b.n	80027a8 <HAL_UART_Receive+0xe4>
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	227f      	movs	r2, #127	; 0x7f
 8002774:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002778:	e016      	b.n	80027a8 <HAL_UART_Receive+0xe4>
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	689b      	ldr	r3, [r3, #8]
 800277e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002782:	d10d      	bne.n	80027a0 <HAL_UART_Receive+0xdc>
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	691b      	ldr	r3, [r3, #16]
 8002788:	2b00      	cmp	r3, #0
 800278a:	d104      	bne.n	8002796 <HAL_UART_Receive+0xd2>
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	227f      	movs	r2, #127	; 0x7f
 8002790:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002794:	e008      	b.n	80027a8 <HAL_UART_Receive+0xe4>
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	223f      	movs	r2, #63	; 0x3f
 800279a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800279e:	e003      	b.n	80027a8 <HAL_UART_Receive+0xe4>
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	2200      	movs	r2, #0
 80027a4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80027ae:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	689b      	ldr	r3, [r3, #8]
 80027b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80027b8:	d108      	bne.n	80027cc <HAL_UART_Receive+0x108>
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	691b      	ldr	r3, [r3, #16]
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d104      	bne.n	80027cc <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 80027c2:	2300      	movs	r3, #0
 80027c4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80027c6:	68bb      	ldr	r3, [r7, #8]
 80027c8:	61bb      	str	r3, [r7, #24]
 80027ca:	e003      	b.n	80027d4 <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 80027cc:	68bb      	ldr	r3, [r7, #8]
 80027ce:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80027d0:	2300      	movs	r3, #0
 80027d2:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	2200      	movs	r2, #0
 80027d8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80027dc:	e033      	b.n	8002846 <HAL_UART_Receive+0x182>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	9300      	str	r3, [sp, #0]
 80027e2:	697b      	ldr	r3, [r7, #20]
 80027e4:	2200      	movs	r2, #0
 80027e6:	2120      	movs	r1, #32
 80027e8:	68f8      	ldr	r0, [r7, #12]
 80027ea:	f000 fb82 	bl	8002ef2 <UART_WaitOnFlagUntilTimeout>
 80027ee:	4603      	mov	r3, r0
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d001      	beq.n	80027f8 <HAL_UART_Receive+0x134>
      {
        return HAL_TIMEOUT;
 80027f4:	2303      	movs	r3, #3
 80027f6:	e032      	b.n	800285e <HAL_UART_Receive+0x19a>
      }
      if (pdata8bits == NULL)
 80027f8:	69fb      	ldr	r3, [r7, #28]
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d10c      	bne.n	8002818 <HAL_UART_Receive+0x154>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8002804:	b29a      	uxth	r2, r3
 8002806:	8a7b      	ldrh	r3, [r7, #18]
 8002808:	4013      	ands	r3, r2
 800280a:	b29a      	uxth	r2, r3
 800280c:	69bb      	ldr	r3, [r7, #24]
 800280e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002810:	69bb      	ldr	r3, [r7, #24]
 8002812:	3302      	adds	r3, #2
 8002814:	61bb      	str	r3, [r7, #24]
 8002816:	e00d      	b.n	8002834 <HAL_UART_Receive+0x170>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800281e:	b29b      	uxth	r3, r3
 8002820:	b2da      	uxtb	r2, r3
 8002822:	8a7b      	ldrh	r3, [r7, #18]
 8002824:	b2db      	uxtb	r3, r3
 8002826:	4013      	ands	r3, r2
 8002828:	b2da      	uxtb	r2, r3
 800282a:	69fb      	ldr	r3, [r7, #28]
 800282c:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800282e:	69fb      	ldr	r3, [r7, #28]
 8002830:	3301      	adds	r3, #1
 8002832:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800283a:	b29b      	uxth	r3, r3
 800283c:	3b01      	subs	r3, #1
 800283e:	b29a      	uxth	r2, r3
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800284c:	b29b      	uxth	r3, r3
 800284e:	2b00      	cmp	r3, #0
 8002850:	d1c5      	bne.n	80027de <HAL_UART_Receive+0x11a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	2220      	movs	r2, #32
 8002856:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8002858:	2300      	movs	r3, #0
 800285a:	e000      	b.n	800285e <HAL_UART_Receive+0x19a>
  }
  else
  {
    return HAL_BUSY;
 800285c:	2302      	movs	r3, #2
  }
}
 800285e:	4618      	mov	r0, r3
 8002860:	3720      	adds	r7, #32
 8002862:	46bd      	mov	sp, r7
 8002864:	bd80      	pop	{r7, pc}
	...

08002868 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002868:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800286c:	b08a      	sub	sp, #40	; 0x28
 800286e:	af00      	add	r7, sp, #0
 8002870:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002872:	2300      	movs	r3, #0
 8002874:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	689a      	ldr	r2, [r3, #8]
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	691b      	ldr	r3, [r3, #16]
 8002880:	431a      	orrs	r2, r3
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	695b      	ldr	r3, [r3, #20]
 8002886:	431a      	orrs	r2, r3
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	69db      	ldr	r3, [r3, #28]
 800288c:	4313      	orrs	r3, r2
 800288e:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	681a      	ldr	r2, [r3, #0]
 8002896:	4b9e      	ldr	r3, [pc, #632]	; (8002b10 <UART_SetConfig+0x2a8>)
 8002898:	4013      	ands	r3, r2
 800289a:	68fa      	ldr	r2, [r7, #12]
 800289c:	6812      	ldr	r2, [r2, #0]
 800289e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80028a0:	430b      	orrs	r3, r1
 80028a2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	685b      	ldr	r3, [r3, #4]
 80028aa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	68da      	ldr	r2, [r3, #12]
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	430a      	orrs	r2, r1
 80028b8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	699b      	ldr	r3, [r3, #24]
 80028be:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	4a93      	ldr	r2, [pc, #588]	; (8002b14 <UART_SetConfig+0x2ac>)
 80028c6:	4293      	cmp	r3, r2
 80028c8:	d004      	beq.n	80028d4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	6a1b      	ldr	r3, [r3, #32]
 80028ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028d0:	4313      	orrs	r3, r2
 80028d2:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	689b      	ldr	r3, [r3, #8]
 80028da:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028e4:	430a      	orrs	r2, r1
 80028e6:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	4a8a      	ldr	r2, [pc, #552]	; (8002b18 <UART_SetConfig+0x2b0>)
 80028ee:	4293      	cmp	r3, r2
 80028f0:	d126      	bne.n	8002940 <UART_SetConfig+0xd8>
 80028f2:	4b8a      	ldr	r3, [pc, #552]	; (8002b1c <UART_SetConfig+0x2b4>)
 80028f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028f8:	f003 0303 	and.w	r3, r3, #3
 80028fc:	2b03      	cmp	r3, #3
 80028fe:	d81b      	bhi.n	8002938 <UART_SetConfig+0xd0>
 8002900:	a201      	add	r2, pc, #4	; (adr r2, 8002908 <UART_SetConfig+0xa0>)
 8002902:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002906:	bf00      	nop
 8002908:	08002919 	.word	0x08002919
 800290c:	08002929 	.word	0x08002929
 8002910:	08002921 	.word	0x08002921
 8002914:	08002931 	.word	0x08002931
 8002918:	2301      	movs	r3, #1
 800291a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800291e:	e0ab      	b.n	8002a78 <UART_SetConfig+0x210>
 8002920:	2302      	movs	r3, #2
 8002922:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002926:	e0a7      	b.n	8002a78 <UART_SetConfig+0x210>
 8002928:	2304      	movs	r3, #4
 800292a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800292e:	e0a3      	b.n	8002a78 <UART_SetConfig+0x210>
 8002930:	2308      	movs	r3, #8
 8002932:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002936:	e09f      	b.n	8002a78 <UART_SetConfig+0x210>
 8002938:	2310      	movs	r3, #16
 800293a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800293e:	e09b      	b.n	8002a78 <UART_SetConfig+0x210>
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	4a76      	ldr	r2, [pc, #472]	; (8002b20 <UART_SetConfig+0x2b8>)
 8002946:	4293      	cmp	r3, r2
 8002948:	d138      	bne.n	80029bc <UART_SetConfig+0x154>
 800294a:	4b74      	ldr	r3, [pc, #464]	; (8002b1c <UART_SetConfig+0x2b4>)
 800294c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002950:	f003 030c 	and.w	r3, r3, #12
 8002954:	2b0c      	cmp	r3, #12
 8002956:	d82d      	bhi.n	80029b4 <UART_SetConfig+0x14c>
 8002958:	a201      	add	r2, pc, #4	; (adr r2, 8002960 <UART_SetConfig+0xf8>)
 800295a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800295e:	bf00      	nop
 8002960:	08002995 	.word	0x08002995
 8002964:	080029b5 	.word	0x080029b5
 8002968:	080029b5 	.word	0x080029b5
 800296c:	080029b5 	.word	0x080029b5
 8002970:	080029a5 	.word	0x080029a5
 8002974:	080029b5 	.word	0x080029b5
 8002978:	080029b5 	.word	0x080029b5
 800297c:	080029b5 	.word	0x080029b5
 8002980:	0800299d 	.word	0x0800299d
 8002984:	080029b5 	.word	0x080029b5
 8002988:	080029b5 	.word	0x080029b5
 800298c:	080029b5 	.word	0x080029b5
 8002990:	080029ad 	.word	0x080029ad
 8002994:	2300      	movs	r3, #0
 8002996:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800299a:	e06d      	b.n	8002a78 <UART_SetConfig+0x210>
 800299c:	2302      	movs	r3, #2
 800299e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80029a2:	e069      	b.n	8002a78 <UART_SetConfig+0x210>
 80029a4:	2304      	movs	r3, #4
 80029a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80029aa:	e065      	b.n	8002a78 <UART_SetConfig+0x210>
 80029ac:	2308      	movs	r3, #8
 80029ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80029b2:	e061      	b.n	8002a78 <UART_SetConfig+0x210>
 80029b4:	2310      	movs	r3, #16
 80029b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80029ba:	e05d      	b.n	8002a78 <UART_SetConfig+0x210>
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	4a58      	ldr	r2, [pc, #352]	; (8002b24 <UART_SetConfig+0x2bc>)
 80029c2:	4293      	cmp	r3, r2
 80029c4:	d125      	bne.n	8002a12 <UART_SetConfig+0x1aa>
 80029c6:	4b55      	ldr	r3, [pc, #340]	; (8002b1c <UART_SetConfig+0x2b4>)
 80029c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029cc:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80029d0:	2b30      	cmp	r3, #48	; 0x30
 80029d2:	d016      	beq.n	8002a02 <UART_SetConfig+0x19a>
 80029d4:	2b30      	cmp	r3, #48	; 0x30
 80029d6:	d818      	bhi.n	8002a0a <UART_SetConfig+0x1a2>
 80029d8:	2b20      	cmp	r3, #32
 80029da:	d00a      	beq.n	80029f2 <UART_SetConfig+0x18a>
 80029dc:	2b20      	cmp	r3, #32
 80029de:	d814      	bhi.n	8002a0a <UART_SetConfig+0x1a2>
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d002      	beq.n	80029ea <UART_SetConfig+0x182>
 80029e4:	2b10      	cmp	r3, #16
 80029e6:	d008      	beq.n	80029fa <UART_SetConfig+0x192>
 80029e8:	e00f      	b.n	8002a0a <UART_SetConfig+0x1a2>
 80029ea:	2300      	movs	r3, #0
 80029ec:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80029f0:	e042      	b.n	8002a78 <UART_SetConfig+0x210>
 80029f2:	2302      	movs	r3, #2
 80029f4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80029f8:	e03e      	b.n	8002a78 <UART_SetConfig+0x210>
 80029fa:	2304      	movs	r3, #4
 80029fc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002a00:	e03a      	b.n	8002a78 <UART_SetConfig+0x210>
 8002a02:	2308      	movs	r3, #8
 8002a04:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002a08:	e036      	b.n	8002a78 <UART_SetConfig+0x210>
 8002a0a:	2310      	movs	r3, #16
 8002a0c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002a10:	e032      	b.n	8002a78 <UART_SetConfig+0x210>
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	4a3f      	ldr	r2, [pc, #252]	; (8002b14 <UART_SetConfig+0x2ac>)
 8002a18:	4293      	cmp	r3, r2
 8002a1a:	d12a      	bne.n	8002a72 <UART_SetConfig+0x20a>
 8002a1c:	4b3f      	ldr	r3, [pc, #252]	; (8002b1c <UART_SetConfig+0x2b4>)
 8002a1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a22:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002a26:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002a2a:	d01a      	beq.n	8002a62 <UART_SetConfig+0x1fa>
 8002a2c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002a30:	d81b      	bhi.n	8002a6a <UART_SetConfig+0x202>
 8002a32:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002a36:	d00c      	beq.n	8002a52 <UART_SetConfig+0x1ea>
 8002a38:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002a3c:	d815      	bhi.n	8002a6a <UART_SetConfig+0x202>
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d003      	beq.n	8002a4a <UART_SetConfig+0x1e2>
 8002a42:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a46:	d008      	beq.n	8002a5a <UART_SetConfig+0x1f2>
 8002a48:	e00f      	b.n	8002a6a <UART_SetConfig+0x202>
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002a50:	e012      	b.n	8002a78 <UART_SetConfig+0x210>
 8002a52:	2302      	movs	r3, #2
 8002a54:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002a58:	e00e      	b.n	8002a78 <UART_SetConfig+0x210>
 8002a5a:	2304      	movs	r3, #4
 8002a5c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002a60:	e00a      	b.n	8002a78 <UART_SetConfig+0x210>
 8002a62:	2308      	movs	r3, #8
 8002a64:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002a68:	e006      	b.n	8002a78 <UART_SetConfig+0x210>
 8002a6a:	2310      	movs	r3, #16
 8002a6c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002a70:	e002      	b.n	8002a78 <UART_SetConfig+0x210>
 8002a72:	2310      	movs	r3, #16
 8002a74:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	4a25      	ldr	r2, [pc, #148]	; (8002b14 <UART_SetConfig+0x2ac>)
 8002a7e:	4293      	cmp	r3, r2
 8002a80:	f040 808a 	bne.w	8002b98 <UART_SetConfig+0x330>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002a84:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002a88:	2b08      	cmp	r3, #8
 8002a8a:	d824      	bhi.n	8002ad6 <UART_SetConfig+0x26e>
 8002a8c:	a201      	add	r2, pc, #4	; (adr r2, 8002a94 <UART_SetConfig+0x22c>)
 8002a8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a92:	bf00      	nop
 8002a94:	08002ab9 	.word	0x08002ab9
 8002a98:	08002ad7 	.word	0x08002ad7
 8002a9c:	08002ac1 	.word	0x08002ac1
 8002aa0:	08002ad7 	.word	0x08002ad7
 8002aa4:	08002ac7 	.word	0x08002ac7
 8002aa8:	08002ad7 	.word	0x08002ad7
 8002aac:	08002ad7 	.word	0x08002ad7
 8002ab0:	08002ad7 	.word	0x08002ad7
 8002ab4:	08002acf 	.word	0x08002acf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002ab8:	f7ff fb10 	bl	80020dc <HAL_RCC_GetPCLK1Freq>
 8002abc:	61f8      	str	r0, [r7, #28]
        break;
 8002abe:	e010      	b.n	8002ae2 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002ac0:	4b19      	ldr	r3, [pc, #100]	; (8002b28 <UART_SetConfig+0x2c0>)
 8002ac2:	61fb      	str	r3, [r7, #28]
        break;
 8002ac4:	e00d      	b.n	8002ae2 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002ac6:	f7ff fa71 	bl	8001fac <HAL_RCC_GetSysClockFreq>
 8002aca:	61f8      	str	r0, [r7, #28]
        break;
 8002acc:	e009      	b.n	8002ae2 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002ace:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002ad2:	61fb      	str	r3, [r7, #28]
        break;
 8002ad4:	e005      	b.n	8002ae2 <UART_SetConfig+0x27a>
      default:
        pclk = 0U;
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8002ada:	2301      	movs	r3, #1
 8002adc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8002ae0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002ae2:	69fb      	ldr	r3, [r7, #28]
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	f000 8109 	beq.w	8002cfc <UART_SetConfig+0x494>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	685a      	ldr	r2, [r3, #4]
 8002aee:	4613      	mov	r3, r2
 8002af0:	005b      	lsls	r3, r3, #1
 8002af2:	4413      	add	r3, r2
 8002af4:	69fa      	ldr	r2, [r7, #28]
 8002af6:	429a      	cmp	r2, r3
 8002af8:	d305      	bcc.n	8002b06 <UART_SetConfig+0x29e>
          (pclk > (4096U * huart->Init.BaudRate)))
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	685b      	ldr	r3, [r3, #4]
 8002afe:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002b00:	69fa      	ldr	r2, [r7, #28]
 8002b02:	429a      	cmp	r2, r3
 8002b04:	d912      	bls.n	8002b2c <UART_SetConfig+0x2c4>
      {
        ret = HAL_ERROR;
 8002b06:	2301      	movs	r3, #1
 8002b08:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8002b0c:	e0f6      	b.n	8002cfc <UART_SetConfig+0x494>
 8002b0e:	bf00      	nop
 8002b10:	efff69f3 	.word	0xefff69f3
 8002b14:	40008000 	.word	0x40008000
 8002b18:	40013800 	.word	0x40013800
 8002b1c:	40021000 	.word	0x40021000
 8002b20:	40004400 	.word	0x40004400
 8002b24:	40004800 	.word	0x40004800
 8002b28:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8002b2c:	69fb      	ldr	r3, [r7, #28]
 8002b2e:	2200      	movs	r2, #0
 8002b30:	461c      	mov	r4, r3
 8002b32:	4615      	mov	r5, r2
 8002b34:	f04f 0200 	mov.w	r2, #0
 8002b38:	f04f 0300 	mov.w	r3, #0
 8002b3c:	022b      	lsls	r3, r5, #8
 8002b3e:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8002b42:	0222      	lsls	r2, r4, #8
 8002b44:	68f9      	ldr	r1, [r7, #12]
 8002b46:	6849      	ldr	r1, [r1, #4]
 8002b48:	0849      	lsrs	r1, r1, #1
 8002b4a:	2000      	movs	r0, #0
 8002b4c:	4688      	mov	r8, r1
 8002b4e:	4681      	mov	r9, r0
 8002b50:	eb12 0a08 	adds.w	sl, r2, r8
 8002b54:	eb43 0b09 	adc.w	fp, r3, r9
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	685b      	ldr	r3, [r3, #4]
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	603b      	str	r3, [r7, #0]
 8002b60:	607a      	str	r2, [r7, #4]
 8002b62:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002b66:	4650      	mov	r0, sl
 8002b68:	4659      	mov	r1, fp
 8002b6a:	f7fd fb2f 	bl	80001cc <__aeabi_uldivmod>
 8002b6e:	4602      	mov	r2, r0
 8002b70:	460b      	mov	r3, r1
 8002b72:	4613      	mov	r3, r2
 8002b74:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002b76:	69bb      	ldr	r3, [r7, #24]
 8002b78:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002b7c:	d308      	bcc.n	8002b90 <UART_SetConfig+0x328>
 8002b7e:	69bb      	ldr	r3, [r7, #24]
 8002b80:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002b84:	d204      	bcs.n	8002b90 <UART_SetConfig+0x328>
        {
          huart->Instance->BRR = usartdiv;
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	69ba      	ldr	r2, [r7, #24]
 8002b8c:	60da      	str	r2, [r3, #12]
 8002b8e:	e0b5      	b.n	8002cfc <UART_SetConfig+0x494>
        }
        else
        {
          ret = HAL_ERROR;
 8002b90:	2301      	movs	r3, #1
 8002b92:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8002b96:	e0b1      	b.n	8002cfc <UART_SetConfig+0x494>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	69db      	ldr	r3, [r3, #28]
 8002b9c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002ba0:	d15d      	bne.n	8002c5e <UART_SetConfig+0x3f6>
  {
    switch (clocksource)
 8002ba2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002ba6:	2b08      	cmp	r3, #8
 8002ba8:	d827      	bhi.n	8002bfa <UART_SetConfig+0x392>
 8002baa:	a201      	add	r2, pc, #4	; (adr r2, 8002bb0 <UART_SetConfig+0x348>)
 8002bac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bb0:	08002bd5 	.word	0x08002bd5
 8002bb4:	08002bdd 	.word	0x08002bdd
 8002bb8:	08002be5 	.word	0x08002be5
 8002bbc:	08002bfb 	.word	0x08002bfb
 8002bc0:	08002beb 	.word	0x08002beb
 8002bc4:	08002bfb 	.word	0x08002bfb
 8002bc8:	08002bfb 	.word	0x08002bfb
 8002bcc:	08002bfb 	.word	0x08002bfb
 8002bd0:	08002bf3 	.word	0x08002bf3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002bd4:	f7ff fa82 	bl	80020dc <HAL_RCC_GetPCLK1Freq>
 8002bd8:	61f8      	str	r0, [r7, #28]
        break;
 8002bda:	e014      	b.n	8002c06 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002bdc:	f7ff fa94 	bl	8002108 <HAL_RCC_GetPCLK2Freq>
 8002be0:	61f8      	str	r0, [r7, #28]
        break;
 8002be2:	e010      	b.n	8002c06 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002be4:	4b4c      	ldr	r3, [pc, #304]	; (8002d18 <UART_SetConfig+0x4b0>)
 8002be6:	61fb      	str	r3, [r7, #28]
        break;
 8002be8:	e00d      	b.n	8002c06 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002bea:	f7ff f9df 	bl	8001fac <HAL_RCC_GetSysClockFreq>
 8002bee:	61f8      	str	r0, [r7, #28]
        break;
 8002bf0:	e009      	b.n	8002c06 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002bf2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002bf6:	61fb      	str	r3, [r7, #28]
        break;
 8002bf8:	e005      	b.n	8002c06 <UART_SetConfig+0x39e>
      default:
        pclk = 0U;
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8002bfe:	2301      	movs	r3, #1
 8002c00:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8002c04:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002c06:	69fb      	ldr	r3, [r7, #28]
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d077      	beq.n	8002cfc <UART_SetConfig+0x494>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002c0c:	69fb      	ldr	r3, [r7, #28]
 8002c0e:	005a      	lsls	r2, r3, #1
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	685b      	ldr	r3, [r3, #4]
 8002c14:	085b      	lsrs	r3, r3, #1
 8002c16:	441a      	add	r2, r3
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	685b      	ldr	r3, [r3, #4]
 8002c1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c20:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002c22:	69bb      	ldr	r3, [r7, #24]
 8002c24:	2b0f      	cmp	r3, #15
 8002c26:	d916      	bls.n	8002c56 <UART_SetConfig+0x3ee>
 8002c28:	69bb      	ldr	r3, [r7, #24]
 8002c2a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c2e:	d212      	bcs.n	8002c56 <UART_SetConfig+0x3ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002c30:	69bb      	ldr	r3, [r7, #24]
 8002c32:	b29b      	uxth	r3, r3
 8002c34:	f023 030f 	bic.w	r3, r3, #15
 8002c38:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002c3a:	69bb      	ldr	r3, [r7, #24]
 8002c3c:	085b      	lsrs	r3, r3, #1
 8002c3e:	b29b      	uxth	r3, r3
 8002c40:	f003 0307 	and.w	r3, r3, #7
 8002c44:	b29a      	uxth	r2, r3
 8002c46:	8afb      	ldrh	r3, [r7, #22]
 8002c48:	4313      	orrs	r3, r2
 8002c4a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	8afa      	ldrh	r2, [r7, #22]
 8002c52:	60da      	str	r2, [r3, #12]
 8002c54:	e052      	b.n	8002cfc <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8002c56:	2301      	movs	r3, #1
 8002c58:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8002c5c:	e04e      	b.n	8002cfc <UART_SetConfig+0x494>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002c5e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002c62:	2b08      	cmp	r3, #8
 8002c64:	d827      	bhi.n	8002cb6 <UART_SetConfig+0x44e>
 8002c66:	a201      	add	r2, pc, #4	; (adr r2, 8002c6c <UART_SetConfig+0x404>)
 8002c68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c6c:	08002c91 	.word	0x08002c91
 8002c70:	08002c99 	.word	0x08002c99
 8002c74:	08002ca1 	.word	0x08002ca1
 8002c78:	08002cb7 	.word	0x08002cb7
 8002c7c:	08002ca7 	.word	0x08002ca7
 8002c80:	08002cb7 	.word	0x08002cb7
 8002c84:	08002cb7 	.word	0x08002cb7
 8002c88:	08002cb7 	.word	0x08002cb7
 8002c8c:	08002caf 	.word	0x08002caf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002c90:	f7ff fa24 	bl	80020dc <HAL_RCC_GetPCLK1Freq>
 8002c94:	61f8      	str	r0, [r7, #28]
        break;
 8002c96:	e014      	b.n	8002cc2 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002c98:	f7ff fa36 	bl	8002108 <HAL_RCC_GetPCLK2Freq>
 8002c9c:	61f8      	str	r0, [r7, #28]
        break;
 8002c9e:	e010      	b.n	8002cc2 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002ca0:	4b1d      	ldr	r3, [pc, #116]	; (8002d18 <UART_SetConfig+0x4b0>)
 8002ca2:	61fb      	str	r3, [r7, #28]
        break;
 8002ca4:	e00d      	b.n	8002cc2 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002ca6:	f7ff f981 	bl	8001fac <HAL_RCC_GetSysClockFreq>
 8002caa:	61f8      	str	r0, [r7, #28]
        break;
 8002cac:	e009      	b.n	8002cc2 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002cae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002cb2:	61fb      	str	r3, [r7, #28]
        break;
 8002cb4:	e005      	b.n	8002cc2 <UART_SetConfig+0x45a>
      default:
        pclk = 0U;
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8002cba:	2301      	movs	r3, #1
 8002cbc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8002cc0:	bf00      	nop
    }

    if (pclk != 0U)
 8002cc2:	69fb      	ldr	r3, [r7, #28]
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d019      	beq.n	8002cfc <UART_SetConfig+0x494>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	685b      	ldr	r3, [r3, #4]
 8002ccc:	085a      	lsrs	r2, r3, #1
 8002cce:	69fb      	ldr	r3, [r7, #28]
 8002cd0:	441a      	add	r2, r3
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	685b      	ldr	r3, [r3, #4]
 8002cd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cda:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002cdc:	69bb      	ldr	r3, [r7, #24]
 8002cde:	2b0f      	cmp	r3, #15
 8002ce0:	d909      	bls.n	8002cf6 <UART_SetConfig+0x48e>
 8002ce2:	69bb      	ldr	r3, [r7, #24]
 8002ce4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ce8:	d205      	bcs.n	8002cf6 <UART_SetConfig+0x48e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002cea:	69bb      	ldr	r3, [r7, #24]
 8002cec:	b29a      	uxth	r2, r3
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	60da      	str	r2, [r3, #12]
 8002cf4:	e002      	b.n	8002cfc <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8002cf6:	2301      	movs	r3, #1
 8002cf8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	2200      	movs	r2, #0
 8002d00:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	2200      	movs	r2, #0
 8002d06:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8002d08:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	3728      	adds	r7, #40	; 0x28
 8002d10:	46bd      	mov	sp, r7
 8002d12:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002d16:	bf00      	nop
 8002d18:	00f42400 	.word	0x00f42400

08002d1c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002d1c:	b480      	push	{r7}
 8002d1e:	b083      	sub	sp, #12
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d28:	f003 0301 	and.w	r3, r3, #1
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d00a      	beq.n	8002d46 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	685b      	ldr	r3, [r3, #4]
 8002d36:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	430a      	orrs	r2, r1
 8002d44:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d4a:	f003 0302 	and.w	r3, r3, #2
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d00a      	beq.n	8002d68 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	685b      	ldr	r3, [r3, #4]
 8002d58:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	430a      	orrs	r2, r1
 8002d66:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d6c:	f003 0304 	and.w	r3, r3, #4
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d00a      	beq.n	8002d8a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	685b      	ldr	r3, [r3, #4]
 8002d7a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	430a      	orrs	r2, r1
 8002d88:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d8e:	f003 0308 	and.w	r3, r3, #8
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d00a      	beq.n	8002dac <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	685b      	ldr	r3, [r3, #4]
 8002d9c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	430a      	orrs	r2, r1
 8002daa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002db0:	f003 0310 	and.w	r3, r3, #16
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d00a      	beq.n	8002dce <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	689b      	ldr	r3, [r3, #8]
 8002dbe:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	430a      	orrs	r2, r1
 8002dcc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dd2:	f003 0320 	and.w	r3, r3, #32
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d00a      	beq.n	8002df0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	689b      	ldr	r3, [r3, #8]
 8002de0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	430a      	orrs	r2, r1
 8002dee:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002df4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d01a      	beq.n	8002e32 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	685b      	ldr	r3, [r3, #4]
 8002e02:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	430a      	orrs	r2, r1
 8002e10:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e16:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002e1a:	d10a      	bne.n	8002e32 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	685b      	ldr	r3, [r3, #4]
 8002e22:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	430a      	orrs	r2, r1
 8002e30:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d00a      	beq.n	8002e54 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	685b      	ldr	r3, [r3, #4]
 8002e44:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	430a      	orrs	r2, r1
 8002e52:	605a      	str	r2, [r3, #4]
  }
}
 8002e54:	bf00      	nop
 8002e56:	370c      	adds	r7, #12
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5e:	4770      	bx	lr

08002e60 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b086      	sub	sp, #24
 8002e64:	af02      	add	r7, sp, #8
 8002e66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002e70:	f7fe f81c 	bl	8000eac <HAL_GetTick>
 8002e74:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f003 0308 	and.w	r3, r3, #8
 8002e80:	2b08      	cmp	r3, #8
 8002e82:	d10e      	bne.n	8002ea2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002e84:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002e88:	9300      	str	r3, [sp, #0]
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002e92:	6878      	ldr	r0, [r7, #4]
 8002e94:	f000 f82d 	bl	8002ef2 <UART_WaitOnFlagUntilTimeout>
 8002e98:	4603      	mov	r3, r0
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d001      	beq.n	8002ea2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002e9e:	2303      	movs	r3, #3
 8002ea0:	e023      	b.n	8002eea <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f003 0304 	and.w	r3, r3, #4
 8002eac:	2b04      	cmp	r3, #4
 8002eae:	d10e      	bne.n	8002ece <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002eb0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002eb4:	9300      	str	r3, [sp, #0]
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	2200      	movs	r2, #0
 8002eba:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8002ebe:	6878      	ldr	r0, [r7, #4]
 8002ec0:	f000 f817 	bl	8002ef2 <UART_WaitOnFlagUntilTimeout>
 8002ec4:	4603      	mov	r3, r0
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d001      	beq.n	8002ece <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002eca:	2303      	movs	r3, #3
 8002ecc:	e00d      	b.n	8002eea <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	2220      	movs	r2, #32
 8002ed2:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2220      	movs	r2, #32
 8002ed8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	2200      	movs	r2, #0
 8002ede:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8002ee8:	2300      	movs	r3, #0
}
 8002eea:	4618      	mov	r0, r3
 8002eec:	3710      	adds	r7, #16
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	bd80      	pop	{r7, pc}

08002ef2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002ef2:	b580      	push	{r7, lr}
 8002ef4:	b09c      	sub	sp, #112	; 0x70
 8002ef6:	af00      	add	r7, sp, #0
 8002ef8:	60f8      	str	r0, [r7, #12]
 8002efa:	60b9      	str	r1, [r7, #8]
 8002efc:	603b      	str	r3, [r7, #0]
 8002efe:	4613      	mov	r3, r2
 8002f00:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002f02:	e0a5      	b.n	8003050 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f04:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002f06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f0a:	f000 80a1 	beq.w	8003050 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f0e:	f7fd ffcd 	bl	8000eac <HAL_GetTick>
 8002f12:	4602      	mov	r2, r0
 8002f14:	683b      	ldr	r3, [r7, #0]
 8002f16:	1ad3      	subs	r3, r2, r3
 8002f18:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8002f1a:	429a      	cmp	r2, r3
 8002f1c:	d302      	bcc.n	8002f24 <UART_WaitOnFlagUntilTimeout+0x32>
 8002f1e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d13e      	bne.n	8002fa2 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f2a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002f2c:	e853 3f00 	ldrex	r3, [r3]
 8002f30:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8002f32:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f34:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002f38:	667b      	str	r3, [r7, #100]	; 0x64
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	461a      	mov	r2, r3
 8002f40:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002f42:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002f44:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f46:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8002f48:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002f4a:	e841 2300 	strex	r3, r2, [r1]
 8002f4e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8002f50:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d1e6      	bne.n	8002f24 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	3308      	adds	r3, #8
 8002f5c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f60:	e853 3f00 	ldrex	r3, [r3]
 8002f64:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002f66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f68:	f023 0301 	bic.w	r3, r3, #1
 8002f6c:	663b      	str	r3, [r7, #96]	; 0x60
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	3308      	adds	r3, #8
 8002f74:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002f76:	64ba      	str	r2, [r7, #72]	; 0x48
 8002f78:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f7a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8002f7c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002f7e:	e841 2300 	strex	r3, r2, [r1]
 8002f82:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8002f84:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d1e5      	bne.n	8002f56 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	2220      	movs	r2, #32
 8002f8e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	2220      	movs	r2, #32
 8002f94:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	2200      	movs	r2, #0
 8002f9a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8002f9e:	2303      	movs	r3, #3
 8002fa0:	e067      	b.n	8003072 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f003 0304 	and.w	r3, r3, #4
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d04f      	beq.n	8003050 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	69db      	ldr	r3, [r3, #28]
 8002fb6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002fba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002fbe:	d147      	bne.n	8003050 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002fc8:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fd2:	e853 3f00 	ldrex	r3, [r3]
 8002fd6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fda:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002fde:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	461a      	mov	r2, r3
 8002fe6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002fe8:	637b      	str	r3, [r7, #52]	; 0x34
 8002fea:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fec:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002fee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002ff0:	e841 2300 	strex	r3, r2, [r1]
 8002ff4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002ff6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d1e6      	bne.n	8002fca <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	3308      	adds	r3, #8
 8003002:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003004:	697b      	ldr	r3, [r7, #20]
 8003006:	e853 3f00 	ldrex	r3, [r3]
 800300a:	613b      	str	r3, [r7, #16]
   return(result);
 800300c:	693b      	ldr	r3, [r7, #16]
 800300e:	f023 0301 	bic.w	r3, r3, #1
 8003012:	66bb      	str	r3, [r7, #104]	; 0x68
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	3308      	adds	r3, #8
 800301a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800301c:	623a      	str	r2, [r7, #32]
 800301e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003020:	69f9      	ldr	r1, [r7, #28]
 8003022:	6a3a      	ldr	r2, [r7, #32]
 8003024:	e841 2300 	strex	r3, r2, [r1]
 8003028:	61bb      	str	r3, [r7, #24]
   return(result);
 800302a:	69bb      	ldr	r3, [r7, #24]
 800302c:	2b00      	cmp	r3, #0
 800302e:	d1e5      	bne.n	8002ffc <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	2220      	movs	r2, #32
 8003034:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	2220      	movs	r2, #32
 800303a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	2220      	movs	r2, #32
 8003040:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	2200      	movs	r2, #0
 8003048:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800304c:	2303      	movs	r3, #3
 800304e:	e010      	b.n	8003072 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	69da      	ldr	r2, [r3, #28]
 8003056:	68bb      	ldr	r3, [r7, #8]
 8003058:	4013      	ands	r3, r2
 800305a:	68ba      	ldr	r2, [r7, #8]
 800305c:	429a      	cmp	r2, r3
 800305e:	bf0c      	ite	eq
 8003060:	2301      	moveq	r3, #1
 8003062:	2300      	movne	r3, #0
 8003064:	b2db      	uxtb	r3, r3
 8003066:	461a      	mov	r2, r3
 8003068:	79fb      	ldrb	r3, [r7, #7]
 800306a:	429a      	cmp	r2, r3
 800306c:	f43f af4a 	beq.w	8002f04 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003070:	2300      	movs	r3, #0
}
 8003072:	4618      	mov	r0, r3
 8003074:	3770      	adds	r7, #112	; 0x70
 8003076:	46bd      	mov	sp, r7
 8003078:	bd80      	pop	{r7, pc}
	...

0800307c <__errno>:
 800307c:	4b01      	ldr	r3, [pc, #4]	; (8003084 <__errno+0x8>)
 800307e:	6818      	ldr	r0, [r3, #0]
 8003080:	4770      	bx	lr
 8003082:	bf00      	nop
 8003084:	2000000c 	.word	0x2000000c

08003088 <__libc_init_array>:
 8003088:	b570      	push	{r4, r5, r6, lr}
 800308a:	4d0d      	ldr	r5, [pc, #52]	; (80030c0 <__libc_init_array+0x38>)
 800308c:	4c0d      	ldr	r4, [pc, #52]	; (80030c4 <__libc_init_array+0x3c>)
 800308e:	1b64      	subs	r4, r4, r5
 8003090:	10a4      	asrs	r4, r4, #2
 8003092:	2600      	movs	r6, #0
 8003094:	42a6      	cmp	r6, r4
 8003096:	d109      	bne.n	80030ac <__libc_init_array+0x24>
 8003098:	4d0b      	ldr	r5, [pc, #44]	; (80030c8 <__libc_init_array+0x40>)
 800309a:	4c0c      	ldr	r4, [pc, #48]	; (80030cc <__libc_init_array+0x44>)
 800309c:	f000 fd46 	bl	8003b2c <_init>
 80030a0:	1b64      	subs	r4, r4, r5
 80030a2:	10a4      	asrs	r4, r4, #2
 80030a4:	2600      	movs	r6, #0
 80030a6:	42a6      	cmp	r6, r4
 80030a8:	d105      	bne.n	80030b6 <__libc_init_array+0x2e>
 80030aa:	bd70      	pop	{r4, r5, r6, pc}
 80030ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80030b0:	4798      	blx	r3
 80030b2:	3601      	adds	r6, #1
 80030b4:	e7ee      	b.n	8003094 <__libc_init_array+0xc>
 80030b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80030ba:	4798      	blx	r3
 80030bc:	3601      	adds	r6, #1
 80030be:	e7f2      	b.n	80030a6 <__libc_init_array+0x1e>
 80030c0:	08003c38 	.word	0x08003c38
 80030c4:	08003c38 	.word	0x08003c38
 80030c8:	08003c38 	.word	0x08003c38
 80030cc:	08003c3c 	.word	0x08003c3c

080030d0 <memset>:
 80030d0:	4402      	add	r2, r0
 80030d2:	4603      	mov	r3, r0
 80030d4:	4293      	cmp	r3, r2
 80030d6:	d100      	bne.n	80030da <memset+0xa>
 80030d8:	4770      	bx	lr
 80030da:	f803 1b01 	strb.w	r1, [r3], #1
 80030de:	e7f9      	b.n	80030d4 <memset+0x4>

080030e0 <_puts_r>:
 80030e0:	b570      	push	{r4, r5, r6, lr}
 80030e2:	460e      	mov	r6, r1
 80030e4:	4605      	mov	r5, r0
 80030e6:	b118      	cbz	r0, 80030f0 <_puts_r+0x10>
 80030e8:	6983      	ldr	r3, [r0, #24]
 80030ea:	b90b      	cbnz	r3, 80030f0 <_puts_r+0x10>
 80030ec:	f000 fa70 	bl	80035d0 <__sinit>
 80030f0:	69ab      	ldr	r3, [r5, #24]
 80030f2:	68ac      	ldr	r4, [r5, #8]
 80030f4:	b913      	cbnz	r3, 80030fc <_puts_r+0x1c>
 80030f6:	4628      	mov	r0, r5
 80030f8:	f000 fa6a 	bl	80035d0 <__sinit>
 80030fc:	4b2c      	ldr	r3, [pc, #176]	; (80031b0 <_puts_r+0xd0>)
 80030fe:	429c      	cmp	r4, r3
 8003100:	d120      	bne.n	8003144 <_puts_r+0x64>
 8003102:	686c      	ldr	r4, [r5, #4]
 8003104:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003106:	07db      	lsls	r3, r3, #31
 8003108:	d405      	bmi.n	8003116 <_puts_r+0x36>
 800310a:	89a3      	ldrh	r3, [r4, #12]
 800310c:	0598      	lsls	r0, r3, #22
 800310e:	d402      	bmi.n	8003116 <_puts_r+0x36>
 8003110:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003112:	f000 fafb 	bl	800370c <__retarget_lock_acquire_recursive>
 8003116:	89a3      	ldrh	r3, [r4, #12]
 8003118:	0719      	lsls	r1, r3, #28
 800311a:	d51d      	bpl.n	8003158 <_puts_r+0x78>
 800311c:	6923      	ldr	r3, [r4, #16]
 800311e:	b1db      	cbz	r3, 8003158 <_puts_r+0x78>
 8003120:	3e01      	subs	r6, #1
 8003122:	68a3      	ldr	r3, [r4, #8]
 8003124:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003128:	3b01      	subs	r3, #1
 800312a:	60a3      	str	r3, [r4, #8]
 800312c:	bb39      	cbnz	r1, 800317e <_puts_r+0x9e>
 800312e:	2b00      	cmp	r3, #0
 8003130:	da38      	bge.n	80031a4 <_puts_r+0xc4>
 8003132:	4622      	mov	r2, r4
 8003134:	210a      	movs	r1, #10
 8003136:	4628      	mov	r0, r5
 8003138:	f000 f870 	bl	800321c <__swbuf_r>
 800313c:	3001      	adds	r0, #1
 800313e:	d011      	beq.n	8003164 <_puts_r+0x84>
 8003140:	250a      	movs	r5, #10
 8003142:	e011      	b.n	8003168 <_puts_r+0x88>
 8003144:	4b1b      	ldr	r3, [pc, #108]	; (80031b4 <_puts_r+0xd4>)
 8003146:	429c      	cmp	r4, r3
 8003148:	d101      	bne.n	800314e <_puts_r+0x6e>
 800314a:	68ac      	ldr	r4, [r5, #8]
 800314c:	e7da      	b.n	8003104 <_puts_r+0x24>
 800314e:	4b1a      	ldr	r3, [pc, #104]	; (80031b8 <_puts_r+0xd8>)
 8003150:	429c      	cmp	r4, r3
 8003152:	bf08      	it	eq
 8003154:	68ec      	ldreq	r4, [r5, #12]
 8003156:	e7d5      	b.n	8003104 <_puts_r+0x24>
 8003158:	4621      	mov	r1, r4
 800315a:	4628      	mov	r0, r5
 800315c:	f000 f8b0 	bl	80032c0 <__swsetup_r>
 8003160:	2800      	cmp	r0, #0
 8003162:	d0dd      	beq.n	8003120 <_puts_r+0x40>
 8003164:	f04f 35ff 	mov.w	r5, #4294967295
 8003168:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800316a:	07da      	lsls	r2, r3, #31
 800316c:	d405      	bmi.n	800317a <_puts_r+0x9a>
 800316e:	89a3      	ldrh	r3, [r4, #12]
 8003170:	059b      	lsls	r3, r3, #22
 8003172:	d402      	bmi.n	800317a <_puts_r+0x9a>
 8003174:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003176:	f000 faca 	bl	800370e <__retarget_lock_release_recursive>
 800317a:	4628      	mov	r0, r5
 800317c:	bd70      	pop	{r4, r5, r6, pc}
 800317e:	2b00      	cmp	r3, #0
 8003180:	da04      	bge.n	800318c <_puts_r+0xac>
 8003182:	69a2      	ldr	r2, [r4, #24]
 8003184:	429a      	cmp	r2, r3
 8003186:	dc06      	bgt.n	8003196 <_puts_r+0xb6>
 8003188:	290a      	cmp	r1, #10
 800318a:	d004      	beq.n	8003196 <_puts_r+0xb6>
 800318c:	6823      	ldr	r3, [r4, #0]
 800318e:	1c5a      	adds	r2, r3, #1
 8003190:	6022      	str	r2, [r4, #0]
 8003192:	7019      	strb	r1, [r3, #0]
 8003194:	e7c5      	b.n	8003122 <_puts_r+0x42>
 8003196:	4622      	mov	r2, r4
 8003198:	4628      	mov	r0, r5
 800319a:	f000 f83f 	bl	800321c <__swbuf_r>
 800319e:	3001      	adds	r0, #1
 80031a0:	d1bf      	bne.n	8003122 <_puts_r+0x42>
 80031a2:	e7df      	b.n	8003164 <_puts_r+0x84>
 80031a4:	6823      	ldr	r3, [r4, #0]
 80031a6:	250a      	movs	r5, #10
 80031a8:	1c5a      	adds	r2, r3, #1
 80031aa:	6022      	str	r2, [r4, #0]
 80031ac:	701d      	strb	r5, [r3, #0]
 80031ae:	e7db      	b.n	8003168 <_puts_r+0x88>
 80031b0:	08003bf0 	.word	0x08003bf0
 80031b4:	08003c10 	.word	0x08003c10
 80031b8:	08003bd0 	.word	0x08003bd0

080031bc <puts>:
 80031bc:	4b02      	ldr	r3, [pc, #8]	; (80031c8 <puts+0xc>)
 80031be:	4601      	mov	r1, r0
 80031c0:	6818      	ldr	r0, [r3, #0]
 80031c2:	f7ff bf8d 	b.w	80030e0 <_puts_r>
 80031c6:	bf00      	nop
 80031c8:	2000000c 	.word	0x2000000c

080031cc <strncmp>:
 80031cc:	b510      	push	{r4, lr}
 80031ce:	b17a      	cbz	r2, 80031f0 <strncmp+0x24>
 80031d0:	4603      	mov	r3, r0
 80031d2:	3901      	subs	r1, #1
 80031d4:	1884      	adds	r4, r0, r2
 80031d6:	f813 0b01 	ldrb.w	r0, [r3], #1
 80031da:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80031de:	4290      	cmp	r0, r2
 80031e0:	d101      	bne.n	80031e6 <strncmp+0x1a>
 80031e2:	42a3      	cmp	r3, r4
 80031e4:	d101      	bne.n	80031ea <strncmp+0x1e>
 80031e6:	1a80      	subs	r0, r0, r2
 80031e8:	bd10      	pop	{r4, pc}
 80031ea:	2800      	cmp	r0, #0
 80031ec:	d1f3      	bne.n	80031d6 <strncmp+0xa>
 80031ee:	e7fa      	b.n	80031e6 <strncmp+0x1a>
 80031f0:	4610      	mov	r0, r2
 80031f2:	e7f9      	b.n	80031e8 <strncmp+0x1c>

080031f4 <strncpy>:
 80031f4:	b510      	push	{r4, lr}
 80031f6:	3901      	subs	r1, #1
 80031f8:	4603      	mov	r3, r0
 80031fa:	b132      	cbz	r2, 800320a <strncpy+0x16>
 80031fc:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8003200:	f803 4b01 	strb.w	r4, [r3], #1
 8003204:	3a01      	subs	r2, #1
 8003206:	2c00      	cmp	r4, #0
 8003208:	d1f7      	bne.n	80031fa <strncpy+0x6>
 800320a:	441a      	add	r2, r3
 800320c:	2100      	movs	r1, #0
 800320e:	4293      	cmp	r3, r2
 8003210:	d100      	bne.n	8003214 <strncpy+0x20>
 8003212:	bd10      	pop	{r4, pc}
 8003214:	f803 1b01 	strb.w	r1, [r3], #1
 8003218:	e7f9      	b.n	800320e <strncpy+0x1a>
	...

0800321c <__swbuf_r>:
 800321c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800321e:	460e      	mov	r6, r1
 8003220:	4614      	mov	r4, r2
 8003222:	4605      	mov	r5, r0
 8003224:	b118      	cbz	r0, 800322e <__swbuf_r+0x12>
 8003226:	6983      	ldr	r3, [r0, #24]
 8003228:	b90b      	cbnz	r3, 800322e <__swbuf_r+0x12>
 800322a:	f000 f9d1 	bl	80035d0 <__sinit>
 800322e:	4b21      	ldr	r3, [pc, #132]	; (80032b4 <__swbuf_r+0x98>)
 8003230:	429c      	cmp	r4, r3
 8003232:	d12b      	bne.n	800328c <__swbuf_r+0x70>
 8003234:	686c      	ldr	r4, [r5, #4]
 8003236:	69a3      	ldr	r3, [r4, #24]
 8003238:	60a3      	str	r3, [r4, #8]
 800323a:	89a3      	ldrh	r3, [r4, #12]
 800323c:	071a      	lsls	r2, r3, #28
 800323e:	d52f      	bpl.n	80032a0 <__swbuf_r+0x84>
 8003240:	6923      	ldr	r3, [r4, #16]
 8003242:	b36b      	cbz	r3, 80032a0 <__swbuf_r+0x84>
 8003244:	6923      	ldr	r3, [r4, #16]
 8003246:	6820      	ldr	r0, [r4, #0]
 8003248:	1ac0      	subs	r0, r0, r3
 800324a:	6963      	ldr	r3, [r4, #20]
 800324c:	b2f6      	uxtb	r6, r6
 800324e:	4283      	cmp	r3, r0
 8003250:	4637      	mov	r7, r6
 8003252:	dc04      	bgt.n	800325e <__swbuf_r+0x42>
 8003254:	4621      	mov	r1, r4
 8003256:	4628      	mov	r0, r5
 8003258:	f000 f926 	bl	80034a8 <_fflush_r>
 800325c:	bb30      	cbnz	r0, 80032ac <__swbuf_r+0x90>
 800325e:	68a3      	ldr	r3, [r4, #8]
 8003260:	3b01      	subs	r3, #1
 8003262:	60a3      	str	r3, [r4, #8]
 8003264:	6823      	ldr	r3, [r4, #0]
 8003266:	1c5a      	adds	r2, r3, #1
 8003268:	6022      	str	r2, [r4, #0]
 800326a:	701e      	strb	r6, [r3, #0]
 800326c:	6963      	ldr	r3, [r4, #20]
 800326e:	3001      	adds	r0, #1
 8003270:	4283      	cmp	r3, r0
 8003272:	d004      	beq.n	800327e <__swbuf_r+0x62>
 8003274:	89a3      	ldrh	r3, [r4, #12]
 8003276:	07db      	lsls	r3, r3, #31
 8003278:	d506      	bpl.n	8003288 <__swbuf_r+0x6c>
 800327a:	2e0a      	cmp	r6, #10
 800327c:	d104      	bne.n	8003288 <__swbuf_r+0x6c>
 800327e:	4621      	mov	r1, r4
 8003280:	4628      	mov	r0, r5
 8003282:	f000 f911 	bl	80034a8 <_fflush_r>
 8003286:	b988      	cbnz	r0, 80032ac <__swbuf_r+0x90>
 8003288:	4638      	mov	r0, r7
 800328a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800328c:	4b0a      	ldr	r3, [pc, #40]	; (80032b8 <__swbuf_r+0x9c>)
 800328e:	429c      	cmp	r4, r3
 8003290:	d101      	bne.n	8003296 <__swbuf_r+0x7a>
 8003292:	68ac      	ldr	r4, [r5, #8]
 8003294:	e7cf      	b.n	8003236 <__swbuf_r+0x1a>
 8003296:	4b09      	ldr	r3, [pc, #36]	; (80032bc <__swbuf_r+0xa0>)
 8003298:	429c      	cmp	r4, r3
 800329a:	bf08      	it	eq
 800329c:	68ec      	ldreq	r4, [r5, #12]
 800329e:	e7ca      	b.n	8003236 <__swbuf_r+0x1a>
 80032a0:	4621      	mov	r1, r4
 80032a2:	4628      	mov	r0, r5
 80032a4:	f000 f80c 	bl	80032c0 <__swsetup_r>
 80032a8:	2800      	cmp	r0, #0
 80032aa:	d0cb      	beq.n	8003244 <__swbuf_r+0x28>
 80032ac:	f04f 37ff 	mov.w	r7, #4294967295
 80032b0:	e7ea      	b.n	8003288 <__swbuf_r+0x6c>
 80032b2:	bf00      	nop
 80032b4:	08003bf0 	.word	0x08003bf0
 80032b8:	08003c10 	.word	0x08003c10
 80032bc:	08003bd0 	.word	0x08003bd0

080032c0 <__swsetup_r>:
 80032c0:	4b32      	ldr	r3, [pc, #200]	; (800338c <__swsetup_r+0xcc>)
 80032c2:	b570      	push	{r4, r5, r6, lr}
 80032c4:	681d      	ldr	r5, [r3, #0]
 80032c6:	4606      	mov	r6, r0
 80032c8:	460c      	mov	r4, r1
 80032ca:	b125      	cbz	r5, 80032d6 <__swsetup_r+0x16>
 80032cc:	69ab      	ldr	r3, [r5, #24]
 80032ce:	b913      	cbnz	r3, 80032d6 <__swsetup_r+0x16>
 80032d0:	4628      	mov	r0, r5
 80032d2:	f000 f97d 	bl	80035d0 <__sinit>
 80032d6:	4b2e      	ldr	r3, [pc, #184]	; (8003390 <__swsetup_r+0xd0>)
 80032d8:	429c      	cmp	r4, r3
 80032da:	d10f      	bne.n	80032fc <__swsetup_r+0x3c>
 80032dc:	686c      	ldr	r4, [r5, #4]
 80032de:	89a3      	ldrh	r3, [r4, #12]
 80032e0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80032e4:	0719      	lsls	r1, r3, #28
 80032e6:	d42c      	bmi.n	8003342 <__swsetup_r+0x82>
 80032e8:	06dd      	lsls	r5, r3, #27
 80032ea:	d411      	bmi.n	8003310 <__swsetup_r+0x50>
 80032ec:	2309      	movs	r3, #9
 80032ee:	6033      	str	r3, [r6, #0]
 80032f0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80032f4:	81a3      	strh	r3, [r4, #12]
 80032f6:	f04f 30ff 	mov.w	r0, #4294967295
 80032fa:	e03e      	b.n	800337a <__swsetup_r+0xba>
 80032fc:	4b25      	ldr	r3, [pc, #148]	; (8003394 <__swsetup_r+0xd4>)
 80032fe:	429c      	cmp	r4, r3
 8003300:	d101      	bne.n	8003306 <__swsetup_r+0x46>
 8003302:	68ac      	ldr	r4, [r5, #8]
 8003304:	e7eb      	b.n	80032de <__swsetup_r+0x1e>
 8003306:	4b24      	ldr	r3, [pc, #144]	; (8003398 <__swsetup_r+0xd8>)
 8003308:	429c      	cmp	r4, r3
 800330a:	bf08      	it	eq
 800330c:	68ec      	ldreq	r4, [r5, #12]
 800330e:	e7e6      	b.n	80032de <__swsetup_r+0x1e>
 8003310:	0758      	lsls	r0, r3, #29
 8003312:	d512      	bpl.n	800333a <__swsetup_r+0x7a>
 8003314:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003316:	b141      	cbz	r1, 800332a <__swsetup_r+0x6a>
 8003318:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800331c:	4299      	cmp	r1, r3
 800331e:	d002      	beq.n	8003326 <__swsetup_r+0x66>
 8003320:	4630      	mov	r0, r6
 8003322:	f000 fa5b 	bl	80037dc <_free_r>
 8003326:	2300      	movs	r3, #0
 8003328:	6363      	str	r3, [r4, #52]	; 0x34
 800332a:	89a3      	ldrh	r3, [r4, #12]
 800332c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003330:	81a3      	strh	r3, [r4, #12]
 8003332:	2300      	movs	r3, #0
 8003334:	6063      	str	r3, [r4, #4]
 8003336:	6923      	ldr	r3, [r4, #16]
 8003338:	6023      	str	r3, [r4, #0]
 800333a:	89a3      	ldrh	r3, [r4, #12]
 800333c:	f043 0308 	orr.w	r3, r3, #8
 8003340:	81a3      	strh	r3, [r4, #12]
 8003342:	6923      	ldr	r3, [r4, #16]
 8003344:	b94b      	cbnz	r3, 800335a <__swsetup_r+0x9a>
 8003346:	89a3      	ldrh	r3, [r4, #12]
 8003348:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800334c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003350:	d003      	beq.n	800335a <__swsetup_r+0x9a>
 8003352:	4621      	mov	r1, r4
 8003354:	4630      	mov	r0, r6
 8003356:	f000 fa01 	bl	800375c <__smakebuf_r>
 800335a:	89a0      	ldrh	r0, [r4, #12]
 800335c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003360:	f010 0301 	ands.w	r3, r0, #1
 8003364:	d00a      	beq.n	800337c <__swsetup_r+0xbc>
 8003366:	2300      	movs	r3, #0
 8003368:	60a3      	str	r3, [r4, #8]
 800336a:	6963      	ldr	r3, [r4, #20]
 800336c:	425b      	negs	r3, r3
 800336e:	61a3      	str	r3, [r4, #24]
 8003370:	6923      	ldr	r3, [r4, #16]
 8003372:	b943      	cbnz	r3, 8003386 <__swsetup_r+0xc6>
 8003374:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003378:	d1ba      	bne.n	80032f0 <__swsetup_r+0x30>
 800337a:	bd70      	pop	{r4, r5, r6, pc}
 800337c:	0781      	lsls	r1, r0, #30
 800337e:	bf58      	it	pl
 8003380:	6963      	ldrpl	r3, [r4, #20]
 8003382:	60a3      	str	r3, [r4, #8]
 8003384:	e7f4      	b.n	8003370 <__swsetup_r+0xb0>
 8003386:	2000      	movs	r0, #0
 8003388:	e7f7      	b.n	800337a <__swsetup_r+0xba>
 800338a:	bf00      	nop
 800338c:	2000000c 	.word	0x2000000c
 8003390:	08003bf0 	.word	0x08003bf0
 8003394:	08003c10 	.word	0x08003c10
 8003398:	08003bd0 	.word	0x08003bd0

0800339c <__sflush_r>:
 800339c:	898a      	ldrh	r2, [r1, #12]
 800339e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80033a2:	4605      	mov	r5, r0
 80033a4:	0710      	lsls	r0, r2, #28
 80033a6:	460c      	mov	r4, r1
 80033a8:	d458      	bmi.n	800345c <__sflush_r+0xc0>
 80033aa:	684b      	ldr	r3, [r1, #4]
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	dc05      	bgt.n	80033bc <__sflush_r+0x20>
 80033b0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	dc02      	bgt.n	80033bc <__sflush_r+0x20>
 80033b6:	2000      	movs	r0, #0
 80033b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80033bc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80033be:	2e00      	cmp	r6, #0
 80033c0:	d0f9      	beq.n	80033b6 <__sflush_r+0x1a>
 80033c2:	2300      	movs	r3, #0
 80033c4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80033c8:	682f      	ldr	r7, [r5, #0]
 80033ca:	602b      	str	r3, [r5, #0]
 80033cc:	d032      	beq.n	8003434 <__sflush_r+0x98>
 80033ce:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80033d0:	89a3      	ldrh	r3, [r4, #12]
 80033d2:	075a      	lsls	r2, r3, #29
 80033d4:	d505      	bpl.n	80033e2 <__sflush_r+0x46>
 80033d6:	6863      	ldr	r3, [r4, #4]
 80033d8:	1ac0      	subs	r0, r0, r3
 80033da:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80033dc:	b10b      	cbz	r3, 80033e2 <__sflush_r+0x46>
 80033de:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80033e0:	1ac0      	subs	r0, r0, r3
 80033e2:	2300      	movs	r3, #0
 80033e4:	4602      	mov	r2, r0
 80033e6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80033e8:	6a21      	ldr	r1, [r4, #32]
 80033ea:	4628      	mov	r0, r5
 80033ec:	47b0      	blx	r6
 80033ee:	1c43      	adds	r3, r0, #1
 80033f0:	89a3      	ldrh	r3, [r4, #12]
 80033f2:	d106      	bne.n	8003402 <__sflush_r+0x66>
 80033f4:	6829      	ldr	r1, [r5, #0]
 80033f6:	291d      	cmp	r1, #29
 80033f8:	d82c      	bhi.n	8003454 <__sflush_r+0xb8>
 80033fa:	4a2a      	ldr	r2, [pc, #168]	; (80034a4 <__sflush_r+0x108>)
 80033fc:	40ca      	lsrs	r2, r1
 80033fe:	07d6      	lsls	r6, r2, #31
 8003400:	d528      	bpl.n	8003454 <__sflush_r+0xb8>
 8003402:	2200      	movs	r2, #0
 8003404:	6062      	str	r2, [r4, #4]
 8003406:	04d9      	lsls	r1, r3, #19
 8003408:	6922      	ldr	r2, [r4, #16]
 800340a:	6022      	str	r2, [r4, #0]
 800340c:	d504      	bpl.n	8003418 <__sflush_r+0x7c>
 800340e:	1c42      	adds	r2, r0, #1
 8003410:	d101      	bne.n	8003416 <__sflush_r+0x7a>
 8003412:	682b      	ldr	r3, [r5, #0]
 8003414:	b903      	cbnz	r3, 8003418 <__sflush_r+0x7c>
 8003416:	6560      	str	r0, [r4, #84]	; 0x54
 8003418:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800341a:	602f      	str	r7, [r5, #0]
 800341c:	2900      	cmp	r1, #0
 800341e:	d0ca      	beq.n	80033b6 <__sflush_r+0x1a>
 8003420:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003424:	4299      	cmp	r1, r3
 8003426:	d002      	beq.n	800342e <__sflush_r+0x92>
 8003428:	4628      	mov	r0, r5
 800342a:	f000 f9d7 	bl	80037dc <_free_r>
 800342e:	2000      	movs	r0, #0
 8003430:	6360      	str	r0, [r4, #52]	; 0x34
 8003432:	e7c1      	b.n	80033b8 <__sflush_r+0x1c>
 8003434:	6a21      	ldr	r1, [r4, #32]
 8003436:	2301      	movs	r3, #1
 8003438:	4628      	mov	r0, r5
 800343a:	47b0      	blx	r6
 800343c:	1c41      	adds	r1, r0, #1
 800343e:	d1c7      	bne.n	80033d0 <__sflush_r+0x34>
 8003440:	682b      	ldr	r3, [r5, #0]
 8003442:	2b00      	cmp	r3, #0
 8003444:	d0c4      	beq.n	80033d0 <__sflush_r+0x34>
 8003446:	2b1d      	cmp	r3, #29
 8003448:	d001      	beq.n	800344e <__sflush_r+0xb2>
 800344a:	2b16      	cmp	r3, #22
 800344c:	d101      	bne.n	8003452 <__sflush_r+0xb6>
 800344e:	602f      	str	r7, [r5, #0]
 8003450:	e7b1      	b.n	80033b6 <__sflush_r+0x1a>
 8003452:	89a3      	ldrh	r3, [r4, #12]
 8003454:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003458:	81a3      	strh	r3, [r4, #12]
 800345a:	e7ad      	b.n	80033b8 <__sflush_r+0x1c>
 800345c:	690f      	ldr	r7, [r1, #16]
 800345e:	2f00      	cmp	r7, #0
 8003460:	d0a9      	beq.n	80033b6 <__sflush_r+0x1a>
 8003462:	0793      	lsls	r3, r2, #30
 8003464:	680e      	ldr	r6, [r1, #0]
 8003466:	bf08      	it	eq
 8003468:	694b      	ldreq	r3, [r1, #20]
 800346a:	600f      	str	r7, [r1, #0]
 800346c:	bf18      	it	ne
 800346e:	2300      	movne	r3, #0
 8003470:	eba6 0807 	sub.w	r8, r6, r7
 8003474:	608b      	str	r3, [r1, #8]
 8003476:	f1b8 0f00 	cmp.w	r8, #0
 800347a:	dd9c      	ble.n	80033b6 <__sflush_r+0x1a>
 800347c:	6a21      	ldr	r1, [r4, #32]
 800347e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003480:	4643      	mov	r3, r8
 8003482:	463a      	mov	r2, r7
 8003484:	4628      	mov	r0, r5
 8003486:	47b0      	blx	r6
 8003488:	2800      	cmp	r0, #0
 800348a:	dc06      	bgt.n	800349a <__sflush_r+0xfe>
 800348c:	89a3      	ldrh	r3, [r4, #12]
 800348e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003492:	81a3      	strh	r3, [r4, #12]
 8003494:	f04f 30ff 	mov.w	r0, #4294967295
 8003498:	e78e      	b.n	80033b8 <__sflush_r+0x1c>
 800349a:	4407      	add	r7, r0
 800349c:	eba8 0800 	sub.w	r8, r8, r0
 80034a0:	e7e9      	b.n	8003476 <__sflush_r+0xda>
 80034a2:	bf00      	nop
 80034a4:	20400001 	.word	0x20400001

080034a8 <_fflush_r>:
 80034a8:	b538      	push	{r3, r4, r5, lr}
 80034aa:	690b      	ldr	r3, [r1, #16]
 80034ac:	4605      	mov	r5, r0
 80034ae:	460c      	mov	r4, r1
 80034b0:	b913      	cbnz	r3, 80034b8 <_fflush_r+0x10>
 80034b2:	2500      	movs	r5, #0
 80034b4:	4628      	mov	r0, r5
 80034b6:	bd38      	pop	{r3, r4, r5, pc}
 80034b8:	b118      	cbz	r0, 80034c2 <_fflush_r+0x1a>
 80034ba:	6983      	ldr	r3, [r0, #24]
 80034bc:	b90b      	cbnz	r3, 80034c2 <_fflush_r+0x1a>
 80034be:	f000 f887 	bl	80035d0 <__sinit>
 80034c2:	4b14      	ldr	r3, [pc, #80]	; (8003514 <_fflush_r+0x6c>)
 80034c4:	429c      	cmp	r4, r3
 80034c6:	d11b      	bne.n	8003500 <_fflush_r+0x58>
 80034c8:	686c      	ldr	r4, [r5, #4]
 80034ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d0ef      	beq.n	80034b2 <_fflush_r+0xa>
 80034d2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80034d4:	07d0      	lsls	r0, r2, #31
 80034d6:	d404      	bmi.n	80034e2 <_fflush_r+0x3a>
 80034d8:	0599      	lsls	r1, r3, #22
 80034da:	d402      	bmi.n	80034e2 <_fflush_r+0x3a>
 80034dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80034de:	f000 f915 	bl	800370c <__retarget_lock_acquire_recursive>
 80034e2:	4628      	mov	r0, r5
 80034e4:	4621      	mov	r1, r4
 80034e6:	f7ff ff59 	bl	800339c <__sflush_r>
 80034ea:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80034ec:	07da      	lsls	r2, r3, #31
 80034ee:	4605      	mov	r5, r0
 80034f0:	d4e0      	bmi.n	80034b4 <_fflush_r+0xc>
 80034f2:	89a3      	ldrh	r3, [r4, #12]
 80034f4:	059b      	lsls	r3, r3, #22
 80034f6:	d4dd      	bmi.n	80034b4 <_fflush_r+0xc>
 80034f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80034fa:	f000 f908 	bl	800370e <__retarget_lock_release_recursive>
 80034fe:	e7d9      	b.n	80034b4 <_fflush_r+0xc>
 8003500:	4b05      	ldr	r3, [pc, #20]	; (8003518 <_fflush_r+0x70>)
 8003502:	429c      	cmp	r4, r3
 8003504:	d101      	bne.n	800350a <_fflush_r+0x62>
 8003506:	68ac      	ldr	r4, [r5, #8]
 8003508:	e7df      	b.n	80034ca <_fflush_r+0x22>
 800350a:	4b04      	ldr	r3, [pc, #16]	; (800351c <_fflush_r+0x74>)
 800350c:	429c      	cmp	r4, r3
 800350e:	bf08      	it	eq
 8003510:	68ec      	ldreq	r4, [r5, #12]
 8003512:	e7da      	b.n	80034ca <_fflush_r+0x22>
 8003514:	08003bf0 	.word	0x08003bf0
 8003518:	08003c10 	.word	0x08003c10
 800351c:	08003bd0 	.word	0x08003bd0

08003520 <std>:
 8003520:	2300      	movs	r3, #0
 8003522:	b510      	push	{r4, lr}
 8003524:	4604      	mov	r4, r0
 8003526:	e9c0 3300 	strd	r3, r3, [r0]
 800352a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800352e:	6083      	str	r3, [r0, #8]
 8003530:	8181      	strh	r1, [r0, #12]
 8003532:	6643      	str	r3, [r0, #100]	; 0x64
 8003534:	81c2      	strh	r2, [r0, #14]
 8003536:	6183      	str	r3, [r0, #24]
 8003538:	4619      	mov	r1, r3
 800353a:	2208      	movs	r2, #8
 800353c:	305c      	adds	r0, #92	; 0x5c
 800353e:	f7ff fdc7 	bl	80030d0 <memset>
 8003542:	4b05      	ldr	r3, [pc, #20]	; (8003558 <std+0x38>)
 8003544:	6263      	str	r3, [r4, #36]	; 0x24
 8003546:	4b05      	ldr	r3, [pc, #20]	; (800355c <std+0x3c>)
 8003548:	62a3      	str	r3, [r4, #40]	; 0x28
 800354a:	4b05      	ldr	r3, [pc, #20]	; (8003560 <std+0x40>)
 800354c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800354e:	4b05      	ldr	r3, [pc, #20]	; (8003564 <std+0x44>)
 8003550:	6224      	str	r4, [r4, #32]
 8003552:	6323      	str	r3, [r4, #48]	; 0x30
 8003554:	bd10      	pop	{r4, pc}
 8003556:	bf00      	nop
 8003558:	080039bd 	.word	0x080039bd
 800355c:	080039df 	.word	0x080039df
 8003560:	08003a17 	.word	0x08003a17
 8003564:	08003a3b 	.word	0x08003a3b

08003568 <_cleanup_r>:
 8003568:	4901      	ldr	r1, [pc, #4]	; (8003570 <_cleanup_r+0x8>)
 800356a:	f000 b8af 	b.w	80036cc <_fwalk_reent>
 800356e:	bf00      	nop
 8003570:	080034a9 	.word	0x080034a9

08003574 <__sfmoreglue>:
 8003574:	b570      	push	{r4, r5, r6, lr}
 8003576:	2268      	movs	r2, #104	; 0x68
 8003578:	1e4d      	subs	r5, r1, #1
 800357a:	4355      	muls	r5, r2
 800357c:	460e      	mov	r6, r1
 800357e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8003582:	f000 f997 	bl	80038b4 <_malloc_r>
 8003586:	4604      	mov	r4, r0
 8003588:	b140      	cbz	r0, 800359c <__sfmoreglue+0x28>
 800358a:	2100      	movs	r1, #0
 800358c:	e9c0 1600 	strd	r1, r6, [r0]
 8003590:	300c      	adds	r0, #12
 8003592:	60a0      	str	r0, [r4, #8]
 8003594:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003598:	f7ff fd9a 	bl	80030d0 <memset>
 800359c:	4620      	mov	r0, r4
 800359e:	bd70      	pop	{r4, r5, r6, pc}

080035a0 <__sfp_lock_acquire>:
 80035a0:	4801      	ldr	r0, [pc, #4]	; (80035a8 <__sfp_lock_acquire+0x8>)
 80035a2:	f000 b8b3 	b.w	800370c <__retarget_lock_acquire_recursive>
 80035a6:	bf00      	nop
 80035a8:	2000019d 	.word	0x2000019d

080035ac <__sfp_lock_release>:
 80035ac:	4801      	ldr	r0, [pc, #4]	; (80035b4 <__sfp_lock_release+0x8>)
 80035ae:	f000 b8ae 	b.w	800370e <__retarget_lock_release_recursive>
 80035b2:	bf00      	nop
 80035b4:	2000019d 	.word	0x2000019d

080035b8 <__sinit_lock_acquire>:
 80035b8:	4801      	ldr	r0, [pc, #4]	; (80035c0 <__sinit_lock_acquire+0x8>)
 80035ba:	f000 b8a7 	b.w	800370c <__retarget_lock_acquire_recursive>
 80035be:	bf00      	nop
 80035c0:	2000019e 	.word	0x2000019e

080035c4 <__sinit_lock_release>:
 80035c4:	4801      	ldr	r0, [pc, #4]	; (80035cc <__sinit_lock_release+0x8>)
 80035c6:	f000 b8a2 	b.w	800370e <__retarget_lock_release_recursive>
 80035ca:	bf00      	nop
 80035cc:	2000019e 	.word	0x2000019e

080035d0 <__sinit>:
 80035d0:	b510      	push	{r4, lr}
 80035d2:	4604      	mov	r4, r0
 80035d4:	f7ff fff0 	bl	80035b8 <__sinit_lock_acquire>
 80035d8:	69a3      	ldr	r3, [r4, #24]
 80035da:	b11b      	cbz	r3, 80035e4 <__sinit+0x14>
 80035dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80035e0:	f7ff bff0 	b.w	80035c4 <__sinit_lock_release>
 80035e4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80035e8:	6523      	str	r3, [r4, #80]	; 0x50
 80035ea:	4b13      	ldr	r3, [pc, #76]	; (8003638 <__sinit+0x68>)
 80035ec:	4a13      	ldr	r2, [pc, #76]	; (800363c <__sinit+0x6c>)
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	62a2      	str	r2, [r4, #40]	; 0x28
 80035f2:	42a3      	cmp	r3, r4
 80035f4:	bf04      	itt	eq
 80035f6:	2301      	moveq	r3, #1
 80035f8:	61a3      	streq	r3, [r4, #24]
 80035fa:	4620      	mov	r0, r4
 80035fc:	f000 f820 	bl	8003640 <__sfp>
 8003600:	6060      	str	r0, [r4, #4]
 8003602:	4620      	mov	r0, r4
 8003604:	f000 f81c 	bl	8003640 <__sfp>
 8003608:	60a0      	str	r0, [r4, #8]
 800360a:	4620      	mov	r0, r4
 800360c:	f000 f818 	bl	8003640 <__sfp>
 8003610:	2200      	movs	r2, #0
 8003612:	60e0      	str	r0, [r4, #12]
 8003614:	2104      	movs	r1, #4
 8003616:	6860      	ldr	r0, [r4, #4]
 8003618:	f7ff ff82 	bl	8003520 <std>
 800361c:	68a0      	ldr	r0, [r4, #8]
 800361e:	2201      	movs	r2, #1
 8003620:	2109      	movs	r1, #9
 8003622:	f7ff ff7d 	bl	8003520 <std>
 8003626:	68e0      	ldr	r0, [r4, #12]
 8003628:	2202      	movs	r2, #2
 800362a:	2112      	movs	r1, #18
 800362c:	f7ff ff78 	bl	8003520 <std>
 8003630:	2301      	movs	r3, #1
 8003632:	61a3      	str	r3, [r4, #24]
 8003634:	e7d2      	b.n	80035dc <__sinit+0xc>
 8003636:	bf00      	nop
 8003638:	08003bcc 	.word	0x08003bcc
 800363c:	08003569 	.word	0x08003569

08003640 <__sfp>:
 8003640:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003642:	4607      	mov	r7, r0
 8003644:	f7ff ffac 	bl	80035a0 <__sfp_lock_acquire>
 8003648:	4b1e      	ldr	r3, [pc, #120]	; (80036c4 <__sfp+0x84>)
 800364a:	681e      	ldr	r6, [r3, #0]
 800364c:	69b3      	ldr	r3, [r6, #24]
 800364e:	b913      	cbnz	r3, 8003656 <__sfp+0x16>
 8003650:	4630      	mov	r0, r6
 8003652:	f7ff ffbd 	bl	80035d0 <__sinit>
 8003656:	3648      	adds	r6, #72	; 0x48
 8003658:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800365c:	3b01      	subs	r3, #1
 800365e:	d503      	bpl.n	8003668 <__sfp+0x28>
 8003660:	6833      	ldr	r3, [r6, #0]
 8003662:	b30b      	cbz	r3, 80036a8 <__sfp+0x68>
 8003664:	6836      	ldr	r6, [r6, #0]
 8003666:	e7f7      	b.n	8003658 <__sfp+0x18>
 8003668:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800366c:	b9d5      	cbnz	r5, 80036a4 <__sfp+0x64>
 800366e:	4b16      	ldr	r3, [pc, #88]	; (80036c8 <__sfp+0x88>)
 8003670:	60e3      	str	r3, [r4, #12]
 8003672:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003676:	6665      	str	r5, [r4, #100]	; 0x64
 8003678:	f000 f847 	bl	800370a <__retarget_lock_init_recursive>
 800367c:	f7ff ff96 	bl	80035ac <__sfp_lock_release>
 8003680:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8003684:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8003688:	6025      	str	r5, [r4, #0]
 800368a:	61a5      	str	r5, [r4, #24]
 800368c:	2208      	movs	r2, #8
 800368e:	4629      	mov	r1, r5
 8003690:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003694:	f7ff fd1c 	bl	80030d0 <memset>
 8003698:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800369c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80036a0:	4620      	mov	r0, r4
 80036a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80036a4:	3468      	adds	r4, #104	; 0x68
 80036a6:	e7d9      	b.n	800365c <__sfp+0x1c>
 80036a8:	2104      	movs	r1, #4
 80036aa:	4638      	mov	r0, r7
 80036ac:	f7ff ff62 	bl	8003574 <__sfmoreglue>
 80036b0:	4604      	mov	r4, r0
 80036b2:	6030      	str	r0, [r6, #0]
 80036b4:	2800      	cmp	r0, #0
 80036b6:	d1d5      	bne.n	8003664 <__sfp+0x24>
 80036b8:	f7ff ff78 	bl	80035ac <__sfp_lock_release>
 80036bc:	230c      	movs	r3, #12
 80036be:	603b      	str	r3, [r7, #0]
 80036c0:	e7ee      	b.n	80036a0 <__sfp+0x60>
 80036c2:	bf00      	nop
 80036c4:	08003bcc 	.word	0x08003bcc
 80036c8:	ffff0001 	.word	0xffff0001

080036cc <_fwalk_reent>:
 80036cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80036d0:	4606      	mov	r6, r0
 80036d2:	4688      	mov	r8, r1
 80036d4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80036d8:	2700      	movs	r7, #0
 80036da:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80036de:	f1b9 0901 	subs.w	r9, r9, #1
 80036e2:	d505      	bpl.n	80036f0 <_fwalk_reent+0x24>
 80036e4:	6824      	ldr	r4, [r4, #0]
 80036e6:	2c00      	cmp	r4, #0
 80036e8:	d1f7      	bne.n	80036da <_fwalk_reent+0xe>
 80036ea:	4638      	mov	r0, r7
 80036ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80036f0:	89ab      	ldrh	r3, [r5, #12]
 80036f2:	2b01      	cmp	r3, #1
 80036f4:	d907      	bls.n	8003706 <_fwalk_reent+0x3a>
 80036f6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80036fa:	3301      	adds	r3, #1
 80036fc:	d003      	beq.n	8003706 <_fwalk_reent+0x3a>
 80036fe:	4629      	mov	r1, r5
 8003700:	4630      	mov	r0, r6
 8003702:	47c0      	blx	r8
 8003704:	4307      	orrs	r7, r0
 8003706:	3568      	adds	r5, #104	; 0x68
 8003708:	e7e9      	b.n	80036de <_fwalk_reent+0x12>

0800370a <__retarget_lock_init_recursive>:
 800370a:	4770      	bx	lr

0800370c <__retarget_lock_acquire_recursive>:
 800370c:	4770      	bx	lr

0800370e <__retarget_lock_release_recursive>:
 800370e:	4770      	bx	lr

08003710 <__swhatbuf_r>:
 8003710:	b570      	push	{r4, r5, r6, lr}
 8003712:	460e      	mov	r6, r1
 8003714:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003718:	2900      	cmp	r1, #0
 800371a:	b096      	sub	sp, #88	; 0x58
 800371c:	4614      	mov	r4, r2
 800371e:	461d      	mov	r5, r3
 8003720:	da08      	bge.n	8003734 <__swhatbuf_r+0x24>
 8003722:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8003726:	2200      	movs	r2, #0
 8003728:	602a      	str	r2, [r5, #0]
 800372a:	061a      	lsls	r2, r3, #24
 800372c:	d410      	bmi.n	8003750 <__swhatbuf_r+0x40>
 800372e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003732:	e00e      	b.n	8003752 <__swhatbuf_r+0x42>
 8003734:	466a      	mov	r2, sp
 8003736:	f000 f9a7 	bl	8003a88 <_fstat_r>
 800373a:	2800      	cmp	r0, #0
 800373c:	dbf1      	blt.n	8003722 <__swhatbuf_r+0x12>
 800373e:	9a01      	ldr	r2, [sp, #4]
 8003740:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8003744:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003748:	425a      	negs	r2, r3
 800374a:	415a      	adcs	r2, r3
 800374c:	602a      	str	r2, [r5, #0]
 800374e:	e7ee      	b.n	800372e <__swhatbuf_r+0x1e>
 8003750:	2340      	movs	r3, #64	; 0x40
 8003752:	2000      	movs	r0, #0
 8003754:	6023      	str	r3, [r4, #0]
 8003756:	b016      	add	sp, #88	; 0x58
 8003758:	bd70      	pop	{r4, r5, r6, pc}
	...

0800375c <__smakebuf_r>:
 800375c:	898b      	ldrh	r3, [r1, #12]
 800375e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003760:	079d      	lsls	r5, r3, #30
 8003762:	4606      	mov	r6, r0
 8003764:	460c      	mov	r4, r1
 8003766:	d507      	bpl.n	8003778 <__smakebuf_r+0x1c>
 8003768:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800376c:	6023      	str	r3, [r4, #0]
 800376e:	6123      	str	r3, [r4, #16]
 8003770:	2301      	movs	r3, #1
 8003772:	6163      	str	r3, [r4, #20]
 8003774:	b002      	add	sp, #8
 8003776:	bd70      	pop	{r4, r5, r6, pc}
 8003778:	ab01      	add	r3, sp, #4
 800377a:	466a      	mov	r2, sp
 800377c:	f7ff ffc8 	bl	8003710 <__swhatbuf_r>
 8003780:	9900      	ldr	r1, [sp, #0]
 8003782:	4605      	mov	r5, r0
 8003784:	4630      	mov	r0, r6
 8003786:	f000 f895 	bl	80038b4 <_malloc_r>
 800378a:	b948      	cbnz	r0, 80037a0 <__smakebuf_r+0x44>
 800378c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003790:	059a      	lsls	r2, r3, #22
 8003792:	d4ef      	bmi.n	8003774 <__smakebuf_r+0x18>
 8003794:	f023 0303 	bic.w	r3, r3, #3
 8003798:	f043 0302 	orr.w	r3, r3, #2
 800379c:	81a3      	strh	r3, [r4, #12]
 800379e:	e7e3      	b.n	8003768 <__smakebuf_r+0xc>
 80037a0:	4b0d      	ldr	r3, [pc, #52]	; (80037d8 <__smakebuf_r+0x7c>)
 80037a2:	62b3      	str	r3, [r6, #40]	; 0x28
 80037a4:	89a3      	ldrh	r3, [r4, #12]
 80037a6:	6020      	str	r0, [r4, #0]
 80037a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80037ac:	81a3      	strh	r3, [r4, #12]
 80037ae:	9b00      	ldr	r3, [sp, #0]
 80037b0:	6163      	str	r3, [r4, #20]
 80037b2:	9b01      	ldr	r3, [sp, #4]
 80037b4:	6120      	str	r0, [r4, #16]
 80037b6:	b15b      	cbz	r3, 80037d0 <__smakebuf_r+0x74>
 80037b8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80037bc:	4630      	mov	r0, r6
 80037be:	f000 f975 	bl	8003aac <_isatty_r>
 80037c2:	b128      	cbz	r0, 80037d0 <__smakebuf_r+0x74>
 80037c4:	89a3      	ldrh	r3, [r4, #12]
 80037c6:	f023 0303 	bic.w	r3, r3, #3
 80037ca:	f043 0301 	orr.w	r3, r3, #1
 80037ce:	81a3      	strh	r3, [r4, #12]
 80037d0:	89a0      	ldrh	r0, [r4, #12]
 80037d2:	4305      	orrs	r5, r0
 80037d4:	81a5      	strh	r5, [r4, #12]
 80037d6:	e7cd      	b.n	8003774 <__smakebuf_r+0x18>
 80037d8:	08003569 	.word	0x08003569

080037dc <_free_r>:
 80037dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80037de:	2900      	cmp	r1, #0
 80037e0:	d044      	beq.n	800386c <_free_r+0x90>
 80037e2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80037e6:	9001      	str	r0, [sp, #4]
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	f1a1 0404 	sub.w	r4, r1, #4
 80037ee:	bfb8      	it	lt
 80037f0:	18e4      	addlt	r4, r4, r3
 80037f2:	f000 f97d 	bl	8003af0 <__malloc_lock>
 80037f6:	4a1e      	ldr	r2, [pc, #120]	; (8003870 <_free_r+0x94>)
 80037f8:	9801      	ldr	r0, [sp, #4]
 80037fa:	6813      	ldr	r3, [r2, #0]
 80037fc:	b933      	cbnz	r3, 800380c <_free_r+0x30>
 80037fe:	6063      	str	r3, [r4, #4]
 8003800:	6014      	str	r4, [r2, #0]
 8003802:	b003      	add	sp, #12
 8003804:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003808:	f000 b978 	b.w	8003afc <__malloc_unlock>
 800380c:	42a3      	cmp	r3, r4
 800380e:	d908      	bls.n	8003822 <_free_r+0x46>
 8003810:	6825      	ldr	r5, [r4, #0]
 8003812:	1961      	adds	r1, r4, r5
 8003814:	428b      	cmp	r3, r1
 8003816:	bf01      	itttt	eq
 8003818:	6819      	ldreq	r1, [r3, #0]
 800381a:	685b      	ldreq	r3, [r3, #4]
 800381c:	1949      	addeq	r1, r1, r5
 800381e:	6021      	streq	r1, [r4, #0]
 8003820:	e7ed      	b.n	80037fe <_free_r+0x22>
 8003822:	461a      	mov	r2, r3
 8003824:	685b      	ldr	r3, [r3, #4]
 8003826:	b10b      	cbz	r3, 800382c <_free_r+0x50>
 8003828:	42a3      	cmp	r3, r4
 800382a:	d9fa      	bls.n	8003822 <_free_r+0x46>
 800382c:	6811      	ldr	r1, [r2, #0]
 800382e:	1855      	adds	r5, r2, r1
 8003830:	42a5      	cmp	r5, r4
 8003832:	d10b      	bne.n	800384c <_free_r+0x70>
 8003834:	6824      	ldr	r4, [r4, #0]
 8003836:	4421      	add	r1, r4
 8003838:	1854      	adds	r4, r2, r1
 800383a:	42a3      	cmp	r3, r4
 800383c:	6011      	str	r1, [r2, #0]
 800383e:	d1e0      	bne.n	8003802 <_free_r+0x26>
 8003840:	681c      	ldr	r4, [r3, #0]
 8003842:	685b      	ldr	r3, [r3, #4]
 8003844:	6053      	str	r3, [r2, #4]
 8003846:	4421      	add	r1, r4
 8003848:	6011      	str	r1, [r2, #0]
 800384a:	e7da      	b.n	8003802 <_free_r+0x26>
 800384c:	d902      	bls.n	8003854 <_free_r+0x78>
 800384e:	230c      	movs	r3, #12
 8003850:	6003      	str	r3, [r0, #0]
 8003852:	e7d6      	b.n	8003802 <_free_r+0x26>
 8003854:	6825      	ldr	r5, [r4, #0]
 8003856:	1961      	adds	r1, r4, r5
 8003858:	428b      	cmp	r3, r1
 800385a:	bf04      	itt	eq
 800385c:	6819      	ldreq	r1, [r3, #0]
 800385e:	685b      	ldreq	r3, [r3, #4]
 8003860:	6063      	str	r3, [r4, #4]
 8003862:	bf04      	itt	eq
 8003864:	1949      	addeq	r1, r1, r5
 8003866:	6021      	streq	r1, [r4, #0]
 8003868:	6054      	str	r4, [r2, #4]
 800386a:	e7ca      	b.n	8003802 <_free_r+0x26>
 800386c:	b003      	add	sp, #12
 800386e:	bd30      	pop	{r4, r5, pc}
 8003870:	200001a0 	.word	0x200001a0

08003874 <sbrk_aligned>:
 8003874:	b570      	push	{r4, r5, r6, lr}
 8003876:	4e0e      	ldr	r6, [pc, #56]	; (80038b0 <sbrk_aligned+0x3c>)
 8003878:	460c      	mov	r4, r1
 800387a:	6831      	ldr	r1, [r6, #0]
 800387c:	4605      	mov	r5, r0
 800387e:	b911      	cbnz	r1, 8003886 <sbrk_aligned+0x12>
 8003880:	f000 f88c 	bl	800399c <_sbrk_r>
 8003884:	6030      	str	r0, [r6, #0]
 8003886:	4621      	mov	r1, r4
 8003888:	4628      	mov	r0, r5
 800388a:	f000 f887 	bl	800399c <_sbrk_r>
 800388e:	1c43      	adds	r3, r0, #1
 8003890:	d00a      	beq.n	80038a8 <sbrk_aligned+0x34>
 8003892:	1cc4      	adds	r4, r0, #3
 8003894:	f024 0403 	bic.w	r4, r4, #3
 8003898:	42a0      	cmp	r0, r4
 800389a:	d007      	beq.n	80038ac <sbrk_aligned+0x38>
 800389c:	1a21      	subs	r1, r4, r0
 800389e:	4628      	mov	r0, r5
 80038a0:	f000 f87c 	bl	800399c <_sbrk_r>
 80038a4:	3001      	adds	r0, #1
 80038a6:	d101      	bne.n	80038ac <sbrk_aligned+0x38>
 80038a8:	f04f 34ff 	mov.w	r4, #4294967295
 80038ac:	4620      	mov	r0, r4
 80038ae:	bd70      	pop	{r4, r5, r6, pc}
 80038b0:	200001a4 	.word	0x200001a4

080038b4 <_malloc_r>:
 80038b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80038b8:	1ccd      	adds	r5, r1, #3
 80038ba:	f025 0503 	bic.w	r5, r5, #3
 80038be:	3508      	adds	r5, #8
 80038c0:	2d0c      	cmp	r5, #12
 80038c2:	bf38      	it	cc
 80038c4:	250c      	movcc	r5, #12
 80038c6:	2d00      	cmp	r5, #0
 80038c8:	4607      	mov	r7, r0
 80038ca:	db01      	blt.n	80038d0 <_malloc_r+0x1c>
 80038cc:	42a9      	cmp	r1, r5
 80038ce:	d905      	bls.n	80038dc <_malloc_r+0x28>
 80038d0:	230c      	movs	r3, #12
 80038d2:	603b      	str	r3, [r7, #0]
 80038d4:	2600      	movs	r6, #0
 80038d6:	4630      	mov	r0, r6
 80038d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80038dc:	4e2e      	ldr	r6, [pc, #184]	; (8003998 <_malloc_r+0xe4>)
 80038de:	f000 f907 	bl	8003af0 <__malloc_lock>
 80038e2:	6833      	ldr	r3, [r6, #0]
 80038e4:	461c      	mov	r4, r3
 80038e6:	bb34      	cbnz	r4, 8003936 <_malloc_r+0x82>
 80038e8:	4629      	mov	r1, r5
 80038ea:	4638      	mov	r0, r7
 80038ec:	f7ff ffc2 	bl	8003874 <sbrk_aligned>
 80038f0:	1c43      	adds	r3, r0, #1
 80038f2:	4604      	mov	r4, r0
 80038f4:	d14d      	bne.n	8003992 <_malloc_r+0xde>
 80038f6:	6834      	ldr	r4, [r6, #0]
 80038f8:	4626      	mov	r6, r4
 80038fa:	2e00      	cmp	r6, #0
 80038fc:	d140      	bne.n	8003980 <_malloc_r+0xcc>
 80038fe:	6823      	ldr	r3, [r4, #0]
 8003900:	4631      	mov	r1, r6
 8003902:	4638      	mov	r0, r7
 8003904:	eb04 0803 	add.w	r8, r4, r3
 8003908:	f000 f848 	bl	800399c <_sbrk_r>
 800390c:	4580      	cmp	r8, r0
 800390e:	d13a      	bne.n	8003986 <_malloc_r+0xd2>
 8003910:	6821      	ldr	r1, [r4, #0]
 8003912:	3503      	adds	r5, #3
 8003914:	1a6d      	subs	r5, r5, r1
 8003916:	f025 0503 	bic.w	r5, r5, #3
 800391a:	3508      	adds	r5, #8
 800391c:	2d0c      	cmp	r5, #12
 800391e:	bf38      	it	cc
 8003920:	250c      	movcc	r5, #12
 8003922:	4629      	mov	r1, r5
 8003924:	4638      	mov	r0, r7
 8003926:	f7ff ffa5 	bl	8003874 <sbrk_aligned>
 800392a:	3001      	adds	r0, #1
 800392c:	d02b      	beq.n	8003986 <_malloc_r+0xd2>
 800392e:	6823      	ldr	r3, [r4, #0]
 8003930:	442b      	add	r3, r5
 8003932:	6023      	str	r3, [r4, #0]
 8003934:	e00e      	b.n	8003954 <_malloc_r+0xa0>
 8003936:	6822      	ldr	r2, [r4, #0]
 8003938:	1b52      	subs	r2, r2, r5
 800393a:	d41e      	bmi.n	800397a <_malloc_r+0xc6>
 800393c:	2a0b      	cmp	r2, #11
 800393e:	d916      	bls.n	800396e <_malloc_r+0xba>
 8003940:	1961      	adds	r1, r4, r5
 8003942:	42a3      	cmp	r3, r4
 8003944:	6025      	str	r5, [r4, #0]
 8003946:	bf18      	it	ne
 8003948:	6059      	strne	r1, [r3, #4]
 800394a:	6863      	ldr	r3, [r4, #4]
 800394c:	bf08      	it	eq
 800394e:	6031      	streq	r1, [r6, #0]
 8003950:	5162      	str	r2, [r4, r5]
 8003952:	604b      	str	r3, [r1, #4]
 8003954:	4638      	mov	r0, r7
 8003956:	f104 060b 	add.w	r6, r4, #11
 800395a:	f000 f8cf 	bl	8003afc <__malloc_unlock>
 800395e:	f026 0607 	bic.w	r6, r6, #7
 8003962:	1d23      	adds	r3, r4, #4
 8003964:	1af2      	subs	r2, r6, r3
 8003966:	d0b6      	beq.n	80038d6 <_malloc_r+0x22>
 8003968:	1b9b      	subs	r3, r3, r6
 800396a:	50a3      	str	r3, [r4, r2]
 800396c:	e7b3      	b.n	80038d6 <_malloc_r+0x22>
 800396e:	6862      	ldr	r2, [r4, #4]
 8003970:	42a3      	cmp	r3, r4
 8003972:	bf0c      	ite	eq
 8003974:	6032      	streq	r2, [r6, #0]
 8003976:	605a      	strne	r2, [r3, #4]
 8003978:	e7ec      	b.n	8003954 <_malloc_r+0xa0>
 800397a:	4623      	mov	r3, r4
 800397c:	6864      	ldr	r4, [r4, #4]
 800397e:	e7b2      	b.n	80038e6 <_malloc_r+0x32>
 8003980:	4634      	mov	r4, r6
 8003982:	6876      	ldr	r6, [r6, #4]
 8003984:	e7b9      	b.n	80038fa <_malloc_r+0x46>
 8003986:	230c      	movs	r3, #12
 8003988:	603b      	str	r3, [r7, #0]
 800398a:	4638      	mov	r0, r7
 800398c:	f000 f8b6 	bl	8003afc <__malloc_unlock>
 8003990:	e7a1      	b.n	80038d6 <_malloc_r+0x22>
 8003992:	6025      	str	r5, [r4, #0]
 8003994:	e7de      	b.n	8003954 <_malloc_r+0xa0>
 8003996:	bf00      	nop
 8003998:	200001a0 	.word	0x200001a0

0800399c <_sbrk_r>:
 800399c:	b538      	push	{r3, r4, r5, lr}
 800399e:	4d06      	ldr	r5, [pc, #24]	; (80039b8 <_sbrk_r+0x1c>)
 80039a0:	2300      	movs	r3, #0
 80039a2:	4604      	mov	r4, r0
 80039a4:	4608      	mov	r0, r1
 80039a6:	602b      	str	r3, [r5, #0]
 80039a8:	f7fd f86a 	bl	8000a80 <_sbrk>
 80039ac:	1c43      	adds	r3, r0, #1
 80039ae:	d102      	bne.n	80039b6 <_sbrk_r+0x1a>
 80039b0:	682b      	ldr	r3, [r5, #0]
 80039b2:	b103      	cbz	r3, 80039b6 <_sbrk_r+0x1a>
 80039b4:	6023      	str	r3, [r4, #0]
 80039b6:	bd38      	pop	{r3, r4, r5, pc}
 80039b8:	200001a8 	.word	0x200001a8

080039bc <__sread>:
 80039bc:	b510      	push	{r4, lr}
 80039be:	460c      	mov	r4, r1
 80039c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80039c4:	f000 f8a0 	bl	8003b08 <_read_r>
 80039c8:	2800      	cmp	r0, #0
 80039ca:	bfab      	itete	ge
 80039cc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80039ce:	89a3      	ldrhlt	r3, [r4, #12]
 80039d0:	181b      	addge	r3, r3, r0
 80039d2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80039d6:	bfac      	ite	ge
 80039d8:	6563      	strge	r3, [r4, #84]	; 0x54
 80039da:	81a3      	strhlt	r3, [r4, #12]
 80039dc:	bd10      	pop	{r4, pc}

080039de <__swrite>:
 80039de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80039e2:	461f      	mov	r7, r3
 80039e4:	898b      	ldrh	r3, [r1, #12]
 80039e6:	05db      	lsls	r3, r3, #23
 80039e8:	4605      	mov	r5, r0
 80039ea:	460c      	mov	r4, r1
 80039ec:	4616      	mov	r6, r2
 80039ee:	d505      	bpl.n	80039fc <__swrite+0x1e>
 80039f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80039f4:	2302      	movs	r3, #2
 80039f6:	2200      	movs	r2, #0
 80039f8:	f000 f868 	bl	8003acc <_lseek_r>
 80039fc:	89a3      	ldrh	r3, [r4, #12]
 80039fe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003a02:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003a06:	81a3      	strh	r3, [r4, #12]
 8003a08:	4632      	mov	r2, r6
 8003a0a:	463b      	mov	r3, r7
 8003a0c:	4628      	mov	r0, r5
 8003a0e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003a12:	f000 b817 	b.w	8003a44 <_write_r>

08003a16 <__sseek>:
 8003a16:	b510      	push	{r4, lr}
 8003a18:	460c      	mov	r4, r1
 8003a1a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003a1e:	f000 f855 	bl	8003acc <_lseek_r>
 8003a22:	1c43      	adds	r3, r0, #1
 8003a24:	89a3      	ldrh	r3, [r4, #12]
 8003a26:	bf15      	itete	ne
 8003a28:	6560      	strne	r0, [r4, #84]	; 0x54
 8003a2a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003a2e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003a32:	81a3      	strheq	r3, [r4, #12]
 8003a34:	bf18      	it	ne
 8003a36:	81a3      	strhne	r3, [r4, #12]
 8003a38:	bd10      	pop	{r4, pc}

08003a3a <__sclose>:
 8003a3a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003a3e:	f000 b813 	b.w	8003a68 <_close_r>
	...

08003a44 <_write_r>:
 8003a44:	b538      	push	{r3, r4, r5, lr}
 8003a46:	4d07      	ldr	r5, [pc, #28]	; (8003a64 <_write_r+0x20>)
 8003a48:	4604      	mov	r4, r0
 8003a4a:	4608      	mov	r0, r1
 8003a4c:	4611      	mov	r1, r2
 8003a4e:	2200      	movs	r2, #0
 8003a50:	602a      	str	r2, [r5, #0]
 8003a52:	461a      	mov	r2, r3
 8003a54:	f7fc ffc3 	bl	80009de <_write>
 8003a58:	1c43      	adds	r3, r0, #1
 8003a5a:	d102      	bne.n	8003a62 <_write_r+0x1e>
 8003a5c:	682b      	ldr	r3, [r5, #0]
 8003a5e:	b103      	cbz	r3, 8003a62 <_write_r+0x1e>
 8003a60:	6023      	str	r3, [r4, #0]
 8003a62:	bd38      	pop	{r3, r4, r5, pc}
 8003a64:	200001a8 	.word	0x200001a8

08003a68 <_close_r>:
 8003a68:	b538      	push	{r3, r4, r5, lr}
 8003a6a:	4d06      	ldr	r5, [pc, #24]	; (8003a84 <_close_r+0x1c>)
 8003a6c:	2300      	movs	r3, #0
 8003a6e:	4604      	mov	r4, r0
 8003a70:	4608      	mov	r0, r1
 8003a72:	602b      	str	r3, [r5, #0]
 8003a74:	f7fc ffcf 	bl	8000a16 <_close>
 8003a78:	1c43      	adds	r3, r0, #1
 8003a7a:	d102      	bne.n	8003a82 <_close_r+0x1a>
 8003a7c:	682b      	ldr	r3, [r5, #0]
 8003a7e:	b103      	cbz	r3, 8003a82 <_close_r+0x1a>
 8003a80:	6023      	str	r3, [r4, #0]
 8003a82:	bd38      	pop	{r3, r4, r5, pc}
 8003a84:	200001a8 	.word	0x200001a8

08003a88 <_fstat_r>:
 8003a88:	b538      	push	{r3, r4, r5, lr}
 8003a8a:	4d07      	ldr	r5, [pc, #28]	; (8003aa8 <_fstat_r+0x20>)
 8003a8c:	2300      	movs	r3, #0
 8003a8e:	4604      	mov	r4, r0
 8003a90:	4608      	mov	r0, r1
 8003a92:	4611      	mov	r1, r2
 8003a94:	602b      	str	r3, [r5, #0]
 8003a96:	f7fc ffca 	bl	8000a2e <_fstat>
 8003a9a:	1c43      	adds	r3, r0, #1
 8003a9c:	d102      	bne.n	8003aa4 <_fstat_r+0x1c>
 8003a9e:	682b      	ldr	r3, [r5, #0]
 8003aa0:	b103      	cbz	r3, 8003aa4 <_fstat_r+0x1c>
 8003aa2:	6023      	str	r3, [r4, #0]
 8003aa4:	bd38      	pop	{r3, r4, r5, pc}
 8003aa6:	bf00      	nop
 8003aa8:	200001a8 	.word	0x200001a8

08003aac <_isatty_r>:
 8003aac:	b538      	push	{r3, r4, r5, lr}
 8003aae:	4d06      	ldr	r5, [pc, #24]	; (8003ac8 <_isatty_r+0x1c>)
 8003ab0:	2300      	movs	r3, #0
 8003ab2:	4604      	mov	r4, r0
 8003ab4:	4608      	mov	r0, r1
 8003ab6:	602b      	str	r3, [r5, #0]
 8003ab8:	f7fc ffc9 	bl	8000a4e <_isatty>
 8003abc:	1c43      	adds	r3, r0, #1
 8003abe:	d102      	bne.n	8003ac6 <_isatty_r+0x1a>
 8003ac0:	682b      	ldr	r3, [r5, #0]
 8003ac2:	b103      	cbz	r3, 8003ac6 <_isatty_r+0x1a>
 8003ac4:	6023      	str	r3, [r4, #0]
 8003ac6:	bd38      	pop	{r3, r4, r5, pc}
 8003ac8:	200001a8 	.word	0x200001a8

08003acc <_lseek_r>:
 8003acc:	b538      	push	{r3, r4, r5, lr}
 8003ace:	4d07      	ldr	r5, [pc, #28]	; (8003aec <_lseek_r+0x20>)
 8003ad0:	4604      	mov	r4, r0
 8003ad2:	4608      	mov	r0, r1
 8003ad4:	4611      	mov	r1, r2
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	602a      	str	r2, [r5, #0]
 8003ada:	461a      	mov	r2, r3
 8003adc:	f7fc ffc2 	bl	8000a64 <_lseek>
 8003ae0:	1c43      	adds	r3, r0, #1
 8003ae2:	d102      	bne.n	8003aea <_lseek_r+0x1e>
 8003ae4:	682b      	ldr	r3, [r5, #0]
 8003ae6:	b103      	cbz	r3, 8003aea <_lseek_r+0x1e>
 8003ae8:	6023      	str	r3, [r4, #0]
 8003aea:	bd38      	pop	{r3, r4, r5, pc}
 8003aec:	200001a8 	.word	0x200001a8

08003af0 <__malloc_lock>:
 8003af0:	4801      	ldr	r0, [pc, #4]	; (8003af8 <__malloc_lock+0x8>)
 8003af2:	f7ff be0b 	b.w	800370c <__retarget_lock_acquire_recursive>
 8003af6:	bf00      	nop
 8003af8:	2000019c 	.word	0x2000019c

08003afc <__malloc_unlock>:
 8003afc:	4801      	ldr	r0, [pc, #4]	; (8003b04 <__malloc_unlock+0x8>)
 8003afe:	f7ff be06 	b.w	800370e <__retarget_lock_release_recursive>
 8003b02:	bf00      	nop
 8003b04:	2000019c 	.word	0x2000019c

08003b08 <_read_r>:
 8003b08:	b538      	push	{r3, r4, r5, lr}
 8003b0a:	4d07      	ldr	r5, [pc, #28]	; (8003b28 <_read_r+0x20>)
 8003b0c:	4604      	mov	r4, r0
 8003b0e:	4608      	mov	r0, r1
 8003b10:	4611      	mov	r1, r2
 8003b12:	2200      	movs	r2, #0
 8003b14:	602a      	str	r2, [r5, #0]
 8003b16:	461a      	mov	r2, r3
 8003b18:	f7fc ff44 	bl	80009a4 <_read>
 8003b1c:	1c43      	adds	r3, r0, #1
 8003b1e:	d102      	bne.n	8003b26 <_read_r+0x1e>
 8003b20:	682b      	ldr	r3, [r5, #0]
 8003b22:	b103      	cbz	r3, 8003b26 <_read_r+0x1e>
 8003b24:	6023      	str	r3, [r4, #0]
 8003b26:	bd38      	pop	{r3, r4, r5, pc}
 8003b28:	200001a8 	.word	0x200001a8

08003b2c <_init>:
 8003b2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b2e:	bf00      	nop
 8003b30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b32:	bc08      	pop	{r3}
 8003b34:	469e      	mov	lr, r3
 8003b36:	4770      	bx	lr

08003b38 <_fini>:
 8003b38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b3a:	bf00      	nop
 8003b3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b3e:	bc08      	pop	{r3}
 8003b40:	469e      	mov	lr, r3
 8003b42:	4770      	bx	lr
